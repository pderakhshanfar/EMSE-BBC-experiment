/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 11:51:10 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.MultipleGradientPaint;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import javax.swing.JLayeredPane;
import javax.swing.JSpinner;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.plaf.synth.SynthPanelUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.event.DatasetChangeInfo;
import org.jfree.chart.util.SortOrder;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.DomainOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeries;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.pie.PieDatasetSelectionState;
import org.jfree.data.statistics.BoxAndWhiskerItem;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeries;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetSelectionState;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1), (-12), (-1));
      assertNotNull(mockDate0);
      
      mockDate0.setTime((-12));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-12);
      doubleArray0[4] = (-2219.6359690684);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-12.0), (-2219.6359690684), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains((-2219.6359690684)));
      
      boolean boolean0 = stack0.add((Double) (-1.0));
      assertTrue(boolean0);
      assertEquals("[-1.0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains((-2219.6359690684)));
      assertTrue(stack0.contains((-1.0)));
      
      Range range0 = new Range((-1668.0), (-1.0));
      assertNotNull(range0);
      assertEquals((-834.5), range0.getCentralValue(), 0.01);
      assertEquals((-1668.0), range0.getLowerBound(), 0.01);
      assertEquals(1667.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, false);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals((-834.5), range0.getCentralValue(), 0.01);
      assertEquals((-1668.0), range0.getLowerBound(), 0.01);
      assertEquals(1667.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("[-1.0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-12.0), (-2219.6359690684), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(stack0.contains((-1668.0)));
      assertTrue(stack0.contains((-1.0)));
      
      Number[][] numberArray0 = new Number[0][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, numberArray0.length);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(range2);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 76;
      String string0 = "Seri7es 8";
      MatrixSeries matrixSeries0 = new MatrixSeries("Seri7es 8", 76, 76);
      assertNotNull(matrixSeries0);
      assertEquals(76, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5776, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(76, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(76, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5776, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(76, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(76, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5776, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(76, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Date[] dateArray0 = new Date[2];
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      mockSimpleDateFormat0.setTimeZone((TimeZone) null);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      dateArray0[0] = date0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 740L;
      doubleArray0[1] = (double) 740L;
      doubleArray0[2] = (double) 740L;
      doubleArray0[3] = 740.0;
      doubleArray0[4] = (double) 740L;
      doubleArray0[6] = (double) 740L;
      doubleArray0[7] = (double) 740L;
      doubleArray0[8] = (double) 740L;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 740L;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 740.0;
      doubleArray2[1] = (double) 740L;
      doubleArray2[2] = (double) 740L;
      doubleArray2[3] = (double) 740L;
      doubleArray2[4] = (double) 740L;
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(740.0));
      
      boolean boolean0 = stack0.add((Double) 740.0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[740.0]", stack0.toString());
      assertTrue(stack0.contains(740.0));
      
      Range range0 = new Range(1.5, 740.0);
      assertNotNull(range0);
      assertEquals(740.0, range0.getUpperBound(), 0.01);
      assertEquals(1.5, range0.getLowerBound(), 0.01);
      assertEquals(738.5, range0.getLength(), 0.01);
      assertEquals(370.75, range0.getCentralValue(), 0.01);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(740.0, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 76;
      String string0 = "Series ";
      MatrixSeries matrixSeries0 = new MatrixSeries("Series ", 76, 76);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(76, matrixSeries0.getRowCount());
      assertEquals(5776, matrixSeries0.getItemCount());
      assertEquals(76, matrixSeries0.getColumnsCount());
      
      matrixSeries0.setKey("Series ");
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(76, matrixSeries0.getRowCount());
      assertEquals(5776, matrixSeries0.getItemCount());
      assertEquals(76, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(76, matrixSeries0.getRowCount());
      assertEquals(5776, matrixSeries0.getItemCount());
      assertEquals(76, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(76, matrixSeries0.getRowCount());
      assertEquals(5776, matrixSeries0.getItemCount());
      assertEquals(76, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 555.2199;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3150.69461811149;
      doubleArray1[1] = 555.2199;
      doubleArray1[2] = 555.2199;
      doubleArray1[3] = 555.2199;
      doubleArray1[4] = 555.2199;
      doubleArray1[5] = 2168.374579859458;
      doubleArray1[6] = 555.2199;
      doubleArray1[7] = 555.2199;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("$>m%p=", dateArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {555.2199}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3150.69461811149, 555.2199, 555.2199, 555.2199, 555.2199, 2168.374579859458, 555.2199, 555.2199}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (3150.69461811149) <= upper (555.2199).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Number[][] numberArray0 = new Number[6][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("ISeries 1", "ISeries 1", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      int int0 = (-2046);
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-2046));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2046), categoryToPieDataset0.getExtractIndex());
      assertEquals(6, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "ISeries 1", (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(double0));
      
      Double double1 = new Double(0.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      boolean boolean0 = stack0.add(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertTrue(stack0.contains(double1));
      
      Range range0 = new Range((-2.072386739E12), (-383.587998));
      assertNotNull(range0);
      assertEquals((-2.072386739E12), range0.getLowerBound(), 0.01);
      assertEquals(2.072386738616412E12, range0.getLength(), 0.01);
      assertEquals((-383.587998), range0.getUpperBound(), 0.01);
      assertEquals((-1.036193369691794E12), range0.getCentralValue(), 0.01);
      
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(quarter0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      MockDate mockDate0 = new MockDate(4, 4, 10, 665, 1, 1);
      assertNotNull(mockDate0);
      
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Mon Jun 06 17:01:01 GMT 1904", mockDate0.toString());
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Mon Jun 06 17:01:01 GMT 1904", mockDate0.toString());
      assertEquals("Mon Jun 06 17:01:01 GMT 1904", date0.toString());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-2.072386739E12), (double) 665, (double) 1, 3278.06, (double) 4, Double.POSITIVE_INFINITY, 0.0, (double) 1, (List) stack0);
      assertNotNull(boxAndWhiskerItem0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertFalse(stack0.contains((-2.072386739E12)));
      assertTrue(stack0.contains(double1));
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset1 = new DefaultBoxAndWhiskerXYDataset(date0);
      assertFalse(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertNotNull(defaultBoxAndWhiskerXYDataset1);
      assertEquals("Mon Jun 06 17:01:01 GMT 1904", mockDate0.toString());
      assertEquals("Mon Jun 06 17:01:01 GMT 1904", date0.toString());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      
      defaultBoxAndWhiskerXYDataset1.add(date0, boxAndWhiskerItem0);
      assertNotSame(defaultBoxAndWhiskerXYDataset1, defaultBoxAndWhiskerXYDataset0);
      assertFalse(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertEquals("Mon Jun 06 17:01:01 GMT 1904", mockDate0.toString());
      assertEquals("Mon Jun 06 17:01:01 GMT 1904", date0.toString());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      assertFalse(stack0.contains((-2.072386739E12)));
      assertTrue(stack0.contains(double1));
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertEquals((-2.072386739E12), range0.getLowerBound(), 0.01);
      assertEquals(2.072386738616412E12, range0.getLength(), 0.01);
      assertEquals((-383.587998), range0.getUpperBound(), 0.01);
      assertEquals((-1.036193369691794E12), range0.getCentralValue(), 0.01);
      assertFalse(stack0.contains((-2.072386739E12)));
      assertTrue(stack0.contains(double1));
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNull(range2);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset1, (List) stack0, range0, true);
      assertNotSame(range3, range0);
      assertNotSame(range0, range3);
      assertNotSame(defaultBoxAndWhiskerXYDataset1, defaultBoxAndWhiskerXYDataset0);
      assertFalse(range3.equals((Object)range0));
      assertFalse(defaultBoxAndWhiskerXYDataset1.equals((Object)defaultBoxAndWhiskerXYDataset0));
      assertNotNull(range3);
      assertEquals(Double.POSITIVE_INFINITY, range3.getCentralValue(), 0.01);
      assertEquals(4.0, range3.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range3.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range3.getLength(), 0.01);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertEquals((-2.072386739E12), range0.getLowerBound(), 0.01);
      assertEquals(2.072386738616412E12, range0.getLength(), 0.01);
      assertEquals((-383.587998), range0.getUpperBound(), 0.01);
      assertEquals((-1.036193369691794E12), range0.getCentralValue(), 0.01);
      assertEquals("Mon Jun 06 17:01:01 GMT 1904", mockDate0.toString());
      assertEquals("Mon Jun 06 17:01:01 GMT 1904", date0.toString());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset1.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset1.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset1.getSeriesCount());
      assertFalse(stack0.contains((-2.072386739E12)));
      assertTrue(stack0.contains(double1));
      
      Range range4 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNull(range4);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Series 8", 76, 76);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5776, matrixSeries0.getItemCount());
      assertEquals(76, matrixSeries0.getColumnsCount());
      assertEquals(76, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5776, matrixSeries0.getItemCount());
      assertEquals(76, matrixSeries0.getColumnsCount());
      assertEquals(76, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5776, matrixSeries0.getItemCount());
      assertEquals(76, matrixSeries0.getColumnsCount());
      assertEquals(76, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Double double0 = new Double(Double.NEGATIVE_INFINITY);
      assertNotNull(double0);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[-Infinity]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(double0));
      
      Range range0 = new Range(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(double0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      MockDate mockDate0 = new MockDate((-3720), 4, 1, 632, 1103, 1103);
      assertNotNull(mockDate0);
      
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Fri May 28 02:41:23 GMT 1821", mockDate0.toString());
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Fri May 28 02:41:23 GMT 1821", mockDate0.toString());
      assertEquals("Fri May 28 02:41:23 GMT 1821", date0.toString());
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((double) 1103, (-1222.89), 3278.06, 3278.06, (-1222.89), (-1222.89), (double) 1103, (double) 1, (List) stack0);
      assertNotNull(boxAndWhiskerItem0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[-Infinity]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(Double.NEGATIVE_INFINITY));
      assertFalse(stack0.contains(3278.06));
      
      defaultBoxAndWhiskerXYDataset0.add(date0, boxAndWhiskerItem0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[-Infinity]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals("Fri May 28 02:41:23 GMT 1821", mockDate0.toString());
      assertEquals("Fri May 28 02:41:23 GMT 1821", date0.toString());
      assertTrue(stack0.contains(Double.NEGATIVE_INFINITY));
      assertFalse(stack0.contains(3278.06));
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[-Infinity]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(stack0.contains(Double.NEGATIVE_INFINITY));
      assertFalse(stack0.contains(3278.06));
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals((-1.19589427117E14), range2.getCentralValue(), 0.01);
      assertEquals((-1.19589427117E14), range2.getUpperBound(), 0.01);
      assertEquals((-1.19589427117E14), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(410.0273384882885, 410.0273384882885, ",jMV,Kt{iK82g`.F");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(",jMV,Kt{iK82g`.F", (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(taskSeriesCollection0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(Integer.MAX_VALUE, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(Integer.MAX_VALUE, slidingCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      mockDate0.setTime(0L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Date[] dateArray0 = new Date[5];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = (double) 0L;
      doubleArray1[4] = (double) 0L;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[0.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(0.0));
      
      Range range0 = new Range(0.0, 0.0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      stack0.setSize(2427);
      assertFalse(stack0.empty());
      assertEquals(2427, stack0.size());
      assertEquals(2427, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(0.0));
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, 0.0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(xYBarDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(range1, range0);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(range1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      // Undeclared exception!
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range1, false);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      Stack<Integer> stack1 = new Stack<Integer>();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertFalse(stack1.contains(integer0));
      
      boolean boolean0 = stack1.add(integer0);
      assertNotSame(stack1, stack0);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean0);
      assertEquals(10, stack1.capacity());
      assertEquals("[-30000]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertTrue(stack1.contains(integer0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) integer0, (Comparable) integer0);
      assertNotSame(stack0, stack1);
      assertFalse(stack0.equals((Object)stack1));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(integer0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack1, false);
      assertNotSame(stack1, stack0);
      assertFalse(stack1.equals((Object)stack0));
      assertNull(range0);
      assertEquals(10, stack1.capacity());
      assertEquals("[-30000]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertTrue(stack1.contains(integer0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[400]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(integer0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, integer0, integer0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[400]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(integer0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[400]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(400.0, range0.getCentralValue(), 0.01);
      assertEquals(400.0, range0.getUpperBound(), 0.01);
      assertEquals(400.0, range0.getLowerBound(), 0.01);
      assertTrue(stack0.contains(integer0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2146622095, 2146622095);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(2146622095, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2146622095, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      DatasetUtilities.findMaximumStackedRangeValue(slidingGanttCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-729.2967380137347);
      doubleArray1[1] = (-1480.46792558);
      doubleArray1[2] = (-1104.8283783056);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = Double.POSITIVE_INFINITY;
      doubleArray1[8] = 1385.764;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1480.46792558);
      doubleArray2[1] = 1385.764;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 288);
      assertNotNull(categoryToPieDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(288, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(288, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[100]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Vector<CategoryTableXYDataset> vector0 = new Vector<CategoryTableXYDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) vector0, (Comparable) integer0, (Comparable) integer0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[100]", stack0.toString());
      assertTrue(stack0.contains(integer0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9, 38, (-1), 9, (-1296));
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("JUk+g`");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Minute minute0 = new Minute(mockDate0, timeZone0);
      assertNotNull(minute0);
      assertEquals("Tue Feb 27 11:24:00 GMT 1912", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(24, minute0.getMinute());
      assertEquals(11, minute0.getHourValue());
      assertEquals((-1825418160000L), minute0.getLastMillisecond());
      assertEquals((-1825418160000L), minute0.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Minute minute1 = (Minute)minute0.next();
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute1.equals((Object)minute0));
      assertNotNull(minute1);
      assertEquals("Tue Feb 27 11:24:00 GMT 1912", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(24, minute0.getMinute());
      assertEquals(11, minute0.getHourValue());
      assertEquals((-1825418160000L), minute0.getLastMillisecond());
      assertEquals((-1825418160000L), minute0.getFirstMillisecond());
      assertEquals(11, minute1.getHourValue());
      assertEquals(25, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Comparable<CategoryTableXYDataset>[] comparableArray0 = (Comparable<CategoryTableXYDataset>[]) Array.newInstance(Comparable.class, 6);
      comparableArray0[0] = (Comparable<CategoryTableXYDataset>) minute1;
      comparableArray0[1] = (Comparable<CategoryTableXYDataset>) minute1;
      comparableArray0[2] = (Comparable<CategoryTableXYDataset>) minute1;
      comparableArray0[3] = (Comparable<CategoryTableXYDataset>) minute1;
      comparableArray0[4] = (Comparable<CategoryTableXYDataset>) minute1;
      comparableArray0[5] = (Comparable<CategoryTableXYDataset>) minute0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, comparableArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 2958465);
      assertNotNull(categoryToPieDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2958465, categoryToPieDataset0.getExtractIndex());
      assertEquals(6, comparableArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) minute1, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Comparable<DefaultStatisticalCategoryDataset>[] comparableArray0 = (Comparable<DefaultStatisticalCategoryDataset>[]) Array.newInstance(Comparable.class, 1);
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      
      long long0 = month0.getMiddleMillisecond();
      assertEquals(1392409281320L, long0);
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      
      comparableArray0[0] = (Comparable<DefaultStatisticalCategoryDataset>) month0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, comparableArray0.length);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertNotNull(timeTableXYDataset0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, true);
      assertNull(range0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-158.7933);
      doubleArray1[1] = (-1494.6839607452087);
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      defaultIntervalCategoryDataset0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 1287);
      assertNotNull(categoryToPieDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1287, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1287, categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1287, categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1287, categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(Double.NaN, Double.NaN, "L8,$wKG2");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals("[0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(integer0));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, true);
      assertNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals("[0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(integer0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Double double0 = new Double((-1086.8303));
      assertNotNull(double0);
      assertEquals((-1086.8303), (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals("[-1086.8303]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(double0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(Double.NaN, (-2844.527967), (Comparable) double0, (Comparable) double0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNull(range0);
      assertEquals(10, stack0.capacity());
      assertEquals("[-1086.8303]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains((-2844.527967)));
      assertTrue(stack0.contains((-1086.8303)));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals("[100]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(integer0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) integer0, (Comparable) integer0);
      assertEquals("[100]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(integer0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertEquals("[100]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(100.0, range0.getCentralValue(), 0.01);
      assertEquals(100.0, range0.getUpperBound(), 0.01);
      assertEquals(100.0, range0.getLowerBound(), 0.01);
      assertTrue(stack0.contains(integer0));
      
      System.setCurrentTimeMillis((-3577L));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((double) 21, 1.5, "s8u~ YQJwtc+2");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(21));
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals("[0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(integer0));
      assertFalse(stack0.contains(21));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1800, (-5050));
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-5051), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, stack0, true);
      assertNull(range0);
      assertEquals(10, stack0.capacity());
      assertEquals("[0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-5051), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertTrue(stack0.contains(integer0));
      assertFalse(stack0.contains(1800));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      
      TimeSeries timeSeries0 = new TimeSeries(month0, "L8,$wKG3", "L8,$wKG3");
      assertNotNull(timeSeries0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("L8,$wKG3", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("L8,$wKG3", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) month0);
      assertNull(timeSeriesDataItem0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("L8,$wKG3", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("L8,$wKG3", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 4640.6586, (-1672.03783), (-362.79), Double.POSITIVE_INFINITY, (-362.79));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-2655.68744), 4640.6586, 1313.471, Double.POSITIVE_INFINITY, 2155.4597399);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0, Double.POSITIVE_INFINITY);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-2655.68744), 1313.471, (-2655.68744), 738.0, 70.407);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem3);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 2318.0966150748, Double.POSITIVE_INFINITY, (-1672.03783), Double.POSITIVE_INFINITY, 4640.6586);
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertNotNull(oHLCDataItem4);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, 2258.0, Double.NaN, (-1409.0), 70.407, 2258.0);
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem2));
      assertNotNull(oHLCDataItem5);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[5] = oHLCDataItem5;
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(mockDate0, (-2655.68744), (-1.0), (-1409.0), (-10.98480336363331), 3837.0106);
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem5));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem2));
      assertNotNull(oHLCDataItem6);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[6] = oHLCDataItem6;
      OHLCDataItem oHLCDataItem7 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, 1839.5755, 2840.0, 2258.0, (-2655.68744));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem5));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem6));
      assertNotNull(oHLCDataItem7);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[7] = oHLCDataItem7;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(Double.POSITIVE_INFINITY, number0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(8, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockDate mockDate0 = new MockDate(962, 962, 962);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      mockDate0.setTime(962);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Double double0 = new Double(962);
      assertNotNull(double0);
      assertEquals(962.0, (double)double0, 0.01);
      
      Double double1 = new Double(962);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(962.0, (double)double1, 0.01);
      
      boolean boolean0 = stack0.add(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[962.0]", stack0.toString());
      assertTrue(stack0.contains(double0));
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, 962);
      assertNotNull(xYBarDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(962.0, xYBarDataset0.getBarWidth(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, false);
      assertNotNull(range0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(962.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-1.7976931348623157E308), (-1.7976931348623157E308), "*1_");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-2.1474836463986144E9), (-2.1474836463986144E9), "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.7976931348623157E308, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.7976931348623157E308, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-8.988465674311579E307), range0.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getLowerBound(), 0.01);
      assertEquals((-2.1474836463986144E9), range0.getUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      mockDate0.setTime(0L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Date[] dateArray0 = new Date[5];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(mockDate0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      
      Range range1 = Range.expandToInclude(range0, 0.0);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertNotNull(range1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range1, true);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertNull(range2);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(stack0.contains(0.0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      TaskSeries taskSeries0 = new TaskSeries("~BYg#vKrFU^ib");
      assertNotNull(taskSeries0);
      assertTrue(taskSeries0.getNotify());
      assertEquals(0, taskSeries0.getItemCount());
      assertNull(taskSeries0.getDescription());
      
      taskSeriesCollection0.add(taskSeries0);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeries0.getNotify());
      assertEquals(0, taskSeries0.getItemCount());
      assertNull(taskSeries0.getDescription());
      
      TaskSeries taskSeries1 = new TaskSeries("~BYg#vKrFU^ib");
      assertTrue(taskSeries1.equals((Object)taskSeries0));
      assertNotNull(taskSeries1);
      assertNull(taskSeries1.getDescription());
      assertEquals(0, taskSeries1.getItemCount());
      assertTrue(taskSeries1.getNotify());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, (-1));
      assertNotNull(categoryToPieDataset0);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "~BYg#vKrFU^ib", 705.33416467079, (-1));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.gantt.TaskSeries cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockDate mockDate0 = new MockDate(182, 182, 182, 182, 182, 182);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[5];
      mockDate0.setTime(206);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add((Double) 0.0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(0.0));
      
      Range range0 = new Range(0.0, 182);
      assertNotNull(range0);
      assertEquals(182.0, range0.getLength(), 0.01);
      assertEquals(182.0, range0.getUpperBound(), 0.01);
      assertEquals(91.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, 182);
      assertNotNull(xYBarDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(182.0, xYBarDataset0.getBarWidth(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      mockDate0.setTime(0L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Date[] dateArray0 = new Date[5];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = (double) 0L;
      doubleArray1[4] = (double) 0L;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[0.0]", stack0.toString());
      assertTrue(stack0.contains(double0));
      
      Range range0 = new Range(0.0, 0.0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, 0.0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(xYBarDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(range1, range0);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(range1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range1, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(range2);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[0.0]", stack0.toString());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertTrue(stack0.contains(0.0));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate(2379, 44, 2379);
      assertNotNull(mockDate0);
      
      mockDate0.setTime(44);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Date[] dateArray0 = new Date[0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2379;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {2379.0}, doubleArray1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add((Double) 2379.0);
      assertTrue(boolean0);
      assertEquals("[2379.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(2379.0));
      
      Range range0 = new Range(11.0, 1343.973381);
      assertNotNull(range0);
      assertEquals(1343.973381, range0.getUpperBound(), 0.01);
      assertEquals(1332.973381, range0.getLength(), 0.01);
      assertEquals(677.4866905, range0.getCentralValue(), 0.01);
      assertEquals(11.0, range0.getLowerBound(), 0.01);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, (-1791.9025));
      assertNotNull(xYBarDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-1791.9025), xYBarDataset0.getBarWidth(), 0.01);
      assertArrayEquals(new double[] {2379.0}, doubleArray1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("[2379.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1343.973381, range0.getUpperBound(), 0.01);
      assertEquals(1332.973381, range0.getLength(), 0.01);
      assertEquals(677.4866905, range0.getCentralValue(), 0.01);
      assertEquals(11.0, range0.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {2379.0}, doubleArray1, 0.01);
      assertEquals(0, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      assertTrue(stack0.contains(2379.0));
      assertFalse(stack0.contains(1343.973381));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-3655.519267356), 429.5, "03 gnbO|7FOIl9");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-3264.936518318), (-3264.936518318), "8i#2AI3");
      assertEquals(390.5827490380002, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(429.5, double0, 0.01);
      assertEquals(390.5827490380002, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Range range0 = new Range((-3264.936518318), (-3264.936518318));
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-3264.936518318), range0.getLowerBound(), 0.01);
      assertEquals((-3264.936518318), range0.getCentralValue(), 0.01);
      assertEquals((-3264.936518318), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "sUbR", (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      
      defaultKeyedValuesDataset0.insertValue(0, (Comparable) "sUbR", Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "sUbR", 1563.1232014);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(categoryTableXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(429.5, (-1752.3140757625), "TmVm4~kheiY");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals((-1752.3140757625), double0, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      TimeSeries timeSeries0 = new TimeSeries(integer0, "TmVm4~kheiY", "TmVm4~kheiY");
      assertNotNull(timeSeries0);
      assertEquals("TmVm4~kheiY", timeSeries0.getDomainDescription());
      assertEquals("TmVm4~kheiY", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("TmVm4~kheiY", timeSeries0.getDomainDescription());
      assertEquals("TmVm4~kheiY", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range0);
      assertEquals("TmVm4~kheiY", timeSeries0.getDomainDescription());
      assertEquals("TmVm4~kheiY", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertTrue(number0.equals((Object)double0));
      assertNotNull(number0);
      assertEquals((-1752.3140757625), number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(430.0, range1.getUpperBound(), 0.01);
      assertEquals(429.5, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(429.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      MockDate mockDate0 = new MockDate((-1337L));
      assertNotNull(mockDate0);
      
      mockDate0.setTime((-1337L));
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1337L);
      doubleArray0[1] = (double) (-1337L);
      doubleArray0[2] = (double) (-1337L);
      doubleArray0[3] = (double) (-1337L);
      doubleArray0[4] = (double) (-1337L);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-1337.0), (-1337.0), (-1337.0), (-1337.0), (-1337.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = stack0.add((Double) (-1337.0));
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[-1337.0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains((-1337.0)));
      
      Range range0 = new Range((-1337.0), 1102.133);
      assertNotNull(range0);
      assertEquals((-117.43349999999998), range0.getCentralValue(), 0.01);
      assertEquals(2439.133, range0.getLength(), 0.01);
      assertEquals((-1337.0), range0.getLowerBound(), 0.01);
      assertEquals(1102.133, range0.getUpperBound(), 0.01);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, (-1337.0));
      assertNotNull(xYBarDataset0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-1337.0), xYBarDataset0.getBarWidth(), 0.01);
      assertArrayEquals(new double[] {(-1337.0), (-1337.0), (-1337.0), (-1337.0), (-1337.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, (List) stack0, range0, true);
      assertNotSame(range1, range0);
      assertNotSame(range0, range1);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals((-1337.0), range1.getCentralValue(), 0.01);
      assertEquals((-1337.0), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1337.0), range1.getLowerBound(), 0.01);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertFalse(stack0.isEmpty());
      assertEquals("[-1337.0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals((-117.43349999999998), range0.getCentralValue(), 0.01);
      assertEquals(2439.133, range0.getLength(), 0.01);
      assertEquals((-1337.0), range0.getLowerBound(), 0.01);
      assertEquals(1102.133, range0.getUpperBound(), 0.01);
      assertEquals((-1337.0), xYBarDataset0.getBarWidth(), 0.01);
      assertArrayEquals(new double[] {(-1337.0), (-1337.0), (-1337.0), (-1337.0), (-1337.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertTrue(stack0.contains((-1337.0)));
      assertFalse(stack0.contains(1102.133));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(Double.NaN, 1379.734, "Series {(2");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.NaN);
      assertNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockDate mockDate0 = new MockDate(182, 182, 182);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      mockDate0.setTime(182);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = stack0.add((Double) 0.0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(0.0));
      
      Range range0 = new Range(0.0, 182);
      assertNotNull(range0);
      assertEquals(91.0, range0.getCentralValue(), 0.01);
      assertEquals(182.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(182.0, range0.getLength(), 0.01);
      
      Range range1 = new Range((-1.0), 182);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(90.5, range1.getCentralValue(), 0.01);
      assertEquals(183.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(182.0, range1.getUpperBound(), 0.01);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, 861.0);
      assertNotNull(xYBarDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(861.0, xYBarDataset0.getBarWidth(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYBarDataset0, (List) stack0, range1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("EpH4]x5sxirSLCH8!:", "EpH4]x5sxirSLCH8!:", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 826);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(826, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "EpH4]x5sxirSLCH8!:", (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 826, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockDate mockDate0 = new MockDate(182, 182, 182);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      mockDate0.setTime(182);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add((Double) 0.0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(0.0));
      
      Range range0 = new Range(0.0, 182);
      assertNotNull(range0);
      assertEquals(91.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(182.0, range0.getUpperBound(), 0.01);
      assertEquals(182.0, range0.getLength(), 0.01);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, 182);
      assertNotNull(xYBarDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(182.0, xYBarDataset0.getBarWidth(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-51.491205635);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-51.491205635);
      doubleArray3[1] = (-51.491205635);
      doubleArray3[2] = (-51.491205635);
      doubleArray3[3] = (-51.491205635);
      doubleArray3[4] = (-51.491205635);
      doubleArray3[5] = (-51.491205635);
      doubleArray3[6] = (-51.491205635);
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("{e)D:-;M", "{e)D:-;M", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 59.0);
      assertNotNull(range0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(59.0, range0.getCentralValue(), 0.01);
      assertEquals(59.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(59.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals((-51.491205635), range1.getCentralValue(), 0.01);
      assertEquals((-51.491205635), range1.getUpperBound(), 0.01);
      assertEquals((-51.491205635), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<XYIntervalSeriesCollection> linkedList0 = new LinkedList<XYIntervalSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, range1, false);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNull(range2);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-51.491205635), range1.getCentralValue(), 0.01);
      assertEquals((-51.491205635), range1.getUpperBound(), 0.01);
      assertEquals((-51.491205635), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(categoryTableXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(xYDatasetTableModel0);
      assertNotNull(seriesChangeEvent0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(1095.7825, 1095.7825, "TmVm4~kheiY");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(1095.7825, double0, 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1095.2825, range0.getLowerBound(), 0.01);
      assertEquals(1095.7825, range0.getCentralValue(), 0.01);
      assertEquals(1096.2825, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockDate mockDate0 = new MockDate(182, 182, 182);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      mockDate0.setTime(182);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add((Double) 0.0);
      assertTrue(boolean0);
      assertEquals("[0.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(0.0));
      
      Range range0 = new Range(0.0, 182);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(91.0, range0.getCentralValue(), 0.01);
      assertEquals(182.0, range0.getUpperBound(), 0.01);
      assertEquals(182.0, range0.getLength(), 0.01);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, 182);
      assertNotNull(xYBarDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(182.0, xYBarDataset0.getBarWidth(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, (List) stack0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 3048.7734222329887;
      doubleArray1[3] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3048.7734222329887;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = Double.NaN;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(3048.7734222329887, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockDate mockDate0 = new MockDate(182, 182, 182);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      mockDate0.setTime(182);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add((Double) 0.0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(0.0));
      
      Range range0 = new Range(0.0, 182);
      assertNotNull(range0);
      assertEquals(182.0, range0.getLength(), 0.01);
      assertEquals(182.0, range0.getUpperBound(), 0.01);
      assertEquals(91.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, 1413.5875638);
      assertNotNull(powerFunction2D0);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1413.5875638, powerFunction2D0.getB(), 0.01);
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 0, 59, 59, minute0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1413.5875638, powerFunction2D0.getB(), 0.01);
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 0.5);
      assertNotNull(xYBarDataset0);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1413.5875638, powerFunction2D0.getB(), 0.01);
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) xYBarDataset0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1413.5875638, powerFunction2D0.getB(), 0.01);
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Double double0 = new Double(0.9873564294295614);
      assertNotNull(double0);
      assertEquals(0.9873564294295614, (double)double0, 0.01);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(double0));
      
      boolean boolean0 = vector0.add(double0);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[0.9873564294295614]", vector0.toString());
      assertTrue(vector0.contains(double0));
      
      Range range0 = new Range(0.9873564294295614, 0.9873564294295614);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.9873564294295614, range0.getCentralValue(), 0.01);
      assertEquals(0.9873564294295614, range0.getLowerBound(), 0.01);
      assertEquals(0.9873564294295614, range0.getUpperBound(), 0.01);
      
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(quarter0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[0.9873564294295614]", vector0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.9873564294295614, range0.getCentralValue(), 0.01);
      assertEquals(0.9873564294295614, range0.getLowerBound(), 0.01);
      assertEquals(0.9873564294295614, range0.getUpperBound(), 0.01);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertTrue(vector0.contains(double0));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Double double0 = new Double(0.9873564294295614);
      assertNotNull(double0);
      assertEquals(0.9873564294295614, (double)double0, 0.01);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(0.9873564294295614));
      
      boolean boolean0 = vector0.add(double0);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[0.9873564294295614]", vector0.toString());
      assertTrue(vector0.contains(0.9873564294295614));
      
      Range range0 = new Range(0.9873564294295614, 0.9873564294295614);
      assertNotNull(range0);
      assertEquals(0.9873564294295614, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.9873564294295614, range0.getCentralValue(), 0.01);
      assertEquals(0.9873564294295614, range0.getUpperBound(), 0.01);
      
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(double0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[0.9873564294295614]", vector0.toString());
      assertEquals(0.9873564294295614, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.9873564294295614, range0.getCentralValue(), 0.01);
      assertEquals(0.9873564294295614, range0.getUpperBound(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(vector0.contains(0.9873564294295614));
      
      GanttCategoryDataset ganttCategoryDataset0 = null;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 923, 923);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(923, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(923, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      mockDate0.setTime(0L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (double) 0L;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0L;
      doubleArray2[1] = (double) 0L;
      doubleArray2[2] = (double) 0L;
      doubleArray2[3] = (double) 0L;
      doubleArray2[4] = (double) 0L;
      doubleArray2[5] = (double) 0L;
      doubleArray2[6] = (double) 0L;
      doubleArray2[7] = (double) 0L;
      doubleArray2[8] = (-695.99323796102);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-695.99323796102)}, doubleArray2, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-695.99323796102)));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains((-695.99323796102)));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Double double0 = new Double(1918.3454);
      assertNotNull(double0);
      assertEquals(1918.3454, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals("[1918.3454]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains((-695.99323796102)));
      assertTrue(stack0.contains(double0));
      
      Range range0 = new Range(0.0, 0.0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(range0, range1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(range1, range0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, stack0.size());
      assertEquals("[1918.3454]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-695.99323796102)}, doubleArray2, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(stack0.contains(0.0));
      assertTrue(stack0.contains(double0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(integer0));
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[-30000]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(integer0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnIndex(integer0);
      assertEquals((-1), int0);
      
      defaultMultiValueCategoryDataset0.add(stack0, integer0, integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(stack0.isEmpty());
      assertEquals("[-30000]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(integer0));
      assertFalse(stack0.contains(int0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals("[-30000]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals((-30000.0), range0.getCentralValue(), 0.01);
      assertEquals((-30000.0), range0.getLowerBound(), 0.01);
      assertEquals((-30000.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains(integer0));
      assertFalse(stack0.contains(int0));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals((-30000.0), range1.getCentralValue(), 0.01);
      assertEquals((-30000.0), range1.getLowerBound(), 0.01);
      assertEquals((-30000.0), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 2383;
      MockDate mockDate0 = new MockDate(2383, 2383, 2383);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[5];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[7];
      mockDate0.setTime(0L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = stack0.add((Double) 0.0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertTrue(stack0.contains(0.0));
      
      Range range0 = new Range(0.0, 2383);
      assertNotNull(range0);
      assertEquals(2383.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1191.5, range0.getCentralValue(), 0.01);
      assertEquals(2383.0, range0.getUpperBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[-30000]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnIndex(integer0);
      assertEquals((-1), int0);
      
      defaultMultiValueCategoryDataset0.add(stack0, integer0, integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[-30000]", stack0.toString());
      assertFalse(stack0.contains(int0));
      assertTrue(stack0.contains(integer0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[-30000]", stack0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-30000.0), range0.getCentralValue(), 0.01);
      assertEquals((-30000.0), range0.getLowerBound(), 0.01);
      assertEquals((-30000.0), range0.getUpperBound(), 0.01);
      assertFalse(stack0.contains(int0));
      assertTrue(stack0.contains(integer0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((-1572.7720699866823), 2873.7685, (Comparable) "fUbmi)bk~", (Comparable) "fUbmi)bk~");
      ArrayList<DefaultBoxAndWhiskerXYDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertNull(range0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1572.7720699866823), range1.getCentralValue(), 0.01);
      assertEquals((-1572.7720699866823), range1.getUpperBound(), 0.01);
      assertEquals((-1572.7720699866823), range1.getLowerBound(), 0.01);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      assertNull(range2);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Number[][] numberArray0 = new Number[5][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, (-500));
      assertNotNull(categoryToPieDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-500), categoryToPieDataset0.getExtractIndex());
      assertEquals(5, numberArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-500), categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertEquals(5, numberArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertNull(range0);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-500), categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertEquals(5, numberArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertNull(range1);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-500), categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertEquals(5, numberArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, (-1695));
      assertNotNull(categoryToPieDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1695), categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1695), categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertNotNull(range0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1695), categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1695), categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, (-1695));
      assertNotNull(categoryToPieDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1695), categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1695), categoryToPieDataset0.getExtractIndex());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertNotNull(range0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1695), categoryToPieDataset0.getExtractIndex());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NaN);
      assertNull(range1);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Comparable<DefaultOHLCDataset>[] comparableArray0 = (Comparable<DefaultOHLCDataset>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[1][1];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("[-`bv?|8J}@", 5, 5);
      assertNotNull(matrixSeries0);
      assertEquals(5, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5, matrixSeries0.getRowCount());
      assertEquals(25, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(5, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5, matrixSeries0.getRowCount());
      assertEquals(25, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(4.0, number0);
      assertEquals(5, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5, matrixSeries0.getRowCount());
      assertEquals(25, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = number0;
      numberArray1[1] = number0;
      numberArray1[2] = number0;
      numberArray1[3] = number0;
      numberArray1[4] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = number0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("[-`bv?|8J}@", "Null 'rowKey' argument.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4.0, range0.getLowerBound(), 0.01);
      assertEquals(4.0, range0.getCentralValue(), 0.01);
      assertEquals(4.0, range0.getUpperBound(), 0.01);
      assertEquals(2, numberArray0.length);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(4.0, range1.getLength(), 0.01);
      assertEquals(2.0, range1.getCentralValue(), 0.01);
      assertEquals(4.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(5, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5, matrixSeries0.getRowCount());
      assertEquals(25, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotNull(range2);
      assertEquals(4.0, range2.getUpperBound(), 0.01);
      assertEquals(4.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(4.0, range2.getCentralValue(), 0.01);
      assertEquals(2, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'day' argument.", 9, 9);
      assertNotNull(matrixSeries0);
      assertEquals(9, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(81, matrixSeries0.getItemCount());
      assertEquals(9, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(9, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(81, matrixSeries0.getItemCount());
      assertEquals(9, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      matrixSeriesCollection0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(9, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(81, matrixSeries0.getItemCount());
      assertEquals(9, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(8.0, number0);
      assertEquals(9, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(81, matrixSeries0.getItemCount());
      assertEquals(9, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'day' argument.", 9, 9);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(9, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(81, matrixSeries0.getItemCount());
      assertEquals(9, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(9, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(81, matrixSeries0.getItemCount());
      assertEquals(9, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(9, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(81, matrixSeries0.getItemCount());
      assertEquals(9, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("6:XX");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.addBin((SimpleHistogramBin) null);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) simpleHistogramDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 2348;
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((double) 2348, (double) 2348, (Comparable) instant0, (Comparable) dateArray0[0]);
      assertEquals(4, dateArray0.length);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(2348));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNull(range0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(2348));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(range1);
      assertEquals(2348.0, range1.getCentralValue(), 0.01);
      assertEquals(2348.0, range1.getLowerBound(), 0.01);
      assertEquals(2348.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) instant0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.5;
      doubleArray1[1] = (-2035.28611);
      doubleArray1[2] = (-1.7976931348623157E308);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2035.28611);
      doubleArray2[1] = (-1.7976931348623157E308);
      doubleArray2[2] = (-2035.28611);
      doubleArray2[3] = 1169.14457919191;
      doubleArray2[4] = (-2035.28611);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1.7976931348623157E308);
      doubleArray3[1] = 1.5;
      doubleArray3[2] = (-1944.92602462396);
      doubleArray3[3] = 1.5;
      doubleArray3[4] = (-1.7976931348623157E308);
      doubleArray3[5] = 1.5;
      doubleArray3[6] = 1.5;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-1944.92602462396);
      doubleArray4[1] = (-1.7976931348623157E308);
      doubleArray4[2] = 17.0;
      doubleArray4[3] = (-1944.92602462396);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (-1944.92602462396);
      doubleArray6[1] = (-1944.92602462396);
      doubleArray6[2] = (-1944.92602462396);
      doubleArray6[3] = 17.0;
      doubleArray6[4] = (-1.7976931348623157E308);
      doubleArray6[5] = 1.5;
      doubleArray6[6] = (-1.7976931348623157E308);
      doubleArray0[5] = doubleArray6;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("i+;RR|Y+$?^$Y", "Null 'f' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1143, 5856);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(1143, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(5856, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) (-1.7976931348623157E308));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1142, Size: 7
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[][] doubleArray0 = new double[9][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8,$wKG", "L8,$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(9, doubleArray0.length);
      
      CategoryToPieDataset categoryToPieDataset1 = (CategoryToPieDataset)categoryToPieDataset0.clone();
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertNotNull(categoryToPieDataset1);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, categoryToPieDataset1.getExtractIndex());
      assertEquals(9, doubleArray0.length);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "L8,$wKG", (double) integer0, 1);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertNotNull(defaultPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(9, doubleArray0.length);
      
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 4);
      MockDate mockDate0 = new MockDate(4665, 4665, 4665, (-528), (-528));
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "8i#2AI2");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=8i#2AI2,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("8i#2AI2", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      
      Second second0 = new Second(mockDate0, simpleTimeZone0);
      assertNotNull(second0);
      assertEquals("Mon Jun 16 15:12:00 GMT 6966", mockDate0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=8i#2AI2,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("8i#2AI2", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(157672969920000L, second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(157672969920999L, second0.getLastMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Millisecond millisecond0 = new Millisecond(1, second0);
      assertNotNull(millisecond0);
      assertEquals("Mon Jun 16 15:12:00 GMT 6966", mockDate0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=8i#2AI2,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("8i#2AI2", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(157672969920000L, second0.getFirstMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(157672969920999L, second0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1L, millisecond0.getMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      comparableArray0[0] = (Comparable<Double>) millisecond0;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1616L));
      assertNotNull(fixedMillisecond0);
      assertEquals((-1616L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1616L), fixedMillisecond0.getSerialIndex());
      assertEquals((-1616L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1616L), fixedMillisecond0.getLastMillisecond());
      
      comparableArray0[1] = (Comparable<Double>) fixedMillisecond0;
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-900.25838918), 999, 1018.1622334, 4665, 89.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Mon Jun 16 15:12:00 GMT 6966", mockDate0.toString());
      
      comparableArray0[2] = (Comparable<Double>) oHLCDataItem0;
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      comparableArray0[3] = (Comparable<Double>) quarter0;
      Comparable<DefaultOHLCDataset>[] comparableArray1 = (Comparable<DefaultOHLCDataset>[]) Array.newInstance(Comparable.class, 5);
      comparableArray1[0] = (Comparable<DefaultOHLCDataset>) second0;
      comparableArray1[1] = (Comparable<DefaultOHLCDataset>) millisecond0;
      comparableArray1[2] = (Comparable<DefaultOHLCDataset>) quarter0;
      comparableArray1[3] = (Comparable<DefaultOHLCDataset>) second0;
      comparableArray1[4] = (Comparable<DefaultOHLCDataset>) oHLCDataItem0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'columnKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "Null 'day' argument.";
      int int0 = 9;
      int int1 = 654;
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'day' argument.", 9, 654);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(654, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5886, matrixSeries0.getItemCount());
      assertEquals(9, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(654, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5886, matrixSeries0.getItemCount());
      assertEquals(9, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(653.0, number0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(654, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5886, matrixSeries0.getItemCount());
      assertEquals(9, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Double double0 = new Double(589.5658205637811);
      assertNotNull(double0);
      assertEquals(589.5658205637811, (double)double0, 0.01);
      
      Double double1 = Double.valueOf((double) (short)0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      boolean boolean0 = vector0.add(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[0.0]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(589.5658205637811));
      assertTrue(vector0.contains(double1));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = new Range(589.5658205637811, 589.5658205637811);
      assertNotNull(range0);
      assertEquals(589.5658205637811, range0.getLowerBound(), 0.01);
      assertEquals(589.5658205637811, range0.getCentralValue(), 0.01);
      assertEquals(589.5658205637811, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      MockDate mockDate0 = new MockDate((short)0, 0, (short)0, (-1), (short)0);
      assertNotNull(mockDate0);
      
      Quarter quarter0 = new Quarter(mockDate0);
      assertNotNull(quarter0);
      assertEquals("Sat Dec 30 23:00:00 GMT 1899", mockDate0.toString());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(1899, quarter0.getYearValue());
      assertEquals(7600L, quarter0.getSerialIndex());
      assertEquals((-2209078800000L), quarter0.getFirstMillisecond());
      assertEquals((-2209078800000L), quarter0.getLastMillisecond());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      Quarter quarter1 = (Quarter)quarter0.previous();
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotNull(quarter1);
      assertEquals("Sat Dec 30 23:00:00 GMT 1899", mockDate0.toString());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(1899, quarter0.getYearValue());
      assertEquals(7600L, quarter0.getSerialIndex());
      assertEquals((-2209078800000L), quarter0.getFirstMillisecond());
      assertEquals((-2209078800000L), quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(3, quarter1.getQuarter());
      assertEquals(7599L, quarter1.getSerialIndex());
      assertEquals(1899, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(mockDate0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals("Sat Dec 30 23:00:00 GMT 1899", mockDate0.toString());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[0.0]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(589.5658205637811, range0.getLowerBound(), 0.01);
      assertEquals(589.5658205637811, range0.getCentralValue(), 0.01);
      assertEquals(589.5658205637811, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Sat Dec 30 23:00:00 GMT 1899", mockDate0.toString());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertFalse(vector0.contains(589.5658205637811));
      assertTrue(vector0.contains(double1));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(Double.NaN, 0.0, "[2w");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-1.7976931348623157E308), (-1.7976931348623157E308), "[}U<8V^pUmxx");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1.7976931348623157E308));
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(true);
      assertEquals((-1.7976931348623157E308), double0, 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
      assertTrue(number0.equals((Object)double0));
      assertNotNull(number0);
      assertEquals((-1.7976931348623157E308), number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertFalse(boolean0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-1.7976931348623157E308), range1.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range1.getUpperBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, numberArray0.length);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Double double0 = new Double(Double.NEGATIVE_INFINITY);
      assertNotNull(double0);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double0, 0.01);
      
      boolean boolean0 = vector0.add(double0);
      assertTrue(boolean0);
      assertEquals("[-Infinity]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains(Double.NEGATIVE_INFINITY));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      
      MockDate mockDate0 = new MockDate((-1), 1, (-1), 1, 1);
      assertNotNull(mockDate0);
      
      Quarter quarter0 = new Quarter(mockDate0);
      assertNotNull(quarter0);
      assertEquals("Mon Jan 30 01:01:00 GMT 1899", mockDate0.toString());
      assertEquals(1, quarter0.getQuarter());
      assertEquals((-2238015540000L), quarter0.getLastMillisecond());
      assertEquals(7597L, quarter0.getSerialIndex());
      assertEquals(1899, quarter0.getYearValue());
      assertEquals((-2238015540000L), quarter0.getFirstMillisecond());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      RegularTimePeriod regularTimePeriod0 = quarter0.previous();
      assertNull(regularTimePeriod0);
      assertEquals("Mon Jan 30 01:01:00 GMT 1899", mockDate0.toString());
      assertEquals(1, quarter0.getQuarter());
      assertEquals((-2238015540000L), quarter0.getLastMillisecond());
      assertEquals(7597L, quarter0.getSerialIndex());
      assertEquals(1899, quarter0.getYearValue());
      assertEquals((-2238015540000L), quarter0.getFirstMillisecond());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.AbstractSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(Double.NaN, (-30000.0), "I3th$3T-7i_\"?N");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add((Integer) null);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, false);
      assertNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNotNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-30000.0), range1.getLowerBound(), 0.01);
      assertEquals((-30000.0), range1.getCentralValue(), 0.01);
      assertEquals((-30000.0), range1.getUpperBound(), 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 3);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = new Range(0.8, 0.8);
      assertNotNull(range0);
      assertEquals(0.8, range0.getLowerBound(), 0.01);
      assertEquals(0.8, range0.getCentralValue(), 0.01);
      assertEquals(0.8, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1L));
      assertNotNull(fixedMillisecond0);
      assertEquals((-1L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-1L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1L), fixedMillisecond0.getSerialIndex());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[13];
      MockDate mockDate0 = new MockDate((-1L));
      assertNotNull(mockDate0);
      
      oHLCDataItemArray0[1] = oHLCDataItemArray0[0];
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertEquals((-1L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-1L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1L), fixedMillisecond0.getSerialIndex());
      assertEquals((-2L), regularTimePeriod0.getSerialIndex());
      assertEquals((-2L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-2L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-2L), regularTimePeriod0.getFirstMillisecond());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(fixedMillisecond0, oHLCDataItemArray0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertNotNull(defaultOHLCDataset0);
      assertEquals((-1L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-1L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1L), fixedMillisecond0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(13, oHLCDataItemArray0.length);
      
      Date date0 = fixedMillisecond0.getEnd();
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(date0, mockDate0);
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertTrue(date0.equals((Object)mockDate0));
      assertNotNull(date0);
      assertEquals((-1L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-1L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1L), fixedMillisecond0.getSerialIndex());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = stack0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(1.5, 1.5, ">sSGFZ br");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(integer0));
      
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(200, (int)integer1);
      
      boolean boolean0 = stack0.add(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[200]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains(integer0));
      assertTrue(stack0.contains(integer1));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[200]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(1.5, range0.getCentralValue(), 0.01);
      assertEquals(1.5, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(stack0.contains(integer0));
      assertTrue(stack0.contains(integer1));
      
      Range range1 = Range.expandToInclude(range0, 1.5);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertNotNull(range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[200]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(1.5, range0.getCentralValue(), 0.01);
      assertEquals(1.5, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.5, range1.getCentralValue(), 0.01);
      assertEquals(1.5, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.5, range1.getLowerBound(), 0.01);
      assertFalse(stack0.contains(integer0));
      assertTrue(stack0.contains(integer1));
      
      String string0 = range1.toString();
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertNotNull(string0);
      assertEquals("Range[1.5,1.5]", string0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[200]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(1.5, range0.getCentralValue(), 0.01);
      assertEquals(1.5, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.5, range1.getCentralValue(), 0.01);
      assertEquals(1.5, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.5, range1.getLowerBound(), 0.01);
      assertFalse(stack0.contains(integer0));
      assertTrue(stack0.contains(integer1));
      
      Range range2 = Range.shift(range0, 1.5, true);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[200]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(1.5, range0.getCentralValue(), 0.01);
      assertEquals(1.5, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3.0, range2.getCentralValue(), 0.01);
      assertEquals(3.0, range2.getLowerBound(), 0.01);
      assertEquals(3.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(stack0.contains(integer0));
      assertTrue(stack0.contains(integer1));
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range2, true);
      assertSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNull(range3);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[200]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(1.5, range0.getCentralValue(), 0.01);
      assertEquals(1.5, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3.0, range2.getCentralValue(), 0.01);
      assertEquals(3.0, range2.getLowerBound(), 0.01);
      assertEquals(3.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(stack0.contains(integer0));
      assertTrue(stack0.contains(integer1));
      
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 1);
      int int0 = (-1);
      MockDate mockDate0 = new MockDate((-1), (-1649), 0);
      assertNotNull(mockDate0);
      
      int int1 = 1;
      int int2 = 2;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(341, ">sSGFZ br", 341, 3209, 1, (-1), 3607, 3607, 0, (-362), 0, (-1), 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 341
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = new Range(0.8, 0.8);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.8, range0.getCentralValue(), 0.01);
      assertEquals(0.8, range0.getLowerBound(), 0.01);
      assertEquals(0.8, range0.getUpperBound(), 0.01);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("vzI&qpU`z!", (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, (-1695));
      assertNotNull(categoryToPieDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1695), categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1695), categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, doubleArray0.length);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1695), categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Number[][] numberArray0 = new Number[9][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, (-7));
      assertNotNull(categoryToPieDataset0);
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-7), categoryToPieDataset0.getExtractIndex());
      assertEquals(9, numberArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-7), categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(9, list0.size());
      assertEquals(9, numberArray0.length);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertNull(range0);
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-7), categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(9, list0.size());
      assertEquals(9, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.7976931348623157E308;
      doubleArray1[1] = (-175.6702725763069);
      doubleArray1[2] = (-1.3643919888);
      doubleArray1[3] = 943.32;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-175.6702725763069);
      doubleArray2[1] = (-1.3643919888);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1.7976931348623157E308;
      doubleArray3[1] = (-1.3643919888);
      doubleArray3[2] = 1.7976931348623157E308;
      doubleArray3[3] = (-1.3643919888);
      doubleArray3[4] = (-175.6702725763069);
      doubleArray3[5] = 943.32;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-1.3643919888);
      doubleArray4[1] = (-175.6702725763069);
      doubleArray4[2] = 943.32;
      doubleArray4[3] = (-175.6702725763069);
      doubleArray4[4] = 943.32;
      doubleArray4[5] = 943.32;
      doubleArray4[6] = (-1.3643919888);
      doubleArray4[7] = (-1.3643919888);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (-1.3643919888);
      doubleArray5[1] = 943.32;
      doubleArray5[2] = 1.7976931348623157E308;
      doubleArray5[3] = (-1.3643919888);
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.general.DatasetUtilities", "org.jfree.data.general.DatasetUtilities", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(1.7976931348623157E308, range0.getLength(), 0.01);
      assertEquals((-175.6702725763069), range0.getLowerBound(), 0.01);
      assertEquals(8.988465674311579E307, range0.getCentralValue(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getUpperBound(), 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains((short)0));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains((short)0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((double) (short)0, (double) (short)0, (Comparable) short0, (Comparable) short0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains((short)0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertTrue(stack0.contains((short)0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(3741.789702775718, 3741.789702775718, "Series 3");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(integer0));
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals("[100]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(integer0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals("[100]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(3741.789702775718, range0.getCentralValue(), 0.01);
      assertEquals(3741.789702775718, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3741.789702775718, range0.getLowerBound(), 0.01);
      assertTrue(stack0.contains(integer0));
      
      Range range1 = Range.expandToInclude(range0, (-125.527158));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals("[100]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(3741.789702775718, range0.getCentralValue(), 0.01);
      assertEquals(3741.789702775718, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3741.789702775718, range0.getLowerBound(), 0.01);
      assertEquals(3867.316860775718, range1.getLength(), 0.01);
      assertEquals((-125.527158), range1.getLowerBound(), 0.01);
      assertEquals(1808.131272387859, range1.getCentralValue(), 0.01);
      assertEquals(3741.789702775718, range1.getUpperBound(), 0.01);
      assertTrue(stack0.contains(integer0));
      
      String string0 = range0.toString();
      assertNotSame(range0, range1);
      assertFalse(range0.equals((Object)range1));
      assertNotNull(string0);
      assertEquals("Range[3741.789702775718,3741.789702775718]", string0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals("[100]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(3741.789702775718, range0.getCentralValue(), 0.01);
      assertEquals(3741.789702775718, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3741.789702775718, range0.getLowerBound(), 0.01);
      assertTrue(stack0.contains(integer0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("f>", 6, 365);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(365, matrixSeries0.getColumnsCount());
      assertEquals(6, matrixSeries0.getRowCount());
      assertEquals(2190, matrixSeries0.getItemCount());
      
      matrixSeries0.setNotify(true);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(365, matrixSeries0.getColumnsCount());
      assertEquals(6, matrixSeries0.getRowCount());
      assertEquals(2190, matrixSeries0.getItemCount());
      
      SynthPanelUI synthPanelUI0 = new SynthPanelUI();
      assertNotNull(synthPanelUI0);
      
      matrixSeries0.removePropertyChangeListener(synthPanelUI0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(365, matrixSeries0.getColumnsCount());
      assertEquals(6, matrixSeries0.getRowCount());
      assertEquals(2190, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(365, matrixSeries0.getColumnsCount());
      assertEquals(6, matrixSeries0.getRowCount());
      assertEquals(2190, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(365, matrixSeries0.getColumnsCount());
      assertEquals(6, matrixSeries0.getRowCount());
      assertEquals(2190, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(364.0, range0.getUpperBound(), 0.01);
      assertEquals(182.0, range0.getCentralValue(), 0.01);
      assertEquals(364.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Number[][] numberArray0 = new Number[12][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(12, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(12, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 32);
      assertNotNull(categoryToPieDataset0);
      assertEquals(12, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(32, categoryToPieDataset0.getExtractIndex());
      assertEquals(12, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-1979.8);
      doubleArray1[2] = 3213.6545018035;
      doubleArray1[3] = 0.5;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 3213.6545018035;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'f' argument.", "L8,$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      Integer integer0 = new Integer(2550);
      assertNotNull(integer0);
      assertEquals(2550, (int)integer0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) 3213.6545018035, (-1.0), 1);
      assertNotNull(pieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertTrue(boolean0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = new Range(0.8, 0.8);
      assertNotNull(range0);
      assertEquals(0.8, range0.getCentralValue(), 0.01);
      assertEquals(0.8, range0.getUpperBound(), 0.01);
      assertEquals(0.8, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1L));
      assertNotNull(fixedMillisecond0);
      assertEquals((-1L), fixedMillisecond0.getSerialIndex());
      assertEquals((-1L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-1L), fixedMillisecond0.getMiddleMillisecond());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockDate mockDate0 = new MockDate((-1L));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1408.3169549765637), 3532.0, Double.NEGATIVE_INFINITY, (-789.1955682527513), (-1408.3169549765637));
      assertNotNull(oHLCDataItem0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, Double.NEGATIVE_INFINITY, (-402.9481348328852), (-1L), 67.300405, 823.0488037);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(fixedMillisecond0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals((-1L), fixedMillisecond0.getSerialIndex());
      assertEquals((-1L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-1L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertEquals(0.8, range0.getCentralValue(), 0.01);
      assertEquals(0.8, range0.getUpperBound(), 0.01);
      assertEquals(0.8, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1L), fixedMillisecond0.getSerialIndex());
      assertEquals((-1L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-1L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(2, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("org.jfree.data.xy.DefaultXYZDataset");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) simpleHistogramDataset0);
      assertTrue(boolean0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "org.jfree.data.xy.DefaultXYZDataset";
      stringArray0[2] = "org.jfree.data.xy.DefaultXYZDataset";
      stringArray0[3] = "org.jfree.data.xy.DefaultXYZDataset";
      stringArray0[4] = "[#";
      stringArray0[5] = "org.jfree.data.xy.DefaultXYZDataset";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, stringArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-1583.2510364468706));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-1261.71), (-1261.71), "%dY>DGfQh>kz");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1261.71), range0.getCentralValue(), 0.01);
      assertEquals((-1261.71), range0.getLowerBound(), 0.01);
      assertEquals((-1261.71), range0.getUpperBound(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertFalse(boolean0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1261.71), range1.getLowerBound(), 0.01);
      assertEquals((-1261.71), range1.getCentralValue(), 0.01);
      assertEquals((-1261.71), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(integer0));
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[0]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(integer0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range0);
      
      Short short0 = new Short((short)98);
      assertNotNull(short0);
      assertEquals((short)98, (short)short0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) short0, (Comparable) short0, (Comparable) short0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "org.jfree.data.xy.DefaultXYZDataset", false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1.7976931348623157E308);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getLowerBound(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getCentralValue(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getUpperBound(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertFalse(boolean0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(299.5, range1.getLowerBound(), 0.01);
      assertEquals(300.0, range1.getCentralValue(), 0.01);
      assertEquals(300.5, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(150.0, range2.getCentralValue(), 0.01);
      assertEquals(300.0, range2.getUpperBound(), 0.01);
      assertEquals(300.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(300.0, number0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals("[0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(integer0));
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(integer0);
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertNull(range1);
      assertEquals("[0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(integer0));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(integer0));
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[0]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(integer0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNull(range1);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[0]", stack0.toString());
      assertTrue(stack0.contains(integer0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(3742.3387732, 3742.3387732, "Series 3");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(integer0));
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[300]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(3742.3387732));
      
      Double double0 = new Double(290.4);
      assertNotNull(double0);
      assertEquals(290.4, (double)double0, 0.01);
      
      boolean boolean1 = vector0.add(double0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[290.4]", vector0.toString());
      assertFalse(vector0.contains(3742.3387732));
      assertTrue(vector0.contains(double0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[290.4]", vector0.toString());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertFalse(vector0.contains(3742.3387732));
      assertTrue(vector0.contains(double0));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1159), 2, (-1899));
      assertNotNull(mockDate0);
      
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Sun Dec 18 00:00:00 GMT 735", mockDate0.toString());
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1899);
      doubleArray0[1] = (double) (-1159);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(instant0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Sun Dec 18 00:00:00 GMT 735", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-1899.0), (-1159.0)}, doubleArray0, 0.01);
      assertEquals(3, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals((-3.8942208E13), number0);
      assertEquals("Sun Dec 18 00:00:00 GMT 735", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-1899.0), (-1159.0)}, doubleArray0, 0.01);
      assertEquals(3, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("LRGGF0");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      double double0 = 2.5;
      double double1 = 1342.098848;
      boolean boolean0 = false;
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(2.5, 1342.098848, false, false);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1342.098848, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(2.5, simpleHistogramBin0.getLowerBound(), 0.01);
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(1342.098848, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(2.5, simpleHistogramBin0.getLowerBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertTrue(number0.equals((Object)double1));
      assertFalse(number0.equals((Object)double0));
      assertNotNull(number0);
      assertEquals(1342.098848, number0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Comparable<DefaultStatisticalCategoryDataset>[] comparableArray0 = (Comparable<DefaultStatisticalCategoryDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultStatisticalCategoryDataset>) simpleHistogramBin0;
      comparableArray0[1] = (Comparable<DefaultStatisticalCategoryDataset>) simpleHistogramBin0;
      comparableArray0[2] = (Comparable<DefaultStatisticalCategoryDataset>) simpleHistogramBin0;
      comparableArray0[3] = (Comparable<DefaultStatisticalCategoryDataset>) simpleHistogramBin0;
      comparableArray0[4] = (Comparable<DefaultStatisticalCategoryDataset>) simpleHistogramBin0;
      VectorSeries vectorSeries0 = new VectorSeries(comparableArray0[2]);
      assertNotNull(vectorSeries0);
      assertTrue(vectorSeries0.getNotify());
      assertFalse(vectorSeries0.getAutoSort());
      assertNull(vectorSeries0.getDescription());
      assertTrue(vectorSeries0.getAllowDuplicateXValues());
      assertEquals(0, vectorSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, vectorSeries0.getMaximumItemCount());
      assertEquals(9, comparableArray0.length);
      
      int int0 = 1547;
      // Undeclared exception!
      try { 
        vectorSeries0.getDataItem(1547);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1547, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2348, 2348, 2348);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2348;
      doubleArray0[7] = (double) 2348;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Feb 03 00:00:00 GMT 4450", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {2348.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2348.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = mockDate0.before(dateArray0[0]);
      assertFalse(boolean0);
      assertEquals("Thu Feb 03 00:00:00 GMT 4450", mockDate0.toString());
      assertEquals(1, dateArray0.length);
      
      boolean boolean1 = stack0.add((Double) 0.0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[0.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(0.0));
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertEquals("Thu Feb 03 00:00:00 GMT 4450", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[0.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {2348.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2348.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertTrue(stack0.contains(0.0));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Date[] dateArray0 = new Date[9];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1161.0;
      doubleArray0[1] = 357.14;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("1X$", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1161.0, 357.14}, doubleArray0, 0.01);
      assertEquals(9, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Comparable<DefaultOHLCDataset>[] comparableArray0 = (Comparable<DefaultOHLCDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      MockDate mockDate0 = new MockDate(1165, 1165, 781);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[5];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1165;
      doubleArray0[1] = (double) 781;
      doubleArray0[2] = (double) 1165;
      doubleArray0[3] = (double) 1165;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 781;
      doubleArray1[1] = (double) 781;
      doubleArray1[2] = (double) 1165;
      doubleArray1[3] = (double) 781;
      doubleArray1[4] = (double) 781;
      doubleArray1[5] = Double.NEGATIVE_INFINITY;
      doubleArray1[6] = (double) 781;
      doubleArray0[3] = (-2.147483648E9);
      doubleArray1[8] = (double) 781;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Sun Mar 22 00:00:00 GMT 3164", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1165.0, 781.0, 1165.0, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {781.0, 781.0, 1165.0, 781.0, 781.0, Double.NEGATIVE_INFINITY, 781.0, 0.0, 781.0}, doubleArray1, 0.01);
      assertEquals(5, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(Double.NEGATIVE_INFINITY));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(Double.NEGATIVE_INFINITY));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Double double0 = new Double(82.784554);
      assertNotNull(double0);
      assertEquals(82.784554, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[82.784554]", stack0.toString());
      assertTrue(stack0.contains(double0));
      assertFalse(stack0.contains(Double.NEGATIVE_INFINITY));
      
      mockDate0.setTime(1000L);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNull(range1);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {1165.0, 781.0, 1165.0, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {781.0, 781.0, 1165.0, 781.0, 781.0, Double.NEGATIVE_INFINITY, 781.0, 0.0, 781.0}, doubleArray1, 0.01);
      assertEquals(5, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(linkedList0.contains(Double.NEGATIVE_INFINITY));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Short short0 = new Short((short)2711);
      assertNotNull(short0);
      assertEquals((short)2711, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(short0));
      
      Short short1 = new Short((short)2711);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)2711, (short)short1);
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(short1.equals((Object)short0));
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[2711]", stack0.toString());
      assertTrue(stack0.contains(short0));
      
      boolean boolean1 = stack0.add(short1);
      assertTrue(short1.equals((Object)short0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertEquals("[2711, 2711]", stack0.toString());
      assertTrue(stack0.contains(short0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((double) (short)2711, 1161.0, (Comparable) short0, (Comparable) short0);
      assertTrue(short0.equals((Object)short1));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertEquals("[2711, 2711]", stack0.toString());
      assertEquals(2711.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2711.0, range0.getCentralValue(), 0.01);
      assertEquals(2711.0, range0.getUpperBound(), 0.01);
      assertTrue(stack0.contains(short0));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 1161.0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(3872.0, range1.getUpperBound(), 0.01);
      assertEquals(2711.0, range1.getLength(), 0.01);
      assertEquals(2516.5, range1.getCentralValue(), 0.01);
      assertEquals(1161.0, range1.getLowerBound(), 0.01);
      
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (short)2711;
      doubleArray1[1] = (-1381.76190344);
      doubleArray1[2] = (double) (short)2711;
      doubleArray1[3] = (double) (short)2711;
      doubleArray1[4] = 1161.0;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = (double) (short)2711;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (short)2711;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = (-1381.76190344);
      doubleArray2[4] = (double) (short)2711;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1381.76190344);
      doubleArray3[1] = 135.89683708304;
      doubleArray3[2] = 1161.0;
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray3[4] = (-1381.76190344);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (double) (short)2711;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = 135.89683708304;
      doubleArray6[1] = 135.89683708304;
      doubleArray6[2] = 202.95;
      doubleArray6[3] = 135.89683708304;
      doubleArray6[4] = (-1381.76190344);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = 202.95;
      doubleArray7[1] = (-1381.76190344);
      doubleArray7[2] = Double.NEGATIVE_INFINITY;
      doubleArray7[3] = 1.0;
      doubleArray7[4] = 135.89683708304;
      doubleArray7[5] = (double) (short)2711;
      doubleArray7[6] = 1.0;
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Series 5", "Series 4", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2348, 2348, 2348);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2348;
      doubleArray0[1] = (double) 2348;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Feb 03 00:00:00 GMT 4450", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {2348.0, 2348.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = stack0.add((Double) 2348.0);
      assertTrue(boolean0);
      assertEquals("[2348.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(2348.0));
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) stack0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Number[][] numberArray0 = new Number[12][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(12, numberArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Double double0 = new Double(863.28308067875);
      assertNotNull(double0);
      assertEquals(863.28308067875, (double)double0, 0.01);
      
      boolean boolean0 = vector0.add(double0);
      assertTrue(boolean0);
      assertEquals("[863.28308067875]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains(double0));
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      
      TimeSeries timeSeries0 = new TimeSeries(double0, "Null 'dataset' argument.", "Null 'dataset' argument.");
      assertNotNull(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Null 'dataset' argument.", timeSeries0.getDomainDescription());
      assertEquals("Null 'dataset' argument.", timeSeries0.getRangeDescription());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-5379), "Duplicate items in 'columnKeys'.");
      assertNotNull(simpleTimeZone0);
      assertEquals("Duplicate items in 'columnKeys'.", simpleTimeZone0.getID());
      assertEquals((-5379), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Duplicate items in 'columnKeys'.,offset=-5379,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Null 'dataset' argument.", timeSeries0.getDomainDescription());
      assertEquals("Null 'dataset' argument.", timeSeries0.getRangeDescription());
      assertEquals("Duplicate items in 'columnKeys'.", simpleTimeZone0.getID());
      assertEquals((-5379), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Duplicate items in 'columnKeys'.,offset=-5379,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) vector0, range0, true);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals("[863.28308067875]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Null 'dataset' argument.", timeSeries0.getDomainDescription());
      assertEquals("Null 'dataset' argument.", timeSeries0.getRangeDescription());
      assertEquals("Duplicate items in 'columnKeys'.", simpleTimeZone0.getID());
      assertEquals((-5379), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Duplicate items in 'columnKeys'.,offset=-5379,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertTrue(vector0.contains(double0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[8];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("L8XVwKc", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals("[300]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(integer0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      int int0 = categoryTableXYDataset0.getSeriesCount();
      assertEquals(0, int0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      int int1 = categoryTableXYDataset0.getSeriesCount();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(11.0, (-2169.28703), "The number of column keys does not match the number of columns in the data array.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(int0));
      
      boolean boolean0 = stack0.add(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(boolean0);
      assertEquals("[300]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(integer0));
      assertFalse(stack0.contains(int0));
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) stack0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Date[] dateArray0 = new Date[16];
      double[] doubleArray0 = new double[8];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("L8XVwKc", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(16, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 191.551216;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (-15);
      doubleArray3[1] = 191.551216;
      doubleArray3[2] = (double) (-15);
      doubleArray3[3] = 191.551216;
      doubleArray3[4] = 191.551216;
      doubleArray3[5] = 191.551216;
      doubleArray3[6] = 6.283185307179586;
      doubleArray3[7] = 191.551216;
      doubleArray3[8] = 191.551216;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 191.551216;
      doubleArray4[1] = 6.283185307179586;
      doubleArray4[2] = (double) (-15);
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("`JV", "`JV", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals((-15.0), range0.getLowerBound(), 0.01);
      assertEquals(191.551216, range0.getUpperBound(), 0.01);
      assertEquals(206.551216, range0.getLength(), 0.01);
      assertEquals(88.275608, range0.getCentralValue(), 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[300]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(integer0));
      
      Stack<DefaultStatisticalCategoryDataset> stack1 = new Stack<DefaultStatisticalCategoryDataset>();
      assertNotNull(stack1);
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer1);
      assertEquals(300, (int)integer1);
      
      boolean boolean1 = stack0.add(integer1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[300, 300]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(integer1));
      
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, (-2564.19), "LI hS2NJ/@*0k");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = new Range(Double.NEGATIVE_INFINITY, (-1.0));
      assertNotNull(range0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2348, 2348, 1);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Tue Sep 01 00:00:00 GMT 4443", mockDate0.toString());
      
      doubleArray0[0] = (double) 2348;
      doubleArray0[1] = (double) 2348;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Tue Sep 01 00:00:00 GMT 4443", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {2348.0, 2348.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Vector<Double> vector0 = new Vector<Double>(linkedList0);
      assertNotNull(vector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = vector0.add((Double) 2348.0);
      assertTrue(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, vector0.capacity());
      assertEquals("[2348.0]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertFalse(linkedList0.contains(2348.0));
      assertTrue(vector0.contains(2348.0));
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      Range range1 = Range.shift(range0, (double) 1, true);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-2068.648869698528), (-2068.648869698528), "Null 'columnKeys' argument.");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(integer0));
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[300]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      
      boolean boolean1 = stack0.add(integer0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[300, 300]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(integer0));
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, false);
      assertNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, arrayList0, false);
      assertNull(range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals((-2069.148869698528), number0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[8][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-2068.648869698528);
      doubleArray1[1] = (-2068.648869698528);
      doubleArray1[2] = (-2068.648869698528);
      doubleArray1[3] = (-2068.648869698528);
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = (-2068.648869698528);
      doubleArray1[6] = (-2068.648869698528);
      doubleArray1[7] = (-2068.648869698528);
      doubleArray1[8] = (-2068.648869698528);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2068.648869698528);
      doubleArray2[1] = (-2498.254462527);
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = (-2068.648869698528);
      doubleArray2[4] = 644.821677849;
      doubleArray2[5] = (-2068.648869698528);
      doubleArray2[6] = Double.POSITIVE_INFINITY;
      doubleArray2[7] = (-2068.648869698528);
      doubleArray2[8] = (-2068.648869698528);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 644.821677849;
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = (-2498.254462527);
      doubleArray3[3] = (-2068.648869698528);
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray3[5] = (-2068.648869698528);
      doubleArray3[6] = 644.821677849;
      doubleArray3[7] = 644.821677849;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-2498.254462527);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (-2068.648869698528);
      doubleArray6[1] = Double.POSITIVE_INFINITY;
      doubleArray6[2] = 615.74775;
      doubleArray6[3] = 2.0;
      doubleArray6[4] = Double.NEGATIVE_INFINITY;
      doubleArray6[5] = Double.POSITIVE_INFINITY;
      doubleArray6[6] = 0.0;
      doubleArray6[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      
      doubleArray7[0] = 644.821677849;
      doubleArray7[1] = (-2498.254462527);
      doubleArray7[2] = (-2068.648869698528);
      doubleArray7[3] = 2.0;
      doubleArray7[4] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      
      doubleArray8[0] = 644.821677849;
      doubleArray8[1] = (-2498.254462527);
      doubleArray8[2] = 615.74775;
      doubleArray8[3] = (-2068.648869698528);
      doubleArray8[4] = (-2068.648869698528);
      doubleArray8[5] = 2.0;
      doubleArray8[6] = (-2498.254462527);
      doubleArray8[7] = (-2498.254462527);
      doubleArray8[8] = (-2498.254462527);
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'columnKeys' argument.", "the time period ", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(8, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range2);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getLowerBound(), 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(3742.265486040278, 3742.265486040278, "L8XVwKc");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(3742.265486040278, range0.getCentralValue(), 0.01);
      assertEquals(3742.265486040278, range0.getLowerBound(), 0.01);
      assertEquals(3742.265486040278, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "L8XVwKc";
      stringArray0[1] = "Requires 'start' < 'end'.";
      stringArray0[2] = "L8XVwKc";
      stringArray0[3] = "L8XVwKc";
      stringArray0[4] = "L8XVwKc";
      stringArray0[5] = "L8XVwKc";
      stringArray0[6] = "L8XVwKc";
      stringArray0[7] = "L8XVwKc";
      stringArray0[8] = "L8XVwKc";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, stringArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 2146467408);
      assertEquals(0.0, double0, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 2146467408, 231);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(2146467408, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(231, slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<Integer> stack1 = new Stack<Integer>();
      assertNotNull(stack1);
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      boolean boolean0 = stack1.add(integer0);
      assertTrue(boolean0);
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertEquals("[300]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertTrue(stack1.contains(integer0));
      
      Stack<DefaultStatisticalCategoryDataset> stack2 = new Stack<DefaultStatisticalCategoryDataset>();
      assertTrue(stack2.equals((Object)stack0));
      assertNotNull(stack2);
      assertTrue(stack2.empty());
      assertEquals("[]", stack2.toString());
      assertEquals(0, stack2.size());
      assertEquals(10, stack2.capacity());
      assertTrue(stack2.isEmpty());
      assertFalse(stack2.contains(defaultStatisticalCategoryDataset0));
      
      Range range0 = new Range(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("6\"d_l-GqeF");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeZone timeZone1 = TimeZone.getDefault();
      assertNotSame(timeZone1, timeZone0);
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeZone1);
      assertEquals("GMT", timeZone1.getID());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1319, 1319, timeZone0);
      assertTrue(timeZone0.equals((Object)timeZone1));
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1318, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack1, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNull(range0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(number0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Number[][] numberArray0 = new Number[12][7];
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      boolean boolean0 = vector0.add((Double) null);
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Double double0 = new Double(747.8819850482156);
      assertNotNull(double0);
      assertEquals(747.8819850482156, (double)double0, 0.01);
      
      Double double1 = new Double(1027.70799);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1027.70799, (double)double1, 0.01);
      
      vector0.addElement(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[null, 1027.70799]", vector0.toString());
      assertTrue(vector0.contains(1027.70799));
      assertFalse(vector0.contains(747.8819850482156));
      
      boolean boolean1 = vector0.add(double0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(3, vector0.size());
      assertEquals("[null, 1027.70799, 747.8819850482156]", vector0.toString());
      assertTrue(vector0.contains(1027.70799));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(12, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(12, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-2068.648869698528), (-2068.648869698528), "Null 'columnKeys' argument.");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(integer0));
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals("[300]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(integer0));
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, false);
      assertNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-2068.148869698528), range1.getUpperBound(), 0.01);
      assertEquals((-2068.648869698528), range1.getCentralValue(), 0.01);
      assertEquals((-2069.148869698528), range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, arrayList0, false);
      assertNull(range2);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(6.283185307179586, 424.3137872608, "I~g5{_{");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(integer0));
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals("[300]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(integer0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals("[300]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(6.283185307179586, range0.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertTrue(stack0.contains(integer0));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(6.783185307179586, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(6.283185307179586, range1.getCentralValue(), 0.01);
      assertEquals(5.783185307179586, range1.getLowerBound(), 0.01);
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, true);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals("[300]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1.0, range2.getLength(), 0.01);
      assertEquals(6.783185307179586, range2.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range2.getCentralValue(), 0.01);
      assertEquals(5.783185307179586, range2.getLowerBound(), 0.01);
      assertTrue(stack0.contains(integer0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2348, 2348, 2348);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Thu Feb 03 00:00:00 GMT 4450", mockDate0.toString());
      
      CategoryDataset categoryDataset0 = null;
      int int0 = (-2147026444);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 2348, (-2147026444));
      assertNotNull(slidingCategoryDataset0);
      assertEquals(2348, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2147026444), slidingCategoryDataset0.getMaximumCategoryCount());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingCategoryDataset0, tableOrder0, 2);
      assertNotNull(categoryToPieDataset0);
      assertEquals(2348, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2147026444), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) dateArray0[0], (-1.0), (-1473));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("\"CNPg53}PyM%?fBd]PY");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Number[][] numberArray0 = new Number[4][7];
      Number[] numberArray1 = new Number[1];
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[6];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) integer0;
      numberArray3[1] = (Number) integer0;
      numberArray3[2] = (Number) integer0;
      numberArray3[3] = (Number) integer0;
      numberArray3[4] = (Number) integer0;
      numberArray3[5] = (Number) integer0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[2];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[0] = (Number) integer0;
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      numberArray4[1] = (Number) integer1;
      numberArray0[3] = numberArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("\"CNPg53}PyM%?fBd]PY", "\"CNPg53}PyM%?fBd]PY", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, numberArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(900.0, range0.getCentralValue(), 0.01);
      assertEquals(1800.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1800.0, range0.getLength(), 0.01);
      assertEquals(4, numberArray0.length);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) simpleHistogramDataset0);
      assertNull(range1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Short short0 = new Short((short)10);
      assertNotNull(short0);
      assertEquals((short)10, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(short0));
      
      Stack<Short> stack1 = new Stack<Short>();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertFalse(stack1.contains(short0));
      
      Short short1 = new Short((short)10);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)10, (short)short1);
      
      boolean boolean0 = stack1.add(short1);
      assertNotSame(stack1, stack0);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(short1.equals((Object)short0));
      assertTrue(boolean0);
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertEquals("[10]", stack1.toString());
      assertTrue(stack1.contains((short)10));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(Double.NEGATIVE_INFINITY, 1769.989062398, (Comparable) short0, (Comparable) short1);
      assertTrue(short0.equals((Object)short1));
      assertTrue(short1.equals((Object)short0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack1, false);
      assertNotSame(stack1, stack0);
      assertFalse(stack1.equals((Object)stack0));
      assertNotNull(range0);
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertEquals("[10]", stack1.toString());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertTrue(stack1.contains((short)10));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (double) (short)10);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(10.0, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-2799);
      doubleArray1[1] = (double) (-2799);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Ht?e9\"_/kC]6qzP", "Ht?e9\"_/kC]6qzP", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      int int0 = 6;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 6);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(6, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(6, categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, doubleArray0.length);
      
      Integer integer1 = new Integer(2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(1, doubleArray0.length);
      assertFalse(stack0.contains((-2799)));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(short0));
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[0]", stack0.toString());
      assertTrue(stack0.contains(short0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((double) (short)0, (double) (short)0, (Comparable) short0, (Comparable) short0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[0]", stack0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertTrue(stack0.contains(short0));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (double) (short)0);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1933.0210208;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1933.0210208;
      doubleArray2[1] = 1933.0210208;
      doubleArray2[2] = 1933.0210208;
      doubleArray2[3] = 1933.0210208;
      doubleArray2[4] = 1933.0210208;
      doubleArray2[5] = 1933.0210208;
      doubleArray2[6] = 1933.0210208;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("\"CNPg53}PyM%?fBd]PY", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1601);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1601, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1601, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      Integer integer0 = new Integer(434);
      assertNotNull(integer0);
      assertEquals(434, (int)integer0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1933.0210208, (-1.0));
      assertNotNull(powerFunction2D0);
      assertEquals(1933.0210208, powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, list0, false);
      assertNotNull(range0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals(1933.0210208, range0.getCentralValue(), 0.01);
      assertEquals(1933.0210208, range0.getUpperBound(), 0.01);
      assertEquals(1933.0210208, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1601, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      Range range1 = Range.shift(range0, (-754.07185));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals(1933.0210208, range0.getCentralValue(), 0.01);
      assertEquals(1933.0210208, range0.getUpperBound(), 0.01);
      assertEquals(1933.0210208, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1178.9491708, range1.getCentralValue(), 0.01);
      assertEquals(1178.9491708, range1.getLowerBound(), 0.01);
      assertEquals(1178.9491708, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1601, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1601, Size: 7
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-1.7976931348623157E308), (-1494.3012117), "I~g5{_{");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(integer0));
      
      Integer integer1 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-30000), (int)integer1);
      
      boolean boolean0 = stack0.add(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[-30000]", stack0.toString());
      assertTrue(stack0.contains(integer1));
      assertFalse(stack0.contains(integer0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[-30000]", stack0.toString());
      assertEquals((-1.7976931348623157E308), range0.getUpperBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains(integer1));
      assertFalse(stack0.contains(integer0));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1.7976931348623157E308), range1.getLowerBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range1.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, false);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotNull(range2);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[-30000]", stack0.toString());
      assertEquals((-1.7976931348623157E308), range2.getLowerBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range2.getUpperBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertTrue(stack0.contains(integer1));
      assertFalse(stack0.contains(integer0));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Double double0 = new Double(Double.NaN);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      boolean boolean0 = vector0.add(double0);
      assertTrue(boolean0);
      assertEquals("[NaN]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains(double0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("[NaN]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains(double0));
      
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 400.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Number[][] numberArray0 = new Number[12][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(12, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(12, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(number0);
      assertEquals(12, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(12, numberArray0.length);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      Double double0 = new Double(Double.NaN);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      boolean boolean0 = vector0.add(double0);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[NaN]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains(Double.NaN));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-1223.39153331), (-1223.39153331), "Series 5");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1223.39153331), range0.getLowerBound(), 0.01);
      assertEquals((-1223.39153331), range0.getCentralValue(), 0.01);
      assertEquals((-1223.39153331), range0.getUpperBound(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, false);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1223.39153331), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(1223.39153331, range2.getLength(), 0.01);
      assertEquals((-611.695766655), range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1308.22);
      doubleArray1[1] = (-3989.572);
      doubleArray1[2] = (-4887.040684919416);
      doubleArray1[3] = (-888.9822632607544);
      doubleArray1[4] = 0.8;
      doubleArray1[5] = (-941.39206466667);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.5;
      doubleArray2[1] = (-1308.22);
      doubleArray2[2] = (-4887.040684919416);
      doubleArray2[3] = (-3989.572);
      doubleArray2[4] = (-3989.572);
      doubleArray2[5] = (-941.39206466667);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-941.39206466667);
      doubleArray3[1] = 0.8;
      doubleArray3[2] = 0.5;
      doubleArray3[3] = (-4887.040684919416);
      doubleArray3[4] = 0.5;
      doubleArray3[5] = (-813.15946444);
      doubleArray3[6] = (-4887.040684919416);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-4887.040684919416);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 0.5;
      doubleArray5[1] = 0.5;
      doubleArray5[2] = 0.5;
      doubleArray5[3] = (-1308.22);
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2348, 2348, 1);
      assertNotNull(mockDate0);
      
      mockDate0.setTime(1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(0.0, 2524.9273, "dpU HlKJt;CF");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertFalse(boolean0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(Double.NaN, 6.283185307179586, "Series 4");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertFalse(boolean0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[8];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("L8XVwKc", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      defaultHighLowDataset0.setSelectionState(timeSeriesCollection0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = (-2.147483648E9);
      doubleArray2[3] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1.0;
      doubleArray3[1] = (-2.147483648E9);
      doubleArray3[2] = 1.0;
      doubleArray3[3] = (-2.147483648E9);
      doubleArray3[4] = (-2.147483648E9);
      doubleArray3[5] = 1.0;
      doubleArray3[6] = 1.0;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("8i#2AI", "^g *}f$ mRk`q,|", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      categoryToPieDataset0.validateObject();
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) null, (-2.147483648E9));
      assertNotNull(pieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(1.0, double0, 0.01);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(235.244663206, (-1301.0));
      assertNotNull(powerFunction2D0);
      assertEquals(235.244663206, powerFunction2D0.getA(), 0.01);
      assertEquals((-1301.0), powerFunction2D0.getB(), 0.01);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 1.0, 1.0, (-3425));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertFalse(boolean0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      PieDataset pieDataset2 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset2, pieDataset1);
      assertFalse(pieDataset2.equals((Object)pieDataset0));
      assertFalse(pieDataset2.equals((Object)pieDataset1));
      assertNotNull(pieDataset2);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("\"CNPg53}PyM%?fBd]PY");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[17];
      doubleArray1[0] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 2;
      doubleArray3[1] = (double) 2;
      doubleArray3[2] = (double) 2;
      doubleArray3[3] = (double) 2;
      doubleArray3[4] = (double) 2;
      doubleArray3[5] = (double) 2;
      doubleArray3[6] = (double) 2;
      doubleArray3[7] = (double) 2;
      doubleArray3[8] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 2;
      doubleArray4[1] = (double) 2;
      doubleArray4[2] = (double) 2;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("sLWJ\"k", "Null 'dataset' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(4, doubleArray0.length);
      
      CategoryToPieDataset categoryToPieDataset1 = (CategoryToPieDataset)categoryToPieDataset0.clone();
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertNotNull(categoryToPieDataset1);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, categoryToPieDataset1.getExtractIndex());
      assertEquals(4, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) null, 0.0, 87);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertNotNull(defaultPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(4, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 8);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset1);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(4378.86, 4378.86, "*W{60 OO-r$@");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(4378.86, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4378.86, range0.getCentralValue(), 0.01);
      assertEquals(4378.86, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(4378.86, range1.getLowerBound(), 0.01);
      assertEquals(4378.86, range1.getCentralValue(), 0.01);
      assertEquals(4378.86, range1.getUpperBound(), 0.01);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotNull(range2);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(4378.86, range2.getCentralValue(), 0.01);
      assertEquals(4378.86, range2.getUpperBound(), 0.01);
      assertEquals(4378.86, range2.getLowerBound(), 0.01);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertTrue(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range1));
      assertNotNull(range3);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(4378.86, range3.getUpperBound(), 0.01);
      assertEquals(4378.86, range3.getCentralValue(), 0.01);
      assertEquals(4378.86, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1108.66786232509);
      doubleArray1[1] = 3386.2381899727557;
      doubleArray1[2] = 1528.877465034148;
      doubleArray1[3] = 1023.7318382;
      doubleArray1[4] = 2566.0;
      doubleArray1[5] = 185.8;
      doubleArray1[6] = Double.NaN;
      doubleArray1[7] = Double.POSITIVE_INFINITY;
      doubleArray1[8] = 245.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset1, false);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(range0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals((-1108.66786232509), range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(3742.3387732, 3742.3387732, "Series 3");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(integer0));
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[300]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[300]", stack0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3742.3387732, range0.getCentralValue(), 0.01);
      assertEquals(3742.3387732, range0.getUpperBound(), 0.01);
      assertEquals(3742.3387732, range0.getLowerBound(), 0.01);
      assertTrue(stack0.contains(integer0));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(3742.3387732, range1.getCentralValue(), 0.01);
      assertEquals(3742.8387732, range1.getUpperBound(), 0.01);
      assertEquals(3741.8387732, range1.getLowerBound(), 0.01);
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, true);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[300]", stack0.toString());
      assertEquals(1.0, range2.getLength(), 0.01);
      assertEquals(3741.8387732, range2.getLowerBound(), 0.01);
      assertEquals(3742.3387732, range2.getCentralValue(), 0.01);
      assertEquals(3742.8387732, range2.getUpperBound(), 0.01);
      assertTrue(stack0.contains(integer0));
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) integer0, 3742.3387732);
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 3742.3387732);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertNotNull(range3);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(3742.3387732, range3.getLength(), 0.01);
      assertEquals(3742.3387732, range3.getLowerBound(), 0.01);
      assertEquals(7484.6775464, range3.getUpperBound(), 0.01);
      assertEquals(5613.5081598, range3.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-496.5459656187), 3742.3387732, "Null 'dataset' argument.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(integer0));
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[300]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[300]", stack0.toString());
      assertEquals((-497.0459656187), range0.getLowerBound(), 0.01);
      assertEquals((-496.0459656187), range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-496.5459656187), range0.getCentralValue(), 0.01);
      assertTrue(stack0.contains(integer0));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-496.5459656187), range1.getCentralValue(), 0.01);
      assertEquals((-496.0459656187), range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-497.0459656187), range1.getLowerBound(), 0.01);
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, false);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[300]", stack0.toString());
      assertEquals((-496.5459656187), range2.getCentralValue(), 0.01);
      assertEquals((-496.5459656187), range2.getUpperBound(), 0.01);
      assertEquals((-496.5459656187), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertTrue(stack0.contains(integer0));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.dataWxy.DefaultXYZDataseK", "org.jfree.dataWxy.DefaultXYZDataseK", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(652.9504716864866, 652.9504716864866, "org.jfree.dataWxy.DefaultXYZDataseK");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(integer0));
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals("[300]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(integer0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals("[300]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(652.9504716864866, range0.getCentralValue(), 0.01);
      assertEquals(652.4504716864866, range0.getLowerBound(), 0.01);
      assertEquals(653.4504716864866, range0.getUpperBound(), 0.01);
      assertTrue(stack0.contains(integer0));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(653.4504716864866, range1.getUpperBound(), 0.01);
      assertEquals(652.4504716864866, range1.getLowerBound(), 0.01);
      assertEquals(652.9504716864866, range1.getCentralValue(), 0.01);
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, true);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertNotNull(range2);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals("[300]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(653.4504716864866, range2.getUpperBound(), 0.01);
      assertEquals(652.9504716864866, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getLength(), 0.01);
      assertEquals(652.4504716864866, range2.getLowerBound(), 0.01);
      assertTrue(stack0.contains(integer0));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(0.0, 3742.3387732, "Series 3");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(integer0));
      
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer1);
      assertEquals(300, (int)integer1);
      
      boolean boolean0 = stack0.add(integer1);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[300]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[300]", stack0.toString());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains(integer0));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.5, range1.getUpperBound(), 0.01);
      assertEquals((-0.5), range1.getLowerBound(), 0.01);
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, false);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotNull(range2);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[300]", stack0.toString());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertTrue(stack0.contains(integer0));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-1.0), 1.0, "Series 3");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(integer0));
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[300]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(integer0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[300]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertTrue(stack0.contains(integer0));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-0.5), range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-1.5), range1.getLowerBound(), 0.01);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, stack0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("org.jfree.data.xy.DefaultXYZDataset", "org.jfree.data.xy.DefaultXYZDataset", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      defaultCategoryDataset0.addValue(80.6, (Comparable) "org.jfree.data.xy.DefaultXYZDataset", (Comparable) "org.jfree.data.xy.DefaultXYZDataset");
      assertEquals(2, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, (-2799));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2799), categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2799), categoryToPieDataset0.getExtractIndex());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, doubleArray0.length);
      
      Integer integer0 = new Integer((-2799));
      assertNotNull(integer0);
      assertEquals((-2799), (int)integer0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, false);
      assertNotNull(range0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2799), categoryToPieDataset0.getExtractIndex());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(40.3, range0.getCentralValue(), 0.01);
      assertEquals(80.6, range0.getUpperBound(), 0.01);
      assertEquals(80.6, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1689.942914;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 610.505715;
      doubleArray1[4] = 1428.178105631;
      doubleArray1[5] = 4074.638;
      doubleArray1[6] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1428.178105631;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 1689.942914;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 1428.178105631;
      doubleArray3[4] = (-763.82743757);
      doubleArray3[5] = 1428.178105631;
      doubleArray3[6] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 390.63996;
      doubleArray4[2] = 1428.178105631;
      doubleArray4[3] = 610.505715;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = 2280.6807595571795;
      doubleArray6[1] = 1689.942914;
      doubleArray6[2] = 390.63996;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = 1.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = Double.NEGATIVE_INFINITY;
      doubleArray7[3] = 1.0;
      doubleArray7[4] = 610.505715;
      doubleArray7[5] = 0.0;
      doubleArray7[6] = 2146.762446544426;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      
      doubleArray8[0] = Double.NEGATIVE_INFINITY;
      doubleArray8[1] = Double.NEGATIVE_INFINITY;
      doubleArray8[2] = 1355.862;
      doubleArray8[3] = 0.0;
      doubleArray8[4] = 0.0;
      doubleArray8[5] = 0.0;
      doubleArray8[6] = Double.POSITIVE_INFINITY;
      doubleArray8[7] = 0.0;
      doubleArray8[8] = 1.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[3];
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      
      doubleArray9[0] = Double.NEGATIVE_INFINITY;
      doubleArray9[1] = 2280.6807595571795;
      doubleArray9[2] = 1689.942914;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-3507), 426);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(426, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-3507), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      TaskSeries taskSeries0 = new TaskSeries("Series 4");
      assertNotNull(taskSeries0);
      assertTrue(taskSeries0.getNotify());
      assertNull(taskSeries0.getDescription());
      assertEquals(0, taskSeries0.getItemCount());
      
      taskSeriesCollection0.add(taskSeries0);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeries0.getNotify());
      assertNull(taskSeries0.getDescription());
      assertEquals(0, taskSeries0.getItemCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[8];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("L8XVwKc", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-0.8643919888), (-0.8643919888), "*W{60 OO-r$@");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-0.8643919888), range0.getCentralValue(), 0.01);
      assertEquals((-1.3643919888), range0.getLowerBound(), 0.01);
      assertEquals((-0.3643919888), range0.getUpperBound(), 0.01);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals((-1.3643919888), number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1.3643919888), range1.getLowerBound(), 0.01);
      assertEquals((-0.3643919888), range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-0.8643919888), range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[1] = 0.0;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-14.36), 1068.975660267, "Series 3");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(integer0));
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[300]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[300]", stack0.toString());
      assertEquals((-14.36), range0.getCentralValue(), 0.01);
      assertEquals((-14.36), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-14.36), range0.getUpperBound(), 0.01);
      assertTrue(stack0.contains(integer0));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-14.86), range1.getLowerBound(), 0.01);
      assertEquals((-13.86), range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-14.36), range1.getCentralValue(), 0.01);
      
      Number[][] numberArray0 = new Number[2][6];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) 0.0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 0.0;
      numberArray2[1] = (Number) 0.0;
      numberArray2[2] = (Number) 0.0;
      numberArray2[3] = (Number) integer0;
      numberArray2[4] = (Number) 0.0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Series 2", "Series 2", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      categoryToPieDataset0.validateObject();
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1, 0.0);
      assertNotNull(powerFunction2D0);
      assertEquals(1.0, powerFunction2D0.getA(), 0.01);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "L8X$wKG", 0.0, 1);
      assertNotNull(pieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Number[][] numberArray0 = new Number[21][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(21, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(21, numberArray0.length);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 0);
      assertNotNull(categoryToPieDataset0);
      assertEquals(21, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(21, numberArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) hour0, (-2534.233652359819));
      assertNotNull(pieDataset0);
      assertEquals(21, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(21, numberArray0.length);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) hour0, (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(21, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(21, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(21, numberArray0.length);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      PolynomialFunction2D polynomialFunction2D0 = null;
      try {
        polynomialFunction2D0 = new PolynomialFunction2D((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'coefficients' argument
         //
         verifyException("org.jfree.data.function.PolynomialFunction2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[-30000]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(integer0));
      
      Stack<DefaultStatisticalCategoryDataset> stack1 = new Stack<DefaultStatisticalCategoryDataset>();
      assertNotNull(stack1);
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = new Range((-1.7976931348623157E308), (-3507));
      assertNotNull(range0);
      assertEquals((-8.988465674311579E307), range0.getCentralValue(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getLength(), 0.01);
      assertEquals((-3507.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getLowerBound(), 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(integer0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[-30000]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals((-8.988465674311579E307), range0.getCentralValue(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getLength(), 0.01);
      assertEquals((-3507.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getLowerBound(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(stack0.contains(integer0));
      assertFalse(stack0.contains((-3507)));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-3092.76434046607);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 0.8;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2349.84920290613);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-2349.84920290613);
      doubleArray3[1] = (-3092.76434046607);
      doubleArray3[2] = 1.0;
      doubleArray3[3] = (-3092.76434046607);
      doubleArray3[4] = (-17.94836204073299);
      doubleArray3[5] = 1757.21740123488;
      doubleArray0[0] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8XVwKc", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-2799));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2799), categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2799), categoryToPieDataset0.getExtractIndex());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3, doubleArray0.length);
      
      Integer integer0 = new Integer(301);
      assertNotNull(integer0);
      assertEquals(301, (int)integer0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, list0, false);
      assertNotNull(range0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2799), categoryToPieDataset0.getExtractIndex());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(4849.98174170095, range0.getLength(), 0.01);
      assertEquals(1757.21740123488, range0.getUpperBound(), 0.01);
      assertEquals((-667.7734696155949), range0.getCentralValue(), 0.01);
      assertEquals((-3092.76434046607), range0.getLowerBound(), 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals("[300]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(integer0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, true);
      assertNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals("[300]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(integer0));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Comparable<Short>[] comparableArray0 = (Comparable<Short>[]) Array.newInstance(Comparable.class, 1);
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      comparableArray0[0] = (Comparable<Short>) year0;
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 9999;
      doubleArray1[1] = (double) 9999;
      doubleArray1[2] = (double) (-9999);
      doubleArray1[3] = (double) (-9999);
      doubleArray1[4] = (double) 9999;
      doubleArray1[5] = (double) 9999;
      doubleArray1[6] = (double) 9999;
      doubleArray1[7] = (double) (-9999);
      doubleArray1[8] = (double) (-9999);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1304.835387370141);
      doubleArray2[1] = (double) (-9999);
      doubleArray2[2] = (double) 9999;
      doubleArray2[3] = (double) (-9999);
      doubleArray2[4] = (double) (-9999);
      doubleArray2[5] = 429.39062306728;
      doubleArray2[6] = (double) (-9999);
      doubleArray2[7] = (double) (-9999);
      doubleArray2[8] = 0.0;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(integer0));
      
      categoryTableXYDataset0.add((Number) integer0, (Number) integer0, "org.jfree.data.time.FixedMillisecond", true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-2620.4360227065413));
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2620.4360227065413), range0.getCentralValue(), 0.01);
      assertEquals((-2620.4360227065413), range0.getUpperBound(), 0.01);
      assertEquals((-2620.4360227065413), range0.getLowerBound(), 0.01);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-0.5), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.5, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      assertNull(number1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(number0, number0, "DerieM 1", false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 1.0);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[3][7];
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray0[5] = 0.0;
      doubleArray2[2] = (-946.4878813880621);
      doubleArray2[3] = 3386.2381899727557;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray1.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      TableOrder tableOrder1 = TableOrder.BY_COLUMN;
      assertSame(tableOrder1, tableOrder0);
      assertNotNull(tableOrder1);
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder1, 2);
      assertNotNull(categoryToPieDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray1.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      XYDataset xYDataset0 = null;
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1659.23590296;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 1343.0;
      doubleArray1[3] = (-2070.842933442);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = (-2070.842933442);
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-2070.842933442);
      doubleArray3[1] = 1343.0;
      doubleArray3[2] = 1343.0;
      doubleArray3[3] = 1343.0;
      doubleArray3[4] = (-2070.842933442);
      doubleArray3[5] = Double.NEGATIVE_INFINITY;
      doubleArray3[6] = 691.71;
      doubleArray3[7] = 1659.23590296;
      doubleArray3[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray4[1] = 691.71;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 1343.0;
      doubleArray4[4] = 1659.23590296;
      doubleArray4[5] = 1343.0;
      doubleArray4[6] = 691.71;
      doubleArray4[7] = (-2070.842933442);
      doubleArray4[8] = 1659.23590296;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[300]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[300]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNull(range1);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[300]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNull(range2);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[300]", stack0.toString());
      assertTrue(stack0.contains(integer0));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(defaultMultiValueCategoryDataset0));
      
      linkedList0.addFirst(defaultMultiValueCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(defaultMultiValueCategoryDataset0));
      
      Vector<Short> vector0 = new Vector<Short>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Short short0 = new Short((short) (-1737));
      assertNotNull(short0);
      assertEquals((short) (-1737), (short)short0);
      
      boolean boolean0 = vector0.add(short0);
      assertTrue(boolean0);
      assertEquals("[-1737]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(short0));
      
      boolean boolean1 = vector0.add(short0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[-1737, -1737]", vector0.toString());
      assertTrue(vector0.contains(short0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[-1737, -1737]", vector0.toString());
      assertTrue(vector0.contains(short0));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(integer0));
      
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(100, (int)integer1);
      
      boolean boolean0 = stack0.add(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[100]", stack0.toString());
      assertTrue(stack0.contains(integer1));
      assertFalse(stack0.contains(integer0));
      
      TimeSeries timeSeries0 = new TimeSeries(integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("GMT-18:00", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertFalse(integer0.equals((Object)integer1));
      assertNotNull(timeSeriesCollection0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Number[][] numberArray0 = new Number[8][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      TableOrder tableOrder1 = TableOrder.BY_COLUMN;
      assertNotSame(tableOrder1, tableOrder0);
      assertFalse(tableOrder1.equals((Object)tableOrder0));
      assertNotNull(tableOrder1);
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder1, (-2799));
      assertFalse(tableOrder1.equals((Object)tableOrder0));
      assertNotNull(categoryToPieDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      assertEquals((-2799), categoryToPieDataset0.getExtractIndex());
      assertEquals(8, numberArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotSame(tableOrder1, tableOrder0);
      assertFalse(tableOrder1.equals((Object)tableOrder0));
      assertNotNull(list0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      assertEquals((-2799), categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertEquals(8, numberArray0.length);
      
      Integer integer0 = new Integer((-2143735867));
      assertNotNull(integer0);
      assertEquals((-2143735867), (int)integer0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, false);
      assertNotSame(tableOrder1, tableOrder0);
      assertFalse(tableOrder1.equals((Object)tableOrder0));
      assertNull(range0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      assertEquals((-2799), categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertEquals(8, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 420, 420);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(420, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(420, slidingCategoryDataset0.getFirstCategoryIndex());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingCategoryDataset0, tableOrder0, 420);
      assertNotNull(categoryToPieDataset0);
      assertEquals(420, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(420, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(420, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      MockDate mockDate0 = new MockDate((-9223372036854775808L));
      assertNotNull(mockDate0);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(vectorSeriesCollection0, false);
      assertNotNull(intervalXYDelegate0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      defaultKeyedValues2DDataset0.removeChangeListener(intervalXYDelegate0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      boolean boolean0 = vectorSeriesCollection0.hasListener(intervalXYDelegate0);
      assertFalse(boolean0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-9223372036854775808L), (-9223372036854775808L), (-1.0), (-9223372036854775808L), (-710.5914200501489));
      assertNotNull(oHLCDataItem0);
      assertEquals("Sun Dec 02 16:47:04 GMT 292269055", mockDate0.toString());
      
      Number number0 = oHLCDataItem0.getClose();
      assertNotNull(number0);
      assertEquals((-9.223372036854776E18), number0);
      assertEquals("Sun Dec 02 16:47:04 GMT 292269055", mockDate0.toString());
      
      defaultKeyedValues2DDataset0.addValue(number0, (Comparable) oHLCDataItem0, (Comparable) mockDate0);
      assertEquals("Sun Dec 02 16:47:04 GMT 292269055", mockDate0.toString());
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertFalse(number1.equals((Object)number0));
      assertNotNull(number1);
      assertEquals(0.0, number1);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) vectorSeriesCollection0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals((-9.223372036854776E18), range0.getLowerBound(), 0.01);
      assertEquals(9.223372036854776E18, range0.getLength(), 0.01);
      assertEquals((-4.6116860184273879E18), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals((-9.223372036854776E18), range1.getCentralValue(), 0.01);
      assertEquals((-9.223372036854776E18), range1.getUpperBound(), 0.01);
      assertEquals((-9.223372036854776E18), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals("[100]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(integer0));
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.7976931348623157E308), (-1.7976931348623157E308));
      assertNotNull(powerFunction2D0);
      assertEquals((-1.7976931348623157E308), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.7976931348623157E308), powerFunction2D0.getB(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 1.0, 273.453326112, 424, integer0);
      assertNotNull(xYSeriesCollection0);
      assertEquals((-1.7976931348623157E308), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.7976931348623157E308), powerFunction2D0.getB(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals((-1.7976931348623157E308), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.7976931348623157E308), powerFunction2D0.getB(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(137.226663056, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(273.453326112, range0.getLength(), 0.01);
      assertEquals(273.953326112, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.shift(range0, 273.453326112);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals((-1.7976931348623157E308), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.7976931348623157E308), powerFunction2D0.getB(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(137.226663056, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(273.453326112, range0.getLength(), 0.01);
      assertEquals(273.953326112, range0.getUpperBound(), 0.01);
      assertEquals(273.453326112, range1.getLength(), 0.01);
      assertEquals(273.953326112, range1.getLowerBound(), 0.01);
      assertEquals(547.406652224, range1.getUpperBound(), 0.01);
      assertEquals(410.679989168, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-1223.39153331), 1.5, "org.jfree.data.statistics.HistogramDataset");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.5, range0.getCentralValue(), 0.01);
      assertEquals(1.5, range0.getLowerBound(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range2.getLength(), 0.01);
      assertEquals((-1223.89153331), range2.getLowerBound(), 0.01);
      assertEquals((-1223.39153331), range2.getCentralValue(), 0.01);
      assertEquals((-1222.89153331), range2.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[3][7];
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray0[5] = 0.0;
      doubleArray2[3] = 3386.2381899727557;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, doubleArray1.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      TableOrder tableOrder1 = TableOrder.BY_COLUMN;
      assertSame(tableOrder1, tableOrder0);
      assertNotNull(tableOrder1);
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder1, 2);
      assertNotNull(categoryToPieDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray1.length);
      
      CategoryToPieDataset categoryToPieDataset1 = (CategoryToPieDataset)categoryToPieDataset0.clone();
      assertSame(tableOrder1, tableOrder0);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertNotNull(categoryToPieDataset1);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, categoryToPieDataset1.getExtractIndex());
      assertEquals(3, doubleArray1.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) 0.0, 0.0, 2);
      assertSame(tableOrder1, tableOrder0);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertNotNull(defaultPieDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[8];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("L8X$wKG", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultHighLowDataset0.setGroup(datasetGroup0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Date[] dateArray0 = new Date[20];
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = 5757.082519936;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 5757.082519936;
      doubleArray2[1] = 5757.082519936;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 5757.082519936;
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = 5757.082519936;
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray3[4] = 5757.082519936;
      doubleArray3[5] = Double.NEGATIVE_INFINITY;
      doubleArray3[6] = 5757.082519936;
      doubleArray3[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      doubleArray0[3] = doubleArray3;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) dateArray0, (Comparable[]) dateArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 2);
      double[][] doubleArray0 = new double[2][7];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2348, 2348, 1);
      assertNotNull(mockDate0);
      
      mockDate0.setTime(8L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Short short0 = Short.valueOf((short)212);
      assertNotNull(short0);
      assertEquals((short)212, (short)short0);
      
      boolean boolean0 = stack0.add(short0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[212]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains((short)212));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals("[212]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains((short)212));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      String string0 = "org.jfree.data.statistics.HistogramDataset";
      categoryTableXYDataset0.add((-1223.39153331), (-1223.39153331), "org.jfree.data.statistics.HistogramDataset");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1223.39153331), range0.getCentralValue(), 0.01);
      assertEquals((-1223.39153331), range0.getLowerBound(), 0.01);
      assertEquals((-1223.39153331), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1223.39153331));
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1223.39153331, range1.getLength(), 0.01);
      assertEquals((-2446.78306662), range1.getLowerBound(), 0.01);
      assertEquals((-1835.087299965), range1.getCentralValue(), 0.01);
      assertEquals((-1223.39153331), range1.getUpperBound(), 0.01);
      
      Comparable<DefaultOHLCDataset>[] comparableArray0 = (Comparable<DefaultOHLCDataset>[]) Array.newInstance(Comparable.class, 9);
      // Undeclared exception!
      try { 
        Year.parseYear("org.jfree.data.statistics.HistogramDataset");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse string.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(4378.86, 4378.86, "Series 4");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(4378.86, range0.getCentralValue(), 0.01);
      assertEquals(4379.36, range0.getUpperBound(), 0.01);
      assertEquals(4378.36, range0.getLowerBound(), 0.01);
      
      Stack<JSpinner.DefaultEditor> stack0 = new Stack<JSpinner.DefaultEditor>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(4378.36, number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertFalse(number1.equals((Object)number0));
      assertNotNull(number1);
      assertEquals(4378.86, number1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) histogramDataset0, true);
      assertNull(range1);
      assertEquals(0, histogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      Year year0 = new Year(mockDate0, timeZone0, locale0);
      assertNotNull(year0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Date[] dateArray0 = new Date[3];
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      dateArray0[0] = date0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (double) 9999;
      doubleArray1[2] = (double) (-9999);
      doubleArray1[3] = 5757.082519936;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = (double) 9999;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(year0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 9999.0, (-9999.0), 5757.082519936, 1.0, 9999.0}, doubleArray1, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(3, dateArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, (-1.0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(xYBarDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals((-1.0), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 9999.0, (-9999.0), 5757.082519936, 1.0, 9999.0}, doubleArray1, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(3, dateArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 9999.0, (-9999.0), 5757.082519936, 1.0, 9999.0}, doubleArray1, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(3, dateArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(xYBarDataset0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(number1.equals((Object)number0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(number1);
      assertEquals(1.3924092813205E12, number1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals((-1.0), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 9999.0, (-9999.0), 5757.082519936, 1.0, 9999.0}, doubleArray1, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(3, dateArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(4378.86, (-4687.9), "~BYg#vKrFU^ib");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-3491));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Number[][] numberArray0 = new Number[8][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 1568);
      assertNotNull(categoryToPieDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1568, categoryToPieDataset0.getExtractIndex());
      assertEquals(8, numberArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1568, categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(8, numberArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, hour0.getFirstMillisecond());
      assertEquals(0, hour0.getHour());
      assertEquals(0L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(0, 9.8809536349);
      assertNotNull(lineFunction2D0);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(9.8809536349, lineFunction2D0.getSlope(), 0.01);
      
      MockDate mockDate1 = new MockDate(0, 23, 23);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      Instant instant0 = mockDate1.toInstant();
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(instant0);
      assertEquals("Mon Dec 23 00:00:00 GMT 1901", mockDate1.toString());
      
      long long0 = MockDate.UTC(169, 0, (-709), 23, (-709), 0);
      assertEquals(3062920260000L, long0);
      
      Date[] dateArray0 = new Date[1];
      Instant instant1 = mockDate1.toInstant();
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(instant1, instant0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertTrue(instant1.equals((Object)instant0));
      assertNotNull(instant1);
      assertEquals("Mon Dec 23 00:00:00 GMT 1901", mockDate1.toString());
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 23;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(instant0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertTrue(instant0.equals((Object)instant1));
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Mon Dec 23 00:00:00 GMT 1901", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {23.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(instant0, instant1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertTrue(instant0.equals((Object)instant1));
      assertNotNull(range0);
      assertEquals("Mon Dec 23 00:00:00 GMT 1901", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {23.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.xy.DefaultXYZDataset", "org.jfree.data.xy.DefaultXYZDataset", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-2800));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2800), categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-2800), categoryToPieDataset0.getExtractIndex());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3, doubleArray0.length);
      
      Integer integer0 = new Integer((-2800));
      assertNotNull(integer0);
      assertEquals((-2800), (int)integer0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(3819.96718987, 1.0);
      assertNotNull(lineFunction2D0);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(3819.96718987, lineFunction2D0.getIntercept(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 0.0, 6.283185307179586, 10, "L8X$wKG");
      assertNotNull(xYSeries0);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(3819.96718987, lineFunction2D0.getIntercept(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(3819.96718987, xYSeries0.getMinY(), 0.01);
      assertEquals(6.283185307179586, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(10, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(3826.2503751771796, xYSeries0.getMaxY(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(3819.96718987, lineFunction2D0.getIntercept(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(3819.96718987, xYSeries0.getMinY(), 0.01);
      assertEquals(6.283185307179586, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(10, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(3826.2503751771796, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(3819.96718987, lineFunction2D0.getIntercept(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(3819.96718987, xYSeries0.getMinY(), 0.01);
      assertEquals(6.283185307179586, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(10, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(3826.2503751771796, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(3826.2503751771796, range0.getUpperBound(), 0.01);
      assertEquals(3819.96718987, range0.getLowerBound(), 0.01);
      assertEquals(3823.10878252359, range0.getCentralValue(), 0.01);
      assertEquals(6.283185307179792, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(3819.96718987, lineFunction2D0.getIntercept(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(3819.96718987, xYSeries0.getMinY(), 0.01);
      assertEquals(6.283185307179586, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(10, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(3826.2503751771796, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(7.283185307179586, range1.getLength(), 0.01);
      assertEquals((-0.5), range1.getLowerBound(), 0.01);
      assertEquals(6.783185307179586, range1.getUpperBound(), 0.01);
      assertEquals(3.141592653589793, range1.getCentralValue(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(xYSeriesCollection0);
      assertNotNull(number0);
      assertEquals(6.783185307179586, number0);
      assertEquals(1.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(3819.96718987, lineFunction2D0.getIntercept(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(3819.96718987, xYSeries0.getMinY(), 0.01);
      assertEquals(6.283185307179586, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(10, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(3826.2503751771796, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Number[][] numberArray0 = new Number[0][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, numberArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (-233));
      assertNotNull(pieDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, numberArray0.length);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "L8X$wKG", (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, numberArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNull(range2);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (short)872;
      doubleArray1[1] = 2748.06;
      doubleArray1[2] = (double) (short)872;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = (double) (short)872;
      doubleArray1[5] = (double) (short)872;
      doubleArray1[6] = (double) (short)872;
      doubleArray1[7] = (double) (short)872;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1399.95496;
      doubleArray2[1] = 2748.06;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = Double.POSITIVE_INFINITY;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = (double) (short)872;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1399.95496;
      doubleArray3[1] = 2748.06;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray3[3] = 2748.06;
      doubleArray3[4] = (double) (short)872;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "FW/Y", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Stack<JSpinner.DefaultEditor> stack0 = new Stack<JSpinner.DefaultEditor>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNotNull(range1);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(872.0, range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Date[] dateArray0 = new Date[20];
      double[] doubleArray0 = new double[5];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("L8X$wKG", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(20, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Short short0 = new Short((short)872);
      assertNotNull(short0);
      assertEquals((short)872, (short)short0);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(short0));
      
      boolean boolean0 = vector0.add(short0);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals("[872]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(short0));
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertNotNull(taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = new Range(2773.2, 2985.908752);
      assertNotNull(range0);
      assertEquals(2879.554376, range0.getCentralValue(), 0.01);
      assertEquals(2985.908752, range0.getUpperBound(), 0.01);
      assertEquals(212.708752, range0.getLength(), 0.01);
      assertEquals(2773.2, range0.getLowerBound(), 0.01);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) histogramDataset0, (List) vector0, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-4070), 48);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals((-4070), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(48, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-1222.89), 600.5, 853, "L8X$wKG");
      assertNotNull(xYSeriesCollection0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1824.39, range0.getLength(), 0.01);
      assertEquals((-1223.39), range0.getLowerBound(), 0.01);
      assertEquals((-311.19500000000005), range0.getCentralValue(), 0.01);
      assertEquals(601.0, range0.getUpperBound(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      Stack<JSpinner.DefaultEditor> stack0 = new Stack<JSpinner.DefaultEditor>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) xYSeriesCollection0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotNull(range2);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(601.0, range2.getUpperBound(), 0.01);
      assertEquals((-1223.39), range2.getLowerBound(), 0.01);
      assertEquals(1824.39, range2.getLength(), 0.01);
      assertEquals((-311.19500000000005), range2.getCentralValue(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(200, (int)integer1);
      
      boolean boolean0 = stack0.add(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[200]", stack0.toString());
      assertFalse(stack0.contains(integer0));
      assertTrue(stack0.contains(integer1));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, true);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[200]", stack0.toString());
      assertFalse(stack0.contains(integer0));
      assertTrue(stack0.contains(integer1));
      
      double double0 = 600.5;
      Function2D function2D0 = null;
      double double1 = (-802.4021);
      // Undeclared exception!
      try { 
        timeTableXYDataset0.getStartY(313, (-2440));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = 5757.082519936;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("L8X$wKG", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 5757.082519936, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, 0.0);
      assertNotNull(xYBarDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 5757.082519936, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 5757.082519936, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(xYBarDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      ArrayList<DefaultStatisticalCategoryDataset> arrayList0 = new ArrayList<DefaultStatisticalCategoryDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      HashSet<DefaultStatisticalCategoryDataset> hashSet0 = new HashSet<DefaultStatisticalCategoryDataset>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = arrayList0.containsAll(hashSet0);
      assertTrue(boolean0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, false);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      double[][] doubleArray0 = new double[0][0];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("K%2c +KfP55z@b0Dix", "%M[yL", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 482.36820098, 853, 853, "%M[yL");
      assertNotNull(xYSeriesCollection0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(481.86820098, range0.getLowerBound(), 0.01);
      assertEquals(371.63179902, range0.getLength(), 0.01);
      assertEquals(667.68410049, range0.getCentralValue(), 0.01);
      assertEquals(853.5, range0.getUpperBound(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      Stack<JSpinner.DefaultEditor> stack0 = new Stack<JSpinner.DefaultEditor>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      List list0 = keyToGroupMap0.getGroups();
      assertNotNull(list0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, keyToGroupMap0);
      assertNull(range1);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) xYSeriesCollection0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      Double double1 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Short short0 = new Short((short)872);
      assertNotNull(short0);
      assertEquals((short)872, (short)short0);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains((short)872));
      
      boolean boolean0 = vector0.add(short0);
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[872]", vector0.toString());
      assertTrue(vector0.contains((short)872));
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertNotNull(taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[872]", vector0.toString());
      assertTrue(vector0.contains((short)872));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertEquals("[300]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(integer0));
      
      Stack<DefaultStatisticalCategoryDataset> stack1 = new Stack<DefaultStatisticalCategoryDataset>();
      assertNotNull(stack1);
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean1 = stack1.add(defaultStatisticalCategoryDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.contains(defaultStatisticalCategoryDataset0));
      
      Range range0 = new Range(Double.NEGATIVE_INFINITY, (-1.0));
      assertNotNull(range0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, false);
      assertNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals("[300]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertTrue(stack0.contains(integer0));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 416);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(4378.86, 4184.644580525827, "Series 4");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 416);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 416, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(1.5, 1.5);
      assertNotNull(lineFunction2D0);
      assertEquals(1.5, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1.5, lineFunction2D0.getIntercept(), 0.01);
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Minute minute1 = (Minute)minute0.next();
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute1.equals((Object)minute0));
      assertNotNull(minute1);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(22, minute1.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 1.5, 2261.7588173831464, 837, minute0);
      assertNotSame(minute0, minute1);
      assertFalse(minute0.equals((Object)minute1));
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.5, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1.5, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertNotSame(minute0, minute1);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(boolean0);
      assertEquals(1.5, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1.5, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 46);
      assertEquals(0.0, double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(minute0, minute1);
      assertFalse(minute0.equals((Object)minute1));
      assertNotNull(range0);
      assertEquals(1.5, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1.5, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(3.75, range0.getLowerBound(), 0.01);
      assertEquals(3390.3882260747196, range0.getLength(), 0.01);
      assertEquals(1698.9441130373598, range0.getCentralValue(), 0.01);
      assertEquals(3394.1382260747196, range0.getUpperBound(), 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("Series 2", "", "Q=&?4d][xya", "org.jfree.data.xy.MatrixSeriesCollection");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      assertNotNull(datasetChangeInfo0);
      
      MockDate mockDate0 = new MockDate(12, (-2580), (-2580), (-2580), 12);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(12);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      Instant instant0 = mockDate1.toInstant();
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(instant0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 12;
      doubleArray0[1] = 1721.35451806;
      doubleArray0[2] = (double) (-2580);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 1721.35451806, (-2580.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(number0);
      assertEquals((-8.84722968E12), number0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 1721.35451806, (-2580.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(range0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-8.84722968E12), range0.getLowerBound(), 0.01);
      assertEquals((-8.84722968E12), range0.getCentralValue(), 0.01);
      assertEquals((-8.84722968E12), range0.getUpperBound(), 0.01);
      assertArrayEquals(new double[] {0.0, 1721.35451806, (-2580.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, false);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNull(range1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-8.84722968E12), range0.getLowerBound(), 0.01);
      assertEquals((-8.84722968E12), range0.getCentralValue(), 0.01);
      assertEquals((-8.84722968E12), range0.getUpperBound(), 0.01);
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 1721.35451806, (-2580.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, false);
      assertNotSame(range2, range0);
      assertNotSame(mockDate1, mockDate0);
      assertTrue(range2.equals((Object)range0));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(range2);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-8.84722968E12), range2.getCentralValue(), 0.01);
      assertEquals((-8.84722968E12), range2.getLowerBound(), 0.01);
      assertEquals((-8.84722968E12), range2.getUpperBound(), 0.01);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 1721.35451806, (-2580.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(365, 184);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(183, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("L8X$wKG");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
      assertNull(number0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      jDBCPieDataset0.setValue((Comparable) "L8X$wKG", Double.POSITIVE_INFINITY);
      double double0 = DatasetUtilities.calculatePieDatasetTotal(jDBCPieDataset0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) xIntervalSeriesCollection0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-2800));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2800), categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2800), categoryToPieDataset0.getExtractIndex());
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3, doubleArray0.length);
      
      int int0 = categoryToPieDataset0.getItemCount();
      assertEquals(7, int0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2800), categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      int int1 = categoryToPieDataset0.getItemCount();
      assertTrue(int1 == int0);
      assertEquals(7, int1);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2800), categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      Integer integer0 = new Integer((-2800));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals((-2800), (int)integer0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 6.283185307179586;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 6.283185307179586;
      doubleArray2[1] = 6.283185307179586;
      doubleArray2[2] = 6.283185307179586;
      doubleArray2[3] = 6.283185307179586;
      doubleArray2[4] = 6.283185307179586;
      doubleArray2[5] = 6.283185307179586;
      doubleArray2[6] = 6.283185307179586;
      doubleArray2[7] = 6.283185307179586;
      doubleArray2[8] = 6.283185307179586;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("L8X$wKG", dateArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.283185307179586}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586}, doubleArray2, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      
      defaultHighLowDataset0.clearSelection();
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.283185307179586}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586}, doubleArray2, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (6.283185307179586) <= upper (0.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 4524.453103;
      doubleArray1[1] = 4925.3321;
      doubleArray1[2] = (-1341.918909);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "@ *TR", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(1791.7065954999998, range0.getCentralValue(), 0.01);
      assertEquals(4925.3321, range0.getUpperBound(), 0.01);
      assertEquals(6267.251009, range0.getLength(), 0.01);
      assertEquals((-1341.918909), range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      TaskSeries taskSeries0 = new TaskSeries("");
      assertNotNull(taskSeries0);
      assertTrue(taskSeries0.getNotify());
      assertEquals(0, taskSeries0.getItemCount());
      assertNull(taskSeries0.getDescription());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3114.59186;
      doubleArray0[2] = 2127.0555;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0, 3114.59186, 2127.0555}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-1056.5735074329941), 0.0, 853, 0.0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 3114.59186, 2127.0555}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-1057.0735074329941), range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals((-528.2867537164971), range0.getCentralValue(), 0.01);
      assertEquals(1057.5735074329941, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {0.0, 3114.59186, 2127.0555}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[][] doubleArray1 = new double[2][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", (String) null, doubleArray1);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      assertNotNull(datasetChangeInfo0);
      
      MockDate mockDate0 = new MockDate(12, (-2580), (-2580), (-2580), 12);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(12);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      Instant instant0 = mockDate1.toInstant();
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(instant0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[3];
      mockDate1.setTime(1L);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = 1721.35451806;
      doubleArray0[2] = (double) 12;
      Object object0 = mockDate0.clone();
      assertNotSame(mockDate0, object0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(object0, mockDate1);
      assertNotSame(object0, mockDate0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertTrue(object0.equals((Object)mockDate0));
      assertFalse(object0.equals((Object)mockDate1));
      assertNotNull(object0);
      assertEquals("Mon Aug 22 12:12:00 GMT 1689", mockDate0.toString());
      assertEquals("Mon Aug 22 12:12:00 GMT 1689", object0.toString());
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertFalse(mockDate1.equals((Object)object0));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {12.0, 1721.35451806, 12.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertNotSame(mockDate1, object0);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)object0));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(number0);
      assertEquals((-8.84722968E12), number0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {12.0, 1721.35451806, 12.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("L8X$wKG");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, false);
      assertNull(range0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) simpleHistogramDataset0);
      assertTrue(boolean0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
      assertNull(number0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(849, 194);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(193, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(193, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-5689.6);
      doubleArray1[1] = 2261.7588173831464;
      doubleArray1[2] = 0.5;
      doubleArray1[3] = 6.283185307179586;
      doubleArray1[4] = (-946.4878813880621);
      doubleArray1[5] = Double.POSITIVE_INFINITY;
      doubleArray1[6] = 1.5;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-3825.457217);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("h72TY-m", "h72TY-m", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1216);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1216, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Vector<Long> vector0 = new Vector<Long>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals((-5689.6), number0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) 0.0, 1911.2488);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1216, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Short short0 = new Short((short) (-2890));
      assertNotNull(short0);
      assertEquals((short) (-2890), (short)short0);
      
      boolean boolean0 = vector0.add(short0);
      assertTrue(boolean0);
      assertEquals("[-2890]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains(short0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertNull(range0);
      assertEquals("[-2890]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(vector0.contains(short0));
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[300]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(integer0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, false);
      assertNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[300]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(integer0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-2800));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2800), categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2800), categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertEquals(3, doubleArray0.length);
      
      Integer integer0 = new Integer((-2800));
      assertNotNull(integer0);
      assertEquals((-2800), (int)integer0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.shift(range0, 0.0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultIntervalXYDataset0, (List) list0, range1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultIntervalXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-2800));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2800), categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Vector<Long> vector0 = new Vector<Long>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) mockDate0, (-2011.05897155));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = stack0.add(defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(defaultStatisticalCategoryDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) stack0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultStatisticalCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      assertNotNull(datasetChangeInfo0);
      
      MockDate mockDate0 = new MockDate(12, (-2580), (-2580), (-2580), 12);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(12);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      Instant instant0 = mockDate1.toInstant();
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(instant0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      
      Date[] dateArray0 = new Date[16];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 12;
      doubleArray0[0] = 1721.35451806;
      doubleArray0[2] = (double) 12;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1721.35451806, 0.0, 12.0}, doubleArray0, 0.01);
      assertEquals(16, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      
      Double double0 = new Double(1721.35451806);
      assertNotNull(double0);
      assertEquals(1721.35451806, (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(defaultStatisticalCategoryDataset0));
      
      boolean boolean0 = stack0.add(defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(defaultStatisticalCategoryDataset0));
      
      arrayList0.clear();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = new Range(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertNotNull(range0);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range0, true);
      assertNull(range1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range2 = Range.scale(range0, 23.0);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range0));
      assertNotNull(range2);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range2.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range2.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range2.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      categoryToPieDataset0.validateObject();
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "L8X$wKG", 2.0, 2);
      assertNotNull(pieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "L8X$wKG";
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("L8X$wKG");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, 0.0);
      assertNotNull(lineFunction2D0);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      
      double double0 = 2.0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) "L8X$wKG", (-126.8771));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      assertNotNull(datasetChangeInfo0);
      
      MockDate mockDate0 = new MockDate(12, (-2580), (-2580), (-2580), 12);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(12);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      Instant instant0 = mockDate1.toInstant();
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(instant0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = 1721.35451806;
      doubleArray0[2] = (double) 12;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {12.0, 1721.35451806, 12.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(number0);
      assertEquals((-8.84722968E12), number0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {12.0, 1721.35451806, 12.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(range0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-8.84722968E12), range0.getCentralValue(), 0.01);
      assertEquals((-8.84722968E12), range0.getLowerBound(), 0.01);
      assertEquals((-8.84722968E12), range0.getUpperBound(), 0.01);
      assertArrayEquals(new double[] {12.0, 1721.35451806, 12.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[3];
      Integer integer0 = new Integer(4486);
      assertNotNull(integer0);
      assertEquals(4486, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      Integer integer1 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-30000), (int)integer1);
      
      numberArray1[1] = (Number) integer1;
      Integer integer2 = JLayeredPane.POPUP_LAYER;
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(300, (int)integer2);
      
      numberArray1[2] = (Number) integer2;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("4bVLR>^N3juK,", "V;W", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(34486.0, range0.getLength(), 0.01);
      assertEquals(4486.0, range0.getUpperBound(), 0.01);
      assertEquals((-30000.0), range0.getLowerBound(), 0.01);
      assertEquals((-12757.0), range0.getCentralValue(), 0.01);
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      boolean boolean0 = vector0.add((Short) null);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[4][7];
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray0[5] = 0.0;
      doubleArray2[2] = (-944.4103);
      doubleArray2[3] = (-3075.19);
      doubleArray2[4] = (-85.9);
      doubleArray2[5] = 0.0;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, doubleArray1.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      TableOrder tableOrder1 = TableOrder.BY_COLUMN;
      assertSame(tableOrder1, tableOrder0);
      assertNotNull(tableOrder1);
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder1, 2);
      assertNotNull(categoryToPieDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(4, doubleArray1.length);
      
      boolean boolean0 = categoryToPieDataset0.equals(doubleArray1[0]);
      assertSame(tableOrder1, tableOrder0);
      assertFalse(boolean0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(4, doubleArray1.length);
      
      CategoryToPieDataset categoryToPieDataset1 = (CategoryToPieDataset)categoryToPieDataset0.clone();
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertSame(tableOrder1, tableOrder0);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertNotNull(categoryToPieDataset1);
      assertEquals(2, categoryToPieDataset1.getExtractIndex());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(4, doubleArray1.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) 0.0, (-85.9), 2);
      assertSame(tableOrder1, tableOrder0);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertNotNull(defaultPieDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(4, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      double[][] doubleArray1 = new double[3][4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[0];
      doubleArray1[0] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 23.0;
      doubleArray3[1] = 2551.561;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 2551.561;
      doubleArray1[2] = doubleArray4;
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("ft", "Duplicate items in 'olumnKeys'.", doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      assertEquals(3, doubleArray1.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("L8X$wKG");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Stack<JSpinner.DefaultEditor> stack0 = new Stack<JSpinner.DefaultEditor>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset1, keyToGroupMap0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(range0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4L);
      assertNotNull(mockDate0);
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, hour0.getHour());
      assertEquals(4L, hour0.getFirstMillisecond());
      assertEquals(4L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(4L, 23);
      assertNotNull(lineFunction2D0);
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      
      MockDate mockDate1 = new MockDate(0, 0, (-3314), 0, (-3314));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate1;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate1;
      double[] doubleArray0 = new double[0];
      Instant instant0 = mockDate1.toInstant();
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(instant0);
      assertEquals("Mon Dec 01 16:46:00 GMT 1890", mockDate1.toString());
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(3, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
      assertNotSame(mockDate0, mockDate1);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotNull(number0);
      assertEquals(4.0, number0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(3, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertNotSame(mockDate0, mockDate1);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotNull(range0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.247801819998E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.49560364E12), range0.getLowerBound(), 0.01);
      assertEquals(2.495603640004E12, range0.getLength(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(3, dateArray0.length);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1034.0238554306);
      doubleArray1[1] = (-425.3766884);
      doubleArray1[2] = 210.7479703181;
      doubleArray1[3] = 0.8;
      doubleArray1[4] = 2019.02434963;
      doubleArray1[5] = Double.NEGATIVE_INFINITY;
      doubleArray1[6] = Double.NaN;
      doubleArray1[7] = 4414.1247705261;
      doubleArray1[8] = (-1101.983);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-1034.0238554306), (-425.3766884), 210.7479703181, 0.8, 2019.02434963, Double.NEGATIVE_INFINITY, Double.NaN, 4414.1247705261, (-1101.983)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-841.821755572), 1442.954, 349, 210.7479703181);
      assertNotNull(xYSeries0);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(1442.954, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(349, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals((-841.821755572), xYSeries0.getMinX(), 0.01);
      assertArrayEquals(new double[] {(-1034.0238554306), (-425.3766884), 210.7479703181, 0.8, 2019.02434963, Double.NEGATIVE_INFINITY, Double.NaN, 4414.1247705261, (-1101.983)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(1442.954, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(349, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals((-841.821755572), xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertArrayEquals(new double[] {(-1034.0238554306), (-425.3766884), 210.7479703181, 0.8, 2019.02434963, Double.NEGATIVE_INFINITY, Double.NaN, 4414.1247705261, (-1101.983)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNull(range0);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(1442.954, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(349, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals((-841.821755572), xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertArrayEquals(new double[] {(-1034.0238554306), (-425.3766884), 210.7479703181, 0.8, 2019.02434963, Double.NEGATIVE_INFINITY, Double.NaN, 4414.1247705261, (-1101.983)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4L);
      assertNotNull(mockDate0);
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(4L, hour0.getLastMillisecond());
      assertEquals(0, hour0.getHour());
      assertEquals(4L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(4L, 23);
      assertNotNull(lineFunction2D0);
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      
      MockDate mockDate1 = new MockDate((-3314), 12, 438);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate1;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate1;
      double[] doubleArray0 = new double[0];
      Instant instant0 = mockDate1.toInstant();
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(instant0);
      assertEquals("Fri Mar 13 00:00:00 GMT 1413", mockDate1.toString());
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(3, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
      assertNotSame(mockDate0, mockDate1);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotNull(number0);
      assertEquals(4.0, number0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(3, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4L);
      assertNotNull(mockDate0);
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, hour0.getHour());
      assertEquals(4L, hour0.getLastMillisecond());
      assertEquals(4L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(4L, 23);
      assertNotNull(lineFunction2D0);
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      
      int int0 = hour0.getMonth();
      assertEquals(1, int0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, hour0.getHour());
      assertEquals(4L, hour0.getLastMillisecond());
      assertEquals(4L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Month month1 = new Month(mockDate0);
      assertFalse(month1.equals((Object)month0));
      assertNotNull(month1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(1970, month1.getYearValue());
      assertEquals(1, month1.getMonth());
      assertEquals(23641L, month1.getSerialIndex());
      assertEquals(4L, month1.getFirstMillisecond());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 4L, 2680.2715878374624, 23, month1);
      assertNotSame(month1, month0);
      assertFalse(month1.equals((Object)month0));
      assertNotNull(xYSeries0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(1970, month1.getYearValue());
      assertEquals(1, month1.getMonth());
      assertEquals(23641L, month1.getSerialIndex());
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(4.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(23, xYSeries0.getItemCount());
      assertEquals(96.0, xYSeries0.getMinY(), 0.01);
      assertEquals(61650.24652026164, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2680.2715878374624, xYSeries0.getMaxX(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertFalse(month1.equals((Object)month0));
      assertNotNull(xYSeriesCollection0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(1970, month1.getYearValue());
      assertEquals(1, month1.getMonth());
      assertEquals(23641L, month1.getSerialIndex());
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(4.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(23, xYSeries0.getItemCount());
      assertEquals(96.0, xYSeries0.getMinY(), 0.01);
      assertEquals(61650.24652026164, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2680.2715878374624, xYSeries0.getMaxX(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      Number[][] numberArray0 = new Number[2][0];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 0.0;
      numberArray1[1] = (Number) 0.0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 0.0;
      numberArray2[1] = (Number) 0.0;
      numberArray2[2] = (Number) 0.0;
      numberArray2[5] = (Number) 0.0;
      numberArray2[4] = (Number) 0.0;
      numberArray2[7] = (Number) 0.0;
      numberArray2[8] = (Number) 0.0;
      numberArray0[1] = numberArray2;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(2, numberArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2, numberArray0.length);
      
      Object[][][] objectArray0 = new Object[1][5][9];
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultCategoryDataset0.setSelectionState(defaultKeyedValues2DDataset0);
      assertEquals(2, numberArray0.length);
      
      Object[][] objectArray1 = new Object[2][8];
      objectArray1[0] = (Object[]) numberArray2;
      objectArray1[1] = (Object[]) numberArray2;
      objectArray0[0] = objectArray1;
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertNotNull(defaultWindDataset0);
      assertEquals(1, defaultWindDataset0.getSeriesCount());
      assertEquals(1, objectArray0.length);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultWindDataset0);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(1, defaultWindDataset0.getSeriesCount());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1, objectArray0.length);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, true);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertNotNull(range2);
      assertEquals(1, defaultWindDataset0.getSeriesCount());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1, objectArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 312);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 312, Size: 9
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      
      XYSeries xYSeries0 = new XYSeries(month0, true, true);
      assertNotNull(xYSeries0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      
      XYSeries xYSeries1 = xYSeries0.createCopy(2007, (-1801));
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeries1);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(0, xYSeries1.getItemCount());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeriesCollection0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNull(range0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Comparable<DefaultMultiValueCategoryDataset>[] comparableArray0 = (Comparable<DefaultMultiValueCategoryDataset>[]) Array.newInstance(Comparable.class, 4);
      comparableArray0[0] = (Comparable<DefaultMultiValueCategoryDataset>) month0;
      comparableArray0[1] = (Comparable<DefaultMultiValueCategoryDataset>) month0;
      comparableArray0[2] = (Comparable<DefaultMultiValueCategoryDataset>) month0;
      comparableArray0[3] = (Comparable<DefaultMultiValueCategoryDataset>) month0;
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 2007;
      doubleArray1[1] = (double) 4L;
      doubleArray1[2] = (double) (-1801);
      doubleArray1[3] = (double) 4L;
      doubleArray1[4] = (double) 2007;
      doubleArray1[5] = (double) 2007;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 2007;
      doubleArray2[1] = (double) 2007;
      doubleArray2[2] = (double) (-1801);
      doubleArray2[3] = (double) (-1801);
      doubleArray2[4] = (double) 4L;
      doubleArray2[5] = (double) 4L;
      doubleArray2[6] = (double) 4L;
      doubleArray2[7] = (double) (-1801);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 2007;
      doubleArray3[1] = (double) 4L;
      doubleArray3[2] = 2680.2715878374624;
      doubleArray3[3] = (double) (-1801);
      doubleArray3[4] = 2680.2715878374624;
      doubleArray3[5] = 2680.2715878374624;
      doubleArray3[6] = (double) 2007;
      doubleArray3[7] = (double) 2007;
      doubleArray3[8] = (double) 2007;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 2680.2715878374624;
      doubleArray4[1] = (double) 4L;
      doubleArray4[2] = (double) 4L;
      doubleArray4[3] = (double) 2007;
      doubleArray0[3] = doubleArray4;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset1);
      
      boolean boolean0 = stack0.add(defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(defaultStatisticalCategoryDataset0));
      
      double double0 = Double.NEGATIVE_INFINITY;
      Range range0 = new Range(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultStatisticalCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[11];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, doubleArray0.length);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertEquals(10, polynomialFunction2D0.getOrder());
      assertEquals(11, doubleArray1.length);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(10, polynomialFunction2D0.getOrder());
      assertEquals(11, doubleArray1.length);
      assertEquals(11, doubleArray2.length);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2800.0), 0.0, 349, 0.0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotNull(xYSeries0);
      assertEquals(10, polynomialFunction2D0.getOrder());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals((-2800.0), xYSeries0.getMinX(), 0.01);
      assertEquals(349, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(11, doubleArray1.length);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotNull(xYSeriesCollection0);
      assertEquals(10, polynomialFunction2D0.getOrder());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals((-2800.0), xYSeries0.getMinX(), 0.01);
      assertEquals(349, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(11, doubleArray1.length);
      
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) vector0, false);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNull(range0);
      assertEquals(10, polynomialFunction2D0.getOrder());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals((-2800.0), xYSeries0.getMinX(), 0.01);
      assertEquals(349, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(11, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[11];
      doubleArray1[10] = (-0.8033551431548414);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, doubleArray0.length);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertEquals(10, polynomialFunction2D0.getOrder());
      assertEquals(11, doubleArray1.length);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2800.0), (-0.8033551431548414), 349, (-0.8033551431548414));
      assertNotNull(xYSeries0);
      assertEquals(10, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-2.379511959106035E34), xYSeries0.getMinY(), 0.01);
      assertEquals(349, xYSeries0.getItemCount());
      assertEquals((-0.08994631234338944), xYSeries0.getMaxY(), 0.01);
      assertEquals((-0.8033551431549313), xYSeries0.getMaxX(), 0.01);
      assertEquals((-2800.0), xYSeries0.getMinX(), 0.01);
      assertEquals(11, doubleArray1.length);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(10, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-2.379511959106035E34), xYSeries0.getMinY(), 0.01);
      assertEquals(349, xYSeries0.getItemCount());
      assertEquals((-0.08994631234338944), xYSeries0.getMaxY(), 0.01);
      assertEquals((-0.8033551431549313), xYSeries0.getMaxX(), 0.01);
      assertEquals((-2800.0), xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(11, doubleArray1.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(10, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-2.379511959106035E34), xYSeries0.getMinY(), 0.01);
      assertEquals(349, xYSeries0.getItemCount());
      assertEquals((-0.08994631234338944), xYSeries0.getMaxY(), 0.01);
      assertEquals((-0.8033551431549313), xYSeries0.getMaxX(), 0.01);
      assertEquals((-2800.0), xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1.1897559795530175E34), range0.getCentralValue(), 0.01);
      assertEquals((-0.08994631234338944), range0.getUpperBound(), 0.01);
      assertEquals((-2.379511959106035E34), range0.getLowerBound(), 0.01);
      assertEquals(2.379511959106035E34, range0.getLength(), 0.01);
      assertEquals(11, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      assertNotNull(datasetChangeInfo0);
      
      Number[][] numberArray0 = new Number[1][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, numberArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 8, 326);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(326, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(8, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 326, 0);
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertNotNull(slidingGanttCategoryDataset1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(326, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(8, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertEquals(326, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, false);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(326, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(8, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertNotNull(timeSeries0);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      LinkedList<DefaultStatisticalCategoryDataset> linkedList0 = new LinkedList<DefaultStatisticalCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, false);
      assertNull(range1);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 531, 531);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(531, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(531, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("ADi");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(531, 531, minute0, timeZone0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(530, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertNotNull(range0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(530, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(530, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      Date date0 = fixedMillisecond0.getTime();
      assertNotNull(date0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Date date1 = fixedMillisecond0.getEnd();
      assertNotSame(date1, date0);
      assertTrue(date1.equals((Object)date0));
      assertNotNull(date1);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) fixedMillisecond0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = stack0.add(defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(defaultStatisticalCategoryDataset0));
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNull(range0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3977.79;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {3977.79}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 488.0, 3977.79, 349, 3977.79);
      assertNotNull(xYSeries0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertEquals(3977.79, xYSeries0.getMinY(), 0.01);
      assertEquals(488.0, xYSeries0.getMinX(), 0.01);
      assertEquals(349, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(3977.79, xYSeries0.getMaxY(), 0.01);
      assertEquals(3977.79, xYSeries0.getMaxX(), 0.01);
      assertArrayEquals(new double[] {3977.79}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertEquals(3977.79, xYSeries0.getMinY(), 0.01);
      assertEquals(488.0, xYSeries0.getMinX(), 0.01);
      assertEquals(349, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(3977.79, xYSeries0.getMaxY(), 0.01);
      assertEquals(3977.79, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertArrayEquals(new double[] {3977.79}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertEquals(3977.79, xYSeries0.getMinY(), 0.01);
      assertEquals(488.0, xYSeries0.getMinX(), 0.01);
      assertEquals(349, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(3977.79, xYSeries0.getMaxY(), 0.01);
      assertEquals(3977.79, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(3977.79, range1.getCentralValue(), 0.01);
      assertEquals(3977.79, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(3977.79, range1.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {3977.79}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
      assertNotNull(range2);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertEquals(3977.79, xYSeries0.getMinY(), 0.01);
      assertEquals(488.0, xYSeries0.getMinX(), 0.01);
      assertEquals(349, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(3977.79, xYSeries0.getMaxY(), 0.01);
      assertEquals(3977.79, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(3977.79, range2.getCentralValue(), 0.01);
      assertEquals(3977.79, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(3977.79, range2.getUpperBound(), 0.01);
      assertArrayEquals(new double[] {3977.79}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotNull(defaultKeyedValuesDataset1);
      
      Number[][] numberArray0 = new Number[1][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, numberArray0.length);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertEquals(0.0, double0, 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNull(range0);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, numberArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 0.0);
      assertNotNull(range1);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1, numberArray0.length);
      
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(331, (String) null, 331, 0, (-1413), (-1413), 2, 331, 19, (-1413), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[4][7];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[2] = (-944.4103);
      doubleArray2[3] = (-3075.19);
      doubleArray2[4] = (-85.9);
      doubleArray2[5] = 0.0;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, doubleArray1.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      TableOrder tableOrder1 = TableOrder.BY_COLUMN;
      assertSame(tableOrder1, tableOrder0);
      assertNotNull(tableOrder1);
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder1, 2);
      assertNotNull(categoryToPieDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(4, doubleArray1.length);
      
      boolean boolean0 = categoryToPieDataset0.equals(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(tableOrder1, tableOrder0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(boolean0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      CategoryToPieDataset categoryToPieDataset1 = (CategoryToPieDataset)categoryToPieDataset0.clone();
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertSame(tableOrder1, tableOrder0);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertTrue(categoryToPieDataset1.equals((Object)categoryToPieDataset0));
      assertNotNull(categoryToPieDataset1);
      assertEquals(2, categoryToPieDataset1.getExtractIndex());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(4, doubleArray1.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) 0.0, (-85.9), 2);
      assertSame(tableOrder1, tableOrder0);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertNotNull(defaultPieDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(4, doubleArray1.length);
      
      defaultPieDataset0.insertValue(2, (Comparable) (-944.4103), (-944.4103));
      assertSame(tableOrder1, tableOrder0);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertTrue(categoryToPieDataset0.equals((Object)categoryToPieDataset1));
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder1.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(4, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4L);
      assertNotNull(mockDate0);
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(4L, hour0.getFirstMillisecond());
      assertEquals(4L, hour0.getLastMillisecond());
      assertEquals(0, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(4L, 23);
      assertNotNull(lineFunction2D0);
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      
      Object object0 = mockDate0.clone();
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      assertTrue(object0.equals((Object)mockDate0));
      assertNotNull(object0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", object0.toString());
      
      MockDate mockDate1 = new MockDate((-3314), 12, 438);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(mockDate1.equals((Object)object0));
      assertNotNull(mockDate1);
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate1;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate1;
      double[] doubleArray0 = new double[0];
      Instant instant0 = mockDate1.toInstant();
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(mockDate1, object0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(mockDate1.equals((Object)object0));
      assertNotNull(instant0);
      assertEquals("Fri Mar 13 00:00:00 GMT 1413", mockDate1.toString());
      
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertTrue(mockDate0.equals((Object)object0));
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(3, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate0, object0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertTrue(mockDate0.equals((Object)object0));
      assertNotNull(number0);
      assertEquals(4.0, number0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(3, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-2800));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2800), categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-2800);
      doubleArray1[1] = (double) (-2800);
      doubleArray1[2] = (double) (-2800);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("L8X$wKG", dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {(-2800.0), (-2800.0), (-2800.0)}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Vector<Long> vector0 = new Vector<Long>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertArrayEquals(new double[] {(-2800.0), (-2800.0), (-2800.0)}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(3, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      assertNotNull(range1);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2800.0), range1.getCentralValue(), 0.01);
      assertEquals((-2800.0), range1.getUpperBound(), 0.01);
      assertEquals((-2800.0), range1.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {(-2800.0), (-2800.0), (-2800.0)}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      stack0.setSize(6);
      assertEquals(6, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[null, null, null, null, null, null]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      Range range0 = new Range(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) stack0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      TaskSeries taskSeries0 = new TaskSeries("~BYg#vKrFU^ib");
      assertNotNull(taskSeries0);
      assertNull(taskSeries0.getDescription());
      assertEquals(0, taskSeries0.getItemCount());
      assertTrue(taskSeries0.getNotify());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(7, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Vector<Long> vector0 = new Vector<Long>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(7, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      
      double[][] doubleArray1 = new double[3][2];
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2551.561;
      doubleArray2[1] = (-1406.503643);
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 241);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Integer integer0 = new Integer((-7));
      assertNotNull(integer0);
      assertEquals((-7), (int)integer0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-7), (double) integer0);
      assertNotNull(powerFunction2D0);
      assertEquals((-7.0), powerFunction2D0.getB(), 0.01);
      assertEquals((-7.0), powerFunction2D0.getA(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(3, doubleArray0.length);
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-7));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-2800));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2800), categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(121, (-2800), (-3311));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (double) 121;
      doubleArray1[3] = (double) 121;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(defaultHighLowDataset0);
      assertEquals("Fri Aug 07 00:00:00 GMT 1778", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 1.0, 121.0, 121.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(4, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[4][7];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[2] = (-944.4103);
      doubleArray2[4] = (-85.914224282137);
      Range range0 = new Range((-85.914224282137), (-85.914224282137));
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-85.914224282137), range0.getLowerBound(), 0.01);
      assertEquals((-85.914224282137), range0.getCentralValue(), 0.01);
      assertEquals((-85.914224282137), range0.getUpperBound(), 0.01);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) vector0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[4][7];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[2] = (-944.4103);
      doubleArray2[3] = (-3075.19);
      doubleArray2[4] = (-85.914224282137);
      doubleArray2[5] = 0.0;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(">&?5{-eRv0g", "7$cGJ", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals((-3075.19), number0);
      assertEquals(4, doubleArray1.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(12, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, doubleArray1.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 0.0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-1537.595), range0.getCentralValue(), 0.01);
      assertEquals(3075.19, range0.getLength(), 0.01);
      assertEquals((-3075.19), range0.getLowerBound(), 0.01);
      assertEquals(4, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1.0);
      doubleArray1[2] = (-894.0);
      doubleArray1[3] = 2.0;
      doubleArray1[4] = (-596.78541);
      doubleArray1[5] = (-1436.372725883144);
      doubleArray1[6] = (-4505.99218804);
      doubleArray1[7] = 376.1;
      doubleArray1[8] = (-105.571714);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1436.372725883144);
      doubleArray2[2] = (-596.78541);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("SeriesChangeType.ADD_AND_REMOVE", "p", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((-4505.99218804));
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(4882.09218804, range0.getLength(), 0.01);
      assertEquals((-2064.9460940199997), range0.getCentralValue(), 0.01);
      assertEquals((-4505.99218804), range0.getLowerBound(), 0.01);
      assertEquals(376.1, range0.getUpperBound(), 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("L8X$wKG");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("L8X$wKG", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      
      XYDatasetSelectionState xYDatasetSelectionState0 = defaultOHLCDataset0.getSelectionState();
      assertNull(xYDatasetSelectionState0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, oHLCDataItemArray0.length);
      
      defaultBoxAndWhiskerXYDataset0.setSelectionState((XYDatasetSelectionState) null);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertTrue(boolean0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("L8X$wKG", "zjNk]#z47=(", doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset1, true);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = stack0.add(defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(defaultStatisticalCategoryDataset0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset1);
      
      Range range0 = defaultStatisticalCategoryDataset1.getRangeBounds(false);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNull(range0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      List list0 = keyToGroupMap0.getGroups();
      assertNotNull(list0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertNull(range1);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 2, 828.985886, 2, Double.NEGATIVE_INFINITY);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range2);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.5, range2.getLowerBound(), 0.01);
      assertEquals(827.985886, range2.getLength(), 0.01);
      assertEquals(829.485886, range2.getUpperBound(), 0.01);
      assertEquals(415.492943, range2.getCentralValue(), 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = stack0.add(defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(defaultStatisticalCategoryDataset0));
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNull(range0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3977.79;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {3977.79}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {3977.79}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3977.79}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2.147483648E9), (-1.0), 349, 3977.79);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(xYSeries0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(3977.79, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals((-1.0), xYSeries0.getMaxX(), 0.01);
      assertEquals(349, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(3977.79, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-2.147483648E9), xYSeries0.getMinX(), 0.01);
      assertArrayEquals(new double[] {3977.79}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(3977.79, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals((-1.0), xYSeries0.getMaxX(), 0.01);
      assertEquals(349, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(3977.79, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-2.147483648E9), xYSeries0.getMinX(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertArrayEquals(new double[] {3977.79}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(range1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(3977.79, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals((-1.0), xYSeries0.getMaxX(), 0.01);
      assertEquals(349, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(3977.79, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-2.147483648E9), xYSeries0.getMinX(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(3977.79, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(3977.79, range1.getUpperBound(), 0.01);
      assertEquals(3977.79, range1.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {3977.79}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      double[][] doubleArray0 = new double[4][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(4, doubleArray0.length);
      
      categoryToPieDataset0.validateObject();
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(4, doubleArray0.length);
      
      Comparable comparable0 = categoryToPieDataset0.getKey(1);
      assertNotNull(comparable0);
      assertEquals("L8X$wKG2", comparable0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(4, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4, doubleArray0.length);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(1, 121, 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 121;
      doubleArray1[1] = (double) 121;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = 5757.082519936;
      doubleArray1[4] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("L8X$wKG", dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {121.0, 121.0, 1.0, 5757.082519936, 1.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals((-1.8592416E12), number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {121.0, 121.0, 1.0, 5757.082519936, 1.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = stack0.add(defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(defaultStatisticalCategoryDataset0));
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNull(range0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3977.79;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {3977.79}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      List list0 = keyToGroupMap0.getGroups();
      assertNotNull(list0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      assertNull(range1);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, Double.NEGATIVE_INFINITY, (-295.549), 2, 3977.79);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertArrayEquals(new double[] {3977.79}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNull(range2);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertArrayEquals(new double[] {3977.79}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("L8X$wKG");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 297, 688);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(297, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(688, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, 973);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 973, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-4128.808);
      doubleArray1[1] = (-2200.20162);
      doubleArray1[2] = 2903.556;
      doubleArray1[3] = 2.0;
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-4128.808);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-4128.808);
      doubleArray3[1] = 778.306753;
      doubleArray3[2] = 333.47523077;
      doubleArray3[3] = 2.0;
      doubleArray3[4] = 2903.556;
      doubleArray3[5] = 2903.556;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 2903.556;
      doubleArray4[1] = (-4128.808);
      doubleArray4[2] = 2.0;
      doubleArray4[3] = 2.0;
      doubleArray4[4] = 2903.556;
      doubleArray4[5] = 2903.556;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 0.0;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-2800));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2800), categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2800), categoryToPieDataset0.getExtractIndex());
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3, doubleArray0.length);
      
      Integer integer0 = new Integer((-2800));
      assertNotNull(integer0);
      assertEquals((-2800), (int)integer0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultXYZDataset0);
      assertNull(number0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      CategoryToPieDataset categoryToPieDataset1 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-2800));
      assertNotNull(categoryToPieDataset1);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2800), categoryToPieDataset1.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = categoryToPieDataset0.equals(object0);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertFalse(boolean0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2800), categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      CategoryToPieDataset categoryToPieDataset2 = (CategoryToPieDataset)categoryToPieDataset0.clone();
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertNotSame(categoryToPieDataset0, categoryToPieDataset2);
      assertNotSame(categoryToPieDataset2, categoryToPieDataset1);
      assertNotSame(categoryToPieDataset2, categoryToPieDataset0);
      assertNotNull(categoryToPieDataset2);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2800), categoryToPieDataset0.getExtractIndex());
      assertEquals((-2800), categoryToPieDataset2.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset1, (Comparable) "L8X$wKG", (-523.61745066), 87);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      Integer integer1 = Integer.getInteger("oojW9hps%pB<83", integer0);
      assertNotNull(integer1);
      assertEquals((-30000), (int)integer1);
      
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) integer1;
      numberArray1[1] = (Number) integer1;
      numberArray1[2] = (Number) integer1;
      numberArray1[3] = (Number) integer0;
      numberArray1[4] = (Number) integer0;
      numberArray1[5] = (Number) integer0;
      numberArray1[6] = (Number) integer1;
      numberArray1[7] = (Number) integer1;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)18;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((short) (-238), bigInteger0.shortValue());
      assertEquals((byte)18, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)73, (byte)91, (byte) (-1), (byte)18}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      numberArray1[8] = (Number) bigInteger0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Series 3", "i0lem0*d'J", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Object[][][] objectArray0 = new Object[0][7][8];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, objectArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultWindDataset0);
      assertNull(range0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, objectArray0.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-2800));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2800), categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2800), categoryToPieDataset0.getExtractIndex());
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3, doubleArray0.length);
      
      Integer integer0 = new Integer((-2800));
      assertNotNull(integer0);
      assertEquals((-2800), (int)integer0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultXYZDataset0);
      assertNull(number0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, list0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      Number[][] numberArray0 = new Number[2][0];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 0.0;
      numberArray1[1] = (Number) 0.0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 0.0;
      numberArray2[1] = (Number) 0.0;
      numberArray2[3] = (Number) 0.0;
      numberArray2[5] = (Number) 0.0;
      numberArray2[6] = (Number) 0.0;
      numberArray2[7] = (Number) 0.0;
      numberArray2[8] = (Number) 0.0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(2, numberArray0.length);
      
      Object[][][] objectArray0 = new Object[1][5][9];
      Object[][] objectArray1 = new Object[2][8];
      objectArray1[0] = (Object[]) numberArray2;
      objectArray1[1] = (Object[]) numberArray2;
      objectArray0[0] = objectArray1;
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertNotNull(defaultWindDataset0);
      assertEquals(1, defaultWindDataset0.getSeriesCount());
      assertEquals(1, objectArray0.length);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultWindDataset0);
      assertNull(range1);
      assertEquals(1, defaultWindDataset0.getSeriesCount());
      assertEquals(1, objectArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 2);
      assertNotNull(pieDataset0);
      assertEquals(2, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4L);
      assertNotNull(mockDate0);
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, hour0.getHour());
      assertEquals(4L, hour0.getFirstMillisecond());
      assertEquals(4L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(4L, 23);
      assertNotNull(lineFunction2D0);
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      
      Month month1 = new Month(mockDate0);
      assertFalse(month1.equals((Object)month0));
      assertNotNull(month1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, month1.getMonth());
      assertEquals(1970, month1.getYearValue());
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(23641L, month1.getSerialIndex());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 4L, 2668.973, 23, month1);
      assertNotSame(month1, month0);
      assertFalse(month1.equals((Object)month0));
      assertNotNull(xYSeries0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, month1.getMonth());
      assertEquals(1970, month1.getYearValue());
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(23641L, month1.getSerialIndex());
      assertTrue(xYSeries0.getNotify());
      assertEquals(96.0, xYSeries0.getMinY(), 0.01);
      assertEquals(61390.379, xYSeries0.getMaxY(), 0.01);
      assertEquals(4.0, xYSeries0.getMinX(), 0.01);
      assertEquals(23, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2668.973, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertFalse(month1.equals((Object)month0));
      assertNotNull(xYSeriesCollection0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, month1.getMonth());
      assertEquals(1970, month1.getYearValue());
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(23641L, month1.getSerialIndex());
      assertTrue(xYSeries0.getNotify());
      assertEquals(96.0, xYSeries0.getMinY(), 0.01);
      assertEquals(61390.379, xYSeries0.getMaxY(), 0.01);
      assertEquals(4.0, xYSeries0.getMinX(), 0.01);
      assertEquals(23, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2668.973, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      xYSeries0.removeChangeListener(timeSeriesCollection0);
      assertNotSame(month1, month0);
      assertFalse(month1.equals((Object)month0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, month1.getMonth());
      assertEquals(1970, month1.getYearValue());
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(23641L, month1.getSerialIndex());
      assertTrue(xYSeries0.getNotify());
      assertEquals(96.0, xYSeries0.getMinY(), 0.01);
      assertEquals(61390.379, xYSeries0.getMaxY(), 0.01);
      assertEquals(4.0, xYSeries0.getMinX(), 0.01);
      assertEquals(23, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2668.973, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotSame(month1, month0);
      assertFalse(month1.equals((Object)month0));
      assertNotNull(range0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, month1.getMonth());
      assertEquals(1970, month1.getYearValue());
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(23641L, month1.getSerialIndex());
      assertTrue(xYSeries0.getNotify());
      assertEquals(96.0, xYSeries0.getMinY(), 0.01);
      assertEquals(61390.379, xYSeries0.getMaxY(), 0.01);
      assertEquals(4.0, xYSeries0.getMinX(), 0.01);
      assertEquals(23, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(2668.973, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(96.0, range0.getLowerBound(), 0.01);
      assertEquals(61390.379, range0.getUpperBound(), 0.01);
      assertEquals(30743.1895, range0.getCentralValue(), 0.01);
      assertEquals(61294.379, range0.getLength(), 0.01);
      
      double[][] doubleArray0 = new double[5][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 23;
      doubleArray1[1] = (double) 4L;
      doubleArray1[2] = 2668.973;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 23;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = (double) 4L;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = Double.POSITIVE_INFINITY;
      doubleArray2[6] = (double) 23;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = (double) 23;
      doubleArray3[2] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray4[1] = Double.POSITIVE_INFINITY;
      doubleArray4[2] = 2668.973;
      doubleArray4[3] = (-17.795527);
      doubleArray4[4] = (double) 0;
      doubleArray4[5] = 2668.973;
      doubleArray4[6] = (double) 23;
      doubleArray4[7] = (double) 0;
      doubleArray4[8] = 2668.973;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = (double) 4L;
      doubleArray5[1] = (-17.795527);
      doubleArray5[2] = (double) 0;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      int int0 = 1;
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[5];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      numberArray1[0] = (Number) float0;
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      numberArray1[1] = (Number) integer0;
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      numberArray1[2] = (Number) bigInteger0;
      Long long0 = new Long(1);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      Long long1 = Long.getLong("0u8l", long0);
      assertNotNull(long1);
      assertEquals(1L, (long)long1);
      
      numberArray1[3] = (Number) long1;
      Float float1 = new Float(0.0F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      numberArray1[4] = (Number) float1;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) bigInteger0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotNull(defaultKeyedValuesDataset1);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1311.636);
      doubleArray1[1] = (-3075.19);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(602.91057806349, (-3075.19));
      assertNotNull(powerFunction2D0);
      assertEquals(602.91057806349, powerFunction2D0.getA(), 0.01);
      assertEquals((-3075.19), powerFunction2D0.getB(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals((-1311.636), number0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(1763.554, range0.getLength(), 0.01);
      assertEquals((-3075.19), range0.getLowerBound(), 0.01);
      assertEquals((-2193.413), range0.getCentralValue(), 0.01);
      assertEquals((-1311.636), range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4L);
      assertNotNull(mockDate0);
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(4L, hour0.getLastMillisecond());
      assertEquals(4L, hour0.getFirstMillisecond());
      assertEquals(0, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(4L, 23);
      assertNotNull(lineFunction2D0);
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      
      Month month1 = new Month(mockDate0);
      assertFalse(month1.equals((Object)month0));
      assertNotNull(month1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1970, month1.getYearValue());
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(1, month1.getMonth());
      assertEquals(23641L, month1.getSerialIndex());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 4L, 2668.973, 23, month1);
      assertNotSame(month1, month0);
      assertFalse(month1.equals((Object)month0));
      assertNotNull(xYSeries0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1970, month1.getYearValue());
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(1, month1.getMonth());
      assertEquals(23641L, month1.getSerialIndex());
      assertEquals(96.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2668.973, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(4.0, xYSeries0.getMinX(), 0.01);
      assertEquals(23, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(61390.379, xYSeries0.getMaxY(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertFalse(month1.equals((Object)month0));
      assertNotNull(xYSeriesCollection0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1970, month1.getYearValue());
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(1, month1.getMonth());
      assertEquals(23641L, month1.getSerialIndex());
      assertEquals(96.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2668.973, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(4.0, xYSeries0.getMinX(), 0.01);
      assertEquals(23, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(61390.379, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertNotSame(month1, month0);
      assertFalse(month1.equals((Object)month0));
      assertFalse(boolean0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1970, month1.getYearValue());
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(1, month1.getMonth());
      assertEquals(23641L, month1.getSerialIndex());
      assertEquals(96.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2668.973, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(4.0, xYSeries0.getMinX(), 0.01);
      assertEquals(23, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(61390.379, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[1] = 0.0;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(defaultStatisticalCategoryDataset0));
      
      boolean boolean0 = stack0.add(defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(defaultStatisticalCategoryDataset0));
      
      Range range0 = new Range((-944.4103), 0.0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-472.20515), range0.getCentralValue(), 0.01);
      assertEquals((-944.4103), range0.getLowerBound(), 0.01);
      assertEquals(944.4103, range0.getLength(), 0.01);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(11, polynomialFunction2D0.getOrder());
      assertEquals(12, doubleArray0.length);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 54.8200263, 778.306753, 349, 0.0);
      assertNotNull(xYSeries0);
      assertEquals(11, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(349, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(778.306753, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getNotify());
      assertEquals(54.8200263, xYSeries0.getMinX(), 0.01);
      assertEquals(12, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(11, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(349, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(778.306753, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getNotify());
      assertEquals(54.8200263, xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(12, doubleArray0.length);
      
      xYSeries0.removeChangeListener(xYSeriesCollection0);
      assertEquals(11, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(349, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(778.306753, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getNotify());
      assertEquals(54.8200263, xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(12, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(11, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(349, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(778.306753, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getNotify());
      assertEquals(54.8200263, xYSeries0.getMinX(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(12, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3, doubleArray0.length);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultXYZDataset0);
      assertNull(number0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, list0, true);
      assertNotNull(range0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[10] = (-0.8033551431548414);
      Number[][] numberArray0 = new Number[2][0];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 0.0;
      numberArray1[1] = (Number) 0.0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 0.0;
      numberArray2[1] = (Number) 0.0;
      numberArray2[2] = (Number) 0.0;
      numberArray2[3] = (Number) (-0.8033551431548414);
      numberArray2[5] = (Number) (-0.8033551431548414);
      numberArray2[6] = (Number) (-0.8033551431548414);
      numberArray2[7] = (Number) 0.0;
      numberArray2[8] = (Number) (-0.8033551431548414);
      numberArray0[1] = numberArray2;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(2, numberArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(3.2134205726193654, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-3.2134205726193654), range0.getLowerBound(), 0.01);
      assertEquals((-1.6067102863096827), range0.getCentralValue(), 0.01);
      assertEquals(2, numberArray0.length);
      
      defaultCategoryDataset0.setValue(numberArray2[1], (Comparable) (-0.8033551431548414), (Comparable) "");
      assertNotSame(numberArray2, numberArray1);
      assertFalse(numberArray2.equals((Object)numberArray1));
      assertEquals(2, numberArray0.length);
      assertEquals(9, numberArray2.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = stack0.add(defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(defaultStatisticalCategoryDataset0));
      
      Range range0 = new Range(3977.79, 3977.79);
      assertNotNull(range0);
      assertEquals(3977.79, range0.getCentralValue(), 0.01);
      assertEquals(3977.79, range0.getLowerBound(), 0.01);
      assertEquals(3977.79, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range2 = Range.combine(range0, (Range) null);
      assertSame(range0, range2);
      assertSame(range2, range0);
      assertNotNull(range2);
      assertEquals(3977.79, range0.getCentralValue(), 0.01);
      assertEquals(3977.79, range0.getLowerBound(), 0.01);
      assertEquals(3977.79, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3977.79, range2.getCentralValue(), 0.01);
      assertEquals(3977.79, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(3977.79, range2.getUpperBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNull(number0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("~BYg#vKrFU^ib");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1463.856607485);
      doubleArray0[1] = (-965.4355992215);
      doubleArray0[2] = 581.2949138673;
      doubleArray0[3] = (-1797.944384343258);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-1463.856607485), (-965.4355992215), 581.2949138673, (-1797.944384343258)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 4078.50629439935, (-1463.856607485), 349, 581.2949138673);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[5][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-944.4103);
      doubleArray2[1] = (-1.7976931348623157E308);
      doubleArray2[2] = (-944.4103);
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "|H+}q\",aN-O", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals((-1.7976931348623157E308), number0);
      assertEquals(5, doubleArray1.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(12, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, doubleArray1.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 2);
      assertNotNull(categoryToPieDataset0);
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(12, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(5, doubleArray1.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "%+Wfuc?vcax", 1015.633661, (-1735));
      assertNotNull(pieDataset0);
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(12, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(5, doubleArray1.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertTrue(boolean0);
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(12, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(5, doubleArray1.length);
      
      XYSeries xYSeries0 = new XYSeries((-944.4103));
      assertNotNull(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(xYSeriesCollection0);
      assertFalse(number1.equals((Object)number0));
      assertNotNull(number1);
      assertEquals(Double.NaN, number1);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("|H+}q\",aN-O", "", doubleArray1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = 2.0;
      doubleArray1[1] = 2.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("1/m}a'Q5Qxs4!dlh[WW", "1/m}a'Q5Qxs4!dlh[WW", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(2, doubleArray0.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset0.getEndValue((Comparable) 2.0, (Comparable) "1/m}a'Q5Qxs4!dlh[WW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown 'series' key.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      categoryToPieDataset0.validateObject();
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      Comparable comparable0 = categoryToPieDataset0.getKey(1);
      assertNotNull(comparable0);
      assertEquals("L8X$wKG2", comparable0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(1, 121, 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 121;
      doubleArray1[1] = (double) 121;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = 5757.082519936;
      doubleArray1[4] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("L8X$wKG", dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {121.0, 121.0, 1.0, 5757.082519936, 1.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(121.0, range1.getCentralValue(), 0.01);
      assertEquals(121.0, range1.getLowerBound(), 0.01);
      assertEquals(121.0, range1.getUpperBound(), 0.01);
      assertArrayEquals(new double[] {121.0, 121.0, 1.0, 5757.082519936, 1.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-0.8033551431548414);
      doubleArray1[1] = (-0.8033551431548414);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-0.8033551431548414);
      doubleArray2[1] = (-0.8033551431548414);
      doubleArray2[2] = (-470.96160145);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      defaultIntervalCategoryDataset0.addChangeListener(xYTaskDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, (-0.8033551431548414));
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) (-0.8033551431548414));
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) (-0.8033551431548414), (-470.96160145));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertNotNull(range2);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(jDBCCategoryDataset0, tableOrder0, 0);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      
      categoryToPieDataset0.validateObject();
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1913.843486577, (-1674.17));
      assertNotNull(powerFunction2D0);
      assertEquals(1913.843486577, powerFunction2D0.getA(), 0.01);
      assertEquals((-1674.17), powerFunction2D0.getB(), 0.01);
      
      Minute minute0 = Minute.parseMinute("d#6mk*@%pudO3f6W");
      assertNull(minute0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-3426.901705771), 438.0, 0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[19];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[8] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-3425.4191344196606);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-3505.49811844);
      doubleArray0[0] = doubleArray1;
      Number[][] numberArray0 = new Number[13][7];
      Number[] numberArray1 = new Number[20];
      numberArray1[0] = (Number) 0.0;
      numberArray1[2] = (Number) 0.0;
      doubleArray1[17] = (-3505.49811844);
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(20, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(20, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(13, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("dw9Y?6/7QD^C", "dw9Y?6/7QD^C", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1601);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1601, categoryToPieDataset0.getExtractIndex());
      assertEquals(2, doubleArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1601, categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(2, doubleArray0.length);
      
      Integer integer0 = new Integer(434);
      assertNotNull(integer0);
      assertEquals(434, (int)integer0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.0), (-1.0));
      assertNotNull(powerFunction2D0);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals((-1.0), number0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, list0, false);
      assertNotNull(range0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1601, categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      Range range1 = Range.shift(range0, (-1.0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1601, categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2.0), range1.getCentralValue(), 0.01);
      assertEquals((-2.0), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2.0), range1.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("", "3ZGxg/", doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      assertEquals(2, doubleArray0.length);
      
      Number[][] numberArray0 = new Number[7][9];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) (-1.0);
      numberArray2[1] = (Number) (-1.0);
      numberArray2[2] = (Number) (-1.0);
      numberArray2[3] = (Number) integer0;
      numberArray2[4] = (Number) integer0;
      numberArray2[5] = (Number) (-1.0);
      numberArray2[6] = (Number) integer0;
      numberArray2[7] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[7];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) integer0;
      numberArray3[1] = (Number) (-1.0);
      numberArray3[2] = (Number) (-1.0);
      numberArray3[3] = (Number) integer0;
      numberArray3[4] = (Number) integer0;
      numberArray3[5] = number0;
      numberArray3[6] = (Number) (-1.0);
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[0];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[0];
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray2));
      
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[1];
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray2));
      assertFalse(numberArray6.equals((Object)numberArray1));
      
      numberArray6[0] = number0;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[6];
      assertFalse(numberArray7.equals((Object)numberArray6));
      assertFalse(numberArray7.equals((Object)numberArray5));
      assertFalse(numberArray7.equals((Object)numberArray3));
      assertFalse(numberArray7.equals((Object)numberArray2));
      assertFalse(numberArray7.equals((Object)numberArray4));
      assertFalse(numberArray7.equals((Object)numberArray1));
      
      numberArray7[0] = number0;
      numberArray7[1] = (Number) (-1.0);
      numberArray7[2] = (Number) integer0;
      numberArray7[3] = number0;
      numberArray7[4] = (Number) (-1.0);
      numberArray7[5] = (Number) integer0;
      numberArray0[6] = numberArray7;
      CategoryDataset categoryDataset2 = DatasetUtilities.createCategoryDataset("Series 3", "Series 3", numberArray0);
      assertNotSame(categoryDataset2, categoryDataset0);
      assertNotSame(categoryDataset2, categoryDataset1);
      assertFalse(categoryDataset2.equals((Object)categoryDataset0));
      assertFalse(categoryDataset2.equals((Object)categoryDataset1));
      assertNotNull(categoryDataset2);
      assertEquals(7, numberArray0.length);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset2);
      assertNotSame(categoryDataset2, categoryDataset0);
      assertNotSame(categoryDataset2, categoryDataset1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(categoryDataset2.equals((Object)categoryDataset0));
      assertFalse(categoryDataset2.equals((Object)categoryDataset1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertEquals(871.0, range2.getLength(), 0.01);
      assertEquals(868.0, range2.getUpperBound(), 0.01);
      assertEquals(432.5, range2.getCentralValue(), 0.01);
      assertEquals((-3.0), range2.getLowerBound(), 0.01);
      assertEquals(7, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      Comparable comparable0 = categoryToPieDataset0.getKey(1);
      assertNotNull(comparable0);
      assertEquals("L8X$wKG2", comparable0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      categoryToPieDataset0.validateObject();
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(1, 121, 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 121;
      doubleArray1[1] = (double) 121;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = 5757.082519936;
      doubleArray1[4] = (double) 1;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(dateArray0[0]);
      assertNotNull(fixedMillisecond0);
      assertEquals((-1859241600000L), fixedMillisecond0.getSerialIndex());
      assertEquals((-1859241600000L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-1859241600000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1859241600000L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1, dateArray0.length);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(121, 121, fixedMillisecond0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals((-1859241600000L), fixedMillisecond0.getSerialIndex());
      assertEquals((-1859241600000L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-1859241600000L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1859241600000L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(120, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(1, dateArray0.length);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) null, range0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[25];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[8] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-3425.4191344196606);
      doubleArray1[7] = 0.07448370749400413;
      doubleArray1[8] = (-3505.49811844);
      doubleArray0[0] = doubleArray1;
      Number[][] numberArray0 = new Number[1][7];
      Number[] numberArray1 = new Number[20];
      numberArray1[0] = (Number) 0.0;
      numberArray1[2] = (Number) 0.07448370749400413;
      doubleArray1[17] = (-3505.49811844);
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(20, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(20, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(20, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(20, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.07448370749400413, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.03724185374700206, range0.getCentralValue(), 0.01);
      assertEquals(0.07448370749400413, range0.getUpperBound(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(20, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(20, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.07448370749400413, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.07448370749400413, range1.getUpperBound(), 0.01);
      assertEquals(0.03724185374700206, range1.getCentralValue(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.07448370749400413, number0);
      assertEquals(20, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(20, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[1] = 0.0;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Range range0 = defaultTableXYDataset0.getDomainBounds(false);
      assertNull(range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range1);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 0.0);
      assertNotNull(range2);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotNull(defaultKeyedValuesDataset1);
      
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      assertNotNull(datasetChangeInfo0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      MockDate mockDate0 = new MockDate(333, 333, 2849);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[9];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(3583L);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[7] = (Date) mockDate1;
      dateArray0[8] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 121;
      doubleArray0[1] = 5757.082519936;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Sun Jul 19 00:00:00 GMT 2268", mockDate0.toString());
      assertArrayEquals(new double[] {121.0, 5757.082519936}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(9, dateArray0.length);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, 333);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotNull(xYBarDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(333.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals("Sun Jul 19 00:00:00 GMT 2268", mockDate0.toString());
      assertArrayEquals(new double[] {121.0, 5757.082519936}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(9, dateArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) xYBarDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      String string0 = "Seie(s 4";
      TaskSeries taskSeries0 = new TaskSeries("Seie(s 4");
      assertNotNull(taskSeries0);
      assertEquals(0, taskSeries0.getItemCount());
      assertNull(taskSeries0.getDescription());
      assertTrue(taskSeries0.getNotify());
      
      taskSeriesCollection0.add(taskSeries0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeries0.getItemCount());
      assertNull(taskSeries0.getDescription());
      assertTrue(taskSeries0.getNotify());
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertFalse(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertNotNull(taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      int int0 = (-547);
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, (-547));
      assertFalse(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertNotNull(categoryToPieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-547), categoryToPieDataset0.getExtractIndex());
      
      categoryToPieDataset0.validateObject();
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertFalse(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-547), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.gantt.TaskSeries cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = stack0.add(defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(defaultStatisticalCategoryDataset0));
      
      Range range0 = new Range(3977.79, 3977.79);
      assertNotNull(range0);
      assertEquals(3977.79, range0.getLowerBound(), 0.01);
      assertEquals(3977.79, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3977.79, range0.getUpperBound(), 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3977.79;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {3977.79}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 488.0, 3977.79, 349, 3977.79);
      assertNotNull(xYSeries0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertEquals(3977.79, xYSeries0.getMaxX(), 0.01);
      assertEquals(3977.79, xYSeries0.getMinY(), 0.01);
      assertEquals(488.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(349, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(3977.79, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertArrayEquals(new double[] {3977.79}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertEquals(3977.79, xYSeries0.getMaxX(), 0.01);
      assertEquals(3977.79, xYSeries0.getMinY(), 0.01);
      assertEquals(488.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(349, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(3977.79, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertArrayEquals(new double[] {3977.79}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertEquals(3977.79, xYSeries0.getMaxX(), 0.01);
      assertEquals(3977.79, xYSeries0.getMinY(), 0.01);
      assertEquals(488.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(349, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(3977.79, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(3977.79, range1.getUpperBound(), 0.01);
      assertEquals(3977.79, range1.getCentralValue(), 0.01);
      assertEquals(3977.79, range1.getLowerBound(), 0.01);
      assertArrayEquals(new double[] {3977.79}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4L);
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, month0.getMonth());
      assertEquals(4L, month0.getFirstMillisecond());
      assertEquals(4L, month0.getLastMillisecond());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(1970, month0.getYearValue());
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, hour0.getHour());
      assertEquals(4L, hour0.getFirstMillisecond());
      assertEquals(4L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Hour hour1 = (Hour)hour0.next();
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertFalse(hour1.equals((Object)hour0));
      assertNotNull(hour1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, hour0.getHour());
      assertEquals(4L, hour0.getFirstMillisecond());
      assertEquals(4L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1, hour1.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(4L, 23);
      assertNotNull(lineFunction2D0);
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      
      Month month1 = new Month(mockDate0);
      assertTrue(month1.equals((Object)month0));
      assertNotNull(month1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1970, month1.getYearValue());
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(1, month1.getMonth());
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(23641L, month1.getSerialIndex());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 4L, 2668.9733882964, 23, month1);
      assertNotSame(month1, month0);
      assertTrue(month1.equals((Object)month0));
      assertNotNull(xYSeries0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1970, month1.getYearValue());
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(1, month1.getMonth());
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(23641L, month1.getSerialIndex());
      assertTrue(xYSeries0.getNotify());
      assertEquals(96.0, xYSeries0.getMinY(), 0.01);
      assertEquals(2668.9733882964, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(4.0, xYSeries0.getMinX(), 0.01);
      assertEquals(23, xYSeries0.getItemCount());
      assertEquals(61390.3879308172, xYSeries0.getMaxY(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertTrue(month1.equals((Object)month0));
      assertNotNull(xYSeriesCollection0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1970, month1.getYearValue());
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(1, month1.getMonth());
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(23641L, month1.getSerialIndex());
      assertTrue(xYSeries0.getNotify());
      assertEquals(96.0, xYSeries0.getMinY(), 0.01);
      assertEquals(2668.9733882964, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(4.0, xYSeries0.getMinX(), 0.01);
      assertEquals(23, xYSeries0.getItemCount());
      assertEquals(61390.3879308172, xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotSame(month1, month0);
      assertTrue(month1.equals((Object)month0));
      assertNotNull(range0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1970, month1.getYearValue());
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(1, month1.getMonth());
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(23641L, month1.getSerialIndex());
      assertTrue(xYSeries0.getNotify());
      assertEquals(96.0, xYSeries0.getMinY(), 0.01);
      assertEquals(2668.9733882964, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(4.0, xYSeries0.getMinX(), 0.01);
      assertEquals(23, xYSeries0.getItemCount());
      assertEquals(61390.3879308172, xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(96.0, range0.getLowerBound(), 0.01);
      assertEquals(30743.1939654086, range0.getCentralValue(), 0.01);
      assertEquals(61294.3879308172, range0.getLength(), 0.01);
      assertEquals(61390.3879308172, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertNotSame(month1, month0);
      assertNotSame(range1, range0);
      assertTrue(month1.equals((Object)month0));
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1970, month1.getYearValue());
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(1, month1.getMonth());
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(23641L, month1.getSerialIndex());
      assertTrue(xYSeries0.getNotify());
      assertEquals(96.0, xYSeries0.getMinY(), 0.01);
      assertEquals(2668.9733882964, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(4.0, xYSeries0.getMinX(), 0.01);
      assertEquals(23, xYSeries0.getItemCount());
      assertEquals(61390.3879308172, xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(61390.3879308172, range1.getUpperBound(), 0.01);
      assertEquals(96.0, range1.getLowerBound(), 0.01);
      assertEquals(61294.3879308172, range1.getLength(), 0.01);
      assertEquals(30743.1939654086, range1.getCentralValue(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) mockDate0, (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("Null 'rowKeys' argument.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotNull(defaultKeyedValuesDataset1);
      
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      assertNotNull(datasetChangeInfo0);
      
      defaultKeyedValuesDataset0.fireDatasetChanged(datasetChangeInfo0);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      
      Number[][] numberArray0 = new Number[1][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, numberArray0.length);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertEquals(0.0, double0, 0.01);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(3039.67329, 0.0);
      assertNotNull(powerFunction2D0);
      assertEquals(3039.67329, powerFunction2D0.getA(), 0.01);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, numberArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      Comparable comparable0 = categoryToPieDataset0.getKey(1);
      assertNotNull(comparable0);
      assertEquals("L8X$wKG2", comparable0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      categoryToPieDataset0.validateObject();
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(1, 121, 1);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 121;
      doubleArray1[1] = (double) 121;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = 5757.082519936;
      doubleArray1[4] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("L8X$wKG", dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {121.0, 121.0, 1.0, 5757.082519936, 1.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray1.length);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultHighLowDataset0, 1.0);
      assertNotNull(xYBarDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.0, xYBarDataset0.getBarWidth(), 0.01);
      assertArrayEquals(new double[] {121.0, 121.0, 1.0, 5757.082519936, 1.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotNull(number0);
      assertEquals(121.0, number0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {121.0, 121.0, 1.0, 5757.082519936, 1.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      TaskSeries taskSeries0 = new TaskSeries("Seie(s 4");
      assertNotNull(taskSeries0);
      assertTrue(taskSeries0.getNotify());
      assertNull(taskSeries0.getDescription());
      assertEquals(0, taskSeries0.getItemCount());
      
      taskSeriesCollection0.add(taskSeries0);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeries0.getNotify());
      assertNull(taskSeries0.getDescription());
      assertEquals(0, taskSeries0.getItemCount());
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertFalse(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertNotNull(taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("Seie(s 4");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, false);
      assertNull(range0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(simpleHistogramDataset0);
      assertNull(range1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertNull(number0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4L);
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1970, month0.getYearValue());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(4L, month0.getFirstMillisecond());
      assertEquals(4L, month0.getLastMillisecond());
      assertEquals(1, month0.getMonth());
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(4L, hour0.getFirstMillisecond());
      assertEquals(0, hour0.getHour());
      assertEquals(4L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Hour hour1 = (Hour)hour0.next();
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertFalse(hour1.equals((Object)hour0));
      assertNotNull(hour1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(4L, hour0.getFirstMillisecond());
      assertEquals(0, hour0.getHour());
      assertEquals(4L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(4L, 23);
      assertNotNull(lineFunction2D0);
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      
      Month month1 = new Month(mockDate0);
      assertTrue(month1.equals((Object)month0));
      assertNotNull(month1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(1970, month1.getYearValue());
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(23641L, month1.getSerialIndex());
      assertEquals(1, month1.getMonth());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 4L, 2668.9733882964, 30, month1);
      assertNotSame(month1, month0);
      assertTrue(month1.equals((Object)month0));
      assertNotNull(xYSeries0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(1970, month1.getYearValue());
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(23641L, month1.getSerialIndex());
      assertEquals(1, month1.getMonth());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(30, xYSeries0.getItemCount());
      assertEquals(61390.3879308172, xYSeries0.getMaxY(), 0.01);
      assertEquals(2668.9733882964, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(4.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(96.0, xYSeries0.getMinY(), 0.01);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      assertNotSame(month1, month0);
      assertTrue(month1.equals((Object)month0));
      assertNull(xYDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(1970, month1.getYearValue());
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(23641L, month1.getSerialIndex());
      assertEquals(1, month1.getMonth());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(61390.3879308172, xYSeries0.getMaxY(), 0.01);
      assertEquals(2668.9733882964, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(31, xYSeries0.getItemCount());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertTrue(month1.equals((Object)month0));
      assertNotNull(xYSeriesCollection0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(1970, month1.getYearValue());
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(23641L, month1.getSerialIndex());
      assertEquals(1, month1.getMonth());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(61390.3879308172, xYSeries0.getMaxY(), 0.01);
      assertEquals(2668.9733882964, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(31, xYSeries0.getItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotSame(month1, month0);
      assertTrue(month1.equals((Object)month0));
      assertNotNull(range0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(1970, month1.getYearValue());
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(23641L, month1.getSerialIndex());
      assertEquals(1, month1.getMonth());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(61390.3879308172, xYSeries0.getMaxY(), 0.01);
      assertEquals(2668.9733882964, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(31, xYSeries0.getItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(61390.3879308172, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(30695.1939654086, range0.getCentralValue(), 0.01);
      assertEquals(61390.3879308172, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[4][7];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-944.4103);
      doubleArray2[3] = (-3075.19);
      doubleArray2[4] = (-85.914224282137);
      doubleArray2[5] = 0.0;
      doubleArray1[1] = doubleArray2;
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-3075.19));
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNull(range0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(simpleHistogramDataset0);
      assertNull(range1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertNull(number0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      Integer integer1 = Integer.getInteger("X+0=S8#}v>", integer0);
      assertNotNull(integer1);
      assertEquals(200, (int)integer1);
      
      TimeSeries timeSeries0 = new TimeSeries(integer1);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertNull(range0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[10] = (-0.8033551431548414);
      Number[][] numberArray0 = new Number[2][0];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 0.0;
      numberArray1[1] = (Number) 0.0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 0.0;
      numberArray2[1] = (Number) 0.0;
      numberArray2[2] = (Number) 0.0;
      numberArray2[3] = (Number) (-0.8033551431548414);
      numberArray2[4] = (Number) (-0.8033551431548414);
      numberArray2[5] = (Number) (-0.8033551431548414);
      numberArray2[6] = (Number) (-0.8033551431548414);
      numberArray2[7] = (Number) 0.0;
      numberArray2[8] = (Number) (-0.8033551431548414);
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals((-4.016775715774207), range0.getLowerBound(), 0.01);
      assertEquals((-2.0083878578871035), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(4.016775715774207, range0.getLength(), 0.01);
      assertEquals(2, numberArray0.length);
      
      Object[][][] objectArray0 = new Object[1][5][9];
      Object[][] objectArray1 = new Object[2][8];
      objectArray1[0] = (Object[]) numberArray2;
      objectArray1[1] = (Object[]) numberArray2;
      objectArray0[0] = objectArray1;
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertNotNull(defaultWindDataset0);
      assertEquals(1, defaultWindDataset0.getSeriesCount());
      assertEquals(1, objectArray0.length);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultWindDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(1, defaultWindDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(1, objectArray0.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, numberArray0.length);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, true);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertEquals(1, defaultWindDataset0.getSeriesCount());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1, objectArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-930), 20);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-930), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(20, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, 244);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[5] = (-3426.901705771);
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      doubleArray0[2] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("[O", "[O", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      List list0 = keyToGroupMap0.getGroups();
      assertNotNull(list0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1);
      assertNotNull(pieDataset0);
      assertEquals(3, doubleArray0.length);
      
      List list1 = ((DefaultPieDataset) pieDataset0).getKeys();
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertFalse(list1.isEmpty());
      assertEquals(9, list1.size());
      assertEquals(3, doubleArray0.length);
      
      Comparable comparable0 = ((DefaultPieDataset) pieDataset0).getKey(1);
      assertNotNull(comparable0);
      assertEquals("[O2", comparable0);
      assertEquals(3, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) 0.0, (KeyedValues) pieDataset0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset1, keyToGroupMap0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(3, doubleArray0.length);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
      assertFalse(number0.equals((Object)double0));
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4L);
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, month0.getMonth());
      assertEquals(1970, month0.getYearValue());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(4L, month0.getFirstMillisecond());
      assertEquals(4L, month0.getLastMillisecond());
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(4L, hour0.getFirstMillisecond());
      assertEquals(0, hour0.getHour());
      assertEquals(4L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Hour hour1 = (Hour)hour0.next();
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      assertFalse(hour1.equals((Object)hour0));
      assertNotNull(hour1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(4L, hour0.getFirstMillisecond());
      assertEquals(0, hour0.getHour());
      assertEquals(4L, hour0.getLastMillisecond());
      assertEquals(1, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(4L, 23);
      assertNotNull(lineFunction2D0);
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      
      Month month1 = new Month(mockDate0);
      assertTrue(month1.equals((Object)month0));
      assertNotNull(month1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(1970, month1.getYearValue());
      assertEquals(23641L, month1.getSerialIndex());
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(1, month1.getMonth());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 4L, 2668.9733882964, 30, month1);
      assertNotSame(month1, month0);
      assertTrue(month1.equals((Object)month0));
      assertNotNull(xYSeries0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(1970, month1.getYearValue());
      assertEquals(23641L, month1.getSerialIndex());
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(1, month1.getMonth());
      assertEquals(96.0, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(30, xYSeries0.getItemCount());
      assertEquals(2668.9733882964, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(4.0, xYSeries0.getMinX(), 0.01);
      assertEquals(61390.3879308172, xYSeries0.getMaxY(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertTrue(month1.equals((Object)month0));
      assertNotNull(xYSeriesCollection0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(1970, month1.getYearValue());
      assertEquals(23641L, month1.getSerialIndex());
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(1, month1.getMonth());
      assertEquals(96.0, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(30, xYSeries0.getItemCount());
      assertEquals(2668.9733882964, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(4.0, xYSeries0.getMinX(), 0.01);
      assertEquals(61390.3879308172, xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotSame(month1, month0);
      assertTrue(month1.equals((Object)month0));
      assertNotNull(range0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(4.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(4L, month1.getLastMillisecond());
      assertEquals(1970, month1.getYearValue());
      assertEquals(23641L, month1.getSerialIndex());
      assertEquals(4L, month1.getFirstMillisecond());
      assertEquals(1, month1.getMonth());
      assertEquals(96.0, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(30, xYSeries0.getItemCount());
      assertEquals(2668.9733882964, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(4.0, xYSeries0.getMinX(), 0.01);
      assertEquals(61390.3879308172, xYSeries0.getMaxY(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(30743.1939654086, range0.getCentralValue(), 0.01);
      assertEquals(96.0, range0.getLowerBound(), 0.01);
      assertEquals(61390.3879308172, range0.getUpperBound(), 0.01);
      assertEquals(61294.3879308172, range0.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = xYSeriesCollection0.getDomainBounds(true);
      assertNull(range0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertNotNull(defaultKeyedValuesDataset1);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, 0.0);
      assertNotNull(powerFunction2D0);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, Double.NEGATIVE_INFINITY, 3527.758092, (-9999), (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-2800));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-2800), categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      Day day0 = Day.parseDay("");
      assertNull(day0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2800), 147.16971, 332, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The 'series' argument is out of bounds (", ",", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 194.628512197004;
      doubleArray1[3] = 600.5;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 2.0;
      doubleArray1[6] = 1.7976931348623157E308;
      doubleArray1[7] = Double.NEGATIVE_INFINITY;
      doubleArray1[8] = 600.5;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {1.0, (-1.0), 194.628512197004, 600.5, (-1.0), 2.0, 1.7976931348623157E308, Double.NEGATIVE_INFINITY, 600.5}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(polynomialFunction2D0, Double.NEGATIVE_INFINITY, 3067.216596556199, 1069, 600.5);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      String string0 = "L8X$wKG";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      int int0 = 1;
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals(3, doubleArray0.length);
      
      Integer integer0 = new Integer(1);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1, (double) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(powerFunction2D0);
      assertEquals(1.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, list0, false);
      assertNotNull(range0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      Range range1 = Range.shift(range0, (double) 1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      String string1 = "Series 4";
      Number[][] numberArray0 = new Number[5][9];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = number0;
      numberArray1[1] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[3];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) integer0;
      numberArray3[1] = (Number) integer0;
      numberArray3[2] = number0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[4];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      double double0 = (-1.0);
      Float float0 = new Float((-1.0));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      numberArray4[0] = (Number) float0;
      numberArray4[1] = (Number) integer0;
      numberArray4[2] = (Number) integer0;
      numberArray4[3] = number0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[9];
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray1));
      
      numberArray5[0] = (Number) float0;
      numberArray5[1] = (Number) integer0;
      numberArray5[2] = number0;
      Double double1 = new Double((-944.4103));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)number0, 0.01);
      assertNotNull(double1);
      assertEquals((-944.4103), (double)double1, 0.01);
      
      numberArray5[3] = (Number) double1;
      numberArray5[4] = number0;
      numberArray5[5] = number0;
      numberArray5[6] = (Number) integer0;
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      int int1 = 3;
      int int2 = (-2146785549);
      MockDate mockDate0 = new MockDate(5, 11, 3, (-2146785549), 1837);
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try { 
        SerialDate.createInstance((Date) mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[4][7];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-944.4103);
      doubleArray2[3] = (-3075.19);
      doubleArray2[4] = (-85.914224282137);
      doubleArray2[5] = 0.0;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("%+Wfuc?vcax", "%+Wfuc?vcax", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals((-3075.19), number0);
      assertEquals(4, doubleArray1.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, doubleArray1.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 2);
      assertNotNull(categoryToPieDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(4, doubleArray1.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) (-3075.19), (-85.914224282137), 244);
      assertNotNull(pieDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(4, doubleArray1.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      defaultPieDataset0.sortByValues(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      PieDatasetSelectionState pieDatasetSelectionState0 = defaultPieDataset0.getSelectionState();
      assertSame(defaultPieDataset0, pieDatasetSelectionState0);
      assertSame(pieDatasetSelectionState0, defaultPieDataset0);
      assertNotNull(pieDatasetSelectionState0);
      
      defaultPieDataset0.setSelectionState(pieDatasetSelectionState0);
      assertSame(defaultPieDataset0, pieDatasetSelectionState0);
      assertSame(pieDatasetSelectionState0, defaultPieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertSame(defaultPieDataset0, pieDatasetSelectionState0);
      assertEquals(0.0, double0, 0.01);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(19, 19);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(18, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(dynamicTimeSeriesCollection0, 1);
      assertNotNull(xYBarDataset0);
      assertEquals(18, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYBarDataset0);
      assertNull(range0);
      assertEquals(18, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-2220.6407807945125));
      assertNotNull(range1);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2220.6407807945125), range1.getLowerBound(), 0.01);
      assertEquals((-2220.6407807945125), range1.getUpperBound(), 0.01);
      assertEquals((-2220.6407807945125), range1.getCentralValue(), 0.01);
      
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 19;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 19;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (-2220.6407807945125);
      doubleArray1[6] = (-2220.6407807945125);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 204.07;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (double) 2;
      doubleArray2[6] = (-2220.6407807945125);
      doubleArray2[7] = (double) 2;
      doubleArray2[8] = (double) 2;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "createInstance", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertEquals((-1008.2853903972563), range2.getCentralValue(), 0.01);
      assertEquals(204.07, range2.getUpperBound(), 0.01);
      assertEquals(2424.7107807945126, range2.getLength(), 0.01);
      assertEquals((-2220.6407807945125), range2.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = "[O";
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-3426.901705771);
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      doubleArray0[2] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("[O", "[O", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals((-3426.901705771), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(3426.901705771, range0.getLength(), 0.01);
      assertEquals((-1713.4508528855), range0.getCentralValue(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1979);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1979, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) (-3426.901705771), (-3002.116795186), 2009);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1979, Size: 9
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      assertNull(range0);
      assertEquals(0, linkedList0.size());
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultXYZDataset0);
      assertNull(number0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (-3075.19);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 2691);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-944.4103);
      doubleArray1[1] = (-1007.772);
      doubleArray1[2] = (-1914.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-3075.19);
      doubleArray1[5] = (-85.914224282137);
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-944.4103);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-944.4103);
      doubleArray2[3] = (-3075.19);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-85.914224282137);
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'xRange' argument", "kX=ip`N", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals((-3075.19), number0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-3426.901705771);
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      doubleArray0[2] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("[O", "[O", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      categoryDataset0.addChangeListener(xYDatasetTableModel0);
      assertEquals(3, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      List list0 = keyToGroupMap0.getGroups();
      assertNotNull(list0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1);
      assertNotNull(pieDataset0);
      assertEquals(3, doubleArray0.length);
      
      List list1 = ((DefaultPieDataset) pieDataset0).getKeys();
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertFalse(list1.isEmpty());
      assertEquals(9, list1.size());
      assertEquals(3, doubleArray0.length);
      
      Comparable comparable0 = ((DefaultPieDataset) pieDataset0).getKey(2);
      assertNotNull(comparable0);
      assertEquals("[O3", comparable0);
      assertEquals(3, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) 0.0, (KeyedValues) pieDataset0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertNotNull(range0);
      assertEquals((-5140.352558656499), range0.getCentralValue(), 0.01);
      assertEquals((-10280.705117312998), range0.getLowerBound(), 0.01);
      assertEquals(10280.705117312998, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(3, doubleArray0.length);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotSame(range1, range0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertTrue(range1.equals((Object)range0));
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertNotNull(range1);
      assertEquals(10280.705117312998, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals((-10280.705117312998), range1.getLowerBound(), 0.01);
      assertEquals((-5140.352558656499), range1.getCentralValue(), 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals(3, doubleArray0.length);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1, (double) integer0);
      assertNotNull(powerFunction2D0);
      assertEquals(1.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(3, doubleArray0.length);
      
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      boolean boolean0 = arrayList0.add(defaultTableXYDataset0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(arrayList0.contains(defaultTableXYDataset0));
      
      ArrayList<DefaultStatisticalCategoryDataset> arrayList1 = new ArrayList<DefaultStatisticalCategoryDataset>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, arrayList1, false);
      assertNull(range0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNotNull(range1);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      linkedList0.addFirst(defaultMultiValueCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(defaultMultiValueCategoryDataset0));
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      
      boolean boolean0 = linkedList0.addAll((Collection<? extends DefaultMultiValueCategoryDataset>) vector0);
      assertFalse(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(linkedList0.contains(defaultMultiValueCategoryDataset0));
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      
      Comparable<IntervalXYDelegate> comparable0 = null;
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = stack0.add(defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(defaultStatisticalCategoryDataset0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset1);
      
      boolean boolean1 = stack0.add(defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(defaultStatisticalCategoryDataset1));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      System.setCurrentTimeMillis(2930L);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, (Range) null, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultStatisticalCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      linkedList0.addFirst(defaultMultiValueCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(defaultMultiValueCategoryDataset0));
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      
      boolean boolean0 = linkedList0.addAll((Collection<? extends DefaultMultiValueCategoryDataset>) vector0);
      assertFalse(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertTrue(linkedList0.contains(defaultMultiValueCategoryDataset0));
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 2.0;
      doubleArray0[1] = (-1.0);
      Vector<DefaultStatisticalCategoryDataset> vector1 = new Vector<DefaultStatisticalCategoryDataset>();
      assertNotNull(vector1);
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean1 = vector1.add(defaultStatisticalCategoryDataset0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(vector1.isEmpty());
      assertEquals(10, vector1.capacity());
      assertEquals(1, vector1.size());
      assertTrue(vector1.contains(defaultStatisticalCategoryDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-3426.901705771);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-3505.49811844);
      doubleArray0[0] = doubleArray1;
      Number[][] numberArray0 = new Number[1][7];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) 0.0;
      numberArray1[2] = (Number) 0.0;
      numberArray1[3] = (Number) 0.0;
      numberArray1[4] = (Number) (-3505.49811844);
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals((-3505.49811844), range0.getLowerBound(), 0.01);
      assertEquals(3505.49811844, range0.getLength(), 0.01);
      assertEquals((-1752.74905922), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals((-3505.49811844), range1.getLowerBound(), 0.01);
      assertEquals(3505.49811844, range1.getLength(), 0.01);
      assertEquals((-1752.74905922), range1.getCentralValue(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      byte byte0 = (byte) (-42);
      double double0 = (-1.0);
      double double1 = 4221.0;
      double[][] doubleArray0 = new double[0][6];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(23, 2, minute0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYTaskDataset0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertNull(number1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.7976931348623157E308);
      doubleArray0[1] = 2302.9430401859076;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-1.7976931348623157E308), 2302.9430401859076}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2590.0), 2.0, 464, (-1.7976931348623157E308));
      assertNotNull(xYSeries0);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertEquals((-2590.0), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-1.7976931348623157E308), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-1.7976931348623157E308), xYSeries0.getMaxY(), 0.01);
      assertEquals(2.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(464, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertArrayEquals(new double[] {(-1.7976931348623157E308), 2302.9430401859076}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      String string0 = "L8X$wKG";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      categoryToPieDataset0.validateObject();
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals(3, doubleArray0.length);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1, 0.0);
      assertNotNull(powerFunction2D0);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1.0, powerFunction2D0.getA(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertTrue(number0.equals((Object)double0));
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(3, doubleArray0.length);
      
      List list1 = ((DefaultCategoryDataset) categoryDataset0).getRowKeys();
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(3, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals(3, doubleArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(defaultTableXYDataset0));
      
      boolean boolean0 = arrayList0.add(defaultTableXYDataset0);
      assertTrue(boolean0);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(defaultTableXYDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, list0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNull(range0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertNull(range1);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      MockDate mockDate0 = new MockDate((-9223372036854775808L));
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Sun Dec 02 16:47:04 GMT 292269055", mockDate0.toString());
      assertEquals(12, month0.getMonth());
      assertEquals(3507228672L, month0.getSerialIndex());
      assertEquals((-9223372036854775808L), month0.getFirstMillisecond());
      assertEquals((-9223372036854775808L), month0.getLastMillisecond());
      assertEquals(292269055, month0.getYearValue());
      
      XYSeries xYSeries0 = new XYSeries(month0);
      assertNotNull(xYSeries0);
      assertEquals("Sun Dec 02 16:47:04 GMT 292269055", mockDate0.toString());
      assertEquals(12, month0.getMonth());
      assertEquals(3507228672L, month0.getSerialIndex());
      assertEquals((-9223372036854775808L), month0.getFirstMillisecond());
      assertEquals((-9223372036854775808L), month0.getLastMillisecond());
      assertEquals(292269055, month0.getYearValue());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals("Sun Dec 02 16:47:04 GMT 292269055", mockDate0.toString());
      assertEquals(12, month0.getMonth());
      assertEquals(3507228672L, month0.getSerialIndex());
      assertEquals((-9223372036854775808L), month0.getFirstMillisecond());
      assertEquals((-9223372036854775808L), month0.getLastMillisecond());
      assertEquals(292269055, month0.getYearValue());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNull(range2);
      assertEquals("Sun Dec 02 16:47:04 GMT 292269055", mockDate0.toString());
      assertEquals(12, month0.getMonth());
      assertEquals(3507228672L, month0.getSerialIndex());
      assertEquals((-9223372036854775808L), month0.getFirstMillisecond());
      assertEquals((-9223372036854775808L), month0.getLastMillisecond());
      assertEquals(292269055, month0.getYearValue());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-3426.901705771);
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-3426.901705771);
      doubleArray0[2] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("[O", "[O", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      List list0 = keyToGroupMap0.getGroups();
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals((-3426.901705771), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-6853.803411542), range0.getLowerBound(), 0.01);
      assertEquals(6853.803411542, range0.getLength(), 0.01);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(3, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1);
      assertNotNull(pieDataset0);
      assertEquals(3, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) 0.0, (KeyedValues) pieDataset0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(3, doubleArray0.length);
      
      CategoryDataset categoryDataset2 = DatasetUtilities.createCategoryDataset("!<>Dq9pR8#f/odW", "[O", doubleArray0);
      assertNotSame(categoryDataset2, categoryDataset1);
      assertNotSame(categoryDataset2, categoryDataset0);
      assertFalse(categoryDataset2.equals((Object)categoryDataset1));
      assertFalse(categoryDataset2.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset2);
      assertEquals(3, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset2, false);
      assertNotSame(categoryDataset2, categoryDataset1);
      assertNotSame(categoryDataset2, categoryDataset0);
      assertNotSame(range1, range0);
      assertFalse(categoryDataset2.equals((Object)categoryDataset1));
      assertFalse(categoryDataset2.equals((Object)categoryDataset0));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(3426.901705771, range1.getLength(), 0.01);
      assertEquals((-1713.4508528855), range1.getCentralValue(), 0.01);
      assertEquals((-3426.901705771), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      TaskSeries taskSeries0 = new TaskSeries("~BYg#vKrFU^ib");
      assertNotNull(taskSeries0);
      assertEquals(0, taskSeries0.getItemCount());
      assertTrue(taskSeries0.getNotify());
      assertNull(taskSeries0.getDescription());
      
      taskSeriesCollection0.add(taskSeries0);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeries0.getItemCount());
      assertTrue(taskSeries0.getNotify());
      assertNull(taskSeries0.getDescription());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, false);
      assertNull(range0);
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYTaskDataset0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(34.4812616319, 1112.6022190289);
      assertNotNull(powerFunction2D0);
      assertEquals(1112.6022190289, powerFunction2D0.getB(), 0.01);
      assertEquals(34.4812616319, powerFunction2D0.getA(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      Quarter quarter1 = (Quarter)quarter0.next();
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotNull(quarter1);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-2564.19), 34.4812616319, 434, quarter1);
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertNotNull(xYSeries0);
      assertEquals(1112.6022190289, powerFunction2D0.getB(), 0.01);
      assertEquals(34.4812616319, powerFunction2D0.getA(), 0.01);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(434, xYSeries0.getItemCount());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMinY(), 0.01);
      assertEquals((-2564.19), xYSeries0.getMinX(), 0.01);
      assertEquals(34.4812616319, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      int int0 = 438;
      MockDate mockDate0 = new MockDate(438, 438, 447, (-2267), (-2267), 438);
      assertNotNull(mockDate0);
      
      Quarter quarter0 = new Quarter(mockDate0);
      assertNotNull(quarter0);
      assertEquals("Sun Jun 15 23:20:18 GMT 2375", mockDate0.toString());
      assertEquals(12794887218000L, quarter0.getLastMillisecond());
      assertEquals(12794887218000L, quarter0.getFirstMillisecond());
      assertEquals(2375, quarter0.getYearValue());
      assertEquals(9502L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      List list0 = defaultCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(quarter0);
      assertNotNull(keyToGroupMap0);
      assertEquals("Sun Jun 15 23:20:18 GMT 2375", mockDate0.toString());
      assertEquals(12794887218000L, quarter0.getLastMillisecond());
      assertEquals(12794887218000L, quarter0.getFirstMillisecond());
      assertEquals(2375, quarter0.getYearValue());
      assertEquals(9502L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      Instant instant0 = MockInstant.ofEpochMilli(447);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      
      List list1 = keyToGroupMap0.getGroups();
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals("Sun Jun 15 23:20:18 GMT 2375", mockDate0.toString());
      assertEquals(12794887218000L, quarter0.getLastMillisecond());
      assertEquals(12794887218000L, quarter0.getFirstMillisecond());
      assertEquals(2375, quarter0.getYearValue());
      assertEquals(9502L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      KeyToGroupMap keyToGroupMap1 = (KeyToGroupMap)keyToGroupMap0.clone();
      assertNotSame(keyToGroupMap0, keyToGroupMap1);
      assertNotSame(keyToGroupMap1, keyToGroupMap0);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertNotNull(keyToGroupMap1);
      assertEquals("Sun Jun 15 23:20:18 GMT 2375", mockDate0.toString());
      assertEquals(12794887218000L, quarter0.getLastMillisecond());
      assertEquals(12794887218000L, quarter0.getFirstMillisecond());
      assertEquals(2375, quarter0.getYearValue());
      assertEquals(9502L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      List list2 = keyToGroupMap0.getGroups();
      assertNotSame(keyToGroupMap0, keyToGroupMap1);
      assertNotSame(list2, list1);
      assertTrue(keyToGroupMap0.equals((Object)keyToGroupMap1));
      assertTrue(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      assertNotNull(list2);
      assertEquals("Sun Jun 15 23:20:18 GMT 2375", mockDate0.toString());
      assertEquals(12794887218000L, quarter0.getLastMillisecond());
      assertEquals(12794887218000L, quarter0.getFirstMillisecond());
      assertEquals(2375, quarter0.getYearValue());
      assertEquals(9502L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, list2.size());
      assertFalse(list2.isEmpty());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertNotSame(keyToGroupMap0, keyToGroupMap1);
      assertTrue(keyToGroupMap0.equals((Object)keyToGroupMap1));
      assertNull(range0);
      assertEquals("Sun Jun 15 23:20:18 GMT 2375", mockDate0.toString());
      assertEquals(12794887218000L, quarter0.getLastMillisecond());
      assertEquals(12794887218000L, quarter0.getFirstMillisecond());
      assertEquals(2375, quarter0.getYearValue());
      assertEquals(9502L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range2);
      
      System.setCurrentTimeMillis(438);
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      assertNull(range3);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 4);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(4, categoryToPieDataset0.getExtractIndex());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) instant0, (double) 438, (-335));
      assertNotNull(defaultPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(4, categoryToPieDataset0.getExtractIndex());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(quarter0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals("Sun Jun 15 23:20:18 GMT 2375", mockDate0.toString());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(12794887218000L, quarter0.getLastMillisecond());
      assertEquals(12794887218000L, quarter0.getFirstMillisecond());
      assertEquals(2375, quarter0.getYearValue());
      assertEquals(9502L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)MockCalendar.getInstance();
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=438,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=438,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      long long0 = quarter0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(438L, long0);
      assertEquals("Sun Jun 15 23:20:18 GMT 2375", mockDate0.toString());
      assertEquals(12794887218000L, quarter0.getLastMillisecond());
      assertEquals(12794887218000L, quarter0.getFirstMillisecond());
      assertEquals(2375, quarter0.getYearValue());
      assertEquals(9502L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2375,MONTH=5,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=30,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertTrue(boolean0);
      assertEquals("Sun Jun 15 23:20:18 GMT 2375", mockDate0.toString());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(12794887218000L, quarter0.getLastMillisecond());
      assertEquals(12794887218000L, quarter0.getFirstMillisecond());
      assertEquals(2375, quarter0.getYearValue());
      assertEquals(9502L, quarter0.getSerialIndex());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) date0, (KeyedValues) categoryToPieDataset0);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertNotNull(defaultCategoryDataset1);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(4, categoryToPieDataset0.getExtractIndex());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-3143), "Series ", 447, (-2267), 447, 4, 2844, 4, 4, 447, 464, 464, (-2267));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 447
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      TaskSeries taskSeries0 = new TaskSeries("~BYg#vKrFU^ib");
      assertNotNull(taskSeries0);
      assertEquals(0, taskSeries0.getItemCount());
      assertNull(taskSeries0.getDescription());
      assertTrue(taskSeries0.getNotify());
      
      taskSeriesCollection0.add(taskSeries0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeries0.getItemCount());
      assertNull(taskSeries0.getDescription());
      assertTrue(taskSeries0.getNotify());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      categoryToPieDataset0.validateObject();
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3, doubleArray0.length);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1, 0.0);
      assertNotNull(powerFunction2D0);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1.0, powerFunction2D0.getA(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertTrue(number0.equals((Object)double0));
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(3, doubleArray0.length);
      
      List list1 = ((DefaultCategoryDataset) categoryDataset0).getRowKeys();
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(3, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals(3, doubleArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, list1, false);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(range0);
      assertEquals(3, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) 1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertNotNull(powerFunction2D0);
      assertEquals(Double.POSITIVE_INFINITY, powerFunction2D0.getA(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, powerFunction2D0.getB(), 0.01);
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((-673.6019357760287), 6.283185307179586, true, true);
      assertNotNull(simpleHistogramBin0);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(6.283185307179586, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-673.6019357760287), simpleHistogramBin0.getLowerBound(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 692.21070856112, 3386.2381899727557, 188, simpleHistogramBin0);
      assertNotNull(xYSeries0);
      assertEquals(Double.POSITIVE_INFINITY, powerFunction2D0.getA(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, powerFunction2D0.getB(), 0.01);
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(6.283185307179586, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-673.6019357760287), simpleHistogramBin0.getLowerBound(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMinY(), 0.01);
      assertEquals(3386.2381899727557, xYSeries0.getMaxX(), 0.01);
      assertEquals(692.21070856112, xYSeries0.getMinX(), 0.01);
      assertEquals(188, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, false);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1), (-1));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(defaultMultiValueCategoryDataset0));
      
      linkedList0.addFirst(defaultMultiValueCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(defaultMultiValueCategoryDataset0));
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-221.1130491);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[6] = (-3426.901705771);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-3505.49811844);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2026.2488868906);
      doubleArray2[1] = (-3426.901705771);
      doubleArray1[8] = 0.0;
      doubleArray2[4] = (-221.1130491);
      doubleArray0[2] = doubleArray2;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("[O", "[O", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      defaultCategoryDataset0.validateObject();
      assertEquals(3, doubleArray0.length);
      
      defaultCategoryDataset0.addValue((Number) 0.0, (Comparable) 0.0, (Comparable) 0.0);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals((-3426.901705771), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(3426.901705771, range0.getLength(), 0.01);
      assertEquals((-1713.4508528855), range0.getCentralValue(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double1 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 45);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 45);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(45, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) 0.0, (-2026.2488868906), 69);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 45, Size: 10
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      defaultTableXYDataset0.updateXPoints();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      DomainOrder domainOrder0 = defaultTableXYDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      Range range0 = defaultTableXYDataset0.getDomainBounds(true);
      assertNull(range0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(defaultTableXYDataset0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-3507), 470);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(470, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-3507), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, true);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(470, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-3507), slidingGanttCategoryDataset0.getFirstCategoryIndex());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYTaskDataset0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      boolean boolean0 = stack0.retainAll(treeSet0);
      assertFalse(boolean0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0, (List) stack0, false);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertNull(number1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = new Range(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = (-2624.408);
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[5] = Double.NEGATIVE_INFINITY;
      doubleArray2[6] = Double.NEGATIVE_INFINITY;
      doubleArray2[7] = Double.NEGATIVE_INFINITY;
      doubleArray2[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = (-2624.408);
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = (-2624.408);
      doubleArray6[1] = Double.NEGATIVE_INFINITY;
      doubleArray6[2] = (-2624.408);
      doubleArray6[3] = (-2624.408);
      doubleArray6[4] = (-2624.408);
      doubleArray6[5] = Double.NEGATIVE_INFINITY;
      doubleArray6[6] = (-2624.408);
      doubleArray6[7] = (-2624.408);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = (-2624.408);
      doubleArray7[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      
      doubleArray8[0] = (-2624.408);
      doubleArray8[1] = Double.NEGATIVE_INFINITY;
      doubleArray8[2] = Double.NEGATIVE_INFINITY;
      doubleArray8[3] = Double.NEGATIVE_INFINITY;
      doubleArray8[4] = Double.NEGATIVE_INFINITY;
      doubleArray8[5] = (-2624.408);
      doubleArray8[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[8];
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      
      doubleArray9[0] = (-2624.408);
      doubleArray9[1] = (-2624.408);
      doubleArray9[2] = Double.NEGATIVE_INFINITY;
      doubleArray9[3] = Double.NEGATIVE_INFINITY;
      doubleArray9[4] = (-2624.408);
      doubleArray9[5] = (-2624.408);
      doubleArray9[6] = Double.NEGATIVE_INFINITY;
      doubleArray9[7] = (-2624.408);
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(".#};", ".#};", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) Double.NEGATIVE_INFINITY);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2423, 470);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(2423, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(470, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = vector0.add(defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains(defaultStatisticalCategoryDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultStatisticalCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-3426.901705771);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-3505.49811844);
      doubleArray0[0] = doubleArray1;
      Number[][] numberArray0 = new Number[1][7];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) 0.0;
      numberArray1[1] = (Number) 0.0;
      numberArray1[2] = (Number) 0.0;
      numberArray1[3] = (Number) 0.0;
      numberArray1[4] = (Number) (-3505.49811844);
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals((-3505.49811844), range0.getLowerBound(), 0.01);
      assertEquals((-1752.74905922), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(3505.49811844, range0.getLength(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals((-1752.74905922), range1.getCentralValue(), 0.01);
      assertEquals((-3505.49811844), range1.getLowerBound(), 0.01);
      assertEquals(3505.49811844, range1.getLength(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 0.0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertNotNull(range2);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals((-1752.74905922), range2.getCentralValue(), 0.01);
      assertEquals((-3505.49811844), range2.getLowerBound(), 0.01);
      assertEquals(3505.49811844, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-221.1130491);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[6] = (-3426.901705771);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-3505.49811844);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2026.2488868906);
      doubleArray2[1] = (-3426.901705771);
      doubleArray1[8] = 0.0;
      doubleArray2[4] = (-221.1130491);
      doubleArray0[2] = doubleArray2;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("[O", "[O", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      defaultCategoryDataset0.addValue((Number) 0.0, (Comparable) 0.0, (Comparable) 0.0);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals((-1713.4508528855), range0.getCentralValue(), 0.01);
      assertEquals(3426.901705771, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-3426.901705771), range0.getLowerBound(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("[O", "", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      defaultCategoryDataset0.clear();
      assertEquals(3, doubleArray0.length);
      
      defaultCategoryDataset0.addValue(4318.3219221674, (Comparable) "", (Comparable) "[O");
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(4318.3219221674, range0.getCentralValue(), 0.01);
      assertEquals(4318.3219221674, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4318.3219221674, range0.getLowerBound(), 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(defaultMultiValueCategoryDataset0));
      
      linkedList0.addFirst(defaultMultiValueCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(defaultMultiValueCategoryDataset0));
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      
      boolean boolean0 = linkedList0.addAll((Collection<? extends DefaultMultiValueCategoryDataset>) vector0);
      assertFalse(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(linkedList0.contains(defaultMultiValueCategoryDataset0));
      assertFalse(vector0.contains(defaultMultiValueCategoryDataset0));
      
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1418.8453072252;
      doubleArray1[1] = 204.07;
      doubleArray1[2] = 425.0;
      doubleArray1[3] = (-2116.02415);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals((-2116.02415), range0.getLowerBound(), 0.01);
      assertEquals(3534.8694572252, range0.getLength(), 0.01);
      assertEquals((-348.5894213874001), range0.getCentralValue(), 0.01);
      assertEquals(1418.8453072252, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[1] = 0.0;
      doubleArray0[10] = (-0.8033551431548414);
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add((DefaultTableXYDataset) null);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      boolean boolean1 = arrayList0.add((DefaultTableXYDataset) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 'series' out of range.
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2249.39879587;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-0.8033551431548414);
      doubleArray2[3] = 2249.39879587;
      doubleArray2[4] = (-0.8033551431548414);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 2249.39879587;
      doubleArray2[7] = 2249.39879587;
      doubleArray2[8] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray3[2] = (-0.8033551431548414);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 2249.39879587;
      doubleArray3[6] = 0.0;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, 12.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-3426.901705771);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-3505.49811844);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2026.2);
      doubleArray2[1] = (-3426.901705771);
      doubleArray2[4] = (-221.1130491);
      doubleArray0[2] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("[O", "[O", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(7010.99623688, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-3505.49811844), range0.getCentralValue(), 0.01);
      assertEquals((-7010.99623688), range0.getLowerBound(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) (-2026.2), (KeyedValues) categoryToPieDataset0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(range1, range0);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals((-1752.74905922), range1.getCentralValue(), 0.01);
      assertEquals((-3505.49811844), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(3505.49811844, range1.getLength(), 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      String string0 = "k52LFQ,x2[5jAU@}<fW";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("/s", "k52LFQ,x2[5jAU@}<fW", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      int int0 = 1;
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2844);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2844, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      categoryToPieDataset0.validateObject();
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2844, categoryToPieDataset0.getExtractIndex());
      assertEquals(3, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 1);
      assertNotNull(pieDataset0);
      assertEquals(3, doubleArray0.length);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1, 1);
      assertNotNull(powerFunction2D0);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1.0, powerFunction2D0.getA(), 0.01);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, Double.NEGATIVE_INFINITY, 0.0, 3962, "/s");
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      linkedList0.addFirst(defaultMultiValueCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(defaultMultiValueCategoryDataset0));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range1);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NEGATIVE_INFINITY);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range2.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range2.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range2.getCentralValue(), 0.01);
      
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(defaultTableXYDataset0));
      
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 438.7894256);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-0.8033551431548414);
      doubleArray1[1] = (-0.8033551431548414);
      doubleArray1[2] = (-0.8033551431548414);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-0.8033551431548414);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-0.8033551431548414);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-0.8033551431548414);
      doubleArray4[1] = (-0.8033551431548414);
      doubleArray4[2] = Double.POSITIVE_INFINITY;
      doubleArray4[3] = (-0.8033551431548414);
      doubleArray4[4] = (-0.8033551431548414);
      doubleArray0[3] = doubleArray4;
      doubleArray0[4] = doubleArray1;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = Double.POSITIVE_INFINITY;
      doubleArray5[1] = (-0.8033551431548414);
      doubleArray5[2] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-0.8033551431548414));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(timeTableXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeTableXYDataset timeTableXYDataset1 = new TimeTableXYDataset();
      assertTrue(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      assertNotNull(timeTableXYDataset1);
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeTableXYDataset0);
      assertNotSame(timeTableXYDataset0, timeTableXYDataset1);
      assertTrue(timeTableXYDataset0.equals((Object)timeTableXYDataset1));
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset1);
      assertNotSame(timeTableXYDataset1, timeTableXYDataset0);
      assertTrue(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      assertNull(number1);
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset1, false);
      assertNotSame(timeTableXYDataset1, timeTableXYDataset0);
      assertTrue(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      assertNull(range0);
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      
      Number[][] numberArray0 = new Number[5][1];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = null;
      numberArray1[1] = number0;
      numberArray1[2] = number0;
      numberArray1[3] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = number0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[5];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = null;
      numberArray3[1] = null;
      numberArray3[2] = number0;
      numberArray3[3] = null;
      numberArray3[4] = null;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[4];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = number0;
      numberArray4[1] = number0;
      numberArray4[2] = number0;
      numberArray4[3] = null;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[0];
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray4));
      
      numberArray0[4] = numberArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, numberArray0.length);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(5, numberArray0.length);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 2820.80794);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertEquals(2820.80794, range2.getCentralValue(), 0.01);
      assertEquals(2820.80794, range2.getLowerBound(), 0.01);
      assertEquals(2820.80794, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(5, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[1] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-3426.901705771);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-3505.49811844);
      doubleArray0[0] = doubleArray1;
      Number[][] numberArray0 = new Number[1][7];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) 0.0;
      numberArray1[1] = (Number) 0.0;
      numberArray1[2] = (Number) 0.0;
      doubleArray1[2] = 0.0;
      numberArray1[4] = (Number) (-3505.49811844);
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals((-1752.74905922), range0.getCentralValue(), 0.01);
      assertEquals((-3505.49811844), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(3505.49811844, range0.getLength(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3505.49811844, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals((-1752.74905922), range1.getCentralValue(), 0.01);
      assertEquals((-3505.49811844), range1.getLowerBound(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 0.0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotNull(range2);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals((-1752.74905922), range2.getCentralValue(), 0.01);
      assertEquals((-3505.49811844), range2.getLowerBound(), 0.01);
      assertEquals(3505.49811844, range2.getLength(), 0.01);
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[5] = (-3426.901705771);
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      doubleArray0[2] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("[O", "[O", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      List list0 = keyToGroupMap0.getGroups();
      assertNotNull(list0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1);
      assertNotNull(pieDataset0);
      assertEquals(3, doubleArray0.length);
      
      List list1 = ((DefaultPieDataset) pieDataset0).getKeys();
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertFalse(list1.isEmpty());
      assertEquals(9, list1.size());
      assertEquals(3, doubleArray0.length);
      
      Comparable comparable0 = ((DefaultPieDataset) pieDataset0).getKey(2);
      assertNotNull(comparable0);
      assertEquals("[O3", comparable0);
      assertEquals(3, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) (-3426.901705771), (KeyedValues) pieDataset0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(6853.803411542, range0.getLength(), 0.01);
      assertEquals((-3426.901705771), range0.getCentralValue(), 0.01);
      assertEquals((-6853.803411542), range0.getLowerBound(), 0.01);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(3, doubleArray0.length);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset1);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertTrue(number0.equals((Object)double0));
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, 2347.9055310987465, Double.POSITIVE_INFINITY, 2, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(timeTableXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeTableXYDataset timeTableXYDataset1 = new TimeTableXYDataset();
      assertTrue(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      assertNotNull(timeTableXYDataset1);
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeTableXYDataset0);
      assertNotSame(timeTableXYDataset0, timeTableXYDataset1);
      assertTrue(timeTableXYDataset0.equals((Object)timeTableXYDataset1));
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset1);
      assertNotSame(timeTableXYDataset1, timeTableXYDataset0);
      assertTrue(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      assertNull(number1);
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset1, false);
      assertNotSame(timeTableXYDataset1, timeTableXYDataset0);
      assertTrue(timeTableXYDataset1.equals((Object)timeTableXYDataset0));
      assertNull(range0);
      assertFalse(timeTableXYDataset1.getDomainIsPointsInTime());
      
      Number[][] numberArray0 = new Number[5][1];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = null;
      numberArray1[1] = number0;
      numberArray1[2] = number0;
      numberArray1[3] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = number0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[5];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = null;
      numberArray3[1] = null;
      numberArray3[2] = number0;
      numberArray3[3] = null;
      numberArray3[4] = null;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[4];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = number0;
      numberArray4[1] = number0;
      numberArray4[2] = number0;
      numberArray4[3] = null;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[0];
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray2));
      
      numberArray0[4] = numberArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, numberArray0.length);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(5, numberArray0.length);
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(timeTableXYDataset0);
      assertNotSame(timeTableXYDataset0, timeTableXYDataset1);
      assertTrue(timeTableXYDataset0.equals((Object)timeTableXYDataset1));
      assertNull(range2);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number number2 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertTrue(number2.equals((Object)number0));
      assertNotNull(number2);
      assertEquals(Double.NaN, number2);
      assertEquals(5, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      linkedList0.addFirst(defaultMultiValueCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(defaultMultiValueCategoryDataset0));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range1);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NEGATIVE_INFINITY);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range2.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range2.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range2.getLowerBound(), 0.01);
      
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(defaultTableXYDataset0));
      
      boolean boolean0 = arrayList0.add(defaultTableXYDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(defaultTableXYDataset0));
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, true);
      assertNull(range3);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range4 = DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
      assertNull(range4);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[12];
      doubleArray1[1] = 0.0;
      doubleArray1[10] = (-0.8033551431548414);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-0.8033551431548414));
      assertNotNull(range0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-0.8033551431548414), range0.getCentralValue(), 0.01);
      assertEquals((-0.8033551431548414), range0.getUpperBound(), 0.01);
      assertEquals((-0.8033551431548414), range0.getLowerBound(), 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DomainOrder domainOrder0 = defaultTableXYDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, false);
      assertNull(range0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range1);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(defaultTableXYDataset0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, false);
      assertNull(range2);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNull(range0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      int int0 = 2;
      Day day0 = Day.parseDay("d .;G");
      assertNull(day0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(2, 2502.4557824293165);
      assertNotNull(lineFunction2D0);
      assertEquals(2.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(2502.4557824293165, lineFunction2D0.getSlope(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 2, 2, 2, "d .;G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number[][] numberArray0 = new Number[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeTableXYDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      assertNull(number1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 470, 3117);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(470, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3117, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 470, 470);
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertNotNull(slidingGanttCategoryDataset1);
      assertEquals(470, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3117, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(470, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(470, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(slidingGanttCategoryDataset0, 10, 6);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertNotNull(slidingCategoryDataset0);
      assertEquals(470, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3117, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(10, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(6, slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultXYZDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0, (List) vector0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xIntervalSeriesCollection0, (List) stack0, false);
      assertNull(range0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(2776.4132539093, 2776.4132539093, "U2<`[|wrM7qmW)rwXA");
      Vector<Object> vector0 = new Vector<Object>();
      Vector<JSpinner.DefaultEditor> vector1 = new Vector<JSpinner.DefaultEditor>();
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 2188;
      doubleArray1[1] = 2776.4132539093;
      doubleArray1[2] = 2776.4132539093;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = 2776.4132539093;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 2439.1861953;
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = Double.NaN;
      doubleArray2[5] = (double) 2188;
      doubleArray2[6] = 2776.4132539093;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'xRange' argument", "", doubleArray0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      // Undeclared exception!
      try { 
        Range.scale(range0, (-536.8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      double[][] doubleArray0 = new double[9][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-3505.49811844);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-3426.901705771);
      doubleArray0[2] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("[O", "[O", doubleArray0);
      HistogramDataset histogramDataset0 = new HistogramDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) histogramDataset0, false);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals((-1752.74905922), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-3426.901705771);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-3505.49811844);
      doubleArray0[0] = doubleArray1;
      Number[][] numberArray0 = new Number[1][7];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) 0.0;
      numberArray1[1] = (Number) 0.0;
      numberArray1[2] = (Number) 0.0;
      numberArray1[3] = (Number) 0.0;
      numberArray1[4] = (Number) (-3505.49811844);
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) 0.0, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(timeTableXYDataset0);
      jDBCCategoryDataset0.hasListener(xYDatasetTableModel0);
      Vector<DynamicTimeSeriesCollection> vector0 = new Vector<DynamicTimeSeriesCollection>();
      LinkedList<DefaultIntervalXYDataset> linkedList0 = new LinkedList<DefaultIntervalXYDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) linkedList0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, false);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-221.1130491);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[6] = (-3426.901705771);
      doubleArray0[7] = 0.0;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYTaskDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      boolean boolean0 = true;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      stack0.add(defaultStatisticalCategoryDataset0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset1, (List) stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultStatisticalCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(timeTableXYDataset0);
      jDBCCategoryDataset0.hasListener(xYDatasetTableModel0);
      Vector<DynamicTimeSeriesCollection> vector0 = new Vector<DynamicTimeSeriesCollection>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) vector0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYTaskDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, true);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2423, 470);
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      vector0.add(defaultStatisticalCategoryDataset0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "fW}xf0>|gP";
      Object[][][] objectArray0 = new Object[1][3][2];
      Object[][] objectArray1 = new Object[0][6];
      objectArray0[0] = objectArray1;
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(stringArray0, objectArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultWindDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      linkedList0.addFirst(defaultMultiValueCategoryDataset0);
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      linkedList0.addAll((Collection<? extends DefaultMultiValueCategoryDataset>) vector0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) vector0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[18];
      doubleArray1[0] = (-221.1130491);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[13] = (-2026.2488868906);
      doubleArray1[6] = (-3426.901705771);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-3505.49811844);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      arrayList0.add((DefaultTableXYDataset) null);
      ArrayList<DefaultTableXYDataset> arrayList1 = new ArrayList<DefaultTableXYDataset>();
      arrayList1.add((DefaultTableXYDataset) null);
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      Number[][] numberArray0 = new Number[6][7];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) 0.0;
      numberArray1[1] = (Number) 0.0;
      numberArray1[2] = (Number) 0.0;
      numberArray1[3] = (Number) 0.0;
      numberArray1[4] = (Number) 0.0;
      numberArray1[5] = (Number) (-3505.49811844);
      numberArray0[5] = numberArray1;
      Number[] numberArray2 = new Number[7];
      numberArray1[1] = (Number) 0.0;
      numberArray2[1] = (Number) 0.0;
      numberArray2[2] = (Number) (-221.1130491);
      numberArray2[3] = (Number) 0.0;
      numberArray2[4] = (Number) 0.0;
      Long long0 = new Long((-878L));
      numberArray2[5] = (Number) long0;
      numberArray2[6] = (Number) (-3426.901705771);
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[6];
      numberArray3[0] = (Number) (-221.1130491);
      numberArray3[1] = (Number) (-3426.901705771);
      numberArray3[2] = (Number) 0.0;
      numberArray3[3] = (Number) 0.0;
      numberArray3[4] = (Number) (-3505.49811844);
      numberArray3[5] = (Number) 0.0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[0];
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[4];
      numberArray5[0] = (Number) 0.0;
      numberArray5[1] = (Number) long0;
      numberArray5[2] = (Number) 0.0;
      numberArray5[3] = (Number) 0.0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[0];
      numberArray0[5] = numberArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      defaultCategoryDataset0.addValue((double) 1, (Comparable) "L8X$wKG", (Comparable) "L8X$wKG");
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 1);
      double double0 = DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = 1400.254424702;
      doubleArray0[5] = (double) (byte) (-1);
      doubleArray0[6] = (double) (byte) (-1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 204.07, 1400.254424702, 9, (-1.0));
      DatasetUtilities.findDomainBounds(xYDataset0, true);
      DatasetUtilities.iterateRangeBounds(xYDataset0);
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 2190, 4);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.getDomainBounds(true);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NEGATIVE_INFINITY);
      assertNotNull(range0);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      arrayList0.add(defaultTableXYDataset0);
      arrayList0.add(defaultTableXYDataset0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultTableXYDataset0);
      assertTrue(boolean0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-221.1130491);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-221.1130491);
      doubleArray1[6] = (-3426.901705771);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-3505.49811844);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-2026.2);
      doubleArray2[1] = (-3426.901705771);
      doubleArray1[8] = (-1.9450374376255937);
      doubleArray2[4] = (-221.1130491);
      doubleArray0[2] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("[O", "[O", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals((-3426.901705771), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-221.1130491);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[6] = (-3426.901705771);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-3505.49811844);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-2026.2488868906);
      doubleArray2[1] = (-3426.901705771);
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      arrayList0.add(defaultTableXYDataset0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      Range range1 = Range.expandToInclude(range0, 0.0);
      Range range2 = Range.shift(range1, Double.POSITIVE_INFINITY, true);
      Range.expandToInclude(range2, (-221.1130491));
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("[O", "", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      defaultTableXYDataset0.getDomainOrder();
      DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, true);
      Year year0 = new Year(0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) year0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "org.jfree.data.general.DatasetUtilities", 0.0, 9999);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Number[][] numberArray0 = new Number[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      TimeZone.getDefault();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findMaximumDomainValue(timeTableXYDataset0);
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REFLECT;
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(multipleGradientPaint_CycleMethod0);
      defaultIntervalCategoryDataset0.seriesChanged(seriesChangeEvent0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeTableXYDataset0, 5757.082519936);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      stack0.clone();
      DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 9);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-221.1130491);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[6] = (-3426.901705771);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-3505.49811844);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-2026.2488868906);
      doubleArray2[1] = (-3426.901705771);
      doubleArray1[8] = (-1.9450374376255937);
      doubleArray2[4] = (-221.1130491);
      doubleArray0[2] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("[O", "[O", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals((-1713.4508528855), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.getDomainBounds(true);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NEGATIVE_INFINITY);
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1.9450374376255937);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = (-1.9450374376255937);
      doubleArray1[6] = (-1.9450374376255937);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = (-1.9450374376255937);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("XNWaE", "", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 483);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 483, Size: 7
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-221.1130491);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-2026.2488868906);
      doubleArray1[6] = (-3426.901705771);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-3505.49811844);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      arrayList0.add((DefaultTableXYDataset) null);
      ArrayList<DefaultTableXYDataset> arrayList1 = new ArrayList<DefaultTableXYDataset>();
      arrayList1.add((DefaultTableXYDataset) null);
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      Number[][] numberArray0 = new Number[6][7];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) 0.0;
      numberArray1[1] = (Number) 0.0;
      numberArray1[2] = (Number) 0.0;
      numberArray1[3] = (Number) 0.0;
      numberArray1[4] = (Number) 0.0;
      numberArray1[5] = (Number) (-3505.49811844);
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[7];
      numberArray2[0] = (Number) 0.0;
      numberArray2[1] = (Number) 0.0;
      numberArray2[2] = (Number) (-221.1130491);
      numberArray2[3] = (Number) (-2026.2488868906);
      numberArray2[4] = (Number) (-2026.2488868906);
      Long long0 = new Long((-878L));
      numberArray2[5] = (Number) long0;
      numberArray2[6] = (Number) (-3426.901705771);
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[6];
      numberArray3[0] = (Number) 0.0;
      numberArray3[1] = (Number) (-3426.901705771);
      numberArray3[2] = (Number) 0.0;
      numberArray3[3] = (Number) 0.0;
      numberArray3[4] = (Number) (-3505.49811844);
      numberArray3[5] = (Number) 0.0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[0];
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[4];
      numberArray5[0] = (Number) 0.0;
      numberArray5[1] = (Number) long0;
      numberArray5[2] = (Number) 0.0;
      numberArray5[3] = (Number) 0.0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[0];
      numberArray0[5] = numberArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      int int0 = 980;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 19, 980);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(slidingGanttCategoryDataset0, 19, 19);
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) vector0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      linkedList0.addFirst(defaultMultiValueCategoryDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultMultiValueCategoryDataset0.getRangeBounds(true);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NEGATIVE_INFINITY);
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      arrayList0.add(defaultTableXYDataset0);
      arrayList0.add(defaultTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, arrayList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-221.1130491);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection((MatrixSeries) null);
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, (-3426.901705771));
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      defaultTableXYDataset0.addChangeListener(xYDatasetTableModel0);
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      ArrayList<DefaultTableXYDataset> arrayList1 = new ArrayList<DefaultTableXYDataset>();
      arrayList0.add(defaultTableXYDataset0);
      arrayList0.add(defaultTableXYDataset0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, arrayList1, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ArrayList<DefaultHighLowDataset> arrayList0 = new ArrayList<DefaultHighLowDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, false);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, false);
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.POSITIVE_INFINITY);
      ArrayList<DefaultTableXYDataset> arrayList1 = new ArrayList<DefaultTableXYDataset>();
      ArrayList<DefaultIntervalXYDataset> arrayList2 = new ArrayList<DefaultIntervalXYDataset>();
      DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, arrayList2, true);
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      defaultTableXYDataset0.getDomainBounds(false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection((XYSeries) null);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NEGATIVE_INFINITY);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      defaultTableXYDataset0.addChangeListener(xYDatasetTableModel0);
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      ArrayList<DefaultTableXYDataset> arrayList1 = new ArrayList<DefaultTableXYDataset>();
      arrayList1.add(defaultTableXYDataset0);
      arrayList1.add(defaultTableXYDataset0);
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, linkedList0, false);
      assertNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultTableXYDataset0.getDomainBounds(true);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-1613));
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      Number[][] numberArray0 = new Number[0][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      boolean boolean0 = true;
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      boolean boolean1 = false;
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, (Range) null, false);
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      ArrayList<XIntervalSeriesCollection> arrayList0 = new ArrayList<XIntervalSeriesCollection>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection1, (List) arrayList0, false);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, false);
      Long long0 = new Long(0L);
      Number[][] numberArray0 = new Number[0][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, 0L);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-221.1130491);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-2026.2488868906);
      doubleArray1[6] = (-3426.901705771);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-3505.49811844);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-2026.2488868906);
      doubleArray2[1] = (-3426.901705771);
      doubleArray1[8] = (-1.9450374376255937);
      doubleArray2[4] = (-221.1130491);
      doubleArray0[2] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("[O", "[O", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1);
      double double0 = DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Number[][] numberArray0 = new Number[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      TimeZone.getDefault();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findMaximumDomainValue(timeTableXYDataset0);
      MultipleGradientPaint.CycleMethod multipleGradientPaint_CycleMethod0 = MultipleGradientPaint.CycleMethod.REFLECT;
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(multipleGradientPaint_CycleMethod0);
      defaultIntervalCategoryDataset0.seriesChanged(seriesChangeEvent0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeTableXYDataset0, 5757.082519936);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      stack0.clone();
      DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Range range0 = new Range(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      boolean boolean0 = false;
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) arrayList0, range0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      int int0 = 243;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(243, 243);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(243, 243);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      defaultTableXYDataset0.getDomainOrder();
      DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-3507), 470);
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(slidingGanttCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Number[][] numberArray0 = new Number[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      double double0 = 1908.6917;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, 1908.6917);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      boolean boolean0 = true;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "&}9xF?'}d6j";
      stringArray0[1] = "";
      stringArray0[2] = "T#2g";
      stringArray0[3] = "Null 'rowData' argument.";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Byte byte0 = new Byte((byte) (-42));
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
      DatasetUtilities.iterateDomainBounds((XYDataset) xYTaskDataset0, false);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (double) (byte) (-42));
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      double[][] doubleArray0 = new double[0][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("eU[GgU,H{c~", "eU[GgU,H{c~", doubleArray0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-853.61883557));
      Object[][][] objectArray0 = new Object[9][9][9];
      Object[][] objectArray1 = new Object[0][9];
      objectArray0[0] = objectArray1;
      Object[][] objectArray2 = new Object[0][9];
      objectArray0[1] = objectArray2;
      Object[][] objectArray3 = new Object[8][7];
      Object[] objectArray4 = new Object[2];
      Object object0 = new Object();
      objectArray4[0] = object0;
      objectArray4[1] = (Object) null;
      objectArray3[0] = objectArray4;
      objectArray3[1] = (Object[]) doubleArray0;
      objectArray3[2] = (Object[]) doubleArray0;
      objectArray3[3] = (Object[]) doubleArray0;
      objectArray3[4] = (Object[]) doubleArray0;
      objectArray3[5] = (Object[]) doubleArray0;
      objectArray3[6] = (Object[]) doubleArray0;
      objectArray3[7] = (Object[]) doubleArray0;
      objectArray0[2] = objectArray3;
      Object[][] objectArray5 = new Object[8][6];
      objectArray5[0] = (Object[]) doubleArray0;
      objectArray5[1] = (Object[]) doubleArray0;
      objectArray5[2] = objectArray4;
      objectArray5[3] = objectArray4;
      objectArray5[4] = (Object[]) doubleArray0;
      objectArray5[5] = objectArray4;
      objectArray5[6] = (Object[]) doubleArray0;
      Object[] objectArray6 = new Object[5];
      objectArray6[0] = (Object) null;
      objectArray6[1] = (Object) null;
      objectArray6[2] = (Object) "eU[GgU,H{c~";
      objectArray6[3] = (Object) null;
      objectArray6[4] = (Object) "eU[GgU,H{c~";
      objectArray5[7] = objectArray6;
      objectArray0[3] = objectArray5;
      Object[][] objectArray7 = new Object[0][7];
      objectArray0[4] = objectArray7;
      Object[][] objectArray8 = new Object[8][3];
      objectArray8[0] = (Object[]) doubleArray0;
      objectArray8[1] = (Object[]) doubleArray0;
      objectArray8[2] = objectArray4;
      objectArray8[3] = objectArray4;
      objectArray8[4] = (Object[]) doubleArray0;
      objectArray8[5] = (Object[]) doubleArray0;
      objectArray8[6] = (Object[]) doubleArray0;
      objectArray8[7] = (Object[]) doubleArray0;
      objectArray0[5] = objectArray8;
      Object[][] objectArray9 = new Object[6][0];
      objectArray9[0] = objectArray6;
      objectArray9[1] = objectArray6;
      objectArray9[2] = objectArray4;
      objectArray9[3] = objectArray6;
      Object[] objectArray10 = new Object[6];
      objectArray10[0] = (Object) null;
      objectArray10[1] = (Object) null;
      objectArray10[2] = (Object) null;
      objectArray10[3] = (Object) null;
      objectArray10[4] = (Object) categoryDataset0;
      objectArray10[5] = (Object) categoryDataset0;
      objectArray9[4] = objectArray10;
      objectArray9[5] = objectArray4;
      objectArray0[6] = objectArray9;
      Object[][] objectArray11 = new Object[3][0];
      objectArray11[0] = objectArray10;
      objectArray11[1] = (Object[]) doubleArray0;
      objectArray11[2] = objectArray4;
      objectArray0[7] = objectArray11;
      Object[][] objectArray12 = new Object[3][7];
      objectArray12[0] = (Object[]) doubleArray0;
      objectArray12[1] = objectArray6;
      Object[] objectArray13 = new Object[3];
      objectArray13[0] = (Object) null;
      objectArray13[1] = (Object) null;
      objectArray13[2] = (Object) "eU[GgU,H{c~";
      objectArray12[2] = objectArray13;
      objectArray0[8] = objectArray12;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-221.1130491);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[6] = (-3426.901705771);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-3505.49811844);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-2026.2488868906);
      doubleArray2[1] = (-3426.901705771);
      doubleArray1[8] = (-1.9450374376255937);
      doubleArray2[4] = (-221.1130491);
      doubleArray0[2] = doubleArray2;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("[O", "[O", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      defaultCategoryDataset0.addValue((Number) (-3426.901705771), (Comparable) (-3426.901705771), (Comparable) 0.0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertEquals(3426.901705771, range0.getLength(), 0.01);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      Number[][] numberArray0 = new Number[0][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      Long long0 = new Long(12L);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(jDBCXYDataset0, (-174.15));
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYBarDataset0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset1);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Number[][] numberArray0 = new Number[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      TimeZone.getDefault();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findMaximumDomainValue(timeTableXYDataset0);
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeTableXYDataset0, 5757.082519936);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, true);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((PieDataset) null);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      XYSeriesCollection xYSeriesCollection1 = new XYSeriesCollection();
      xYSeriesCollection1.getDomainBounds(true);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Number[][] numberArray0 = new Number[1][4];
      Number[] numberArray1 = new Number[4];
      Integer integer0 = Integer.valueOf(1312);
      numberArray1[0] = (Number) integer0;
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(integer0);
      // Undeclared exception!
      try { 
        simpleHistogramDataset0.getX(1312, 1312);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1312, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Number[][] numberArray0 = new Number[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      TimeZone.getDefault();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findMaximumDomainValue(timeTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      defaultTableXYDataset0.getDomainBounds(true);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NEGATIVE_INFINITY);
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      Range.expand(range0, (-1925.44113), 1715.2206705688);
      arrayList0.add(defaultTableXYDataset0);
      arrayList0.add(defaultTableXYDataset0);
      Range.expandToInclude(range0, Double.NEGATIVE_INFINITY);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      Range range0 = new Range(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      boolean boolean0 = true;
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0, (List) linkedList0, range0, true);
      // Undeclared exception!
      try { 
        Range.shift((Range) null, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset2 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset2.getRowCount();
      stack0.add(defaultStatisticalCategoryDataset2);
      Range range0 = new Range(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) stack0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultStatisticalCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      TaskSeries taskSeries0 = new TaskSeries("~BYg#vKrFU^ib");
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      XYDataset xYDataset0 = null;
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      XYDataset xYDataset0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      Range.combine((Range) null, (Range) null);
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset("SeriesChangeType.ADD", (String) null, "Null 'xRange' argument", "SeriesChangeType.ADD");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Integer.getInteger("X+0=S8#}v>", integer0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 546.582507491, 1933.0210208, (-297), integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("L8X$wKG", "L8X$wKG", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1);
      categoryToPieDataset0.validateObject();
      DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1, 0.0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 1, 1273.33652325, 1, "L8X$wKG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Integer.getInteger("X+0=S8#}v>", integer0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 488, 2820.80794, 425, "X+0=S8#}v>");
      Range range0 = DatasetUtilities.iterateRangeBounds(xYDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, 488.0);
      assertNotNull(range1);
      assertEquals(488.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      linkedList0.addFirst(defaultMultiValueCategoryDataset0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Number[] numberArray0 = new Number[2];
      Byte byte0 = new Byte((byte) (-42));
      numberArray0[0] = (Number) byte0;
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
      DatasetUtilities.iterateDomainBounds((XYDataset) xYTaskDataset0, true);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, (double) (byte) (-42));
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3017.86404);
      doubleArray0[1] = (-3017.86404);
      doubleArray0[2] = (-146.0);
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = (-3017.86404);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-411.1498), 389.898, 464, (-3017.86404));
      DatasetUtilities.iterateRangeBounds(xYDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, (-3563.624654439851));
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      linkedList0.addFirst(defaultMultiValueCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      Integer integer1 = new Integer((-1));
      Number[][] numberArray0 = new Number[0][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("#", "#", numberArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) "#");
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNull(range0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) integer0, (-1226.3588));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.fireSelectionEvent();
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      Comparable<DefaultIntervalXYDataset> comparable0 = null;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, true);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.POSITIVE_INFINITY);
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, arrayList0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset("", "", "", (String) null);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.fireSelectionEvent();
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      Comparable<DefaultIntervalXYDataset> comparable0 = null;
      double double0 = 2287.919499820845;
      int int0 = 133;
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) null, 2287.919499820845, 133);
      Number[][] numberArray0 = new Number[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      defaultIntervalCategoryDataset0.getRowKeys();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) pieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Integer.getInteger("X+0=S8#}v>", integer0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 823.0488037;
      doubleArray0[2] = (-3756.9972885);
      doubleArray0[3] = (-3017.86404);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-4887.040684919416), 1933.0210208, 488, Double.NEGATIVE_INFINITY);
      DatasetUtilities.iterateRangeBounds(xYDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.setTimeSeries(true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, 823.0488037);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(9, "");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 2645.414393);
      Range range1 = Range.shift(range0, 0.0);
      Range range2 = Range.combine((Range) null, range1);
      Range range3 = Range.scale(range0, 2645.414393);
      range2.toString();
      Range.combine(range3, range3);
      ArrayList<DefaultStatisticalCategoryDataset> arrayList0 = new ArrayList<DefaultStatisticalCategoryDataset>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, range2, false);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      Number[][] numberArray0 = new Number[0][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      String string0 = "RZ";
      Long long0 = new Long(12L);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 32, 32);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1743, 1743);
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset1.getStartValue(32, 87);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Quarter quarter0 = new Quarter(date0, timeZone0);
      quarter0.getYear();
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, 9999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      TimeZone.getDefault();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, false);
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset((String) null, (String) null, "org.jfree.data.eneral.SeriesChaneInfo", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      stack0.add(defaultStatisticalCategoryDataset0);
      Range range0 = new Range(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) stack0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultStatisticalCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Integer.getInteger("X+0=S8#}v>", integer0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 823.0488037;
      doubleArray0[2] = (-3756.9972885);
      doubleArray0[3] = (-3017.86404);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-4887.040684919416), 1933.0210208, 488, Double.NEGATIVE_INFINITY);
      Range range0 = DatasetUtilities.iterateRangeBounds(xYDataset0);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.getRangeBounds(true);
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, 823.0488037);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(xYDataset0);
      assertEquals(Double.NEGATIVE_INFINITY, number0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("L8X$wKG");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      defaultKeyedValuesDataset0.hasListener(metalComboBoxEditor0);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.fireSelectionEvent();
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) null, 2287.919499820845, 133);
      Number[][] numberArray0 = new Number[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.fireSelectionEvent();
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) null, 2287.919499820845, 133);
      Number[][] numberArray0 = new Number[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) pieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1.0;
      doubleArray1[3] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1.0;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-1461.6206));
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      arrayList0.add(defaultTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      keyToGroupMap0.clone();
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Quarter quarter0 = new Quarter(date0, timeZone0);
      quarter0.getYear();
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) quarter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(taskSeriesCollection0, 133, 5);
      DatasetUtilities.findMaximumStackedRangeValue(slidingCategoryDataset0);
      DatasetUtilities.findCumulativeRangeBounds(slidingCategoryDataset0);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, (-1643));
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) null, (double) 121, (-1643));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.getDomainOrder();
      DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NEGATIVE_INFINITY);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      double double0 = 2287.919499820845;
      int int0 = 121;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      Number[][] numberArray0 = new Number[1][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findMaximumDomainValue(xYSeriesCollection0);
      Comparable<DefaultMultiValueCategoryDataset>[] comparableArray0 = (Comparable<DefaultMultiValueCategoryDataset>[]) Array.newInstance(Comparable.class, 1);
      double double1 = 2965.9474;
      SimpleHistogramBin simpleHistogramBin0 = null;
      try {
        simpleHistogramBin0 = new SimpleHistogramBin(2965.9474, 2965.9474, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid bounds; 2965.9474 to 2965.9474
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      String string0 = "X+0=S8#}v>";
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Integer.getInteger("X+0=S8#}v>", integer0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 823.0488037;
      doubleArray0[2] = (-3756.9972885);
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      defaultTableXYDataset0.getDomainOrder();
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, true);
      String string0 = "n/k<aH(DMo";
      // Undeclared exception!
      try { 
        Year.parseYear("n/k<aH(DMo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse string.
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      linkedList0.addFirst(defaultMultiValueCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1603.964;
      doubleArray1[3] = 0.0;
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
      String string0 = null;
      // Undeclared exception!
      try { 
        Year.parseYear((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1603.964;
      doubleArray1[3] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = 5594.0827666079;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 1.0;
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      keyToGroupMap0.clone();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, keyToGroupMap0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Integer.getInteger("X+0=S8#}v>", integer0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 823.0488037;
      doubleArray0[2] = (-3756.9972885);
      doubleArray0[3] = (-3017.86404);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeSeries timeSeries0 = new TimeSeries(integer0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      int int0 = (-1);
      MockDate mockDate0 = new MockDate((-1999L));
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(476, "The 'item' index is out of bounds.", (-1), (-2775), 724, (-1), 1035, 1035, (-2775), 469);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -1
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      defaultTableXYDataset0.getDomainOrder();
      DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      defaultTableXYDataset0.getDomainOrder();
      DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NEGATIVE_INFINITY);
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, arrayList0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Quarter quarter0 = new Quarter(date0, timeZone0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      MockDate mockDate0 = new MockDate(472, (-6), 1, 433, 9);
      Second second0 = new Second(date0);
      Millisecond millisecond0 = new Millisecond(4, second0);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1, 3.29401, 9, instant0);
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getSeries((-1559));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[1] = 0.0;
      doubleArray0[10] = (-0.8033551431548414);
      Number[][] numberArray0 = new Number[2][0];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 0.0;
      numberArray1[1] = (Number) 0.0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      numberArray2[0] = (Number) 0.0;
      numberArray2[1] = (Number) 0.0;
      numberArray2[2] = (Number) 0.0;
      numberArray2[3] = (Number) (-0.8033551431548414);
      numberArray2[4] = (Number) (-0.8033551431548414);
      numberArray2[5] = (Number) (-0.8033551431548414);
      numberArray2[6] = (Number) (-0.8033551431548414);
      numberArray2[7] = (Number) 0.0;
      numberArray2[8] = (Number) (-0.8033551431548414);
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      Object[][][] objectArray0 = new Object[1][5][9];
      Object[][] objectArray1 = new Object[2][8];
      objectArray1[0] = (Object[]) numberArray2;
      objectArray1[1] = (Object[]) numberArray2;
      objectArray0[0] = objectArray1;
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      DatasetUtilities.iterateXYRangeBounds(defaultWindDataset0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.clone();
      categoryTableXYDataset0.add(3742.3387732, 3742.3387732, "Series 3");
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      Stack<Integer> stack0 = new Stack<Integer>();
      categoryTableXYDataset0.add((-1.7976931348623157E308), (-2318.8335), "!3K~");
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(711.7526366, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Integer.getInteger("X+0=S8#}v>", integer0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 823.0488037;
      doubleArray0[2] = (-3756.9972885);
      doubleArray0[0] = (-3017.86404);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-4887.040684919416), 1933.0210208, 488, Double.NEGATIVE_INFINITY);
      Range range0 = DatasetUtilities.iterateRangeBounds(xYDataset0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYDataset0);
      assertEquals((-4887.540684919416), number0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      defaultTableXYDataset0.getDomainOrder();
      DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NEGATIVE_INFINITY);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1L), 0L);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (-256), simpleTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1603.964;
      doubleArray1[3] = 2.8460489955342965;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = 5594.0827666079;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 1.0;
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      MockDate mockDate0 = new MockDate(9, 461, 461, 477, 501);
      Second second0 = new Second(mockDate0);
      Millisecond millisecond0 = new Millisecond(9, second0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 872.4195192, (-318.3210695), 472, millisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-0.8643919888), (-0.8643919888), "*W{60 OO-r$@");
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      Stack<JSpinner.DefaultEditor> stack0 = new Stack<JSpinner.DefaultEditor>();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Number number0 = DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      categoryTableXYDataset0.add(number0, number0, "Ho'Sh@dVY|A%4v'Yszz", true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 843.6360146);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Integer.getInteger("X+0=S8#}v>", integer0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 823.0488037;
      doubleArray0[2] = (-3756.9972885);
      doubleArray0[3] = (-3017.86404);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-4887.040684919416), 1933.0210208, 488, Double.NEGATIVE_INFINITY);
      DatasetUtilities.iterateRangeBounds(xYDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, 823.0488037);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      String string0 = "F1{zPPS<xjkW#Z";
      Number[][] numberArray0 = new Number[1][2];
      Number[] numberArray1 = new Number[1];
      Byte byte0 = new Byte((byte) (-42));
      numberArray1[0] = (Number) byte0;
      numberArray0[0] = numberArray1;
      DatasetUtilities.createCategoryDataset("", "F1{zPPS<xjkW#Z", numberArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYTaskDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYTaskDataset0, (List) linkedList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Integer integer1 = Integer.getInteger("X+0=S8#}v>", integer0);
      TimeSeries timeSeries0 = new TimeSeries(integer1);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) integer0, 699.039893197382, 1189);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      Range range0 = new Range(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, range0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, true);
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset("SeriesChangeType.ADD", (String) null, "Null 'xRange' argument", "SeriesChangeType.ADD");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      defaultTableXYDataset0.getDomainOrder();
      DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, true);
      Range.combine((Range) null, (Range) null);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NEGATIVE_INFINITY);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-5580), 273);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(slidingGanttCategoryDataset0, 273, (-5580));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(273);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(fixedMillisecond0);
      keyToGroupMap0.clone();
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      String string0 = "A5zd$M1RHK7v";
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("9FnjHr.X7:GkK9", "A5zd$M1RHK7v", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      int int0 = 2;
      int int1 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2, 0);
      // Undeclared exception!
      try { 
        SerialDate.createInstance(2, 2, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(2044.88437516, 1956.282399);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(xYDataItem0, "x+a^UMSXw/hpmvKY:+c", (String) null);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      timePeriodValues0.setDomainDescription("Duplicate items in 'rowKeys'.");
      xYDataItem0.toString();
      DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, false);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, 28, (-695));
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, (Comparable) "x+a^UMSXw/hpmvKY:+c");
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) xYDataItem0, (-836.7977));
      DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) "Duplicate items in 'rowKeys'.", 1098.16776617);
      Instant instant0 = MockInstant.ofEpochMilli((-695));
      Date date0 = Date.from(instant0);
      Hour hour0 = new Hour(date0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) hour0, 1098.16776617);
      Vector<String> vector0 = new Vector<String>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, (List) vector0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) null, 2287.919499820845, 121);
      Number[][] numberArray0 = new Number[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      XYDataset xYDataset0 = null;
      List<Object> list0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      MockDate mockDate0 = new MockDate();
      RegularTimePeriod.createInstance(class0, mockDate0, (TimeZone) null);
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 4193.543717328685;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-845.01);
      doubleArray1[4] = 2544.06148116357;
      doubleArray1[5] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-845.01);
      doubleArray2[1] = (-845.01);
      doubleArray2[2] = (-845.01);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 2544.06148116357;
      doubleArray2[5] = 1.0;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-159));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      Range range0 = new Range(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) stack0, range0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("", "", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      XYBarDataset xYBarDataset0 = new XYBarDataset(xIntervalSeriesCollection0, 0.0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) xYBarDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1603.964;
      doubleArray1[3] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = 5594.0827666079;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 5594.0827666079;
      doubleArray0[3] = doubleArray4;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Year year0 = new Year(mockDate0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(year0);
      timeSeries0.setRangeDescription((String) null);
      Class<Object> class0 = Object.class;
      timeSeries0.setNotify(true);
      RegularTimePeriod.downsize(class0);
      TimeZone.setDefault(simpleTimeZone0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, true);
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset((String) null, (String) null, "org.jfree.data.general.SeriesChangeInfo", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = ")gLIxBb;8IWv";
      String string0 = "Null 'rowKey' argument.";
      stringArray0[2] = "Null 'rowKey' argument.";
      stringArray0[3] = "8A+nn|*F`3HwJ";
      stringArray0[4] = "";
      stringArray0[5] = "f}{/B[B3!~=igrQxos";
      stringArray0[6] = "Failed to add cloned item.";
      stringArray0[7] = "Null 'columnKeys' argument.";
      Number[][] numberArray0 = new Number[6][2];
      Number[] numberArray1 = new Number[3];
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      XYDataset xYDataset0 = null;
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      // Undeclared exception!
      try { 
        SerialDate.getFollowingDayOfWeek(2279, (SerialDate) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid day-of-the-week code.
         //
         verifyException("org.jfree.data.time.SerialDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      String string0 = "";
      Number[][] numberArray0 = new Number[5][6];
      Number[] numberArray1 = new Number[6];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      numberArray1[0] = (Number) integer0;
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerCategoryDataset0.getMeanValue((Comparable) integer0, (Comparable) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (100) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-221.1130491);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-2026.2488868906);
      doubleArray1[6] = (-3426.901705771);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-3505.49811844);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-3505.49811844);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-479.0);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-221.1130491);
      doubleArray2[6] = (-3426.901705771);
      doubleArray2[7] = (-2026.2488868906);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-2026.2488868906);
      doubleArray3[1] = (-3426.901705771);
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-221.1130491);
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("[O", "[O", doubleArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1);
      assertNotNull(pieDataset0);
  }
}
