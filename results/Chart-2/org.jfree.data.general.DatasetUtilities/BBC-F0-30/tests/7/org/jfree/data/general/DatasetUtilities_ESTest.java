/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:08:08 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.FileDialog;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.Statement;
import java.text.ParseException;
import java.time.Instant;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.swing.JApplet;
import javax.swing.JLayeredPane;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DomainOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.Task;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.BoxAndWhiskerItem;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2930, "?a!LUe=$");
      assertEquals("?a!LUe=$", simpleTimeZone0.getID());
      assertEquals(2930, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=?a!LUe=$,offset=2930,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("?a!LUe=$", simpleTimeZone0.getID());
      assertEquals(2930, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=?a!LUe=$,offset=2930,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      Date[] dateArray0 = new Date[5];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2930;
      doubleArray1[1] = (double) 2930;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 53;
      doubleArray1[6] = (double) 2930;
      doubleArray1[7] = (double) 1;
      doubleArray1[8] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(week0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("?a!LUe=$", simpleTimeZone0.getID());
      assertEquals(2930, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=?a!LUe=$,offset=2930,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(defaultHighLowDataset0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2930.0, 2930.0, 1.0, 1.0, 1.0, 53.0, 2930.0, 1.0, 1.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Iterator<Byte> iterator0 = arrayList0.iterator();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(iterator0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Byte byte0 = new Byte((byte)56);
      assertEquals((byte)56, (byte)byte0);
      assertNotNull(byte0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) byte0, (Comparable) byte0, (Comparable) integer0);
      Byte byte1 = new Byte((byte)56);
      assertEquals((byte)56, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      boolean boolean0 = arrayList0.add(byte1);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(arrayList0.contains((byte)56));
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(integer0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, false);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timePeriodValuesCollection0);
      assertEquals(Double.NaN, number0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(arrayList0.contains((byte)56));
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range2 = Range.combine((Range) null, range1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertNotNull(range2);
      assertTrue(arrayList0.contains((byte)56));
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, range2, false);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertNull(range3);
      assertTrue(arrayList0.contains((byte)56));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[][] doubleArray0 = new double[10][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(10, doubleArray0.length);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertEquals(10, doubleArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 2);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 0.0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(10, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray1;
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      assertFalse(vector0.contains(0.0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("=yeuoZ:XoD_8", 2, 2);
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertTrue(number0.equals((Object)double0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.5, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      Byte byte0 = new Byte((byte) (-98));
      assertEquals((byte) (-98), (byte)byte0);
      assertNotNull(byte0);
      
      defaultStatisticalCategoryDataset0.add((Number) byte0, (Number) byte0, (Comparable) byte0, (Comparable) byte0);
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(byte0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-196.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)59);
      assertEquals((byte)59, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((byte)59));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, byte0, byte0, byte0, (Number) null, (Number) null, (Number) null, (Number) null, arrayList0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(boxAndWhiskerItem0);
      assertTrue(arrayList0.contains((byte)59));
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) byte0, (Comparable) byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((byte)59));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(59.0, range0.getCentralValue(), 0.01);
      assertEquals(59.0, range0.getUpperBound(), 0.01);
      assertEquals(59.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertTrue(arrayList0.contains((byte)59));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Stack<Float> stack1 = new Stack<Float>();
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      int int0 = categoryTableXYDataset0.getItemCount(0);
      assertEquals(0, int0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(0.0, 0.0, "Duplicate items in 'columnKeys'.");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("ZY5kf4dWFwc_0&B", 2795, 2);
      assertEquals(5590, matrixSeries0.getItemCount());
      assertEquals(2795, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(5590, matrixSeries0.getItemCount());
      assertEquals(2795, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(2794.0, number0);
      assertEquals(5590, matrixSeries0.getItemCount());
      assertEquals(2795, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((double) (byte)51, (double) (byte)51, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Short short0 = new Short((byte)51);
      assertEquals((short)51, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = linkedList0.add(short0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(short0));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(51.0, range0.getLowerBound(), 0.01);
      assertEquals(51.0, range0.getCentralValue(), 0.01);
      assertEquals(51.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertTrue(linkedList0.contains(short0));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(51.0, range1.getUpperBound(), 0.01);
      assertEquals(51.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(51.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertTrue(linkedList0.contains(short0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-58));
      assertEquals((byte) (-58), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(byte0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<Float> vector0 = new Vector<Float>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      defaultMultiValueCategoryDataset0.add(vector0, byte0, byte0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, false);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range1);
      assertTrue(arrayList0.contains(byte0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (-4224.8630403), 2482.97816773, (-1274.6591816493153), 2482.97816773, (-1274.6591816493153));
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(2482.97816773, number0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1274.6591816493153), range0.getLowerBound(), 0.01);
      assertEquals(3757.6373493793153, range0.getLength(), 0.01);
      assertEquals(604.1594930403425, range0.getCentralValue(), 0.01);
      assertEquals(2482.97816773, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertEquals(3, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) "9", 3030.1010451, 2);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("8^Z:$Te['Z]['US", 2, 360);
      assertEquals(720, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(360, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(720, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(360, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(720, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(360, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(179.5, range0.getCentralValue(), 0.01);
      assertEquals(359.0, range0.getUpperBound(), 0.01);
      assertEquals(359.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertEquals(720, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(360, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(0.5, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(1080.0990418366305, 1080.0990418366305, "Null 'rowKeys' argument.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(taskSeriesCollection0, 210, Integer.MAX_VALUE);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(210, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(Integer.MAX_VALUE, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      DatasetUtilities.findMaximumStackedRangeValue(slidingCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, numberArray0.length);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      assertEquals(3, numberArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(3, numberArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNull(range1);
      assertEquals(3, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[][] doubleArray0 = new double[13][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(13, doubleArray0.length);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(list0.isEmpty());
      assertEquals(13, list0.size());
      assertNotNull(list0);
      assertEquals(13, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertEquals(13, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(list0.isEmpty());
      assertEquals(13, list0.size());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(13, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(Double.NaN, 2083.56858, "FUdv");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Short short0 = new Short((short) (-1217));
      assertEquals((short) (-1217), (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = linkedList0.add(short0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(short0));
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range0);
      
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2309.427978515625);
      doubleArray0[1] = (-4473.4118432776);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-2309.427978515625), (-4473.4118432776)}, doubleArray0, 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 334.0404252956, 2714.428773775362, 323, (-4473.4118432776));
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-2309.427978515625), (-4473.4118432776)}, doubleArray0, 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-6820838.537474027), range0.getCentralValue(), 0.01);
      assertEquals((-1496609.8226293393), range0.getUpperBound(), 0.01);
      assertEquals(1.0648457429689374E7, range0.getLength(), 0.01);
      assertEquals((-1.2145067252318714E7), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-2309.427978515625), (-4473.4118432776)}, doubleArray0, 0.01);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, arrayList0, true);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-2309.427978515625), (-4473.4118432776)}, doubleArray0, 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      String string0 = "Following";
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("", "Following", "", "");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Float float0 = new Float((-2309.428F));
      assertEquals((-2309.428F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = stack0.add(float0);
      assertTrue(boolean0);
      assertEquals("[-2309.428]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(float0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, float0, float0);
      assertEquals("[-2309.428]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(float0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertEquals("[-2309.428]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals((-2309.427978515625), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2309.427978515625), range0.getLowerBound(), 0.01);
      assertEquals((-2309.427978515625), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertTrue(stack0.contains(float0));
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, (-1276));
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1276), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) float0, (double) (-1276));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, (OHLCDataItem[]) null);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Float float0 = new Float(656.825F);
      assertEquals(656.825F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(float0));
      
      boolean boolean0 = stack0.add(float0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[656.825]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(float0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, float0, float0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[656.825]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(float0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(float0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(Double.NaN, 999.0, "_r\"b_$O2X_Fr$gjM|E?");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Short short0 = new Short((short)6);
      assertEquals((short)6, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = linkedList0.add(short0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((short)6));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNull(range0);
      assertTrue(linkedList0.contains((short)6));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Float float0 = new Float(656.825F);
      assertEquals(656.825F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(float0));
      
      boolean boolean0 = stack0.add(float0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[656.825]", stack0.toString());
      assertTrue(stack0.contains(float0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      defaultMultiValueCategoryDataset0.add(stack0, float0, float0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[656.825]", stack0.toString());
      assertTrue(stack0.contains(float0));
      
      boolean boolean1 = stack0.add((Float) null);
      assertTrue(boolean1);
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[656.825, null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(stack0.contains(float0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(float0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = null;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1, 1793);
      assertEquals(1793, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingGanttCategoryDataset0, tableOrder0, 1793);
      assertEquals(1793, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1793, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(292, "i0\u0004>5i}=^a +2");
      assertEquals(292, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("i0\u0004>5i}=^a +2", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=i0\u0004>5i}=^a +2,offset=292,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertEquals(292, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("i0\u0004>5i}=^a +2", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=i0\u0004>5i}=^a +2,offset=292,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      int int0 = timeTableXYDataset0.getItemCount(29);
      assertEquals(0, int0);
      assertEquals(292, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("i0\u0004>5i}=^a +2", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=i0\u0004>5i}=^a +2,offset=292,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(timeTableXYDataset0);
      assertEquals(292, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("i0\u0004>5i}=^a +2", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=i0\u0004>5i}=^a +2,offset=292,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(xYDatasetTableModel0);
      
      categoryToPieDataset0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(1793, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1793, categoryToPieDataset0.getExtractIndex());
      assertEquals(292, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("i0\u0004>5i}=^a +2", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=i0\u0004>5i}=^a +2,offset=292,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      CategoryToPieDataset categoryToPieDataset1 = (CategoryToPieDataset)categoryToPieDataset0.clone();
      assertEquals(1793, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1793, categoryToPieDataset0.getExtractIndex());
      assertEquals(1793, categoryToPieDataset1.getExtractIndex());
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertNotNull(categoryToPieDataset1);
      
      int int1 = 1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) null, (double) 1793, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Float float0 = new Float((-2309.428F));
      assertEquals((-2309.428F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = stack0.add(float0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[-2309.428]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(float0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, float0, float0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[-2309.428]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(float0));
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertEquals((-2309.427978515625), number0);
      assertNotNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, 140);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(140, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) float0, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 140, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Float float0 = new Float((-2309.428F));
      assertEquals((-2309.428F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Vector<Float> vector0 = new Vector<Float>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      assertFalse(vector0.contains((-2309.428F)));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("i0\u0004>5i}=^a +6", 2, 2);
      assertEquals(2, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(2, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertEquals(2, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((double) (byte)54, (double) (byte)54, "^");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Short short0 = new Short((short) (-2014));
      assertEquals((short) (-2014), (short)short0);
      assertNotNull(short0);
      
      Short short1 = Short.valueOf((short) (byte)54);
      assertEquals((short)54, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean0 = linkedList0.add(short1);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(short1.equals((Object)short0));
      assertTrue(linkedList0.contains(short1));
      assertFalse(linkedList0.contains((short) (-2014)));
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(54.5, range0.getUpperBound(), 0.01);
      assertEquals(53.5, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(54.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = new Range((-3562.30004518327), (-3562.30004518327));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-3562.30004518327), range1.getCentralValue(), 0.01);
      assertEquals((-3562.30004518327), range1.getUpperBound(), 0.01);
      assertEquals((-3562.30004518327), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range1, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-3562.30004518327), range1.getCentralValue(), 0.01);
      assertEquals((-3562.30004518327), range1.getUpperBound(), 0.01);
      assertEquals((-3562.30004518327), range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertNull(range2);
      assertFalse(range1.equals((Object)range0));
      assertTrue(linkedList0.contains(short1));
      assertFalse(linkedList0.contains((short) (-2014)));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-363.78123);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-363.78123);
      doubleArray2[1] = 1.0;
      doubleArray2[2] = (-363.78123);
      doubleArray2[3] = (-363.78123);
      doubleArray2[4] = (-363.78123);
      doubleArray2[5] = (-363.78123);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-363.78123);
      doubleArray4[1] = (-363.78123);
      doubleArray4[2] = (-363.78123);
      doubleArray4[3] = (-363.78123);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = (-363.78123);
      doubleArray5[1] = (-363.78123);
      doubleArray5[2] = 1.0;
      doubleArray5[3] = 1.0;
      doubleArray5[4] = (-331.144255);
      doubleArray5[5] = 1.0;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("3~ICM_JBV9E?fbjGM", "3~ICM_JBV9E?fbjGM", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-2146915575));
      assertEquals((-2146915575), categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(categoryToPieDataset0);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((double) (byte)78, (double) (byte)78, "^");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-1930.664127), (-1930.664127), ",^R");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(2008.664127, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (double) (byte)78);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(2008.664127, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(156.0, range0.getUpperBound(), 0.01);
      assertEquals((-848.3320635), range0.getCentralValue(), 0.01);
      assertEquals(2008.664127, range0.getLength(), 0.01);
      assertEquals((-1852.664127), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, (double) (byte)54, "7W1z5(m|%z");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Short short0 = new Short((short)1600);
      assertEquals((short)1600, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)1600);
      assertEquals((short)1600, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = linkedList0.add(short1);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(short1.equals((Object)short0));
      assertTrue(linkedList0.contains((short)1600));
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      // Undeclared exception!
      try { 
        Range.scale(range1, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "GV@F]D,NX\\u";
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      XYDataItem xYDataItem0 = new XYDataItem(1.0, 1.0);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      XYDataItem xYDataItem1 = (XYDataItem)xYDataItem0.clone();
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem1.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem1.getYValue(), 0.01);
      assertNotSame(xYDataItem0, xYDataItem1);
      assertNotSame(xYDataItem1, xYDataItem0);
      assertNotNull(xYDataItem1);
      assertTrue(xYDataItem1.equals((Object)xYDataItem0));
      
      defaultStatisticalCategoryDataset0.add((Number) null, (Number) null, (Comparable) string0, (Comparable) xYDataItem0);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertNotSame(xYDataItem0, xYDataItem1);
      assertTrue(xYDataItem0.equals((Object)xYDataItem1));
      
      MockDate mockDate0 = new MockDate((-2996L));
      assertNotNull(mockDate0);
      
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 2240.053;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNull(number0);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 6.283185307179586;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = 2277.0389242;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = (-1329.17300235954);
      doubleArray2[5] = (-1312.5502);
      doubleArray2[6] = Double.NEGATIVE_INFINITY;
      doubleArray2[7] = 810.013157;
      doubleArray2[8] = (-1931.7023757);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2277.0389242;
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = 6.283185307179586;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNull(number0);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Short short0 = new Short((short)1);
      assertEquals((short)1, (short)short0);
      assertNotNull(short0);
      
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (short)1;
      doubleArray1[1] = (double) (short)1;
      doubleArray1[2] = 706.68286;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (short)1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 706.68286;
      doubleArray3[1] = (-3357.50955457);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) (short)1;
      doubleArray4[1] = 2.0;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)123);
      assertEquals((byte)123, (byte)byte0);
      assertNotNull(byte0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Byte byte1 = new Byte((byte)123);
      assertEquals((byte)123, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      defaultStatisticalCategoryDataset0.add((Number) byte0, (Number) byte0, (Comparable) byte0, (Comparable) byte0);
      assertTrue(byte0.equals((Object)byte1));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(byte0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertTrue(byte0.equals((Object)byte1));
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(123.0, range0.getLength(), 0.01);
      assertEquals(61.5, range0.getCentralValue(), 0.01);
      assertEquals(123.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, 182);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(182, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) byte0, (double) (byte)123, (int) (byte)123);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 182, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((double) (byte)54, (double) (byte)54, ":>");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) ":>");
      assertNotNull(pieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      assertNotNull(defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      
      defaultPieDataset0.setValue((Comparable) ":>", (-280.52));
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      Hour hour0 = Hour.parseHour(":>");
      assertNull(hour0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) ":>", Double.NEGATIVE_INFINITY, 0);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotNull(pieDataset1);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertFalse(pieDataset1.equals((Object)defaultPieDataset0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      assertNotSame(defaultStatisticalCategoryDataset0, defaultStatisticalCategoryDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)defaultStatisticalCategoryDataset1));
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(defaultPieDataset0.equals((Object)pieDataset1));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 9998);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertNotNull(timeSeries0);
      
      ArrayList<DefaultStatisticalCategoryDataset> arrayList0 = new ArrayList<DefaultStatisticalCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = arrayList0.add(defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(defaultStatisticalCategoryDataset0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), (-3482.682596536), (-549.612231868), 2076.4259901734);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 895.453832341, 995.11994096853, (-1989.5577444548896), (-70.2277), 2076.4259901734);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-1.0), (-1989.5577444548896), 54.0, 23.0, (-70.2277));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem2);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[0] = oHLCDataItem2;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem1;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem1;
      oHLCDataItemArray0[6] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(7, oHLCDataItemArray0.length);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, (-1989.5577444548896));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1989.5577444548896), xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      assertEquals(7, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYBarDataset0);
      assertEquals((-549.612231868), number0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1989.5577444548896), xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(number0);
      assertEquals(7, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1989.5577444548896), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals((-549.612231868), range0.getLowerBound(), 0.01);
      assertEquals(572.612231868, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals((-263.306115934), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(7, oHLCDataItemArray0.length);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(xYBarDataset0);
      assertEquals(1.3924092803252212E12, number1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1989.5577444548896), xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(7, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(double0);
      assertEquals(3, doubleArray0.length);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.7976931348623157E308), 2250.77039);
      assertEquals(2250.77039, powerFunction2D0.getB(), 0.01);
      assertEquals((-1.7976931348623157E308), powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-1.7976931348623157E308), 887.0, 169, double0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2250.77039, powerFunction2D0.getB(), 0.01);
      assertEquals((-1.7976931348623157E308), powerFunction2D0.getA(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(169, xYSeries0.getItemCount());
      assertEquals((-1.7976931348623157E308), xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMinY(), 0.01);
      assertNotNull(xYSeries0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(".aMF=1_Ex;-]/j{4Wk", ".aMF=1_Ex;-]/j{4Wk", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
      assertEquals(3, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2958465, 2146696202);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(2146696202, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2958465, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      DatasetUtilities.findMinimumStackedRangeValue(slidingGanttCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-1962.75192715);
      doubleArray1[2] = 539.973025761576;
      doubleArray1[3] = 2566.96;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-74));
      assertEquals((byte) (-74), (byte)byte0);
      assertNotNull(byte0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((-1962.75192715), oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(0, oHLCDataItemArray0.length);
      
      DomainOrder domainOrder0 = defaultOHLCDataset0.getDomainOrder();
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      assertEquals(0, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNull(range0);
      assertEquals(0, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Float float0 = new Float(1067.4182426052857);
      assertEquals(1067.4182F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = stack0.add(float0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[1067.4182]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(float0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(Double.POSITIVE_INFINITY, (-1301.535), 1067.4182426052857, Double.POSITIVE_INFINITY, (-1301.535), 1390.5192, 1750.961036, 3.0, (List) stack0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[1067.4182]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertNotNull(boxAndWhiskerItem0);
      assertTrue(stack0.contains(float0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) float0, (Comparable) float0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[1067.4182]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(float0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[1067.4182]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals((-1301.535), range0.getLowerBound(), 0.01);
      assertEquals(44.49209999999994, range0.getCentralValue(), 0.01);
      assertEquals(1390.5192, range0.getUpperBound(), 0.01);
      assertEquals(2692.0542, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertTrue(stack0.contains(float0));
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(1301.535, range1.getLength(), 0.01);
      assertEquals((-650.7675), range1.getCentralValue(), 0.01);
      assertEquals((-1301.535), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(defaultBoxAndWhiskerCategoryDataset0, true);
      assertEquals((-1301.535), range2.getCentralValue(), 0.01);
      assertEquals((-1301.535), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1301.535), range2.getLowerBound(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((double) (byte)51, 1694.8975488189549, "'i%G0&4RID#");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Short short0 = new Short((short)13);
      assertEquals((short)13, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = linkedList0.add(short0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((short)13));
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(51.5, range0.getUpperBound(), 0.01);
      assertEquals(50.5, range0.getLowerBound(), 0.01);
      assertEquals(51.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      String[] stringArray0 = new String[3];
      stringArray0[1] = "'i%G0&4RID#";
      stringArray0[1] = "";
      stringArray0[2] = "'i%G0&4RID#";
      Number[][] numberArrayArray0 = null;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, stringArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 2250.77039, 2250.77039, 1007.9661934898946, 1007.9661934898946, 1007.9661934898946);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 2250.77039, 1007.9661934898946, 2250.77039, 1007.9661934898946, 1007.9661934898946);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-74));
      assertEquals((byte) (-74), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte) (-74)));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((byte) (-74)));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(byte0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      defaultOHLCDataset0.addChangeListener(xYDatasetTableModel0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      DomainOrder domainOrder0 = defaultOHLCDataset0.getDomainOrder();
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      assertEquals(1, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (-1875.28431);
      doubleArray1[2] = 586.67622715;
      doubleArray1[3] = (-170.232932085);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 586.67622715;
      doubleArray2[1] = (-1875.28431);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-74.5446561530344);
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray3[3] = Double.POSITIVE_INFINITY;
      doubleArray3[4] = (-170.232932085);
      doubleArray3[5] = 586.67622715;
      doubleArray3[6] = 586.67622715;
      doubleArray3[7] = Double.POSITIVE_INFINITY;
      doubleArray3[8] = 586.67622715;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray4[1] = 586.67622715;
      doubleArray4[2] = (-170.232932085);
      doubleArray4[3] = Double.POSITIVE_INFINITY;
      doubleArray4[4] = 586.67622715;
      doubleArray4[5] = (-74.5446561530344);
      doubleArray4[6] = 586.67622715;
      doubleArray4[7] = (-74.5446561530344);
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-74));
      assertEquals((byte) (-74), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte) (-74)));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((byte) (-74)));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(byte0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      
      DomainOrder domainOrder0 = defaultOHLCDataset0.getDomainOrder();
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      assertEquals(1, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      stack0.trimToSize();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = stack0.add(float0);
      assertTrue(boolean0);
      assertEquals(1, stack0.capacity());
      assertEquals("[-1.0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(float0));
      
      Float float1 = new Float((-1.0));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean1 = stack0.add(float1);
      assertTrue(boolean1);
      assertEquals(2, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[-1.0, -1.0]", stack0.toString());
      assertEquals((float)float1, (float)float0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(stack0.contains(float1));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(1146.4851009110669, 1146.4851009110669, 1146.4851009110669, (-1740.9636646925), (-1740.9636646925), Double.POSITIVE_INFINITY, (-1740.9636646925), (-1.0), (List) stack0);
      assertEquals(2, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[-1.0, -1.0]", stack0.toString());
      assertNotNull(boxAndWhiskerItem0);
      assertTrue(stack0.contains(float1));
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) float1, (Comparable) float1);
      assertEquals(2, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[-1.0, -1.0]", stack0.toString());
      assertEquals((float)float1, (float)float0, 0.01F);
      assertTrue(stack0.contains(float1));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertEquals(2, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[-1.0, -1.0]", stack0.toString());
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals((-1740.9636646925), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertTrue(stack0.contains(float1));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals(1739.9636646925, range1.getLength(), 0.01);
      assertEquals((-1740.9636646925), range1.getLowerBound(), 0.01);
      assertEquals((-870.98183234625), range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Float float0 = new Float((-2340.6724F));
      assertEquals((-2340.6724F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = stack0.add(float0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[-2340.6724]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(float0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, float0, float0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[-2340.6724]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(float0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, false);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[-2340.6724]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2340.67236328125), range0.getCentralValue(), 0.01);
      assertEquals((-2340.67236328125), range0.getLowerBound(), 0.01);
      assertEquals((-2340.67236328125), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertTrue(stack0.contains(float0));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2340.67236328125), range1.getCentralValue(), 0.01);
      assertEquals((-2340.67236328125), range1.getUpperBound(), 0.01);
      assertEquals((-2340.67236328125), range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("5Z", (OHLCDataItem[]) null);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>();
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      List<XYBarDataset> list0 = vector0.subList(0, 0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      defaultMultiValueCategoryDataset0.add(vector0, "3~ICM_JBV9E?fbjGM", "3~ICM_JBV9E?fbjGM");
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, false);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNull(range0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertTrue(boolean0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      
      Object[][][] objectArray0 = new Object[9][6][5];
      Object[][] objectArray1 = new Object[0][9];
      objectArray0[0] = objectArray1;
      Object[][] objectArray2 = new Object[4][1];
      assertFalse(objectArray2.equals((Object)objectArray1));
      
      Object[] objectArray3 = new Object[2];
      objectArray3[0] = (Object) tableOrder0;
      objectArray3[1] = (Object) "3~ICM_JBV9E?fbjGM";
      objectArray2[0] = objectArray3;
      Object[] objectArray4 = new Object[6];
      assertFalse(objectArray4.equals((Object)objectArray3));
      
      objectArray4[0] = (Object) "3~ICM_JBV9E?fbjGM";
      objectArray4[1] = (Object) "3~ICM_JBV9E?fbjGM";
      objectArray4[2] = (Object) null;
      objectArray4[3] = (Object) connection0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray4[4] = object0;
      objectArray4[5] = (Object) tableOrder0;
      objectArray2[1] = objectArray4;
      Object[] objectArray5 = new Object[1];
      assertFalse(objectArray5.equals((Object)objectArray3));
      assertFalse(objectArray5.equals((Object)objectArray4));
      
      objectArray5[0] = (Object) connection0;
      objectArray2[2] = objectArray5;
      Object[] objectArray6 = new Object[7];
      assertFalse(objectArray6.equals((Object)objectArray3));
      assertFalse(objectArray6.equals((Object)objectArray5));
      assertFalse(objectArray6.equals((Object)objectArray4));
      
      objectArray6[0] = (Object) list0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray6[1] = object1;
      objectArray6[2] = (Object) categoryToPieDataset0;
      objectArray6[3] = (Object) "3~ICM_JBV9E?fbjGM";
      objectArray6[4] = (Object) defaultMultiValueCategoryDataset0;
      objectArray6[5] = (Object) defaultMultiValueCategoryDataset0;
      objectArray6[6] = (Object) categoryToPieDataset0;
      objectArray2[3] = objectArray6;
      objectArray0[1] = objectArray2;
      Object[][] objectArray7 = new Object[8][4];
      assertFalse(objectArray7.equals((Object)objectArray2));
      assertFalse(objectArray7.equals((Object)objectArray1));
      
      objectArray7[0] = objectArray5;
      objectArray7[1] = objectArray4;
      objectArray7[2] = objectArray5;
      objectArray7[3] = objectArray6;
      objectArray7[4] = objectArray4;
      objectArray7[5] = objectArray6;
      objectArray7[6] = objectArray3;
      objectArray7[7] = objectArray5;
      objectArray0[2] = objectArray7;
      Object[][] objectArray8 = new Object[1][0];
      assertFalse(objectArray8.equals((Object)objectArray1));
      assertFalse(objectArray8.equals((Object)objectArray7));
      assertFalse(objectArray8.equals((Object)objectArray2));
      
      objectArray8[0] = objectArray5;
      objectArray0[3] = objectArray8;
      Object[][] objectArray9 = new Object[7][7];
      assertFalse(objectArray9.equals((Object)objectArray1));
      assertFalse(objectArray9.equals((Object)objectArray8));
      assertFalse(objectArray9.equals((Object)objectArray7));
      assertFalse(objectArray9.equals((Object)objectArray2));
      
      objectArray9[0] = objectArray4;
      objectArray9[1] = objectArray4;
      objectArray9[2] = objectArray3;
      objectArray9[3] = objectArray3;
      objectArray9[4] = objectArray3;
      objectArray9[5] = objectArray4;
      objectArray9[6] = objectArray4;
      objectArray0[4] = objectArray9;
      Object[][] objectArray10 = new Object[9][6];
      assertFalse(objectArray10.equals((Object)objectArray2));
      assertFalse(objectArray10.equals((Object)objectArray7));
      assertFalse(objectArray10.equals((Object)objectArray1));
      assertFalse(objectArray10.equals((Object)objectArray9));
      assertFalse(objectArray10.equals((Object)objectArray8));
      
      objectArray10[0] = objectArray4;
      Object[] objectArray11 = new Object[7];
      assertFalse(objectArray11.equals((Object)objectArray4));
      assertFalse(objectArray11.equals((Object)objectArray3));
      assertFalse(objectArray11.equals((Object)objectArray6));
      assertFalse(objectArray11.equals((Object)objectArray5));
      
      objectArray11[0] = (Object) categoryToPieDataset0;
      objectArray11[1] = (Object) tableOrder0;
      objectArray11[2] = object0;
      objectArray11[3] = (Object) connection0;
      objectArray11[4] = (Object) vector0;
      objectArray11[5] = (Object) "3~ICM_JBV9E?fbjGM";
      objectArray11[6] = object0;
      objectArray10[1] = objectArray11;
      objectArray10[2] = objectArray6;
      objectArray10[3] = objectArray6;
      objectArray10[4] = objectArray4;
      objectArray10[5] = objectArray4;
      objectArray10[6] = objectArray3;
      objectArray10[7] = objectArray6;
      objectArray10[8] = objectArray6;
      objectArray0[5] = objectArray10;
      Object[][] objectArray12 = new Object[2][9];
      assertFalse(objectArray12.equals((Object)objectArray10));
      assertFalse(objectArray12.equals((Object)objectArray1));
      assertFalse(objectArray12.equals((Object)objectArray2));
      assertFalse(objectArray12.equals((Object)objectArray7));
      assertFalse(objectArray12.equals((Object)objectArray8));
      assertFalse(objectArray12.equals((Object)objectArray9));
      
      objectArray12[0] = objectArray6;
      objectArray12[1] = objectArray5;
      objectArray0[6] = objectArray12;
      Object[][] objectArray13 = new Object[9][1];
      assertFalse(objectArray13.equals((Object)objectArray10));
      assertFalse(objectArray13.equals((Object)objectArray8));
      assertFalse(objectArray13.equals((Object)objectArray2));
      assertFalse(objectArray13.equals((Object)objectArray12));
      assertFalse(objectArray13.equals((Object)objectArray9));
      assertFalse(objectArray13.equals((Object)objectArray7));
      assertFalse(objectArray13.equals((Object)objectArray1));
      
      objectArray13[0] = objectArray3;
      objectArray13[1] = objectArray3;
      objectArray13[2] = objectArray5;
      objectArray13[3] = objectArray3;
      objectArray13[4] = objectArray4;
      objectArray13[5] = objectArray11;
      objectArray13[6] = objectArray5;
      Object[] objectArray14 = new Object[5];
      assertFalse(objectArray14.equals((Object)objectArray6));
      assertFalse(objectArray14.equals((Object)objectArray4));
      assertFalse(objectArray14.equals((Object)objectArray3));
      assertFalse(objectArray14.equals((Object)objectArray11));
      assertFalse(objectArray14.equals((Object)objectArray5));
      
      objectArray14[0] = (Object) connection0;
      objectArray14[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray14[2] = object2;
      objectArray14[3] = (Object) tableOrder0;
      objectArray14[4] = (Object) vector0;
      objectArray13[7] = objectArray14;
      objectArray13[8] = objectArray3;
      objectArray0[7] = objectArray13;
      Object[][] objectArray15 = new Object[8][9];
      assertFalse(objectArray15.equals((Object)objectArray1));
      assertFalse(objectArray15.equals((Object)objectArray7));
      assertFalse(objectArray15.equals((Object)objectArray13));
      assertFalse(objectArray15.equals((Object)objectArray9));
      assertFalse(objectArray15.equals((Object)objectArray8));
      assertFalse(objectArray15.equals((Object)objectArray12));
      assertFalse(objectArray15.equals((Object)objectArray2));
      assertFalse(objectArray15.equals((Object)objectArray10));
      
      objectArray15[0] = objectArray5;
      objectArray15[1] = objectArray5;
      objectArray15[2] = objectArray4;
      objectArray15[3] = objectArray3;
      objectArray15[4] = objectArray3;
      objectArray15[5] = objectArray5;
      objectArray15[6] = objectArray6;
      objectArray15[7] = objectArray5;
      objectArray0[8] = objectArray15;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = stack0.add(float0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[-1.0]", stack0.toString());
      assertTrue(stack0.contains(float0));
      
      Float float1 = new Float((-1.0));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean1 = stack0.add(float1);
      assertTrue(boolean1);
      assertEquals("[-1.0, -1.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals((float)float1, (float)float0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(stack0.contains(float0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(1146.4851009110669, 1146.4851009110669, 1146.4851009110669, (-1740.9636646925), (-1740.9636646925), Double.POSITIVE_INFINITY, (-1740.9636646925), (-1.0), (List) stack0);
      assertEquals("[-1.0, -1.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(boxAndWhiskerItem0);
      assertTrue(stack0.contains(float0));
      
      String string0 = boxAndWhiskerItem0.toString();
      assertEquals("[-1.0, -1.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(string0);
      assertTrue(stack0.contains(float0));
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) float1, (Comparable) float1);
      assertEquals("[-1.0, -1.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals((float)float1, (float)float0, 0.01F);
      assertTrue(stack0.contains(float0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertEquals("[-1.0, -1.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals((-1740.9636646925), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertTrue(stack0.contains(float0));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1146.4851009110669, range1.getLowerBound(), 0.01);
      assertEquals(1146.4851009110669, range1.getCentralValue(), 0.01);
      assertEquals(1146.4851009110669, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Float float0 = new Float(1007.9661934898946);
      assertEquals(1007.9662F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1007.9661934898946, 1007.9661934898946, 1007.9661934898946, 1007.9661934898946, 1007.9661934898946);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1007.9661934898946, 1007.9661934898946, 1007.9661934898946, 1007.9661934898946, (-2.1474836494393067E9));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertTrue(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(6, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(1007.9661934898946, number0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(6, oHLCDataItemArray0.length);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(1007.9661934898946, number1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals(6, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Short short0 = new Short((short) (-398));
      assertEquals((short) (-398), (short)short0);
      assertNotNull(short0);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(short0));
      
      Short short1 = new Short((short) (-398));
      assertEquals((short) (-398), (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = linkedList0.add(short1);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(short1.equals((Object)short0));
      assertTrue(linkedList0.contains(short0));
      
      TimeSeries timeSeries0 = new TimeSeries(short0);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      assertTrue(short0.equals((Object)short1));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      assertTrue(short0.equals((Object)short1));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, linkedList0, false);
      assertEquals(1, linkedList0.size());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      assertTrue(short0.equals((Object)short1));
      assertTrue(linkedList0.contains(short0));
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, (Range) null, false);
      assertEquals(1, linkedList0.size());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(short0.equals((Object)short1));
      assertTrue(linkedList0.contains(short0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range0);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 91);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1.0));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-1.0), 9.0, "5(X1#&su\u0007");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 9.0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(9.0, range0.getLength(), 0.01);
      assertEquals(13.5, range0.getCentralValue(), 0.01);
      assertEquals(18.0, range0.getUpperBound(), 0.01);
      assertEquals(9.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1.5), range1.getLowerBound(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-0.5), range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(9.0, 56.21);
      assertEquals(56.21, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(9.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 56.21, 2082.70765042, (-2146566575), "5(X1#&su\u0007");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = stack0.add(float0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-1.0]", stack0.toString());
      assertTrue(stack0.contains(float0));
      
      Float float1 = new Float((-1.0));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean1 = stack0.add(float1);
      assertTrue(boolean1);
      assertEquals("[-1.0, -1.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals((float)float1, (float)float0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(stack0.contains(float1));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(1146.4851009110669, 1146.4851009110669, 1146.4851009110669, (-1740.9636646925), (-1740.9636646925), Double.POSITIVE_INFINITY, (-1740.9636646925), (-1.0), (List) stack0);
      assertEquals("[-1.0, -1.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertNotNull(boxAndWhiskerItem0);
      assertTrue(stack0.contains(float1));
      
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) float1, (Comparable) float1);
      assertEquals("[-1.0, -1.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals((float)float1, (float)float0, 0.01F);
      assertTrue(stack0.contains(float1));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertEquals("[-1.0, -1.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals((-1740.9636646925), range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertTrue(stack0.contains(float1));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-74));
      assertEquals((byte) (-74), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(byte0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(byte0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      
      DomainOrder domainOrder0 = defaultOHLCDataset0.getDomainOrder();
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = Range.expandToInclude(range0, (byte) (-74));
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(74.0, range1.getLength(), 0.01);
      assertEquals((-74.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals((-37.0), range1.getCentralValue(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, doubleArray0.length);
      
      Range range2 = Range.combine(range0, range0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Float float0 = new Float(1127.00482331);
      assertEquals(1127.0049F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = stack0.add(float0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[1127.0049]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(float0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, float0, float0);
      assertFalse(stack0.isEmpty());
      assertEquals("[1127.0049]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(float0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, false);
      assertFalse(stack0.isEmpty());
      assertEquals("[1127.0049]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1127.0048828125, range0.getUpperBound(), 0.01);
      assertEquals(1127.0048828125, range0.getLowerBound(), 0.01);
      assertEquals(1127.0048828125, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertTrue(stack0.contains(float0));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((double) (byte)78, 734.90549, "^");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      categoryTableXYDataset0.add((-945.03343488947), (-945.03343488947), "org.jfree.data.general.DatasetUtilities");
      assertEquals(1023.03343488947, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(734.90549, number0);
      assertEquals(1023.03343488947, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(3, 3);
      assertEquals(3.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(3.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 2);
      Quarter quarter0 = new Quarter();
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(quarter0);
      
      comparableArray0[0] = (Comparable<Double>) quarter0;
      Locale locale0 = Locale.KOREA;
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Task task0 = new Task("RELATIVE_FREQUENCY", date0, date0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("RELATIVE_FREQUENCY", task0.getDescription());
      assertNotNull(task0);
      
      Double double0 = task0.getPercentComplete();
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("RELATIVE_FREQUENCY", task0.getDescription());
      assertNull(double0);
      
      comparableArray0[1] = (Comparable<Double>) null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-540.9589918629);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-540.9589918629);
      doubleArray2[1] = (-540.9589918629);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-540.9589918629);
      doubleArray3[1] = (-540.9589918629);
      doubleArray3[2] = (-540.9589918629);
      doubleArray3[3] = (-540.9589918629);
      doubleArray3[4] = (-540.9589918629);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "SerialDate.monthCodeToQuarter: invalid month code.";
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 1.0;
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = 1269.464397937;
      doubleArray1[4] = (-29.0);
      doubleArray1[5] = Double.POSITIVE_INFINITY;
      double double1 = 1009.74;
      doubleArray1[6] = 1009.74;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("SerialDate.monthCodeToQuarter: invalid month code.", (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      assertFalse(number0.equals((Object)double0));
      assertFalse(number0.equals((Object)double1));
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(" pgS", " pgS", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte0);
      assertNotNull(byte0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Byte byte1 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      defaultStatisticalCategoryDataset0.add((Number) byte0, (Number) byte0, (Comparable) byte0, (Comparable) byte0);
      assertTrue(byte0.equals((Object)byte1));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(arrayList0.contains(byte0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (-2075900859));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Float float0 = new Float(1007.9661934898946);
      assertEquals(1007.9662F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1007.9661934898946, 1007.9661934898946, 1007.9661934898946, 1007.9661934898946, 1007.9661934898946);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1007.9661934898946, 1007.9661934898946, 1007.9661934898946, 1007.9661934898946, (-2.1474836494393067E9));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertTrue(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(6, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(1007.9661934898946, number0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(6, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1007.9661934898946, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1007.9661934898946, range0.getCentralValue(), 0.01);
      assertEquals(1007.9661934898946, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertEquals(6, oHLCDataItemArray0.length);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals(1.39240928132E12, number1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(6, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Stack<Float> stack0 = new Stack<Float>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = stack0.add(float0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(float0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, float0, float0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(float0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertTrue(stack0.contains(float0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "PL)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Float float0 = new Float(1007.9661934898946);
      assertEquals(1007.9662F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1007.9661934898946, 1007.9661934898946, 1007.9661934898946, 1007.9661934898946, 1007.9661934898946);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1007.9661934898946, 1007.9661934898946, 1007.9661934898946, 1007.9661934898946, (-2.1474836494393067E9));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertTrue(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-6), 1414);
      assertEquals(1414, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-6), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)124);
      assertEquals((byte)124, (byte)byte0);
      assertNotNull(byte0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      int int0 = defaultStatisticalCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      
      Iterator<Byte> iterator0 = arrayList0.iterator();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(iterator0);
      assertFalse(arrayList0.contains((byte)124));
      
      defaultStatisticalCategoryDataset0.add((Number) byte0, (Number) byte0, (Comparable) byte0, (Comparable) byte0);
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((byte)124));
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(byte0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, false);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timePeriodValuesCollection0);
      assertEquals(Double.NaN, number0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(248.0, range1.getLength(), 0.01);
      assertEquals(124.0, range1.getCentralValue(), 0.01);
      assertEquals(248.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertTrue(arrayList0.contains((byte)124));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(0.0, 0.0, "kkW-");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Float float0 = new Float((double) (-29));
      assertEquals((-29.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(float0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[6][3];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) float0;
      numberArray1[1] = (Number) float0;
      numberArray1[2] = (Number) float0;
      numberArray1[3] = (Number) float0;
      numberArray1[4] = (Number) float0;
      numberArray1[5] = (Number) float0;
      numberArray1[6] = (Number) float0;
      numberArray1[7] = (Number) float0;
      numberArray1[8] = (Number) float0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) float0;
      numberArray2[1] = (Number) float0;
      numberArray2[2] = (Number) float0;
      numberArray2[3] = (Number) float0;
      numberArray2[4] = (Number) float0;
      numberArray2[5] = (Number) float0;
      numberArray2[6] = (Number) float0;
      numberArray2[7] = (Number) float0;
      numberArray2[8] = (Number) float0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[9];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) float0;
      numberArray3[1] = (Number) float0;
      numberArray3[2] = (Number) float0;
      numberArray3[3] = (Number) float0;
      numberArray3[4] = (Number) float0;
      numberArray3[5] = (Number) float0;
      numberArray3[6] = (Number) float0;
      numberArray3[7] = (Number) float0;
      numberArray3[8] = (Number) float0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[0];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[1];
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray2));
      
      numberArray5[0] = (Number) float0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[7];
      assertFalse(numberArray6.equals((Object)numberArray2));
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray1));
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray4));
      
      Integer integer0 = new Integer((-29));
      assertEquals((-29), (int)integer0);
      assertNotNull(integer0);
      
      numberArray6[0] = (Number) integer0;
      numberArray6[1] = (Number) float0;
      numberArray6[2] = (Number) float0;
      numberArray6[3] = (Number) float0;
      numberArray6[4] = (Number) float0;
      numberArray6[5] = (Number) float0;
      numberArray6[6] = (Number) float0;
      numberArray0[5] = numberArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(734.90549, 814.623382147469, "^");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Short short0 = new Short((byte)78);
      assertEquals((short)78, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = linkedList0.add(short0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(short0));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, linkedList0.size());
      assertEquals(734.40549, range0.getLowerBound(), 0.01);
      assertEquals(735.40549, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(734.90549, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertTrue(linkedList0.contains(short0));
      
      Range range1 = Range.expandToInclude(range0, (-582.5853177));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, linkedList0.size());
      assertEquals(734.40549, range0.getLowerBound(), 0.01);
      assertEquals(735.40549, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(734.90549, range0.getCentralValue(), 0.01);
      assertEquals((-582.5853177), range1.getLowerBound(), 0.01);
      assertEquals(76.41008614999998, range1.getCentralValue(), 0.01);
      assertEquals(1317.9908077, range1.getLength(), 0.01);
      assertEquals(735.40549, range1.getUpperBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertTrue(linkedList0.contains(short0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 389.5;
      doubleArray1[1] = 1147.979328;
      doubleArray1[2] = (-2012.05);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1147.979328;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte)1));
      
      Byte byte1 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean boolean0 = arrayList0.add(byte1);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(arrayList0.contains((byte) (-70)));
      assertFalse(arrayList0.contains(byte0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1147.979328, range0.getUpperBound(), 0.01);
      assertEquals((-432.03533600000003), range0.getCentralValue(), 0.01);
      assertEquals((-2012.05), range0.getLowerBound(), 0.01);
      assertEquals(3160.0293279999996, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(1147.979328, (OHLCDataItem[]) null);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      DomainOrder domainOrder0 = defaultOHLCDataset0.getDomainOrder();
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(domainOrder0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals((-432.03533600000003), range1.getCentralValue(), 0.01);
      assertEquals((-2012.05), range1.getLowerBound(), 0.01);
      assertEquals(1147.979328, range1.getUpperBound(), 0.01);
      assertEquals(3160.0293279999996, range1.getLength(), 0.01);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(1, doubleArray0.length);
      
      Range range2 = Range.shift(range1, (-1.0));
      assertEquals((-432.03533600000003), range1.getCentralValue(), 0.01);
      assertEquals((-2012.05), range1.getLowerBound(), 0.01);
      assertEquals(1147.979328, range1.getUpperBound(), 0.01);
      assertEquals(3160.0293279999996, range1.getLength(), 0.01);
      assertEquals(1146.979328, range2.getUpperBound(), 0.01);
      assertEquals((-2013.05), range2.getLowerBound(), 0.01);
      assertEquals((-433.03533600000003), range2.getCentralValue(), 0.01);
      assertEquals(3160.0293279999996, range2.getLength(), 0.01);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(1, doubleArray0.length);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range2, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-432.03533600000003), range1.getCentralValue(), 0.01);
      assertEquals((-2012.05), range1.getLowerBound(), 0.01);
      assertEquals(1147.979328, range1.getUpperBound(), 0.01);
      assertEquals(3160.0293279999996, range1.getLength(), 0.01);
      assertEquals(1146.979328, range2.getUpperBound(), 0.01);
      assertEquals((-2013.05), range2.getLowerBound(), 0.01);
      assertEquals((-433.03533600000003), range2.getCentralValue(), 0.01);
      assertEquals(3160.0293279999996, range2.getLength(), 0.01);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNull(range3);
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertTrue(arrayList0.contains((byte) (-70)));
      assertFalse(arrayList0.contains(byte0));
      assertEquals(1, doubleArray0.length);
      
      Range range4 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(3160.0293279999996, range4.getLength(), 0.01);
      assertEquals(1147.979328, range4.getUpperBound(), 0.01);
      assertEquals((-432.03533600000003), range4.getCentralValue(), 0.01);
      assertEquals((-2012.05), range4.getLowerBound(), 0.01);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotNull(range4);
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertEquals(1, doubleArray0.length);
      
      Range range5 = Range.combine((Range) null, range4);
      assertEquals(3160.0293279999996, range4.getLength(), 0.01);
      assertEquals(1147.979328, range4.getUpperBound(), 0.01);
      assertEquals((-432.03533600000003), range4.getCentralValue(), 0.01);
      assertEquals((-2012.05), range4.getLowerBound(), 0.01);
      assertEquals((-432.03533600000003), range5.getCentralValue(), 0.01);
      assertEquals(1147.979328, range5.getUpperBound(), 0.01);
      assertEquals(3160.0293279999996, range5.getLength(), 0.01);
      assertEquals((-2012.05), range5.getLowerBound(), 0.01);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertSame(range4, range5);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertSame(range5, range4);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertNotSame(range5, range2);
      assertNotNull(range5);
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range5.equals((Object)range2));
      assertTrue(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range1));
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte0);
      assertNotNull(byte0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      int int0 = defaultStatisticalCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      
      Iterator<Byte> iterator0 = arrayList0.iterator();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(iterator0);
      assertFalse(arrayList0.contains((byte) (-117)));
      
      defaultStatisticalCategoryDataset0.add((Number) byte0, (Number) byte0, (Comparable) byte0, (Comparable) byte0);
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((byte) (-117)));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-117.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-117.0), range0.getCentralValue(), 0.01);
      assertEquals((-117.0), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertTrue(arrayList0.contains((byte) (-117)));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Iterator<Byte> iterator0 = arrayList0.iterator();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(iterator0);
      assertFalse(arrayList0.contains((byte) (-117)));
      
      defaultStatisticalCategoryDataset0.add((Number) byte0, (Number) byte0, (Comparable) byte0, (Comparable) byte0);
      assertTrue(byte0.equals((Object)byte1));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(arrayList0.contains((byte) (-117)));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-117.0), range0.getCentralValue(), 0.01);
      assertEquals((-117.0), range0.getUpperBound(), 0.01);
      assertEquals((-117.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertTrue(arrayList0.contains((byte) (-117)));
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(3, 3);
      assertEquals(3.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(3.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      Day day0 = new Day();
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertNotNull(day0);
      
      RegularTimePeriod regularTimePeriod0 = day0.next();
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertNotSame(day0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, day0);
      assertNotNull(regularTimePeriod0);
      assertFalse(regularTimePeriod0.equals((Object)day0));
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(regularTimePeriod0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      assertFalse(day0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)day0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotSame(day0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, day0);
      assertNull(range0);
      assertFalse(day0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)day0));
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotSame(day0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, day0);
      assertNull(number0);
      assertFalse(day0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)day0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      String string0 = "GV@F]D,3NX\\u";
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      jDBCPieDataset0.setValue((Comparable) string0, (-939.0));
      Byte byte0 = new Byte((byte)75);
      assertEquals((byte)75, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte)75));
      
      Iterator<Byte> iterator0 = arrayList0.iterator();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(iterator0);
      assertFalse(arrayList0.contains((byte)75));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) byte0, (Number) byte0, (Comparable) byte0, (Comparable) string0);
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((byte)75));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(75.0, range0.getUpperBound(), 0.01);
      assertEquals(75.0, range0.getLowerBound(), 0.01);
      assertEquals(75.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertTrue(arrayList0.contains((byte)75));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 3;
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(3, 3);
      assertEquals(3.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(3.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      double double0 = 3767.713138152949;
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 3, 3767.713138152949, 3, 3);
      assertEquals(3.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(3.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(3, xYSeries0.getItemCount());
      assertEquals(3767.713138152949, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.1329807601338109, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(3.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNotNull(xYSeries0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("y*a'[T4s|i", 3, 2953);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8859, matrixSeries0.getItemCount());
      assertEquals(3, matrixSeries0.getRowCount());
      assertEquals(2953, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8859, matrixSeries0.getItemCount());
      assertEquals(3, matrixSeries0.getRowCount());
      assertEquals(2953, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8859, matrixSeries0.getItemCount());
      assertEquals(3, matrixSeries0.getRowCount());
      assertEquals(2953, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1476.0, range0.getCentralValue(), 0.01);
      assertEquals(2952.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2952.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Comparable<Byte>[] comparableArray0 = (Comparable<Byte>[]) Array.newInstance(Comparable.class, 5);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1552L));
      assertEquals((-1552L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-1552L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-1552L), fixedMillisecond0.getSerialIndex());
      assertEquals((-1552L), fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      comparableArray0[0] = (Comparable<Byte>) fixedMillisecond0;
      // Undeclared exception!
      try { 
        SerialDate.createInstance(2953, 2953, (-5717));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3419.34;
      doubleArray0[1] = (-1603.2535);
      doubleArray0[2] = 596.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {3419.34, (-1603.2535), 596.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {3419.34, (-1603.2535), 596.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3419.34, (-1603.2535), 596.0}, doubleArray1, 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2012.05), (-1603.2535), 2, 596.0);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(xYSeriesCollection0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {3419.34, (-1603.2535), 596.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-1603.2535), (-1603.2535), 1064, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      short short0 = (short)2;
      Short short1 = new Short((short)2);
      assertEquals((short)2, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = linkedList0.add((Short) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(short0));
      
      int int0 = (-2129);
      TimeZone timeZone0 = TimeZone.getTimeZone("e%<i");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection((short)2, (-2129), timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-2130), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, linkedList0, true);
      assertEquals(1, linkedList0.size());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-2130), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNull(range0);
      assertFalse(linkedList0.contains((short)2));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) linkedList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      MockDate mockDate0 = new MockDate(893, 893, 54, 6, (-937), 54);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-937), (-936.7986869634349), 893, (-937), 6);
      assertEquals("Sat Jul 23 14:23:54 GMT 2867", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, (OHLCDataItem[]) null);
      assertEquals("Sat Jul 23 14:23:54 GMT 2867", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = defaultStatisticalCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      
      Iterator<Byte> iterator0 = arrayList0.iterator();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(iterator0);
      assertFalse(arrayList0.contains((byte) (-117)));
      
      defaultStatisticalCategoryDataset0.add((Number) byte0, (Number) byte0, (Comparable) byte0, (Comparable) byte0);
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains((byte) (-117)));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-234.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((double) (byte)78, 734.90549, "^");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Short short0 = new Short((byte)78);
      assertEquals((short)78, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = linkedList0.add(short0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(short0));
      
      categoryTableXYDataset0.add(734.90549, 734.90549, "Requires 'samples' > 1");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(656.90549, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(734.90549, double0, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(656.90549, categoryTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((double) (byte)78, 734.90549, "^");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Short short0 = new Short((byte)78);
      assertEquals((short)78, (short)short0);
      assertNotNull(short0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte)78));
      
      Byte byte0 = new Byte((byte)84);
      assertEquals((byte)84, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains((byte)78));
      assertTrue(arrayList0.contains(byte0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, false);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      assertFalse(linkedList0.contains(short0));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(78.0, range1.getCentralValue(), 0.01);
      assertEquals(78.0, range1.getUpperBound(), 0.01);
      assertEquals(78.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range2.getLength(), 0.01);
      assertEquals(77.5, range2.getLowerBound(), 0.01);
      assertEquals(78.0, range2.getCentralValue(), 0.01);
      assertEquals(78.5, range2.getUpperBound(), 0.01);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(byte0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(byte0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(0, oHLCDataItemArray0.length);
      
      DomainOrder domainOrder0 = defaultOHLCDataset0.getDomainOrder();
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      assertEquals(0, oHLCDataItemArray0.length);
      
      Range range1 = Range.expandToInclude(range0, (-524.9773));
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-262.48865), range1.getCentralValue(), 0.01);
      assertEquals((-524.9773), range1.getLowerBound(), 0.01);
      assertEquals(524.9773, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(range0, range1);
      assertNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertTrue(arrayList0.contains(byte0));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, oHLCDataItemArray0.length);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNull(range3);
      assertEquals(0, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "GV@F]D,3NX\\u";
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNull(range0);
      
      Hour hour0 = Hour.parseHour(string0);
      assertNull(hour0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) string0, (-558.4), 0);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(jDBCPieDataset0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 737.3772959753971;
      doubleArray1[1] = (double) (byte) (-128);
      doubleArray1[2] = 737.3772959753971;
      doubleArray1[3] = 737.3772959753971;
      doubleArray1[4] = 737.3772959753971;
      doubleArray1[5] = (double) (byte) (-128);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 737.3772959753971;
      doubleArray2[2] = 737.3772959753971;
      doubleArray2[3] = (double) (byte) (-128);
      doubleArray2[4] = 737.3772959753971;
      doubleArray2[5] = (double) (byte) (-128);
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 737.3772959753971;
      doubleArray3[1] = (double) (byte) (-128);
      doubleArray3[2] = 737.3772959753971;
      doubleArray3[3] = (double) (byte) (-128);
      doubleArray3[4] = (double) (byte) (-128);
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("i0\u0004>5i}=^a +", "i0\u0004>5i}=^a +", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(3, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 737.3772959753971, (double) 0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertEquals(3, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) (-128.0), (KeyedValues) pieDataset1);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotNull(categoryDataset1);
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      double double0 = 1007.9661934898946;
      Float float0 = new Float(1007.9661934898946);
      assertEquals(1007.9662F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      assertFalse(stack0.contains(float0));
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1007.9661934898946, 1007.9661934898946, 1007.9661934898946, 1007.9661934898946, 1007.9661934898946);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1007.9661934898946, 1007.9661934898946, 1007.9661934898946, 1007.9661934898946, (-2.1474836494393067E9));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertTrue(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(6, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(1007.9661934898946, number0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      assertTrue(number0.equals((Object)double0));
      assertEquals(6, oHLCDataItemArray0.length);
      
      Stack<DefaultTableModel> stack1 = new Stack<DefaultTableModel>();
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack1, stack1);
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertNotNull(defaultTableModel0);
      assertFalse(stack1.contains(defaultTableModel0));
      
      boolean boolean0 = stack1.add(defaultTableModel0);
      assertTrue(boolean0);
      assertFalse(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertTrue(stack1.contains(defaultTableModel0));
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(1007.9661934898946, range0.getCentralValue(), 0.01);
      assertEquals(1007.9661934898946, range0.getUpperBound(), 0.01);
      assertEquals(1007.9661934898946, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(range0);
      assertEquals(6, oHLCDataItemArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) oHLCDataItem0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotNull(pieDataset0);
      assertTrue(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack1, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.table.DefaultTableModel cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-2822.662949797), (-2822.662949797), "9bD0-u9*1Q,6s<]a6%");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2822.662949797), range0.getLowerBound(), 0.01);
      assertEquals((-2822.662949797), range0.getCentralValue(), 0.01);
      assertEquals((-2822.662949797), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) "9bD0-u9*1Q,6s<]a6%");
      assertNotNull(pieDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1411.3314748985), range2.getCentralValue(), 0.01);
      assertEquals((-2822.662949797), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(2822.662949797, range2.getLength(), 0.01);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1910, 1910);
      assertEquals(1910L, simpleTimePeriod0.getEndMillis());
      assertEquals(1910L, simpleTimePeriod0.getStartMillis());
      assertNotNull(simpleTimePeriod0);
      
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      assertEquals(1910L, simpleTimePeriod0.getEndMillis());
      assertEquals(1910L, simpleTimePeriod0.getStartMillis());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(1910L, simpleTimePeriod0.getEndMillis());
      assertEquals(1910L, simpleTimePeriod0.getStartMillis());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertEquals(1910L, simpleTimePeriod0.getEndMillis());
      assertEquals(1910L, simpleTimePeriod0.getStartMillis());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(1910L, simpleTimePeriod0.getEndMillis());
      assertEquals(1910L, simpleTimePeriod0.getStartMillis());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1910;
      doubleArray1[1] = (double) 1910;
      doubleArray1[2] = (double) 1910;
      doubleArray1[3] = (double) 1910;
      doubleArray1[4] = 1000.12376;
      doubleArray1[5] = (double) 1910;
      doubleArray1[6] = (double) 1910;
      doubleArray1[7] = (double) 1910;
      doubleArray1[8] = (double) 1910;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1910;
      doubleArray2[1] = (double) 1910;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1000.12376;
      doubleArray3[1] = (-3196.0);
      doubleArray3[2] = 1000.12376;
      doubleArray3[3] = 1000.12376;
      doubleArray3[4] = 1000.12376;
      doubleArray3[5] = 1000.12376;
      doubleArray3[6] = 1000.12376;
      doubleArray3[7] = (double) 1910;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)125);
      assertEquals((byte)125, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList1 = new ArrayList<Byte>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains(byte0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertNotNull(taskSeriesCollection1);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (byte)125, 3180.836696, 3180.836696, 3180.836696, (-1586.36631041039));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 3180.836696, (byte)125, (-766.4182286145334), 3180.836696, (-1021.45289218824));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(byte0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals((-766.4182286145334), number0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(1207.2092336927333, range0.getCentralValue(), 0.01);
      assertEquals(3947.254924614533, range0.getLength(), 0.01);
      assertEquals(3180.836696, range0.getUpperBound(), 0.01);
      assertEquals((-766.4182286145334), range0.getLowerBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(range0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(pieDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList1, range0, true);
      assertEquals(1207.2092336927333, range0.getCentralValue(), 0.01);
      assertEquals(3947.254924614533, range0.getLength(), 0.01);
      assertEquals(3180.836696, range0.getUpperBound(), 0.01);
      assertEquals((-766.4182286145334), range0.getLowerBound(), 0.01);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(arrayList1, arrayList0);
      assertNull(range1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains(byte0));
      assertEquals(2, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      HashSet<JDBCXYDataset> hashSet0 = new HashSet<JDBCXYDataset>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      boolean boolean0 = stack0.removeAll(hashSet0);
      assertFalse(boolean0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Float float0 = new Float((-2768.316239));
      assertEquals((-2768.3162F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = stack0.add(float0);
      assertTrue(boolean1);
      assertEquals("[-2768.3162]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(boolean1 == boolean0);
      assertTrue(stack0.contains(float0));
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(number0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(false);
      assertNull(range0);
      
      Range range1 = Range.expandToInclude((Range) null, (-3088.6365258396));
      assertEquals((-3088.6365258396), range1.getCentralValue(), 0.01);
      assertEquals((-3088.6365258396), range1.getUpperBound(), 0.01);
      assertEquals((-3088.6365258396), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertEquals("[-2768.3162]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertNull(range2);
      assertTrue(stack0.contains(float0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-74));
      assertEquals((byte) (-74), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte) (-74)));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((byte) (-74)));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(byte0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      
      DomainOrder domainOrder0 = defaultOHLCDataset0.getDomainOrder();
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range1 = Range.expandToInclude(range0, (byte) (-74));
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(74.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals((-37.0), range1.getCentralValue(), 0.01);
      assertEquals((-74.0), range1.getLowerBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      String string0 = "GV@F]D,3NX\\u";
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(0.0, (-939.0), string0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Short short0 = new Short((short)1816);
      assertEquals((short)1816, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)0);
      assertEquals((short)0, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean0 = linkedList0.add(short1);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(short1.equals((Object)short0));
      assertTrue(linkedList0.contains(short1));
      assertFalse(linkedList0.contains(short0));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertTrue(linkedList0.contains(short1));
      assertFalse(linkedList0.contains(short0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(byte0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(byte0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(0, oHLCDataItemArray0.length);
      
      DomainOrder domainOrder0 = defaultOHLCDataset0.getDomainOrder();
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      assertEquals(0, oHLCDataItemArray0.length);
      
      Range range1 = Range.expandToInclude(range0, (byte) (-70));
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals((-70.0), range1.getLowerBound(), 0.01);
      assertEquals((-35.0), range1.getCentralValue(), 0.01);
      assertEquals(70.0, range1.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNull(range2);
      assertTrue(arrayList0.contains((byte) (-70)));
      assertEquals(0, oHLCDataItemArray0.length);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(range0, range1);
      assertNull(range3);
      assertFalse(range0.equals((Object)range1));
      assertTrue(arrayList0.contains((byte) (-70)));
      assertEquals(1, doubleArray0.length);
      assertEquals(0, oHLCDataItemArray0.length);
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNull(range4);
      assertEquals(0, oHLCDataItemArray0.length);
      
      Range range5 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range5.getCentralValue(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertNotNull(range5);
      assertTrue(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range1));
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Stack<Float> stack1 = new Stack<Float>();
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(0.0, 0.0, "Duplicate items in 'columnKeys'.");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Kt`g E3", "Kt`g E3", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(734.90549, (-1744.13368), "sO");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Short short0 = new Short((short) (-845));
      assertEquals((short) (-845), (short)short0);
      assertNotNull(short0);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals((-1744.13368), double0, 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      HashSet<JDBCXYDataset> hashSet0 = new HashSet<JDBCXYDataset>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      boolean boolean0 = stack0.removeAll(hashSet0);
      assertFalse(boolean0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Float float0 = new Float((-2768.316239));
      assertEquals((-2768.3162F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = stack0.add(float0);
      assertTrue(boolean1);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-2768.3162]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(stack0.contains(float0));
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(number0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(false);
      assertNull(range0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 1068);
      assertNotNull(pieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      assertNotNull(defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) float0, 3767.4859213677423, (-2263));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(pieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull(pieDataset1);
      assertTrue(boolean2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(defaultPieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(defaultPieDataset0.equals((Object)pieDataset1));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      String string0 = "GV@F]D,3NX\\u";
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      jDBCPieDataset0.setValue((Comparable) string0, (-939.0));
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(false);
      assertNull(range0);
      
      Hour hour0 = Hour.parseHour(string0);
      assertNull(hour0);
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset1 = new JDBCPieDataset(connection1);
      assertNotNull(jDBCPieDataset1);
      assertFalse(jDBCPieDataset1.equals((Object)jDBCPieDataset0));
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset1, (Comparable) null, 1054.238457701755);
      assertNotSame(jDBCPieDataset1, jDBCPieDataset0);
      assertNotNull(pieDataset0);
      assertFalse(jDBCPieDataset1.equals((Object)jDBCPieDataset0));
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(6, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1);
      assertEquals(5, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotNull(range1);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(6, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) string0, 3779.5458, 0);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(jDBCPieDataset0, jDBCPieDataset1);
      assertNotNull(pieDataset1);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertFalse(jDBCPieDataset0.equals((Object)jDBCPieDataset1));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) jDBCPieDataset0);
      assertTrue(boolean0);
      assertNotSame(jDBCPieDataset0, jDBCPieDataset1);
      assertFalse(jDBCPieDataset0.equals((Object)jDBCPieDataset1));
      
      PieDataset pieDataset2 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(pieDataset2, pieDataset1);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotNull(pieDataset2);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertFalse(pieDataset2.equals((Object)pieDataset1));
      assertFalse(pieDataset2.equals((Object)pieDataset0));
      assertEquals(6, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(5, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getRowCount());
      assertNotSame(range2, range1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range1));
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(6, doubleArray0.length);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1, 1054.238457701755);
      assertEquals(1054.238457701755, range3.getUpperBound(), 0.01);
      assertEquals(1054.238457701755, range3.getLowerBound(), 0.01);
      assertEquals(1054.238457701755, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(5, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getRowCount());
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      byte byte0 = (byte) (-70);
      Byte byte1 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte1));
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      int int0 = 2813;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 2813);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2813, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) fixedMillisecond0, 1974.8036);
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Hour hour0 = Hour.parseHour("-)sPl\"1tV.!hr1KU6T");
      assertNull(hour0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "-)sPl\"1tV.!hr1KU6T", 51.0, 0);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Float float0 = new Float((double) 3);
      assertEquals(3.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      assertFalse(stack0.contains(float0));
      
      boolean boolean0 = stack0.add(float0);
      assertTrue(boolean0);
      assertEquals("[3.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(float0));
      
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = 8.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 8.0;
      doubleArray2[1] = 8.0;
      doubleArray2[2] = 8.0;
      doubleArray2[3] = 8.0;
      doubleArray2[4] = (double) 3;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 3;
      doubleArray3[1] = 8.0;
      doubleArray3[2] = 8.0;
      doubleArray3[3] = (double) 3;
      doubleArray3[4] = (double) 3;
      doubleArray3[5] = (double) 3;
      doubleArray3[6] = 8.0;
      doubleArray3[7] = (double) 3;
      doubleArray3[8] = (double) 3;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("i0\u0004>5i}=^a +5", "i0\u0004>5i}=^a +5", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      assertEquals(3, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) 8.0, 3.0, 1228);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertNotNull(pieDataset0);
      assertEquals(3, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) float0, (KeyedValues) pieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1910, 1910);
      assertEquals(1910L, simpleTimePeriod0.getEndMillis());
      assertEquals(1910L, simpleTimePeriod0.getStartMillis());
      assertNotNull(simpleTimePeriod0);
      
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      assertEquals(1910L, simpleTimePeriod0.getEndMillis());
      assertEquals(1910L, simpleTimePeriod0.getStartMillis());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" _rF@S==($", " _rF@S==($", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNull(range0);
      assertEquals(1, doubleArray0.length);
      
      Comparable<YIntervalSeriesCollection>[] comparableArray0 = (Comparable<YIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 4);
      comparableArray0[0] = (Comparable<YIntervalSeriesCollection>) simpleTimePeriod0;
      comparableArray0[1] = (Comparable<YIntervalSeriesCollection>) simpleTimePeriod0;
      comparableArray0[2] = (Comparable<YIntervalSeriesCollection>) simpleTimePeriod0;
      comparableArray0[3] = (Comparable<YIntervalSeriesCollection>) simpleTimePeriod0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      String string0 = "GV@F]D,3NX\\u";
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      jDBCPieDataset0.setValue((Comparable) string0, (-939.0));
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(false);
      assertNull(range0);
      
      Hour hour0 = Hour.parseHour(string0);
      assertNull(hour0);
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset1 = new JDBCPieDataset(connection1);
      assertNotNull(jDBCPieDataset1);
      assertFalse(jDBCPieDataset1.equals((Object)jDBCPieDataset0));
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset1, (Comparable) null, 1054.238457701755);
      assertNotSame(jDBCPieDataset1, jDBCPieDataset0);
      assertNotNull(pieDataset0);
      assertFalse(jDBCPieDataset1.equals((Object)jDBCPieDataset0));
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(6, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1);
      assertEquals(6, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotNull(range1);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(6, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNull(range2);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(jDBCPieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(jDBCPieDataset0, jDBCPieDataset1);
      assertFalse(jDBCPieDataset0.equals((Object)jDBCPieDataset1));
      
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      assertFalse(vector0.contains(defaultStatisticalCategoryDataset0));
      
      Vector<DefaultStatisticalCategoryDataset> vector1 = new Vector<DefaultStatisticalCategoryDataset>(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertNotNull(vector1);
      assertTrue(vector1.equals((Object)vector0));
      assertFalse(vector0.contains(defaultStatisticalCategoryDataset0));
      assertFalse(vector1.contains(defaultStatisticalCategoryDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) vector1, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(5524.28, 5524.28, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.validateObject();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(5524.28, range0.getCentralValue(), 0.01);
      assertEquals(5524.78, range0.getUpperBound(), 0.01);
      assertEquals(5523.78, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      ArrayList<FileDialog> arrayList0 = new ArrayList<FileDialog>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, true);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range2);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(5524.28, (double)double0, 0.01);
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(double0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "", 0.0, (-2141793595));
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) double0, 5524.28, (-1629));
      assertEquals(0.0, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (int) (byte)101);
      assertNotNull(defaultPieDataset0);
      
      String string0 = "GdV@F]D,3NX\\u";
      defaultPieDataset0.setValue((Comparable) string0, (double) (byte)101);
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(false);
      assertNull(range0);
      
      Hour hour0 = Hour.parseHour(string0);
      assertNull(hour0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) null, 734.90549);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((double) (byte)78, 734.90549, "^");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Short short0 = new Short((byte)78);
      assertEquals((short)78, (short)short0);
      assertNotNull(short0);
      
      categoryTableXYDataset0.add((-3239.241830103), (-3239.241830103), "0");
      assertEquals(3317.241830103, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(3317.241830103, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-1252.1681700515), range0.getCentralValue(), 0.01);
      assertEquals(3974.1473201030003, range0.getLength(), 0.01);
      assertEquals((-3239.241830103), range0.getLowerBound(), 0.01);
      assertEquals(734.90549, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      String string0 = "HS+m*pp";
      Number[][] numberArray0 = new Number[6][2];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) short0;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      // Undeclared exception!
      try { 
        timeTableXYDataset0.getX((byte)78, 1804);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1804, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-1735.97827), (-1735.97827), "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Short short0 = new Short((short)365);
      assertEquals((short)365, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = linkedList0.add(short0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(short0));
      
      Short short1 = new Short((short)901);
      assertEquals((short)901, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean1 = linkedList0.add(short1);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertFalse(short1.equals((Object)short0));
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(short0));
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, vector0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) short1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[][] doubleArray0 = new double[13][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("3~ICM_JBV9E?fbjGM", "3~ICM_JBV9E?fbjGM", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(13, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(13, doubleArray0.length);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNull(range1);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1322);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1322, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      assertEquals(13, doubleArray0.length);
      
      Day day0 = new Day();
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertNotNull(day0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) day0, (double) 1322);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1322, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte0);
      assertNotNull(byte0);
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (byte)77;
      doubleArray1[1] = (double) (byte)77;
      doubleArray1[2] = (double) (byte)77;
      doubleArray1[3] = (double) (byte)77;
      doubleArray1[4] = (double) (byte)77;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Missing Q.", "Null 'rowData' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertEquals(77.0, range0.getCentralValue(), 0.01);
      assertEquals(77.0, range0.getLowerBound(), 0.01);
      assertEquals(77.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      String string0 = "";
      categoryTableXYDataset0.add((double) (byte)78, 734.90549, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Short short0 = new Short((byte)78);
      assertEquals((short)78, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-372));
      assertEquals((short) (-372), (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      boolean boolean0 = linkedList0.add(short1);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(short1.equals((Object)short0));
      assertFalse(linkedList0.contains(short0));
      assertTrue(linkedList0.contains(short1));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(78.5, range0.getUpperBound(), 0.01);
      assertEquals(78.0, range0.getCentralValue(), 0.01);
      assertEquals(77.5, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertFalse(linkedList0.contains(short0));
      assertTrue(linkedList0.contains(short1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(3, 3);
      assertEquals(3.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(3.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-98));
      assertEquals((byte) (-98), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((byte) (-98)));
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("B*", "B*", doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotNull(number0);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotNull(range0);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList1 = new ArrayList<Byte>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains(byte0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertNotNull(taskSeriesCollection1);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (byte) (-70), 3180.83669648, 3180.83669648, 3180.83669648, (-1586.36631041039));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 3180.83669648, (byte) (-70), (-772.2809181), 3180.83669648, (-1021.45289218824));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(byte0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals((-772.2809181), number0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals((-772.2809181), range0.getLowerBound(), 0.01);
      assertEquals(1204.2778891899998, range0.getCentralValue(), 0.01);
      assertEquals(3953.11761458, range0.getLength(), 0.01);
      assertEquals(3180.83669648, range0.getUpperBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(range0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(pieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) oHLCDataItem0, (KeyedValues) pieDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotNull(categoryDataset0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[][] doubleArray0 = new double[13][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("3ICM_JBV9E?fbjGM", "3ICM_JBV9E?fbjGM", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(13, doubleArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-3278.341), Double.NaN, "3ICM_JBV9E?fbjGM");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(13, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-26));
      assertEquals((byte) (-26), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte) (-26)));
      
      Spliterator<Byte> spliterator0 = arrayList0.spliterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(spliterator0);
      assertFalse(arrayList0.contains((byte) (-26)));
      
      Byte byte1 = new Byte((byte) (-26));
      assertEquals((byte) (-26), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      boolean boolean0 = arrayList0.add(byte1);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(arrayList0.contains((byte) (-26)));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Float float0 = new Float(1007.9661934898946);
      assertEquals(1007.9662F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      assertFalse(stack0.contains(float0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("nwn5QuQ^P[RgI7c~;y", "Null 'seriesKey' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 27);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 27, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-171.7795215068823);
      doubleArray1[1] = 1557.2781336598;
      doubleArray1[2] = (-1.7976931348623157E308);
      doubleArray1[3] = (-1699.739755);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1.7976931348623157E308);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-1.7976931348623157E308);
      doubleArray4[1] = 1557.2781336598;
      doubleArray4[2] = (-1.7976931348623157E308);
      doubleArray4[3] = (-1.7976931348623157E308);
      doubleArray4[4] = (-171.7795215068823);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-171.7795215068823);
      doubleArray5[1] = 1557.2781336598;
      doubleArray5[2] = 1557.2781336598;
      doubleArray5[3] = (-171.7795215068823);
      doubleArray5[4] = (-1.7976931348623157E308);
      doubleArray5[5] = (-171.7795215068823);
      doubleArray5[6] = (-1699.739755);
      doubleArray5[7] = (-1699.739755);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (-171.7795215068823);
      doubleArray6[1] = 1557.2781336598;
      doubleArray6[2] = (-1.7976931348623157E308);
      doubleArray6[3] = (-560.569607383);
      doubleArray6[4] = (-171.7795215068823);
      doubleArray6[5] = 1557.2781336598;
      doubleArray6[6] = (-171.7795215068823);
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Byte byte0 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(byte0));
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(number0);
      assertEquals(6, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, (byte) (-70));
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-70), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) byte0, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(0.0, 0.0, "Null 'seriesKeys' argument.");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(3, 3);
      assertEquals(3.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(3.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("(4", "(4", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertNull(range0);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((double) (byte)78, 734.90549, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Short short0 = new Short((byte)78);
      assertEquals((short)78, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = linkedList0.add(short0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(short0));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(78.0, range0.getLowerBound(), 0.01);
      assertEquals(78.0, range0.getCentralValue(), 0.01);
      assertEquals(78.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertTrue(linkedList0.contains(short0));
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(734.90549, double0, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Vector<Float> vector0 = new Vector<Float>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Float float0 = new Float((float) (byte) (-70));
      assertEquals((-70.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = stack0.add(float0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[-70.0]", stack0.toString());
      assertTrue(stack0.contains(float0));
      
      boolean boolean1 = stack0.add(float0);
      assertTrue(boolean1);
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[-70.0, -70.0]", stack0.toString());
      assertTrue(boolean1 == boolean0);
      assertTrue(stack0.contains(float0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(0.0, 0.0, "#SB<[MfDu?");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Short short0 = new Short((short)21845);
      assertEquals((short)21845, (short)short0);
      assertNotNull(short0);
      
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains((short)21845));
      
      boolean boolean0 = linkedList1.add(short0);
      assertTrue(boolean0);
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(linkedList1.contains((short)21845));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList1, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, linkedList1.size());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertNotSame(linkedList1, linkedList0);
      assertNotNull(range0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(linkedList1.contains((short)21845));
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNull(range1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList0.contains((short)21845));
      assertTrue(linkedList1.contains((short)21845));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      String string0 = " 'Za[oc1#{";
      categoryTableXYDataset0.add(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, " 'Za[oc1#{");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Float float0 = new Float(1006.648823);
      assertEquals(1006.6488F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Vector<Float> vector0 = new Vector<Float>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      assertFalse(vector0.contains(float0));
      
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      int int0 = 2610;
      int int1 = 35;
      int int2 = (-1);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(2099, "", (-1), (-1896), 545, (-1), 0, 2610, 2099, 2610, (-1), 2610, 274);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -1
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((byte)77));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range0);
      assertTrue(arrayList0.contains((byte)77));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[6][1];
      doubleArray1[0] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray1.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(6, doubleArray1.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Vector<Float> vector0 = new Vector<Float>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Float float0 = new Float((-1.0));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = vector0.add(float0);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[-1.0]", vector0.toString());
      assertTrue(vector0.contains(float0));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, stringArray0.length);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      boolean boolean1 = vector0.removeElement(xYIntervalSeriesCollection0);
      assertFalse(boolean1);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[-1.0]", vector0.toString());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertFalse(boolean1 == boolean0);
      assertTrue(vector0.contains(float0));
      
      int int0 = defaultIntervalCategoryDataset0.indexOf(float0);
      assertEquals((-1), int0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNull(range0);
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayList<Byte> arrayList1 = new ArrayList<Byte>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = arrayList1.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertTrue(arrayList1.contains((byte)2));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList1, true);
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertNull(range1);
      assertTrue(arrayList1.contains((byte)2));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      categoryTableXYDataset0.add((double) (byte)78, Double.NaN, "org.jfree.data.xy.MatrixSeriesCollection");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset1);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertNull(number0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNull(range0);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)16);
      assertEquals((byte)16, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(byte0));
      
      Byte byte1 = new Byte((byte)16);
      assertEquals((byte)16, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultWindDataset0, (List) arrayList0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid series index: -1
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Float float0 = new Float(1006.648823);
      assertEquals(1006.6488F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Vector<Float> vector0 = new Vector<Float>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      assertFalse(vector0.contains(float0));
      
      Byte byte0 = new Byte((byte)58);
      assertEquals((byte)58, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte)58));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((byte)58));
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultXYDataset0, vector0, true);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNull(range0);
      assertFalse(vector0.contains(float0));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-1.0), (-1.0), ",#0");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      categoryTableXYDataset0.add((-709.749458220424), 3180.83669648, "l}]^D<NGm+?");
      assertEquals(708.749458220424, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0, true);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 6.283185307179586);
      assertEquals(708.749458220424, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(5.283185307179586, range1.getLowerBound(), 0.01);
      assertEquals(3181.83669648, range1.getLength(), 0.01);
      assertEquals(1596.2015335471797, range1.getCentralValue(), 0.01);
      assertEquals(3187.1198817871796, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(0.0, (-1.0), "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((-1.0), (-1.0), ",#0");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((byte)42));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, arrayList0, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals((-0.5), range0.getCentralValue(), 0.01);
      assertEquals((-1.5), range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertTrue(arrayList0.contains((byte)42));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Float float0 = new Float(1006.648823);
      assertEquals(1006.6488F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Vector<Float> vector0 = new Vector<Float>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      assertFalse(vector0.contains(float0));
      
      boolean boolean0 = vector0.add(float0);
      assertTrue(boolean0);
      assertEquals("[1006.6488]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains(float0));
      
      boolean boolean1 = true;
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("[1006.6488]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNull(range0);
      assertTrue(vector0.contains(float0));
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(float0, (OHLCDataItem[]) null);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-15.239956), 734.90549, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(734.90549, number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(734.90549, range0.getCentralValue(), 0.01);
      assertEquals(734.90549, range0.getUpperBound(), 0.01);
      assertEquals(734.90549, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-1.0), (-1.0), ",#0");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains((byte)42));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, arrayList0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-1.5), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-0.5), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertTrue(arrayList0.contains((byte)42));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray1;
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      assertFalse(vector0.contains(0.0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("=yeuoZ:XoD_8", 2, 2);
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(4, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertTrue(number0.equals((Object)double0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 10);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      int int0 = 2;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-2585), 2);
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-2585), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList1 = new ArrayList<Byte>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains(byte0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertNotNull(taskSeriesCollection1);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (byte) (-70), 3180.83669648, 3180.83669648, 3180.83669648, (-1586.36631041039));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 3180.83669648, (byte) (-70), (-772.2809181), 3180.83669648, (-1021.45289218824));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(byte0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals((-772.2809181), number0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals((-772.2809181), range0.getLowerBound(), 0.01);
      assertEquals(3180.83669648, range0.getUpperBound(), 0.01);
      assertEquals(1204.2778891899998, range0.getCentralValue(), 0.01);
      assertEquals(3953.11761458, range0.getLength(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(range0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(pieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) oHLCDataItem0, (KeyedValues) pieDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotNull(categoryDataset0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Byte byte0 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertNotNull(taskSeriesCollection1);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(byte0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(0, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNull(number0);
      assertEquals(0, oHLCDataItemArray0.length);
      
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNull(range0);
      assertEquals(0, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1000L, 1000L);
      assertEquals(1000L, simpleTimePeriod0.getEndMillis());
      assertEquals(1000L, simpleTimePeriod0.getStartMillis());
      assertNotNull(simpleTimePeriod0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerCategoryDataset>) simpleTimePeriod0;
      Comparable<YIntervalSeriesCollection>[] comparableArray1 = (Comparable<YIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 6);
      comparableArray1[0] = (Comparable<YIntervalSeriesCollection>) fixedMillisecond0;
      comparableArray1[1] = (Comparable<YIntervalSeriesCollection>) simpleTimePeriod0;
      comparableArray1[2] = (Comparable<YIntervalSeriesCollection>) fixedMillisecond0;
      comparableArray1[3] = (Comparable<YIntervalSeriesCollection>) fixedMillisecond0;
      Millisecond millisecond0 = new Millisecond();
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertNotNull(millisecond0);
      
      comparableArray1[4] = (Comparable<YIntervalSeriesCollection>) millisecond0;
      comparableArray1[5] = (Comparable<YIntervalSeriesCollection>) fixedMillisecond0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'columnKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-2834.247089704106), (-2834.247089704106), "_7O05N-'oN CADcc");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals((-2834.247089704106), number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-2834.247089704106), range0.getCentralValue(), 0.01);
      assertEquals((-2834.247089704106), range0.getUpperBound(), 0.01);
      assertEquals((-2834.247089704106), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, true);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 2041, 46);
      assertEquals(2041, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(46, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(Double.NaN, Double.NaN, "]s(");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "Vh{fQ+Y*<v3/";
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      
      ArrayList<FileDialog> arrayList0 = new ArrayList<FileDialog>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = 927.4;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[1] = 734.90549;
      doubleArray3[2] = 927.4;
      doubleArray3[3] = 927.4;
      doubleArray3[4] = 927.4;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 927.4;
      doubleArray3[7] = 927.4;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Vh{fQ+Y*<v3/", "Vh{fQ+Y*<v3/", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList1 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(5371.905489999999, range0.getLength(), 0.01);
      assertEquals(2685.9527449999996, range0.getCentralValue(), 0.01);
      assertEquals(5371.905489999999, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(4, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      int int0 = keyToGroupMap0.getKeyCount("Vh{fQ+Y*<v3/");
      assertEquals(0, int0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(463.7, range1.getCentralValue(), 0.01);
      assertEquals(927.4, range1.getUpperBound(), 0.01);
      assertEquals(927.4, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(4, doubleArray0.length);
      
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 9);
      // Undeclared exception!
      try { 
        SerialDate.createInstance(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SpreadsheetDate: Serial must be in range 2 to 2958465.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(number0);
      
      double[][] doubleArray0 = new double[13][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("3~ICM_JBV9E?fbjGM", "3~ICM_JBV9E?fbjGM", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(13, doubleArray0.length);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertEquals(13, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(13, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 52);
      assertEquals(0.0, double0, 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      MockDate mockDate0 = new MockDate((-1), (-1), 14, 52, 52);
      assertNotNull(mockDate0);
      
      Year year0 = new Year(mockDate0);
      assertEquals("Fri Dec 16 04:52:00 GMT 1898", mockDate0.toString());
      assertEquals(1898, year0.getYear());
      assertEquals("1898", year0.toString());
      assertEquals(1898L, year0.getSerialIndex());
      assertEquals((-2241889680000L), year0.getFirstMillisecond());
      assertEquals((-2241889680000L), year0.getLastMillisecond());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(year0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(52, 14, year0);
      assertEquals("Fri Dec 16 04:52:00 GMT 1898", mockDate0.toString());
      assertEquals(1898, year0.getYear());
      assertEquals("1898", year0.toString());
      assertEquals(1898L, year0.getSerialIndex());
      assertEquals((-2241889680000L), year0.getFirstMillisecond());
      assertEquals((-2241889680000L), year0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(13, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      assertEquals("Fri Dec 16 04:52:00 GMT 1898", mockDate0.toString());
      assertEquals(1898, year0.getYear());
      assertEquals("1898", year0.toString());
      assertEquals(1898L, year0.getSerialIndex());
      assertEquals((-2241889680000L), year0.getFirstMillisecond());
      assertEquals((-2241889680000L), year0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(13, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      String string0 = "&oh0";
      DatasetGroup datasetGroup0 = new DatasetGroup("&oh0");
      assertEquals("&oh0", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      DatasetGroup datasetGroup1 = (DatasetGroup)datasetGroup0.clone();
      assertEquals("&oh0", datasetGroup0.getID());
      assertEquals("&oh0", datasetGroup1.getID());
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup1, datasetGroup0);
      assertNotNull(datasetGroup1);
      assertTrue(datasetGroup1.equals((Object)datasetGroup0));
      
      DatasetGroup datasetGroup2 = (DatasetGroup)datasetGroup0.clone();
      assertEquals("&oh0", datasetGroup0.getID());
      assertEquals("&oh0", datasetGroup2.getID());
      assertNotSame(datasetGroup0, datasetGroup2);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertNotSame(datasetGroup2, datasetGroup0);
      assertNotSame(datasetGroup2, datasetGroup1);
      assertNotNull(datasetGroup2);
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertTrue(datasetGroup2.equals((Object)datasetGroup1));
      assertTrue(datasetGroup2.equals((Object)datasetGroup0));
      
      defaultKeyedValues2DDataset0.setGroup(datasetGroup0);
      assertEquals("&oh0", datasetGroup0.getID());
      assertNotSame(datasetGroup0, datasetGroup2);
      assertNotSame(datasetGroup0, datasetGroup1);
      assertTrue(datasetGroup0.equals((Object)datasetGroup1));
      assertTrue(datasetGroup0.equals((Object)datasetGroup2));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 0.0, 4920.345498, (-1803), "&oh0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray1;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      double[] doubleArray4 = polynomialFunction2D0.getCoefficients();
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray4.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray4, 0.01);
      
      double[] doubleArray5 = polynomialFunction2D0.getCoefficients();
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotNull(doubleArray5);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray5.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray5, 0.01);
      
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray1);
      assertEquals(0, polynomialFunction2D1.getOrder());
      assertNotNull(polynomialFunction2D1);
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      double[] doubleArray6 = polynomialFunction2D1.getCoefficients();
      assertEquals(0, polynomialFunction2D1.getOrder());
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray6);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(polynomialFunction2D1, polynomialFunction2D0);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotNull(doubleArray6);
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray6.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray6, 0.01);
      
      double[] doubleArray7 = polynomialFunction2D1.getCoefficients();
      assertEquals(0, polynomialFunction2D1.getOrder());
      assertNotSame(doubleArray1, doubleArray7);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray6);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(polynomialFunction2D1, polynomialFunction2D0);
      assertNotSame(doubleArray7, doubleArray1);
      assertNotSame(doubleArray7, doubleArray4);
      assertNotSame(doubleArray7, doubleArray6);
      assertNotSame(doubleArray7, doubleArray2);
      assertNotSame(doubleArray7, doubleArray5);
      assertNotSame(doubleArray7, doubleArray3);
      assertNotNull(doubleArray7);
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray6));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray7.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray7, 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0.0, 1910.0, 63, 0.0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(63, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(1910.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertNotSame(doubleArray1, doubleArray7);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray6);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(polynomialFunction2D0, polynomialFunction2D1);
      assertNotNull(xYSeries0);
      assertFalse(doubleArray1.equals((Object)doubleArray7));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray6));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertTrue(polynomialFunction2D0.equals((Object)polynomialFunction2D1));
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset1 = (CategoryTableXYDataset)categoryTableXYDataset0.clone();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      Byte byte0 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertNotNull(taskSeriesCollection1);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      TaskSeriesCollection taskSeriesCollection2 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection2.getColumnCount());
      assertEquals(0, taskSeriesCollection2.getRowCount());
      assertNotNull(taskSeriesCollection2);
      assertTrue(taskSeriesCollection2.equals((Object)taskSeriesCollection0));
      assertTrue(taskSeriesCollection2.equals((Object)taskSeriesCollection1));
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection2);
      assertEquals(0, taskSeriesCollection2.getColumnCount());
      assertEquals(0, taskSeriesCollection2.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      assertTrue(taskSeriesCollection2.equals((Object)taskSeriesCollection0));
      assertTrue(taskSeriesCollection2.equals((Object)taskSeriesCollection1));
      
      Number[][] numberArray0 = new Number[2][3];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) byte0;
      numberArray1[1] = (Number) byte0;
      numberArray1[2] = (Number) byte0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) byte0;
      numberArray2[1] = (Number) byte0;
      numberArray2[2] = (Number) byte0;
      numberArray2[3] = (Number) byte0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, numberArray0.length);
      
      defaultIntervalCategoryDataset0.addChangeListener(xYTaskDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, taskSeriesCollection2.getColumnCount());
      assertEquals(0, taskSeriesCollection2.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotSame(taskSeriesCollection2, taskSeriesCollection1);
      assertNotSame(taskSeriesCollection2, taskSeriesCollection0);
      assertTrue(taskSeriesCollection2.equals((Object)taskSeriesCollection0));
      assertTrue(taskSeriesCollection2.equals((Object)taskSeriesCollection1));
      assertEquals(2, numberArray0.length);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(byte0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-70.0), range0.getLowerBound(), 0.01);
      assertEquals((-70.0), range0.getCentralValue(), 0.01);
      assertEquals((-70.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(2, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection2);
      assertNull(number0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection2));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(0.8, 0.8, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(3568.9, 3568.9, "/");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(3568.1, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(3568.1, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1784.8500000000001, range0.getCentralValue(), 0.01);
      assertEquals(0.8, range0.getLowerBound(), 0.01);
      assertEquals(3568.1, range0.getLength(), 0.01);
      assertEquals(3568.9, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(3568.1, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(3568.9, range1.getUpperBound(), 0.01);
      assertEquals(1784.8500000000001, range1.getCentralValue(), 0.01);
      assertEquals(3568.1, range1.getLength(), 0.01);
      assertEquals(0.8, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(3, 3);
      assertEquals(3L, simpleTimePeriod0.getEndMillis());
      assertEquals(3L, simpleTimePeriod0.getStartMillis());
      assertNotNull(simpleTimePeriod0);
      
      categoryTableXYDataset0.add(6619.814731101, Double.NEGATIVE_INFINITY, "'l|wHB#wY6 (Cr");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      int int0 = categoryTableXYDataset0.getItemCount();
      assertEquals(1, int0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Vector<DefaultIntervalCategoryDataset> vector0 = new Vector<DefaultIntervalCategoryDataset>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range2 = defaultStatisticalCategoryDataset0.getRangeBounds(false);
      assertNull(range2);
      
      // Undeclared exception!
      try { 
        defaultStatisticalCategoryDataset0.getStdDevValue(1, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      
      Stack<Float> stack0 = new Stack<Float>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Float float0 = new Float((-1016.198));
      assertEquals((-1016.198F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-4559.33));
      assertEquals((-4559.33F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float1);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[-4559.33]", stack0.toString());
      assertFalse(stack0.empty());
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(stack0.contains(float0));
      assertTrue(stack0.contains(float1));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset1, (List) stack0, false);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[-4559.33]", stack0.toString());
      assertFalse(stack0.empty());
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      assertNull(range0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertFalse(stack0.contains(float0));
      assertTrue(stack0.contains(float1));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(1513.955731190325, 1513.955731190325, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DomainOrder domainOrder0 = categoryTableXYDataset0.getDomainOrder();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1513.955731190325, range0.getCentralValue(), 0.01);
      assertEquals(1513.955731190325, range0.getUpperBound(), 0.01);
      assertEquals(1513.955731190325, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (short) (-4013);
      doubleArray1[1] = (double) (short) (-4013);
      doubleArray1[2] = (double) (short) (-4013);
      doubleArray1[3] = (double) (short) (-4013);
      doubleArray1[4] = 3484.321;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (short) (-4013);
      doubleArray2[1] = (double) (short) (-4013);
      doubleArray2[2] = (double) (short) (-4013);
      doubleArray2[3] = 3484.321;
      doubleArray2[4] = (double) (short) (-4013);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (short) (-4013);
      doubleArray3[1] = (double) (short) (-4013);
      doubleArray3[2] = (double) (short) (-4013);
      doubleArray3[3] = (double) (short) (-4013);
      doubleArray3[4] = 3484.321;
      doubleArray3[5] = (double) (short) (-4013);
      doubleArray3[6] = 3484.321;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray0[3] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "Unknown data", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals((-16052.0), number0);
      assertNotNull(number0);
      assertEquals(4, doubleArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      DomainOrder domainOrder0 = categoryTableXYDataset1.getDomainOrder();
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertNotNull(domainOrder0);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset1);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertNull(range0);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertEquals(7497.321, range1.getLength(), 0.01);
      assertEquals((-4013.0), range1.getLowerBound(), 0.01);
      assertEquals((-264.33950000000004), range1.getCentralValue(), 0.01);
      assertEquals(3484.321, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNull(range0);
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(1206.654715, 1206.654715, "?~`S-V\"u[sF *7T");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(1206.154715, range1.getLowerBound(), 0.01);
      assertEquals(1207.154715, range1.getUpperBound(), 0.01);
      assertEquals(1206.654715, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(1206.654715, number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(number0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, range2.getLength(), 0.01);
      assertEquals(1206.654715, range2.getCentralValue(), 0.01);
      assertEquals(1206.154715, range2.getLowerBound(), 0.01);
      assertEquals(1207.154715, range2.getUpperBound(), 0.01);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Byte byte0 = new Byte((byte)78);
      assertEquals((byte)78, (byte)byte0);
      assertNotNull(byte0);
      
      Vector<Float> vector0 = new Vector<Float>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Float float0 = new Float((float) (byte)78);
      assertEquals(78.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = vector0.add(float0);
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals("[78.0]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(float0));
      
      boolean boolean1 = vector0.add(float0);
      assertTrue(boolean1);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[78.0, 78.0]", vector0.toString());
      assertTrue(boolean1 == boolean0);
      assertTrue(vector0.contains(float0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultMultiValueCategoryDataset0.setGroup(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, true);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[78.0, 78.0]", vector0.toString());
      assertNull(range0);
      assertTrue(vector0.contains(float0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, true);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[78.0, 78.0]", vector0.toString());
      assertNull(range1);
      assertTrue(vector0.contains(float0));
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (-2774));
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset1 = (CategoryTableXYDataset)categoryTableXYDataset0.clone();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      categoryTableXYDataset0.add((-1735.97827), (-1.0), " but the series already contains an observation");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1735.97827), range0.getCentralValue(), 0.01);
      assertEquals((-1735.97827), range0.getUpperBound(), 0.01);
      assertEquals((-1735.97827), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotNull(range0);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 124.77152317);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(124.77152317, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(123.77152317, range1.getLowerBound(), 0.01);
      assertEquals(124.27152317, range1.getCentralValue(), 0.01);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1735.97827), range3.getCentralValue(), 0.01);
      assertEquals((-1735.97827), range3.getUpperBound(), 0.01);
      assertEquals((-1735.97827), range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotNull(range3);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Float float0 = new Float((-1016.198));
      assertEquals((-1016.198F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = stack0.add(float0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-1016.198]", stack0.toString());
      assertTrue(stack0.contains(float0));
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-1735.97827), (-1.0), " but the series already contains an observation");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1735.97827), range0.getCentralValue(), 0.01);
      assertEquals((-1735.97827), range0.getUpperBound(), 0.01);
      assertEquals((-1735.97827), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 124.77152317);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(124.77152317, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(123.77152317, range1.getLowerBound(), 0.01);
      assertEquals(124.27152317, range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, (List) arrayList0, range2, true);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-1.0), range2.getCentralValue(), 0.01);
      assertEquals((-1.0), range2.getUpperBound(), 0.01);
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNull(range3);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.general.Series", "org.jfree.data.general.Series", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(1, doubleArray0.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      DomainOrder domainOrder0 = categoryTableXYDataset0.getDomainOrder();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-2931));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = (-1509);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-1509));
      assertNotNull(pieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Byte byte0 = new Byte((byte)78);
      assertEquals((byte)78, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)78);
      assertEquals((byte)78, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte)78));
      
      boolean boolean0 = arrayList0.add(byte1);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(arrayList0.contains((byte)78));
      
      Byte byte2 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (byte)78;
      doubleArray1[1] = (double) (byte)78;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (byte)78;
      doubleArray2[1] = (double) (byte)8;
      doubleArray2[2] = (double) (byte)8;
      doubleArray2[3] = (double) (byte)78;
      doubleArray2[4] = (double) (byte)78;
      doubleArray2[5] = (double) (byte)8;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (byte)8;
      doubleArray3[1] = (double) (byte)78;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) (byte)8;
      doubleArray4[1] = (double) (byte)78;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'visibleSeriesKeys' argument.", "Missing Q.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals(78.0, range0.getUpperBound(), 0.01);
      assertEquals(43.0, range0.getCentralValue(), 0.01);
      assertEquals(8.0, range0.getLowerBound(), 0.01);
      assertEquals(70.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(4, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(78.0, number0);
      assertNotNull(number0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.NaN);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(Double.NaN));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, false);
      assertEquals(0, linkedList0.size());
      assertNull(range1);
      assertFalse(linkedList0.contains(Double.NaN));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, true);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range1 = defaultStatisticalCategoryDataset0.getRangeBounds(false);
      assertNull(range1);
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range2);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      boolean boolean0 = arrayList0.add(defaultIntervalXYDataset0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(arrayList0.contains(defaultIntervalXYDataset0));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultIntervalXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      double[][] doubleArray1 = new double[5][2];
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("M*fx<", "M*fx<", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray1.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals(1.5, range0.getCentralValue(), 0.01);
      assertEquals(3.0, range0.getUpperBound(), 0.01);
      assertEquals(3.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset1 = (CategoryTableXYDataset)categoryTableXYDataset0.clone();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNull(number0);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>(190);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-2));
      assertEquals((byte) (-2), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains((byte) (-2)));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, arrayList0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNull(range0);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertTrue(arrayList0.contains((byte) (-2)));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[2] = (-144.146273585);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertNotNull(keyToGroupMap1);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap1);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertEquals(144.146273585, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-144.146273585), range0.getLowerBound(), 0.01);
      assertEquals((-72.0731367925), range0.getCentralValue(), 0.01);
      assertNotSame(keyToGroupMap1, keyToGroupMap0);
      assertNotNull(range0);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(number0);
      assertEquals(1, doubleArray0.length);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset1.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(1, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset1);
      assertEquals((-144.146273585), number1);
      assertEquals(1, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset1.getColumnCount());
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotNull(number1);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertFalse(number1.equals((Object)number0));
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset1, 265);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertNotNull(timeSeriesCollection1);
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection1);
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertNull(range0);
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection1, (List) linkedList0, (Range) null, true);
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertEquals(0, linkedList0.size());
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertNull(range1);
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultStatisticalCategoryDataset0);
      assertNull(range0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[5] = 1.5;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.5, 3.0, 3.0, 3.0, 0.0, 1.5}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {1.5, 3.0, 3.0, 3.0, 0.0, 1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5, 3.0, 3.0, 3.0, 0.0, 1.5}, doubleArray1, 0.01);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertArrayEquals(new double[] {1.5, 3.0, 3.0, 3.0, 0.0, 1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5, 3.0, 3.0, 3.0, 0.0, 1.5}, doubleArray2, 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1681.103362952033), 0.0, 3, 0.0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals((-1681.103362952033), xYSeries0.getMinX(), 0.01);
      assertEquals(1.5, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-2.0140194061814128E16), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(3, xYSeries0.getItemCount());
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(xYSeries0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.5, 3.0, 3.0, 3.0, 0.0, 1.5}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, true);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Vector<Float> vector0 = new Vector<Float>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Float float0 = new Float(2962.210923334107);
      assertEquals(2962.211F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = vector0.add(float0);
      assertTrue(boolean0);
      assertEquals("[2962.211]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(float0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("[2962.211]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertNull(range1);
      assertTrue(vector0.contains(float0));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, true);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range1 = defaultStatisticalCategoryDataset0.getRangeBounds(false);
      assertNull(range1);
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range2);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNull(number0);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range3);
      
      Range range4 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0, false);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNull(range4);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (byte) (-121);
      doubleArray1[1] = (double) (byte) (-15);
      doubleArray1[2] = (double) (byte) (-15);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (byte) (-15);
      doubleArray2[1] = (double) (byte) (-121);
      doubleArray2[2] = (double) (byte) (-121);
      doubleArray2[3] = (double) (byte) (-121);
      doubleArray2[4] = (double) (byte) (-121);
      doubleArray2[5] = (double) (byte) (-15);
      doubleArray2[6] = (double) (byte) (-15);
      doubleArray2[7] = (double) (byte) (-121);
      doubleArray2[8] = (double) (byte) (-15);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'dataset' argument.", "Null 'dataset' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals((-15.0), range0.getUpperBound(), 0.01);
      assertEquals((-121.0), range0.getLowerBound(), 0.01);
      assertEquals(106.0, range0.getLength(), 0.01);
      assertEquals((-68.0), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals((-15.0), number0);
      assertNotNull(number0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-24));
      assertEquals((byte) (-24), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<ChronoLocalDate> arrayList1 = new ArrayList<ChronoLocalDate>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Double double0 = new Double((byte) (-24));
      assertEquals((-24.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      linkedList0.addFirst(double0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(double0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      assertEquals(1, linkedList0.size());
      assertNull(range0);
      assertTrue(linkedList0.contains(double0));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(1431.89204431213, (-2992.7704977986045), "dB,e(8");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1431.89204431213, range0.getCentralValue(), 0.01);
      assertEquals(1431.89204431213, range0.getLowerBound(), 0.01);
      assertEquals(1431.89204431213, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, (-1516.3560728518), (-2992.7704977986045), 2035, "dB,e(8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("Vh{fQ+Y*<v3/");
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(range0);
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "Vh{fQ+Y*<v3/", (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[6][1];
      doubleArray1[0] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray1.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(6, doubleArray1.length);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1966.728), (-695.7), 171, "");
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-1966.728), xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-695.7), xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(171, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertNotNull(xYSeries0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1446L), (-1446L));
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertNotNull(simpleTimePeriod0);
      
      Date date0 = simpleTimePeriod0.getStart();
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", date0.toString());
      assertNotNull(date0);
      
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      boolean boolean0 = true;
      Short short0 = Short.valueOf((short) (-4013));
      assertEquals((short) (-4013), (short)short0);
      assertNotNull(short0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(5, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-571.54246);
      doubleArray1[1] = 2.145704396E9;
      doubleArray1[2] = 5524.78;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 5524.78;
      doubleArray2[1] = (-571.54246);
      doubleArray2[2] = 5524.78;
      doubleArray2[3] = 5524.78;
      doubleArray2[4] = (-571.54246);
      doubleArray2[5] = 2.145704396E9;
      doubleArray2[6] = (-571.54246);
      doubleArray2[7] = 2.145704396E9;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-571.54246);
      doubleArray3[1] = (-571.54246);
      doubleArray3[2] = 2.145704396E9;
      doubleArray3[3] = 5524.78;
      doubleArray3[4] = (-571.54246);
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "[zzp+z^g6;Y<z", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2.14571544556E9, range0.getUpperBound(), 0.01);
      assertEquals(2.1457165886449199E9, range0.getLength(), 0.01);
      assertEquals((-1143.08492), range0.getLowerBound(), 0.01);
      assertEquals(1.07285715123754E9, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[2] = (-144.146273585);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertNotNull(keyToGroupMap1);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap1);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(144.146273585, range0.getLength(), 0.01);
      assertEquals((-72.0731367925), range0.getCentralValue(), 0.01);
      assertEquals((-144.146273585), range0.getLowerBound(), 0.01);
      assertNotSame(keyToGroupMap1, keyToGroupMap0);
      assertNotNull(range0);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(number0);
      assertEquals(1, doubleArray0.length);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(1, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset1);
      assertEquals((-144.146273585), number1);
      assertEquals(1, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getSeriesCount());
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotNull(number1);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertFalse(number1.equals((Object)number0));
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(144.146273585, range1.getLength(), 0.01);
      assertEquals((-72.0731367925), range1.getCentralValue(), 0.01);
      assertEquals((-144.146273585), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertTrue(range1.equals((Object)range0));
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((byte) (-121)));
      
      Byte byte1 = new Byte((byte) (-15));
      assertEquals((byte) (-15), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean boolean1 = arrayList0.add(byte1);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains((byte) (-121)));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = categoryTableXYDataset0.getDomainBounds(true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      assertFalse(vector0.contains(double0));
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = vector0.add(double1);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[0.0]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(vector0.contains(double0));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray1[5] = Double.POSITIVE_INFINITY;
      doubleArray1[6] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-124));
      assertEquals((byte) (-124), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      ArrayList<Byte> arrayList1 = new ArrayList<Byte>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains(byte1));
      
      boolean boolean0 = arrayList1.add(byte1);
      assertTrue(boolean0);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertNotSame(arrayList1, arrayList0);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains((byte)31));
      assertTrue(arrayList1.contains(byte1));
      
      Byte byte2 = new Byte((byte)80);
      assertEquals((byte)80, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      boolean boolean1 = arrayList0.add(byte0);
      assertTrue(boolean1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(arrayList0, arrayList1);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte0.equals((Object)byte1));
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.contains(byte2));
      assertTrue(arrayList0.contains((byte)31));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList1, range0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertNotSame(arrayList1, arrayList0);
      assertNull(range1);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains(byte2));
      assertTrue(arrayList1.contains((byte) (-124)));
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, arrayList0, false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(arrayList0, arrayList1);
      assertNull(range2);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertFalse(arrayList0.contains(byte2));
      assertTrue(arrayList0.contains((byte)31));
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      linkedList0.push(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      categoryTableXYDataset0.add(5524.28, (-2.147483648E9), " /yy;");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Double double0 = new Double(1206.0);
      assertEquals(1206.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-3255.0));
      assertEquals((-3255.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(number0);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset1);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      CategoryTableXYDataset categoryTableXYDataset2 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset2.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset2.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset2.isAutoWidth());
      assertNotNull(categoryTableXYDataset2);
      assertFalse(categoryTableXYDataset2.equals((Object)categoryTableXYDataset0));
      assertTrue(categoryTableXYDataset2.equals((Object)categoryTableXYDataset1));
      
      DomainOrder domainOrder0 = categoryTableXYDataset2.getDomainOrder();
      assertEquals(1.0, categoryTableXYDataset2.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset2.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset2.isAutoWidth());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotSame(categoryTableXYDataset2, categoryTableXYDataset0);
      assertNotSame(categoryTableXYDataset2, categoryTableXYDataset1);
      assertNotNull(domainOrder0);
      assertFalse(categoryTableXYDataset2.equals((Object)categoryTableXYDataset0));
      assertTrue(categoryTableXYDataset2.equals((Object)categoryTableXYDataset1));
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-2.147483648E9), range0.getLowerBound(), 0.01);
      assertEquals((-2.147483648E9), range0.getUpperBound(), 0.01);
      assertEquals((-2.147483648E9), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset2);
      assertNotNull(range0);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset2));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(Double.POSITIVE_INFINITY, 0.8573917235124406, ")}ulgg7vz_?cgvbu)");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.8573917235124406, range0.getLowerBound(), 0.01);
      assertEquals(0.8573917235124406, range0.getCentralValue(), 0.01);
      assertEquals(0.8573917235124406, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.8573917235124406, range1.getUpperBound(), 0.01);
      assertEquals(0.8573917235124406, range1.getCentralValue(), 0.01);
      assertEquals(0.8573917235124406, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(Double.POSITIVE_INFINITY, range2.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[7];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Byte byte0 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte) (-70)));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      TaskSeriesCollection taskSeriesCollection1 = (TaskSeriesCollection)taskSeriesCollection0.clone();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(taskSeriesCollection1, taskSeriesCollection0);
      assertNotNull(taskSeriesCollection1);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      
      defaultIntervalCategoryDataset0.addChangeListener(xYTaskDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains((byte) (-70)));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(double0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1446L), (-1446L));
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertNotNull(simpleTimePeriod0);
      
      Date date0 = simpleTimePeriod0.getEnd();
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", date0.toString());
      assertNotNull(date0);
      
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean0);
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Short short0 = Short.valueOf((short) (-4013));
      assertEquals((short) (-4013), (short)short0);
      assertNotNull(short0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1.0, 1.0, (-1446L), (short) (-4013), Double.POSITIVE_INFINITY);
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", date0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-1446L), (-869.2629), 1186.2, Double.POSITIVE_INFINITY, 1557.9931015762184);
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", date0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, 1.0, 3522.8, (-1446L), 181.0, (-869.2629));
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", date0.toString());
      assertNotNull(oHLCDataItem2);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, (-1627.499177975239), (-1627.499177975239), (-1.0), 1186.2, (-5292.813));
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", date0.toString());
      assertNotNull(oHLCDataItem3);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(date0, 1186.2, 1627.066, (-1.0), 1186.2, (-2.147483648E9));
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", date0.toString());
      assertNotNull(oHLCDataItem4);
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(short0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(5, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals((-1446.0), number0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(5, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DomainOrder domainOrder0 = categoryTableXYDataset0.getDomainOrder();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertNotNull(domainOrder0);
      
      Byte byte0 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte0);
      assertNotNull(byte0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      assertNull(range0);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNull(range0);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(number0);
      
      Byte byte0 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)118);
      assertEquals((byte)118, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      ArrayDeque<Byte> arrayDeque0 = new ArrayDeque<Byte>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains((byte) (-121)));
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayDeque0.contains((byte) (-121)));
      assertFalse(arrayList0.contains((byte) (-121)));
      
      boolean boolean0 = arrayList0.add(byte1);
      assertTrue(boolean0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(arrayDeque0.contains((byte) (-121)));
      assertTrue(arrayList0.contains(byte1));
      assertFalse(arrayList0.contains((byte) (-121)));
      
      Byte byte2 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      ArrayList<Byte> arrayList1 = new ArrayList<Byte>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains((byte) (-121)));
      
      Byte byte3 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      boolean boolean1 = arrayList1.add(byte3);
      assertTrue(boolean1);
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertNotSame(arrayList1, arrayList0);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList1.contains((byte)118));
      assertTrue(arrayList1.contains(byte3));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)23);
      assertEquals((byte)23, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(byte0));
      
      Byte byte1 = new Byte((byte) (-15));
      assertEquals((byte) (-15), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean boolean1 = arrayList0.add(byte0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(byte0.equals((Object)byte1));
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.contains(byte1));
      assertTrue(arrayList0.contains(byte0));
      
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      Byte byte0 = new Byte((byte) (-15));
      assertEquals((byte) (-15), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(byte0));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[4] = 0.0;
      doubleArray0[2] = doubleArray3;
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      assertFalse(vector0.contains(0.0));
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = vector0.add(double1);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[0.0]", vector0.toString());
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(vector0.contains(0.0));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(number0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      linkedList0.push(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      categoryTableXYDataset0.add(5524.28, (-2.147483648E9), " /yy;");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(5523.78, range0.getLowerBound(), 0.01);
      assertEquals(5524.28, range0.getCentralValue(), 0.01);
      assertEquals(5524.78, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      ArrayList<FileDialog> arrayList0 = new ArrayList<FileDialog>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) null, 0.5, 1206);
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      
      Number[] numberArray0 = new Number[8];
      Float float0 = new Float(0.5);
      assertEquals(0.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      numberArray0[0] = (Number) float0;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number[][] numberArray1 = new Number[2][8];
      numberArray1[0] = numberArray0;
      numberArray1[1] = numberArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'columnKeys' argument.", "Null 'columnKeys' argument.", numberArray1);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray1.length);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      numberArray0[5] = (Number) 1206;
      doubleArray1[2] = (double) 1206;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.5;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (double) 1206;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (double) 1206;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotNull(range0);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertEquals(2, numberArray1.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 919.49361723123);
      assertEquals(919.99361723123, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(920.49361723123, range1.getUpperBound(), 0.01);
      assertEquals(919.49361723123, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertEquals(2, numberArray1.length);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[2] = (-144.146273585);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-68));
      assertEquals((byte) (-68), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(byte0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(144.146273585, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-72.0731367925), range0.getCentralValue(), 0.01);
      assertEquals((-144.146273585), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range1);
      assertTrue(arrayList0.contains(byte0));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(number0);
      
      double[][] doubleArray0 = new double[13][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("3~ICM_JBV9E?fbjGM", "3~ICM_JBV9E?fbjGM", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(13, doubleArray0.length);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertEquals(13, doubleArray0.length);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(13, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(5524.28, 5524.28, "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(5523.78, range0.getLowerBound(), 0.01);
      assertEquals(5524.28, range0.getCentralValue(), 0.01);
      assertEquals(5524.78, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      ArrayList<FileDialog> arrayList0 = new ArrayList<FileDialog>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range2);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(5524.28, number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(number0);
      
      String string0 = "3~ICM_JBV9E?fbjGM";
      double[][] doubleArray0 = new double[13][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("3~ICM_JBV9E?fbjGM", "3~ICM_JBV9E?fbjGM", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(13, doubleArray0.length);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) "3~ICM_JBV9E?fbjGM");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, 1.7976931348623157E308);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getLowerBound(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getCentralValue(), 0.01);
      assertEquals(1.7976931348623157E308, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) jDBCXYDataset0);
      assertTrue(boolean0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, true);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(Double.POSITIVE_INFINITY, 0.8573917235124406, ")}ulgg7vz_?cgvbu)");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      assertEquals(Double.POSITIVE_INFINITY, number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertFalse(boolean0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[20][3];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) 59;
      numberArray1[1] = (Number) 59;
      numberArray1[2] = (Number) 59;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[5];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) 0;
      numberArray3[1] = (Number) 59;
      numberArray3[2] = (Number) 0;
      numberArray3[3] = (Number) 0;
      numberArray3[4] = (Number) 0;
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(",&0t|", ",&0t|", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(20, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(59.0, number0);
      assertNotNull(number0);
      assertEquals(20, numberArray0.length);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-3190.93572384859);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 59;
      doubleArray1[3] = (double) 59;
      doubleArray1[4] = (double) 59;
      doubleArray1[5] = (double) 59;
      doubleArray1[6] = (double) 0;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(0.0, number1);
      assertNotNull(number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(20, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[6][1];
      doubleArray1[0] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray1.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(6, doubleArray1.length);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      assertEquals(Double.NaN, number0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(number0);
      
      double[][] doubleArray0 = new double[8][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2820.5467419;
      doubleArray1[1] = 2675.1306002595;
      doubleArray1[2] = 1835.00730234356;
      doubleArray1[3] = 376.410131322;
      doubleArray1[4] = 77.5;
      doubleArray1[5] = 103.1853706;
      doubleArray1[6] = (-4271.26324814947);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 376.410131322;
      doubleArray2[1] = 77.5;
      doubleArray2[2] = (-4271.26324814947);
      doubleArray2[3] = 2675.1306002595;
      doubleArray2[4] = 1835.00730234356;
      doubleArray2[5] = 376.410131322;
      doubleArray2[6] = 1835.00730234356;
      doubleArray2[7] = (-4271.26324814947);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 103.1853706;
      doubleArray3[1] = 2820.5467419;
      doubleArray3[2] = 376.410131322;
      doubleArray3[3] = 2820.5467419;
      doubleArray3[4] = (-4271.26324814947);
      doubleArray3[5] = 103.1853706;
      doubleArray3[6] = 2820.5467419;
      doubleArray3[7] = 1835.00730234356;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 103.1853706;
      doubleArray4[1] = 2675.1306002595;
      doubleArray4[2] = (-2.147483648E9);
      doubleArray4[3] = (-992.9132249457);
      doubleArray4[4] = (-4271.26324814947);
      doubleArray4[5] = 77.5;
      doubleArray4[6] = 2215.68;
      doubleArray4[7] = (-4271.26324814947);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (-992.9132249457);
      doubleArray5[1] = 77.5;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = 103.1853706;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = 2215.68;
      doubleArray7[1] = 103.1853706;
      doubleArray7[2] = (-2.147483648E9);
      doubleArray7[3] = 737.3772959753971;
      doubleArray7[4] = 77.5;
      doubleArray7[5] = 77.5;
      doubleArray7[6] = 77.5;
      doubleArray7[7] = (-5805.638657);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      
      doubleArray8[0] = 2820.5467419;
      doubleArray8[1] = 2215.68;
      doubleArray8[2] = 2675.1306002595;
      doubleArray8[3] = 77.5;
      doubleArray8[4] = 376.410131322;
      doubleArray8[5] = 376.410131322;
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("i0\u0004>5i}=^a +1", "i0\u0004>5i}=^a +1", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(8, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals((-2.147483648E9), number1);
      assertNotNull(number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      long long0 = 2L;
      XYDataset xYDataset0 = null;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) linkedList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((double) (byte)78, 734.90549, "^");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Short short0 = new Short((byte)78);
      assertEquals((short)78, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = linkedList0.add(short0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(short0));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, linkedList0.size());
      assertEquals(78.5, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(77.5, range0.getLowerBound(), 0.01);
      assertEquals(78.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertTrue(linkedList0.contains(short0));
      
      Range range1 = Range.expandToInclude(range0, (byte)78);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, linkedList0.size());
      assertEquals(78.5, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(77.5, range0.getLowerBound(), 0.01);
      assertEquals(78.0, range0.getCentralValue(), 0.01);
      assertEquals(77.5, range1.getLowerBound(), 0.01);
      assertEquals(78.0, range1.getCentralValue(), 0.01);
      assertEquals(78.5, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertNotNull(range1);
      assertTrue(linkedList0.contains(short0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[7];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Byte byte0 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte0);
      assertNotNull(byte0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.0, number0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(number0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[7];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertNotNull(keyToGroupMap1);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      
      Byte byte0 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(byte0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) histogramDataset0, (List) arrayList0, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Float float0 = new Float((double) (-29));
      assertEquals((-29.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      assertFalse(stack0.contains(float0));
      
      boolean boolean0 = stack0.add(float0);
      assertTrue(boolean0);
      assertEquals("[-29.0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(float0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, float0, float0);
      assertEquals("[-29.0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(float0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertEquals("[-29.0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals((-29.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-29.0), range0.getCentralValue(), 0.01);
      assertEquals((-29.0), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertTrue(stack0.contains(float0));
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((byte) (-121)));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range1);
      assertTrue(arrayList0.contains((byte) (-121)));
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[3];
      double double0 = (-158.04717766383763);
      doubleArray1[2] = (-158.04717766383763);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) (-158.04717766383763));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((byte) (-121)));
      
      Byte byte1 = new Byte((byte) (-15));
      assertEquals((byte) (-15), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean boolean1 = arrayList0.add(byte1);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains(byte1));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertNull(range1);
      assertTrue(arrayList0.contains(byte1));
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-2037.232), (-2037.232), "l'Y");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)12);
      assertEquals((byte)12, (byte)byte0);
      assertNotNull(byte0);
      
      Stream<Byte> stream0 = arrayList0.stream();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(stream0);
      assertFalse(arrayList0.contains((byte)12));
      
      Byte byte1 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean boolean0 = arrayList0.add(byte1);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(arrayList0.contains((byte)12));
      assertTrue(arrayList0.contains(byte1));
      
      int int0 = categoryTableXYDataset0.getItemCount((-2034));
      assertEquals(1, int0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      boolean boolean1 = arrayList0.add(byte0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(byte0.equals((Object)byte1));
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains((byte)12));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertNull(range1);
      assertTrue(arrayList0.contains((byte)12));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-1533916891));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultStatisticalCategoryDataset0);
      assertNull(range0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (-825.0);
      doubleArray0[3] = 1.5;
      doubleArray0[4] = 0.8;
      doubleArray0[5] = 1.5;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.5, 3.0, (-825.0), 1.5, 0.8, 1.5}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {1.5, 3.0, (-825.0), 1.5, 0.8, 1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5, 3.0, (-825.0), 1.5, 0.8, 1.5}, doubleArray1, 0.01);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertArrayEquals(new double[] {1.5, 3.0, (-825.0), 1.5, 0.8, 1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5, 3.0, (-825.0), 1.5, 0.8, 1.5}, doubleArray2, 0.01);
      
      categoryTableXYDataset0.add(0.5, 0.5, "]6Jb1IM[=|K?_^");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1206.035731), 0.8, 2290, 1.5);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(number0);
      
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-4177.0));
      assertEquals((-4177.0), range0.getCentralValue(), 0.01);
      assertEquals((-4177.0), range0.getUpperBound(), 0.01);
      assertEquals((-4177.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(number0);
      
      TimeSeries timeSeries0 = new TimeSeries("3~ICM_JBV9E?fbjGM");
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertNotNull(timeSeries0);
      
      Year year0 = new Year(692);
      assertEquals("692", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(692, year0.getYear());
      assertEquals(692L, year0.getSerialIndex());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(year0);
      
      TimeSeries timeSeries1 = new TimeSeries(year0);
      assertEquals("692", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(692, year0.getYear());
      assertEquals(692L, year0.getSerialIndex());
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries1);
      assertEquals("692", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(692, year0.getYear());
      assertEquals(692L, year0.getSerialIndex());
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(timeSeriesCollection0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) null, range1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)80);
      assertEquals((byte)80, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean boolean0 = arrayList0.add(byte1);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(arrayList0.contains(byte0));
      assertTrue(arrayList0.contains((byte)80));
      
      Byte byte2 = new Byte((byte) (-15));
      assertEquals((byte) (-15), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      boolean boolean1 = arrayList0.add(byte2);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.contains(byte0));
      assertTrue(arrayList0.contains((byte) (-15)));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertNull(range1);
      assertFalse(arrayList0.contains(byte0));
      assertTrue(arrayList0.contains((byte) (-15)));
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(number0);
      
      double[][] doubleArray0 = new double[13][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("3~ICM_JBV9E?fbjGM", "3~ICM_JBV9E?fbjGM", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(13, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      linkedList0.push(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(13, doubleArray0.length);
      
      ArrayList<FileDialog> arrayList0 = new ArrayList<FileDialog>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range1);
      assertEquals(13, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-1.0), (-1.0), ",#0");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)12);
      assertEquals((byte)12, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains((byte)12));
      
      boolean boolean1 = arrayList0.add(byte0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains((byte)12));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((byte) (-121)));
      
      Byte byte1 = new Byte((byte) (-4));
      assertEquals((byte) (-4), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-15));
      assertEquals((byte) (-15), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      boolean boolean1 = arrayList0.add(byte2);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.contains((byte) (-4)));
      assertTrue(arrayList0.contains(byte2));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertNull(range1);
      assertFalse(arrayList0.contains((byte) (-4)));
      assertTrue(arrayList0.contains(byte2));
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 4600, 76);
      assertEquals(4600, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(76, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-15));
      assertEquals((byte) (-15), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((byte) (-15)));
      
      MockDate mockDate0 = new MockDate(2, 2, 2, (-815), (-4644));
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals("Thu Jan 23 19:36:00 GMT 1902", mockDate0.toString());
      assertEquals(19, hour0.getHour());
      assertEquals((-2143945440000L), hour0.getFirstMillisecond());
      assertEquals((-2143945440000L), hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1028, 0, hour0);
      assertEquals("Thu Jan 23 19:36:00 GMT 1902", mockDate0.toString());
      assertEquals(19, hour0.getHour());
      assertEquals((-2143945440000L), hour0.getFirstMillisecond());
      assertEquals((-2143945440000L), hour0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      int int0 = hour0.getYear();
      assertEquals(1902, int0);
      assertEquals("Thu Jan 23 19:36:00 GMT 1902", mockDate0.toString());
      assertEquals(19, hour0.getHour());
      assertEquals((-2143945440000L), hour0.getFirstMillisecond());
      assertEquals((-2143945440000L), hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Thu Jan 23 19:36:00 GMT 1902", mockDate0.toString());
      assertEquals(19, hour0.getHour());
      assertEquals((-2143945440000L), hour0.getFirstMillisecond());
      assertEquals((-2143945440000L), hour0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNull(range0);
      assertTrue(arrayList0.contains((byte) (-15)));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(0.0, number0);
      assertEquals("Thu Jan 23 19:36:00 GMT 1902", mockDate0.toString());
      assertEquals(19, hour0.getHour());
      assertEquals((-2143945440000L), hour0.getFirstMillisecond());
      assertEquals((-2143945440000L), hour0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset1);
      assertEquals(Double.NaN, number1);
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertFalse(number1.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(number0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      linkedList0.push(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNull(range0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3190.93572384859);
      doubleArray0[1] = 429.7;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = 1.5;
      doubleArray0[4] = (-3190.93572384859);
      doubleArray0[5] = 429.7;
      doubleArray0[6] = 0.8;
      doubleArray0[7] = (double) 3;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-3190.93572384859), 429.7, 3.0, 1.5, (-3190.93572384859), 429.7, 0.8, 3.0}, doubleArray0, 0.01);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, (-3808), 81);
      assertEquals((-3808), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(81, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, number1);
      assertNotNull(number1);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) null, 0.5, 1206);
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number[][] numberArray0 = new Number[2][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'columnKeys' argument.", "Null 'columnKeys' argument.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      assertFalse(vector0.contains(double0));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(number0);
      assertEquals(2, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Float float0 = new Float(1007.9661934898946);
      assertEquals(1007.9662F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1007.9661934898946;
      doubleArray1[1] = 1007.9661934898946;
      doubleArray1[2] = 1007.9661934898946;
      doubleArray1[3] = 1007.9661934898946;
      doubleArray1[4] = 1007.9661934898946;
      doubleArray1[5] = 1007.9661934898946;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1007.9661934898946;
      doubleArray2[1] = 1007.9661934898946;
      doubleArray2[2] = 1007.9661934898946;
      doubleArray2[3] = 1007.9661934898946;
      doubleArray2[4] = 1007.9661934898946;
      doubleArray2[5] = 1007.9661934898946;
      doubleArray2[6] = 1007.9661934898946;
      doubleArray2[7] = 1007.9661934898946;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1007.9661934898946;
      doubleArray3[1] = 1007.9661934898946;
      doubleArray3[2] = 1007.9661934898946;
      doubleArray3[3] = 1473.03815142184;
      doubleArray3[4] = 1007.9661934898946;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertEquals(1007.9661934898946, range0.getLowerBound(), 0.01);
      assertEquals(465.07195793194535, range0.getLength(), 0.01);
      assertEquals(1240.5021724558674, range0.getCentralValue(), 0.01);
      assertEquals(1473.03815142184, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, vector0, false);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(3488.9705384016293, number0);
      assertNotNull(number0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(3, 3);
      assertEquals(3.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(3.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 3;
      doubleArray1[3] = (double) 3;
      doubleArray1[4] = (double) 3;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray3[3] = (double) 3;
      doubleArray3[4] = Double.POSITIVE_INFINITY;
      doubleArray3[5] = (double) 3;
      doubleArray3[6] = (double) 3;
      doubleArray3[7] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray4[1] = Double.POSITIVE_INFINITY;
      doubleArray4[2] = Double.POSITIVE_INFINITY;
      doubleArray4[3] = (double) 3;
      doubleArray4[4] = (double) 3;
      doubleArray4[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Byte byte0 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      TaskSeriesCollection taskSeriesCollection1 = (TaskSeriesCollection)taskSeriesCollection0.clone();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(taskSeriesCollection1, taskSeriesCollection0);
      assertNotNull(taskSeriesCollection1);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      
      defaultIntervalCategoryDataset0.addChangeListener(xYTaskDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertEquals(6, doubleArray0.length);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(byte0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, false);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNull(range0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(double0);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      List list0 = defaultStatisticalCategoryDataset0.getRowKeys();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Double double0 = new Double((-2214.8277915));
      assertEquals((-2214.8277915), (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, list0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(true);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      categoryTableXYDataset0.removeChangeListener(intervalXYDelegate0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(Double.NaN, 570.5, "V}RQh{fQ+Y*<v$3/");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      
      boolean boolean0 = linkedList0.add(categoryTableXYDataset0);
      assertTrue(boolean0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(categoryTableXYDataset0));
      
      boolean boolean1 = linkedList0.add(categoryTableXYDataset0);
      assertTrue(boolean1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(categoryTableXYDataset0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(570.5, range0.getCentralValue(), 0.01);
      assertEquals(570.5, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(570.5, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 570.5;
      doubleArray1[2] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 570.5;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = 1157.5694009842666;
      doubleArray2[3] = Double.NaN;
      doubleArray2[4] = 570.5;
      doubleArray2[5] = Double.NaN;
      doubleArray2[6] = Double.NaN;
      doubleArray2[7] = (-934.0);
      doubleArray2[8] = Double.NaN;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 161.02;
      doubleArray3[1] = 570.5;
      doubleArray3[2] = Double.NaN;
      doubleArray3[3] = (-934.0);
      doubleArray3[4] = 1157.5694009842666;
      doubleArray3[5] = (-934.0);
      doubleArray3[6] = 1157.5694009842666;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.CategoryTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(number0);
      
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray1.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray1.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertNotNull(keyToGroupMap1);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds(categoryDataset0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(number0);
      
      double[][] doubleArray0 = new double[13][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("3~ICM_JBV9E?fbjGM", "3~ICM_JBV9E?fbjGM", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(13, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      linkedList0.push(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(13, doubleArray0.length);
      
      ArrayList<FileDialog> arrayList0 = new ArrayList<FileDialog>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-2822.6629497965), (-2822.6629497965), "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-2822.6629497965), range0.getCentralValue(), 0.01);
      assertEquals((-2822.6629497965), range0.getUpperBound(), 0.01);
      assertEquals((-2822.6629497965), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(5524.28, 5524.28, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(5524.28, range0.getCentralValue(), 0.01);
      assertEquals(5523.78, range0.getLowerBound(), 0.01);
      assertEquals(5524.78, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(number0);
      
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "org.jfree.data.time.Month", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-568.1283082535969);
      doubleArray1[1] = (-4147.977521304242);
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = (-544.119);
      doubleArray1[4] = 2.0;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = (-83.504);
      doubleArray1[7] = (-5031.0);
      doubleArray1[8] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {(-568.1283082535969), (-4147.977521304242), Double.NaN, (-544.119), 2.0, 1.0, (-83.504), (-5031.0), (-2.147483648E9)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {(-568.1283082535969), (-4147.977521304242), Double.NaN, (-544.119), 2.0, 1.0, (-83.504), (-5031.0), (-2.147483648E9)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-568.1283082535969), (-4147.977521304242), Double.NaN, (-544.119), 2.0, 1.0, (-83.504), (-5031.0), (-2.147483648E9)}, doubleArray1, 0.01);
      
      double[] doubleArray3 = polynomialFunction2D0.getCoefficients();
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(9, doubleArray3.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {(-568.1283082535969), (-4147.977521304242), Double.NaN, (-544.119), 2.0, 1.0, (-83.504), (-5031.0), (-2.147483648E9)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-568.1283082535969), (-4147.977521304242), Double.NaN, (-544.119), 2.0, 1.0, (-83.504), (-5031.0), (-2.147483648E9)}, doubleArray1, 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-568.1283082535969), (-83.504), 72, 1.0);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-568.1283082535969), xYSeries0.getMinX(), 0.01);
      assertEquals((-83.50400000000002), xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(72, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotNull(xYSeries0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {(-568.1283082535969), (-4147.977521304242), Double.NaN, (-544.119), 2.0, 1.0, (-83.504), (-5031.0), (-2.147483648E9)}, doubleArray1, 0.01);
      
      XYSeries xYSeries1 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 690.7005, Double.NaN, 72, 1.0);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertEquals(72, xYSeries1.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotNull(xYSeries1);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {(-568.1283082535969), (-4147.977521304242), Double.NaN, (-544.119), 2.0, 1.0, (-83.504), (-5031.0), (-2.147483648E9)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-2822.6629497965), (-2822.6629497965), "");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-2822.6629497965), range0.getCentralValue(), 0.01);
      assertEquals((-2822.1629497965), range0.getUpperBound(), 0.01);
      assertEquals((-2823.1629497965), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      List list0 = defaultStatisticalCategoryDataset0.getRowKeys();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Week week0 = new Week(date0, timeZone0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(week0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(simpleHistogramDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNull(number0);
      
      Range range2 = DatasetUtilities.findCumulativeRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(number0);
      
      double[][] doubleArray0 = new double[1][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range0);
      assertEquals(1, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      stack0.trimToSize();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Vector<Double> vector0 = new Vector<Double>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      int int0 = 3338;
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getXValue(3338, 3338);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3338, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "VRQh{fQ+Y*<v$3/");
      assertNotNull(predicate0);
      
      boolean boolean0 = linkedList0.removeIf(predicate0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("VRQh{fQ+Y*<v$3/");
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(range0);
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      
      double[][] doubleArray1 = new double[3][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("VRQh{fQ+Y*<v$3/", "VRQh{fQ+Y*<v$3/", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray1.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1);
      assertNotNull(pieDataset0);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1446L), (-1446L));
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertNotNull(simpleTimePeriod0);
      
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNotNull(timeSeries0);
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (-1446L);
      doubleArray1[1] = (double) (-1446L);
      doubleArray1[2] = (-144.146273585);
      doubleArray1[3] = (double) (-1446L);
      doubleArray1[4] = (double) (-1446L);
      doubleArray1[5] = (double) (-1446L);
      doubleArray1[6] = (double) (-1446L);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertNotNull(keyToGroupMap1);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap1);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertEquals((-723.0), range0.getCentralValue(), 0.01);
      assertEquals(1446.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-1446.0), range0.getLowerBound(), 0.01);
      assertNotSame(keyToGroupMap1, keyToGroupMap0);
      assertNotNull(range0);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals((-144.146273585), number0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(number0);
      assertEquals(1, doubleArray0.length);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset1.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(1, doubleArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-708), (-708));
      assertEquals((-708), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-708), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(1, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset1);
      assertEquals((-1446.0), number1);
      assertEquals(1, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset1.getColumnCount());
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotNull(number1);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertFalse(number1.equals((Object)number0));
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(number0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      CategoryTableXYDataset[] categoryTableXYDatasetArray0 = new CategoryTableXYDataset[4];
      categoryTableXYDatasetArray0[0] = categoryTableXYDataset0;
      categoryTableXYDatasetArray0[1] = categoryTableXYDataset0;
      categoryTableXYDatasetArray0[2] = categoryTableXYDataset0;
      categoryTableXYDatasetArray0[3] = categoryTableXYDataset0;
      CategoryTableXYDataset[] categoryTableXYDatasetArray1 = stack0.toArray(categoryTableXYDatasetArray0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertSame(categoryTableXYDatasetArray0, categoryTableXYDatasetArray1);
      assertSame(categoryTableXYDatasetArray1, categoryTableXYDatasetArray0);
      assertNotNull(categoryTableXYDatasetArray1);
      assertEquals(4, categoryTableXYDatasetArray0.length);
      assertEquals(4, categoryTableXYDatasetArray1.length);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((-2655.24), 99);
      assertEquals((-2655.24), normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(99.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      NormalDistributionFunction2D normalDistributionFunction2D1 = new NormalDistributionFunction2D(731.8075445669, 648.0);
      assertEquals(648.0, normalDistributionFunction2D1.getStandardDeviation(), 0.01);
      assertEquals(731.8075445669, normalDistributionFunction2D1.getMean(), 0.01);
      assertNotNull(normalDistributionFunction2D1);
      assertFalse(normalDistributionFunction2D1.equals((Object)normalDistributionFunction2D0));
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D1, (-1144), 0.0, 99, "");
      assertEquals(648.0, normalDistributionFunction2D1.getStandardDeviation(), 0.01);
      assertEquals(731.8075445669, normalDistributionFunction2D1.getMean(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotSame(normalDistributionFunction2D1, normalDistributionFunction2D0);
      assertNotNull(xYSeriesCollection0);
      assertFalse(normalDistributionFunction2D1.equals((Object)normalDistributionFunction2D0));
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(taskSeriesCollection0, 4600, 4600);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(4600, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(4600, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(4600, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(4600, slidingCategoryDataset0.getMaximumCategoryCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) vector0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(4600, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(4600, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[1][0];
      Number[] numberArray1 = new Number[2];
      Float float0 = new Float((-102.22711822));
      assertEquals((-102.22712F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      numberArray1[0] = (Number) float0;
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      numberArray1[1] = (Number) bigInteger0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("H2Iwv%M{", "H2Iwv%M{", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertEquals((-102.22711944580078), range1.getLowerBound(), 0.01);
      assertEquals(10.0, range1.getUpperBound(), 0.01);
      assertEquals(112.22711944580078, range1.getLength(), 0.01);
      assertEquals((-46.11355972290039), range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertEquals(1, numberArray0.length);
      
      Range range2 = DatasetUtilities.findCumulativeRangeBounds(slidingCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(4600, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(4600, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(number0);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      stack0.setSize(1);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(number0);
      
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray1.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray1.length);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Double double0 = new Double((-144.146273585));
      assertEquals((-144.146273585), (double)double0, 0.01);
      assertNotNull(double0);
      
      Vector<Double> vector0 = new Vector<Double>(4, 2145493394);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(4, vector0.capacity());
      assertNotNull(vector0);
      assertFalse(vector0.contains(double0));
      
      Double double1 = new Double(4);
      assertEquals(4.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = vector0.add(double1);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(4, vector0.capacity());
      assertEquals("[4.0]", vector0.toString());
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(vector0.contains(double1));
      assertFalse(vector0.contains(double0));
      
      Double double2 = new Double(4);
      assertEquals(4.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      boolean boolean1 = vector0.add(double2);
      assertTrue(boolean1);
      assertEquals("[4.0, 4.0]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertEquals(4, vector0.capacity());
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(vector0.contains(double1));
      assertFalse(vector0.contains(double0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) vector0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray1.length);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((Double) null);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      assertFalse(stack0.contains(double0));
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[0.0]", stack0.toString());
      assertTrue(stack0.contains(double0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[0.0]", stack0.toString());
      assertNull(range0);
      assertTrue(stack0.contains(double0));
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) null, 0.5, 1206);
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      
      Number[] numberArray0 = new Number[8];
      Float float0 = new Float(0.5);
      assertEquals(0.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      numberArray0[0] = (Number) float0;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(1206, 1037.6);
      assertEquals(1037.6, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1206.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 1.0, 0.5, 1, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(taskSeriesCollection0, 4600, 4600);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(4600, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(4600, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(4600, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(4600, slidingCategoryDataset0.getFirstCategoryIndex());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      boolean boolean1 = false;
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4600;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {4600.0}, doubleArray0, 0.01);
      
      Day day0 = Day.parseDay("[R0}[?Zz@b(Z");
      assertNull(day0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 4600, 4600.0, 4600, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset1);
      assertTrue(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset1);
      assertNotSame(defaultKeyedValues2DDataset1, defaultKeyedValues2DDataset0);
      assertNull(number0);
      assertTrue(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(number1);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNull(range1);
      
      Number number2 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(number2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) mockDate0, (-361.655589975));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(number0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Minute minute0 = new Minute();
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Second second0 = new Second(2146866200, minute0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(24, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      
      TimeSeries timeSeries0 = new TimeSeries(second0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(24, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(24, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(24, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNull(range0);
      
      List<TimeTableXYDataset> list0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      XYDataset xYDataset0 = null;
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range0);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Byte byte0 = new Byte((byte)76);
      assertEquals((byte)76, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = linkedList0.add(byte0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(byte0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Week week0 = new Week();
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(8, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(106750L, week1.getSerialIndex());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      timeTableXYDataset0.add((TimePeriod) week1, (Number) 53, "org.jfree.data.gantt.TaskSeriesCollection", true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(8, week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(106750L, week1.getSerialIndex());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(53.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(53.0, range0.getLength(), 0.01);
      assertEquals(26.5, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((double) 53, 2085.683205, "Duplicate items in 'columnKeys'.");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      
      boolean boolean0 = linkedList0.add(categoryTableXYDataset0);
      assertTrue(boolean0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(categoryTableXYDataset0));
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(53.5, range2.getUpperBound(), 0.01);
      assertEquals(52.5, range2.getLowerBound(), 0.01);
      assertEquals(1.0, range2.getLength(), 0.01);
      assertEquals(53.0, range2.getCentralValue(), 0.01);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(number0);
      
      double[][] doubleArray0 = new double[1][1];
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      linkedList0.push(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNull(range0);
      
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-3190.93572384859);
      doubleArray1[1] = 429.7;
      doubleArray1[2] = (double) 3;
      doubleArray1[3] = 1.5;
      doubleArray1[4] = (-3190.93572384859);
      doubleArray1[5] = 429.7;
      doubleArray1[6] = 0.8;
      doubleArray1[7] = (double) 3;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-3190.93572384859), 429.7, 3.0, 1.5, (-3190.93572384859), 429.7, 0.8, 3.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-3190.93572384859), 429.7, 3.0, 1.5, (-3190.93572384859), 429.7, 0.8, 3.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-3190.93572384859), 429.7, 3.0, 1.5, (-3190.93572384859), 429.7, 0.8, 3.0}, doubleArray1, 0.01);
      
      double[] doubleArray3 = polynomialFunction2D0.getCoefficients();
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(8, doubleArray3.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-3190.93572384859), 429.7, 3.0, 1.5, (-3190.93572384859), 429.7, 0.8, 3.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-3190.93572384859), 429.7, 3.0, 1.5, (-3190.93572384859), 429.7, 0.8, 3.0}, doubleArray1, 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-200.0), 429.7, 3, (-3190.93572384859));
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(429.70000000000005, xYSeries0.getMaxX(), 0.01);
      assertEquals(8.1260391211862897E18, xYSeries0.getMaxY(), 0.01);
      assertEquals((-200.0), xYSeries0.getMinX(), 0.01);
      assertEquals((-3.8491409509127288E16), xYSeries0.getMinY(), 0.01);
      assertEquals(3, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(xYSeries0);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-3190.93572384859), 429.7, 3.0, 1.5, (-3190.93572384859), 429.7, 0.8, 3.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray3[5] = Double.NEGATIVE_INFINITY;
      doubleArray3[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray4[1] = Double.NEGATIVE_INFINITY;
      doubleArray4[2] = Double.NEGATIVE_INFINITY;
      doubleArray4[3] = Double.NEGATIVE_INFINITY;
      doubleArray4[4] = Double.NEGATIVE_INFINITY;
      doubleArray4[5] = Double.NEGATIVE_INFINITY;
      doubleArray4[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-708), (-708));
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals((-708), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-708), slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals((-708), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-708), slidingCategoryDataset0.getMaximumCategoryCount());
      assertNull(number0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(number0);
      
      Comparable<Short>[] comparableArray0 = (Comparable<Short>[]) Array.newInstance(Comparable.class, 9);
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = 181.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-2271.8544);
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = Double.POSITIVE_INFINITY;
      doubleArray1[6] = Double.POSITIVE_INFINITY;
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[5] = 181.0;
      doubleArray2[6] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number1);
      
      Number number2 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(number2);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.POSITIVE_INFINITY, 82.70295168484874);
      assertEquals(Double.POSITIVE_INFINITY, powerFunction2D0.getA(), 0.01);
      assertEquals(82.70295168484874, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-3190.93572384859), 429.7, 3, 0.0);
      assertEquals(Double.POSITIVE_INFINITY, powerFunction2D0.getA(), 0.01);
      assertEquals(82.70295168484874, powerFunction2D0.getB(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(3, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-3190.93572384859), xYSeries0.getMinX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMinY(), 0.01);
      assertEquals(429.6999999999998, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNotNull(xYSeries0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, true);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNull(range0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.START;
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      assertNotNull(timePeriodAnchor0);
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-223));
      assertEquals(0.0, double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
      assertEquals(Double.NaN, number0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(number0);
      assertFalse(number0.equals((Object)double0));
      
      // Undeclared exception!
      try { 
        Range.scale((Range) null, 1538.08674);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String[] stringArray0 = new String[1];
      double[][] doubleArray0 = new double[1][9];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) stringArray0, (Comparable[]) stringArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1446L), (-1446L));
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertNotNull(simpleTimePeriod0);
      
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNotNull(timeSeries0);
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (-1446L);
      doubleArray1[1] = (double) (-1446L);
      doubleArray1[2] = (-144.146273585);
      doubleArray1[3] = (double) (-1446L);
      doubleArray1[4] = (double) (-1446L);
      doubleArray1[5] = (double) (-1446L);
      doubleArray1[6] = (double) (-1446L);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertNotNull(keyToGroupMap1);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap1);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1446.0, range0.getLength(), 0.01);
      assertEquals((-723.0), range0.getCentralValue(), 0.01);
      assertEquals((-1446.0), range0.getLowerBound(), 0.01);
      assertNotSame(keyToGroupMap1, keyToGroupMap0);
      assertNotNull(range0);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals((-144.146273585), number0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(number0);
      assertEquals(1, doubleArray0.length);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNull(number1);
      
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset("rX(#QMjmkm``'1eRe", "rX(#QMjmkm``'1eRe", "rX(#QMjmkm``'1eRe", (String) null);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Week week0 = new Week();
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(8, week1.getWeek());
      assertEquals(106750L, week1.getSerialIndex());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      timeTableXYDataset0.add((TimePeriod) week1, (Number) 53, "org.jfree.data.gantt.TaskSeriesCollection", true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(8, week1.getWeek());
      assertEquals(106750L, week1.getSerialIndex());
      assertEquals(2014, week1.getYearValue());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(53.0, range0.getUpperBound(), 0.01);
      assertEquals(53.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(26.5, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      timeTableXYDataset0.clear();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Number[][] numberArray0 = new Number[0][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-15));
      assertEquals((byte) (-15), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((byte) (-15)));
      
      MockDate mockDate0 = new MockDate(2, 2, 7, (-815), (-4644));
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals("Tue Jan 28 19:36:00 GMT 1902", mockDate0.toString());
      assertEquals((-2143513440000L), hour0.getFirstMillisecond());
      assertEquals((-2143513440000L), hour0.getLastMillisecond());
      assertEquals(19, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1028, 0, hour0);
      assertEquals("Tue Jan 28 19:36:00 GMT 1902", mockDate0.toString());
      assertEquals((-2143513440000L), hour0.getFirstMillisecond());
      assertEquals((-2143513440000L), hour0.getLastMillisecond());
      assertEquals(19, hour0.getHour());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Tue Jan 28 19:36:00 GMT 1902", mockDate0.toString());
      assertEquals((-2143513440000L), hour0.getFirstMillisecond());
      assertEquals((-2143513440000L), hour0.getLastMillisecond());
      assertEquals(19, hour0.getHour());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNull(range0);
      assertTrue(arrayList0.contains((byte) (-15)));
      
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getStartX((-1), 2958465);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2958465
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(number0);
      
      double[][] doubleArray0 = new double[13][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("3~ICM_JBV9E?fbjGM", "3~ICM_JBV9E?fbjGM", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(13, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      linkedList0.push(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(13, doubleArray0.length);
      
      ArrayList<FileDialog> arrayList0 = new ArrayList<FileDialog>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range1);
      assertEquals(13, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1555.3047261080367));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1555.3047261080367), range2.getUpperBound(), 0.01);
      assertEquals((-1555.3047261080367), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1555.3047261080367), range2.getCentralValue(), 0.01);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      CategoryTableXYDataset[] categoryTableXYDatasetArray0 = new CategoryTableXYDataset[0];
      CategoryTableXYDataset[] categoryTableXYDatasetArray1 = vector0.toArray(categoryTableXYDatasetArray0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertSame(categoryTableXYDatasetArray0, categoryTableXYDatasetArray1);
      assertSame(categoryTableXYDatasetArray1, categoryTableXYDatasetArray0);
      assertNotNull(categoryTableXYDatasetArray1);
      assertEquals(0, categoryTableXYDatasetArray0.length);
      assertEquals(0, categoryTableXYDatasetArray1.length);
      
      Double double0 = new Double((-4266.8040183));
      assertEquals((-4266.8040183), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = vector0.add(double0);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[-4266.8040183]", vector0.toString());
      assertTrue(vector0.contains(double0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[-4266.8040183]", vector0.toString());
      assertNull(range0);
      assertTrue(vector0.contains(double0));
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(true);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      categoryTableXYDataset1.removeChangeListener(intervalXYDelegate0);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      categoryTableXYDataset1.add(1.7976931348623157E308, 244.38175323, "Duplicate items in 'columnKeys'.");
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      Integer integer0 = new Integer((-1895));
      assertEquals((-1895), (int)integer0);
      assertNotNull(integer0);
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      
      boolean boolean0 = linkedList0.add(categoryTableXYDataset0);
      assertTrue(boolean0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertTrue(linkedList0.contains(categoryTableXYDataset0));
      assertFalse(linkedList0.contains(categoryTableXYDataset1));
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.7976931348623157E308, range1.getCentralValue(), 0.01);
      assertEquals(1.7976931348623157E308, range1.getUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertNotNull(range1);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(false);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset1);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      categoryTableXYDataset1.add((-3614.3), (-3614.3), "");
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      Integer integer0 = new Integer(1288490189);
      assertEquals(1288490189, (int)integer0);
      assertNotNull(integer0);
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(categoryTableXYDataset1));
      
      boolean boolean0 = linkedList0.add(categoryTableXYDataset1);
      assertTrue(boolean0);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      assertTrue(linkedList0.contains(categoryTableXYDataset1));
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset1);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals((-3614.3), range0.getCentralValue(), 0.01);
      assertEquals((-3614.3), range0.getUpperBound(), 0.01);
      assertEquals((-3614.3), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertNotNull(range0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNull(range1);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (double) 1288490189;
      doubleArray1[2] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NaN;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", "Invalid sql generated.  PieDataSet requires 2 columns only", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      String string0 = ".";
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(".", ".", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray1.length);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(".", (String) null, (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(true);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      
      categoryTableXYDataset1.removeChangeListener(intervalXYDelegate0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      int int0 = categoryTableXYDataset0.getItemCount(4464);
      assertEquals(0, int0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      
      categoryTableXYDataset1.add(Double.NaN, 570.5, "Duplicate items in 'columnKeys'.");
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      Integer integer0 = new Integer((-1784));
      assertEquals((-1784), (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      
      boolean boolean0 = linkedList0.add(categoryTableXYDataset1);
      assertTrue(boolean0);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertTrue(linkedList0.contains(categoryTableXYDataset1));
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.CategoryTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1446L), (-1446L));
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertNotNull(simpleTimePeriod0);
      
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNotNull(timeSeries0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1446L);
      doubleArray0[1] = (double) (-1446L);
      doubleArray0[2] = (-144.146273585);
      doubleArray0[3] = (double) (-1446L);
      doubleArray0[4] = (double) (-1446L);
      doubleArray0[5] = (double) (-1446L);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean0);
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray1.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray1.length);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-905.589013578);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 709.295429;
      doubleArray1[3] = 0.8;
      doubleArray1[4] = (-1552.33853312675);
      doubleArray1[5] = (-1847.7632665227206);
      doubleArray1[6] = (-3196.0);
      doubleArray1[7] = (-1166.06);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3196.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-3196.0);
      doubleArray3[1] = (-3196.0);
      doubleArray3[2] = (-4287.7677316998);
      doubleArray3[3] = 0.8;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-4287.7677316998);
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      Instant instant1 = MockInstant.minusNanos(instant0, 422L);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertNotNull(instant1);
      assertFalse(instant1.equals((Object)instant0));
      
      Instant instant2 = MockInstant.minusSeconds(instant1, (-1081L));
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertNotNull(instant2);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant0));
      
      Date date0 = Date.from(instant2);
      assertEquals("Fri Feb 14 20:39:22 GMT 2014", date0.toString());
      assertNotSame(instant0, instant1);
      assertNotSame(instant0, instant2);
      assertNotSame(instant1, instant0);
      assertNotSame(instant1, instant2);
      assertNotSame(instant2, instant1);
      assertNotSame(instant2, instant0);
      assertNotNull(date0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant0.equals((Object)instant2));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant1.equals((Object)instant2));
      assertFalse(instant2.equals((Object)instant1));
      assertFalse(instant2.equals((Object)instant0));
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      TimePeriodAnchor timePeriodAnchor0 = timeTableXYDataset0.getXPosition();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      assertNotNull(timePeriodAnchor0);
      
      timeTableXYDataset0.setXPosition(timePeriodAnchor0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 393);
      assertEquals(0.0, double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Number[] numberArray0 = new Number[8];
      Float float0 = new Float(0.5);
      assertEquals(0.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      numberArray0[0] = (Number) float0;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      int int0 = categoryTableXYDataset0.getItemCount();
      assertEquals(0, int0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number[][] numberArray1 = new Number[2][8];
      numberArray1[0] = numberArray0;
      numberArray1[1] = numberArray0;
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1446L), (-1446L));
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertNotNull(simpleTimePeriod0);
      
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (-1446L);
      doubleArray1[1] = (double) (-1446L);
      doubleArray1[2] = (-144.146273585);
      doubleArray1[3] = (double) (-1446L);
      doubleArray1[4] = (double) (-1446L);
      doubleArray1[5] = (double) (-1446L);
      doubleArray1[6] = (double) (-1446L);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertNotNull(keyToGroupMap1);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap1);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertEquals((-723.0), range0.getCentralValue(), 0.01);
      assertEquals((-1446.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1446.0, range0.getLength(), 0.01);
      assertNotSame(keyToGroupMap1, keyToGroupMap0);
      assertNotNull(range0);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals((-144.146273585), number0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(number0);
      assertEquals(1, doubleArray0.length);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 9999.0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(9999.0, range1.getLowerBound(), 0.01);
      assertEquals(9999.0, range1.getCentralValue(), 0.01);
      assertEquals(9999.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Short short0 = new Short((short)2000);
      assertEquals((short)2000, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains((short)2000));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, false);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(range0);
      assertTrue(arrayList0.contains((short)2000));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 2426.214247239);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 564.445987414;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 564.445987414;
      doubleArray2[1] = 564.445987414;
      doubleArray2[2] = 564.445987414;
      doubleArray2[3] = 564.445987414;
      doubleArray2[4] = 564.445987414;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 564.445987414;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[1] = 564.445987414;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 564.445987414;
      doubleArray5[1] = 564.445987414;
      doubleArray5[2] = 564.445987414;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("", "\u0006r3,btH/]o`9:+e% 2", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(number0);
      
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      linkedList0.push(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      CategoryTableXYDataset[] categoryTableXYDatasetArray0 = new CategoryTableXYDataset[0];
      CategoryTableXYDataset[] categoryTableXYDatasetArray1 = vector0.toArray(categoryTableXYDatasetArray0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertSame(categoryTableXYDatasetArray0, categoryTableXYDatasetArray1);
      assertSame(categoryTableXYDatasetArray1, categoryTableXYDatasetArray0);
      assertNotNull(categoryTableXYDatasetArray1);
      assertEquals(0, categoryTableXYDatasetArray0.length);
      assertEquals(0, categoryTableXYDatasetArray1.length);
      
      Double double0 = new Double((-4266.8040183));
      assertEquals((-4266.8040183), (double)double0, 0.01);
      assertNotNull(double0);
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 181.0;
      doubleArray1[1] = (-4266.8040183);
      doubleArray1[2] = 181.0;
      doubleArray1[3] = 181.0;
      doubleArray1[4] = 181.0;
      doubleArray1[5] = (-4266.8040183);
      doubleArray1[6] = 181.0;
      doubleArray1[7] = 181.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-5752.12996);
      doubleArray2[1] = (-4266.8040183);
      doubleArray2[2] = (-4266.8040183);
      doubleArray2[3] = 181.0;
      doubleArray2[4] = 2726.967858435;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-4177.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      JDBCXYDataset jDBCXYDataset1 = new JDBCXYDataset((Connection) null);
      assertEquals(0, jDBCXYDataset1.getSeriesCount());
      assertFalse(jDBCXYDataset1.isTimeSeries());
      assertEquals(0, jDBCXYDataset1.getItemCount());
      assertNotNull(jDBCXYDataset1);
      assertFalse(jDBCXYDataset1.equals((Object)jDBCXYDataset0));
      
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1538.08674;
      doubleArray2[1] = 1538.08674;
      doubleArray2[2] = 1538.08674;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1538.08674;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Xzk#j/", "Xzk#j/", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertEquals(3076.17348, range0.getLength(), 0.01);
      assertEquals(1538.08674, range0.getCentralValue(), 0.01);
      assertEquals(3076.17348, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(number0);
      
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(number0);
      
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray1.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray1.length);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Xzk#j/", "", doubleArray1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(1, doubleArray1.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset1);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertTrue(range1.equals((Object)range0));
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 564.445987414;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 564.445987414;
      doubleArray2[1] = 564.445987414;
      doubleArray2[2] = 564.445987414;
      doubleArray2[3] = 564.445987414;
      doubleArray2[4] = 564.445987414;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 564.445987414;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 564.445987414;
      doubleArray4[1] = 564.445987414;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 564.445987414;
      doubleArray5[1] = 564.445987414;
      doubleArray5[2] = 564.445987414;
      doubleArray5[3] = 564.445987414;
      doubleArray5[4] = 564.445987414;
      doubleArray5[5] = 564.445987414;
      doubleArray5[6] = 564.445987414;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(2257.783949656, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1128.891974828, range0.getCentralValue(), 0.01);
      assertEquals(2257.783949656, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String[] stringArray0 = new String[0];
      double[][] doubleArray0 = new double[5][9];
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 564.445987414;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 564.445987414;
      doubleArray2[1] = 564.445987414;
      doubleArray2[2] = 564.445987414;
      doubleArray2[3] = 564.445987414;
      doubleArray2[4] = 564.445987414;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 564.445987414;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 564.445987414;
      doubleArray4[1] = 564.445987414;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 564.445987414;
      doubleArray5[1] = 564.445987414;
      doubleArray5[2] = 564.445987414;
      doubleArray5[3] = 564.445987414;
      doubleArray5[4] = 564.445987414;
      doubleArray5[5] = 564.445987414;
      doubleArray5[6] = 564.445987414;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1411.1149685350001, range0.getCentralValue(), 0.01);
      assertEquals(2822.2299370700002, range0.getUpperBound(), 0.01);
      assertEquals(2822.2299370700002, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1L);
      assertEquals(1L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1L, fixedMillisecond0.getSerialIndex());
      assertEquals(1L, fixedMillisecond0.getFirstMillisecond());
      assertNotNull(fixedMillisecond0);
      
      String string0 = fixedMillisecond0.toString();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", string0);
      assertEquals(1L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1L, fixedMillisecond0.getSerialIndex());
      assertEquals(1L, fixedMillisecond0.getFirstMillisecond());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) fixedMillisecond0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      TableXYDataset tableXYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      byte byte0 = (byte) (-70);
      Byte byte1 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte) (-70)));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      TaskSeriesCollection taskSeriesCollection1 = (TaskSeriesCollection)taskSeriesCollection0.clone();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(taskSeriesCollection1, taskSeriesCollection0);
      assertNotNull(taskSeriesCollection1);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      
      defaultIntervalCategoryDataset0.addChangeListener(xYTaskDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertEquals(6, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYTaskDataset0, false);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNull(range0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      
      TableXYDataset tableXYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, (double) (byte) (-70));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(1.5, 1.5);
      assertEquals(1.5, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.5, lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      String string0 = "Y]c";
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = 1.5;
      doubleArray1[2] = 1.5;
      doubleArray1[3] = (-1597.3472543997177);
      doubleArray1[4] = 1.5;
      doubleArray1[5] = 1.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1597.3472543997177);
      doubleArray2[1] = (-1597.3472543997177);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1597.3472543997177);
      doubleArray3[1] = (-1597.3472543997177);
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray3[3] = (-1597.3472543997177);
      doubleArray3[4] = Double.POSITIVE_INFINITY;
      doubleArray3[5] = (-1597.3472543997177);
      doubleArray3[6] = (-568.1283082535969);
      doubleArray3[7] = 1.5;
      doubleArray3[8] = 1.5;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Y]c", "Y]c", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals((-3194.6945087994354), number0);
      assertNotNull(number0);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) (-1597.3472543997177));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      TimeSeries timeSeries0 = new TimeSeries(0.0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      ArrayList<DefaultStatisticalCategoryDataset> arrayList0 = new ArrayList<DefaultStatisticalCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = arrayList0.add(defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(defaultStatisticalCategoryDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultStatisticalCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      categoryTableXYDataset0.removeChangeListener(intervalXYDelegate0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(9999.0, 1376.189, "Duplicate items in 'columnKeys'.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Integer integer0 = new Integer(1445);
      assertEquals(1445, (int)integer0);
      assertNotNull(integer0);
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      
      boolean boolean0 = linkedList0.add(categoryTableXYDataset0);
      assertTrue(boolean0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(categoryTableXYDataset0));
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1376.189, range0.getCentralValue(), 0.01);
      assertEquals(1376.189, range0.getUpperBound(), 0.01);
      assertEquals(1376.189, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(number0);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      categoryTableXYDataset0.add((-2834.247089704106), 58.9975867, "");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1329.17300235954));
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-1329.17300235954), range0.getLowerBound(), 0.01);
      assertEquals((-1270.17541565954), range0.getUpperBound(), 0.01);
      assertEquals(58.997586700000056, range0.getLength(), 0.01);
      assertEquals((-1299.67420900954), range0.getCentralValue(), 0.01);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotNull(range0);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      
      Number[][] numberArray0 = new Number[3][9];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = null;
      numberArray1[1] = null;
      numberArray1[2] = null;
      numberArray1[3] = null;
      numberArray1[4] = null;
      Byte byte0 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte0);
      assertNotNull(byte0);
      
      numberArray1[5] = (Number) byte0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = null;
      numberArray2[1] = (Number) byte0;
      numberArray2[2] = null;
      numberArray2[3] = (Number) byte0;
      numberArray2[4] = (Number) byte0;
      Short short0 = new Short((byte)87);
      assertEquals((short)87, (short)short0);
      assertNotNull(short0);
      
      numberArray2[5] = (Number) short0;
      numberArray2[6] = (Number) byte0;
      Double double0 = new Double(1188.88239850429);
      assertEquals(1188.88239850429, (double)double0, 0.01);
      assertNotNull(double0);
      
      numberArray2[7] = (Number) double0;
      numberArray2[8] = (Number) byte0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[3];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) double0;
      numberArray3[1] = (Number) double0;
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      numberArray3[2] = (Number) bigInteger0;
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      String string0 = "LS,2gGP)1jeb1JiH";
      Number[][] numberArray0 = new Number[0][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "LS,2gGP)1jeb1JiH", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1L), (-1L));
      assertEquals((-1L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1L), simpleTimePeriod0.getEndMillis());
      assertNotNull(simpleTimePeriod0);
      
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      assertEquals((-1L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1L), simpleTimePeriod0.getEndMillis());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals((-1L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1L), simpleTimePeriod0.getEndMillis());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Collection collection0 = timeSeries0.getTimePeriods();
      assertEquals((-1L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1L), simpleTimePeriod0.getEndMillis());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNotNull(collection0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertEquals((-1L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1L), simpleTimePeriod0.getEndMillis());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean0);
      assertEquals((-1L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1L), simpleTimePeriod0.getEndMillis());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number[][] numberArray0 = new Number[1][0];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNull(range1);
      assertEquals(1, numberArray0.length);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNull(range2);
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      double double0 = 0.5;
      int int0 = 1206;
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) null, 0.5, 1206);
      assertNotNull(pieDataset0);
      
      double double1 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      String string0 = "";
      Number[] numberArray0 = new Number[8];
      Float float0 = new Float(0.5);
      assertEquals(0.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      numberArray0[0] = (Number) float0;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number[][] numberArray1 = new Number[2][8];
      numberArray1[0] = numberArray0;
      numberArray1[1] = numberArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'columnKeys' argument.", "Null 'columnKeys' argument.", numberArray1);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray1.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1446L), (-1446L));
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertNotNull(simpleTimePeriod0);
      
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      categoryTableXYDataset1.add((double) (-1446L), (double) (-1446L), "Null 'rowKey' argument.");
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset1);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals((-1446.0), range1.getCentralValue(), 0.01);
      assertEquals((-1446.0), range1.getUpperBound(), 0.01);
      assertEquals((-1446.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertNotNull(range1);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(number0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      assertEquals(0, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(range0);
      
      Range range1 = Range.combine((Range) null, (Range) null);
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, list0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-15));
      assertEquals((byte) (-15), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((byte) (-15)));
      
      MockDate mockDate0 = new MockDate(1079, (-4644), (byte) (-15), (-815), 1079);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals("Sat Nov 12 18:59:00 GMT 2591", mockDate0.toString());
      assertEquals(19624186740000L, hour0.getLastMillisecond());
      assertEquals(19624186740000L, hour0.getFirstMillisecond());
      assertEquals(18, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 9, hour0);
      assertEquals("Sat Nov 12 18:59:00 GMT 2591", mockDate0.toString());
      assertEquals(19624186740000L, hour0.getLastMillisecond());
      assertEquals(19624186740000L, hour0.getFirstMillisecond());
      assertEquals(18, hour0.getHour());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(8, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-31));
      assertEquals((byte) (-31), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(byte0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray1.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray1.length);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      vector0.trimToSize();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) vector0, true);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNull(range1);
      assertEquals(1, doubleArray1.length);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 564.445987414);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(564.445987414, range2.getCentralValue(), 0.01);
      assertEquals(564.445987414, range2.getUpperBound(), 0.01);
      assertEquals(564.445987414, range2.getLowerBound(), 0.01);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1446L), (-1446L));
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertNotNull(simpleTimePeriod0);
      
      Date date0 = simpleTimePeriod0.getEnd();
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", date0.toString());
      assertNotNull(date0);
      
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertEquals((-1446L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1446L), simpleTimePeriod0.getStartMillis());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getSlope(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYDataset0, true);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNull(range0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = Double.POSITIVE_INFINITY;
      doubleArray1[6] = Double.NEGATIVE_INFINITY;
      doubleArray1[7] = Double.POSITIVE_INFINITY;
      doubleArray1[8] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2635.0;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = Double.POSITIVE_INFINITY;
      doubleArray2[6] = Double.POSITIVE_INFINITY;
      doubleArray2[7] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The 'seriesKey' cannot be null.", "The 'seriesKey' cannot be null.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(Double.NaN, range2.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertEquals(2, doubleArray0.length);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Range range3 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) vector0, true);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNull(range3);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) null, 0.5, 1206);
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(number0);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) "");
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1206;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-3158.08743);
      doubleArray2[3] = (double) 1206;
      doubleArray2[4] = (double) 1206;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (-1526.58);
      doubleArray2[7] = 0.5;
      doubleArray2[8] = 0.0;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(number0);
      
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList1 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      linkedList1.push(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(linkedList1.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("<THG5D", "", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray1.length);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(number1);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      categoryTableXYDataset0.add(1725.9887467, 3626.6238222905, "UYesVEJu,r;>l<P_|rE");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(3626.6238222905, range0.getLowerBound(), 0.01);
      assertEquals(3626.6238222905, range0.getUpperBound(), 0.01);
      assertEquals(3626.6238222905, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotNull(range0);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>(2);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(2, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(2, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNull(range0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      TimePeriodAnchor timePeriodAnchor0 = timeTableXYDataset0.getXPosition();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      assertNotNull(timePeriodAnchor0);
      
      timeTableXYDataset0.setXPosition(timePeriodAnchor0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-3196));
      assertEquals(0.0, double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      assertFalse(number0.equals((Object)double0));
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.7976931348623157E308), 82);
      assertEquals((-1.7976931348623157E308), powerFunction2D0.getA(), 0.01);
      assertEquals(82.0, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYDataItem xYDataItem0 = new XYDataItem(number0, number0);
      assertEquals(Double.NaN, xYDataItem0.getXValue(), 0.01);
      assertEquals(Double.NaN, xYDataItem0.getYValue(), 0.01);
      assertNotNull(xYDataItem0);
      assertFalse(number0.equals((Object)double0));
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(powerFunction2D0, (-2237.0), (-1.0), 2548, xYDataItem0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-1));
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add((-1329.67300235954), (-1329.67300235954), "_7O05N-'oN CADcc");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1329.67300235954), range0.getCentralValue(), 0.01);
      assertEquals((-1329.67300235954), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1329.67300235954), range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1329.67300235954), range1.getCentralValue(), 0.01);
      assertEquals((-1329.17300235954), range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-1330.17300235954), range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1329.67300235954), range2.getUpperBound(), 0.01);
      assertEquals((-1329.67300235954), range2.getLowerBound(), 0.01);
      assertEquals((-1329.67300235954), range2.getCentralValue(), 0.01);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(true);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      
      categoryTableXYDataset1.removeChangeListener(intervalXYDelegate0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      categoryTableXYDataset1.add(Double.NaN, 570.5, "V}RQh{fQ+Y*<v$3/");
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      Integer integer0 = new Integer((-1783));
      assertEquals((-1783), (int)integer0);
      assertNotNull(integer0);
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      
      boolean boolean0 = linkedList0.add(categoryTableXYDataset1);
      assertTrue(boolean0);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      assertTrue(linkedList0.contains(categoryTableXYDataset1));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(570.5, range0.getCentralValue(), 0.01);
      assertEquals(570.5, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(570.5, range0.getUpperBound(), 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertNotNull(range0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      double double1 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-1783));
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) null, 0.5, 1206);
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Number[] numberArray0 = new Number[8];
      Float float0 = new Float(0.5);
      assertEquals(0.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      numberArray0[0] = (Number) float0;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(0.5, (double) 1206, "Null 'rowKey' argument.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1206.0, range0.getCentralValue(), 0.01);
      assertEquals(1206.0, range0.getUpperBound(), 0.01);
      assertEquals(1206.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      MockDate mockDate0 = new MockDate((-628));
      assertNotNull(mockDate0);
      
      Year year0 = new Year(mockDate0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals((-628L), year0.getLastMillisecond());
      assertEquals((-628L), year0.getFirstMillisecond());
      assertEquals(1969, year0.getYear());
      assertEquals(1969L, year0.getSerialIndex());
      assertEquals("1969", year0.toString());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(year0);
      
      Week week0 = new Week((-628), year0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals((-628L), year0.getLastMillisecond());
      assertEquals((-628L), year0.getFirstMillisecond());
      assertEquals(1969, year0.getYear());
      assertEquals(1969L, year0.getSerialIndex());
      assertEquals("1969", year0.toString());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-116), week0.getWeek());
      assertEquals(104241L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1969, week0.getYearValue());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      Week week1 = (Week)week0.previous();
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals((-628L), year0.getLastMillisecond());
      assertEquals((-628L), year0.getFirstMillisecond());
      assertEquals(1969, year0.getYear());
      assertEquals(1969L, year0.getSerialIndex());
      assertEquals("1969", year0.toString());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-116), week0.getWeek());
      assertEquals(104241L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1969, week0.getYearValue());
      assertEquals(1969, week1.getYearValue());
      assertEquals((-117), week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(104240L, week1.getSerialIndex());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(week1);
      assertFalse(week1.equals((Object)week0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)MockCalendar.getInstance();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = year0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(1392409281320L, long0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals((-628L), year0.getLastMillisecond());
      assertEquals((-628L), year0.getFirstMillisecond());
      assertEquals(1969, year0.getYear());
      assertEquals(1969L, year0.getSerialIndex());
      assertEquals("1969", year0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=31,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (Comparable) mockDate0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertNotNull(defaultPieDataset0);
      
      long long1 = week1.getFirstMillisecond();
      assertEquals(1392409281320L, long1);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals((-628L), year0.getLastMillisecond());
      assertEquals((-628L), year0.getFirstMillisecond());
      assertEquals(1969, year0.getYear());
      assertEquals(1969L, year0.getSerialIndex());
      assertEquals("1969", year0.toString());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-116), week0.getWeek());
      assertEquals(104241L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1969, week0.getYearValue());
      assertEquals(1969, week1.getYearValue());
      assertEquals((-117), week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(104240L, week1.getSerialIndex());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertTrue(long1 == long0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) week1, (KeyedValues) defaultPieDataset0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals((-628L), year0.getLastMillisecond());
      assertEquals((-628L), year0.getFirstMillisecond());
      assertEquals(1969, year0.getYear());
      assertEquals(1969L, year0.getSerialIndex());
      assertEquals("1969", year0.toString());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-116), week0.getWeek());
      assertEquals(104241L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1969, week0.getYearValue());
      assertEquals(1969, week1.getYearValue());
      assertEquals((-117), week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(104240L, week1.getSerialIndex());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(defaultCategoryDataset0);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertNull(range0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals((-628L), year0.getLastMillisecond());
      assertEquals((-628L), year0.getFirstMillisecond());
      assertEquals(1969, year0.getYear());
      assertEquals(1969L, year0.getSerialIndex());
      assertEquals("1969", year0.toString());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-116), week0.getWeek());
      assertEquals(104241L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1969, week0.getYearValue());
      assertEquals(1969, week1.getYearValue());
      assertEquals((-117), week1.getWeek());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(104240L, week1.getSerialIndex());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNull(number0);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = 1;
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>(1);
      assertEquals(1, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((DefaultOHLCDataset) null);
      assertTrue(boolean0);
      assertEquals(1, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[null]", vector0.toString());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, (-1131.473963176521));
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals((-1131.473963176521), range0.getLowerBound(), 0.01);
      assertEquals((-1131.473963176521), range0.getCentralValue(), 0.01);
      assertEquals((-1131.473963176521), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      
      LinkedList<XIntervalSeriesCollection> linkedList0 = new LinkedList<XIntervalSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>(1);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(1, vector0.capacity());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, true);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(1, vector0.capacity());
      assertNull(range0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      TimePeriodAnchor timePeriodAnchor0 = TimePeriodAnchor.START;
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      assertNotNull(timePeriodAnchor0);
      
      timeTableXYDataset0.setXPosition(timePeriodAnchor0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-3196));
      assertEquals(0.0, double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      assertFalse(number0.equals((Object)double0));
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
      assertEquals(Double.NaN, number1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(number1);
      assertTrue(number1.equals((Object)number0));
      assertFalse(number1.equals((Object)double0));
      
      // Undeclared exception!
      try { 
        Range.scale((Range) null, (-3196));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>(1);
      assertEquals("[]", vector0.toString());
      assertEquals(1, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, false);
      assertEquals("[]", vector0.toString());
      assertEquals(1, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNull(range0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      TimePeriodAnchor timePeriodAnchor0 = timeTableXYDataset0.getXPosition();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      assertNotNull(timePeriodAnchor0);
      
      timeTableXYDataset0.setXPosition(timePeriodAnchor0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-3196));
      assertEquals(0.0, double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Double double1 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1638.826790503), (-1.0));
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertEquals((-1638.826790503), powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(powerFunction2D0, (-3196), 99, 1206, double1);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      timeTableXYDataset0.clear();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1351, "");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1351, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1351,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1351, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1351,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(number0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.validateObject();
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(range1);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("");
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range2);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) linkedList0, range0, true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNull(range3);
      assertFalse(linkedList0.contains(""));
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) "");
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(number0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      double[][] doubleArray1 = new double[0][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, doubleArray1.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 3);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(pieDataset0);
      assertEquals(0, doubleArray1.length);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) 0.0, (KeyedValues) pieDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(categoryDataset0);
      assertEquals(0, doubleArray1.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(range0);
      assertEquals(0, doubleArray1.length);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset((Connection) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1L), (-1L));
      assertEquals((-1L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1L), simpleTimePeriod0.getStartMillis());
      assertNotNull(simpleTimePeriod0);
      
      Date date0 = simpleTimePeriod0.getStart();
      assertEquals((-1L), simpleTimePeriod0.getEndMillis());
      assertEquals((-1L), simpleTimePeriod0.getStartMillis());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertNotNull(date0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, false);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(jDBCPieDataset0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(number0);
      
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray1.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      linkedList0.push(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      CategoryDataset categoryDataset0 = null;
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Millisecond millisecond0 = new Millisecond();
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertNotNull(millisecond0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 999);
      assertNotNull(defaultPieDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) mockDate0, (KeyedValues) defaultPieDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(defaultCategoryDataset0);
      
      defaultPieDataset0.validateObject();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(46, "The 'seriesKey' cannot be null.");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("The 'seriesKey' cannot be null.", simpleTimeZone0.getID());
      assertEquals(46, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=The 'seriesKey' cannot be null.,offset=46,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = millisecond0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(1392409281320L, long0);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("The 'seriesKey' cannot be null.", simpleTimeZone0.getID());
      assertEquals(46, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=The 'seriesKey' cannot be null.,offset=46,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=The 'seriesKey' cannot be null.,offset=46,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The 'seriesKey' cannot be null.";
      stringArray0[1] = "The 'seriesKey' cannot be null.";
      stringArray0[2] = "The 'seriesKey' cannot be null.";
      stringArray0[3] = "The 'seriesKey' cannot be null.";
      stringArray0[4] = "The 'seriesKey' cannot be null.";
      stringArray0[5] = "The 'seriesKey' cannot be null.";
      stringArray0[6] = "E.cX?bFu~pP*Oq.a/p";
      stringArray0[7] = "The 'seriesKey' cannot be null.";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, stringArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) "", 734.90549);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      List list0 = defaultStatisticalCategoryDataset0.getRowKeys();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(false);
      assertNull(range0);
      
      Hour hour0 = Hour.parseHour("");
      assertNull(hour0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "", (double) 0, 23);
      assertNotNull(pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertFalse(boolean0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertEquals(734.90549, double0, 0.01);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("", "Null 'seriesKey' argument.", doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotNull(range1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(number0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-31));
      assertEquals((byte) (-31), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((byte) (-31)));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range0);
      assertTrue(arrayList0.contains((byte) (-31)));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range1);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) byte0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(pieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) byte0, Double.POSITIVE_INFINITY, (int) (byte) (-31));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(pieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(number0);
      
      MockDate mockDate0 = new MockDate(2827, (-373), 2145704456, 2146748504, 2145704456);
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertEquals("Mon Oct 06 20:56:00 GMT 6128414", mockDate0.toString());
      assertEquals(10, month0.getMonth());
      assertEquals(73540978L, month0.getSerialIndex());
      assertEquals(193331923361760000L, month0.getLastMillisecond());
      assertEquals(6128414, month0.getYearValue());
      assertEquals(193331923361760000L, month0.getFirstMillisecond());
      assertNotNull(month0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, 1, (-373));
      assertEquals((-373), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, (Comparable) mockDate0);
      assertEquals("Mon Oct 06 20:56:00 GMT 6128414", mockDate0.toString());
      assertEquals((-373), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "3~ICM_JBV9E?fbjGM", (double) (-373));
      assertEquals("Mon Oct 06 20:56:00 GMT 6128414", mockDate0.toString());
      assertEquals((-373), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) month0, (KeyedValues) pieDataset1);
      assertEquals("Mon Oct 06 20:56:00 GMT 6128414", mockDate0.toString());
      assertEquals(10, month0.getMonth());
      assertEquals(73540978L, month0.getSerialIndex());
      assertEquals(193331923361760000L, month0.getLastMillisecond());
      assertEquals(6128414, month0.getYearValue());
      assertEquals(193331923361760000L, month0.getFirstMillisecond());
      assertEquals((-373), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(categoryDataset0);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, false);
      assertEquals("Mon Oct 06 20:56:00 GMT 6128414", mockDate0.toString());
      assertEquals(10, month0.getMonth());
      assertEquals(73540978L, month0.getSerialIndex());
      assertEquals(193331923361760000L, month0.getLastMillisecond());
      assertEquals(6128414, month0.getYearValue());
      assertEquals(193331923361760000L, month0.getFirstMillisecond());
      assertEquals((-373), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, linkedList0.size());
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNull(range0);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      assertFalse(stack0.contains((-1.0)));
      
      Double double1 = new Double(2145704456);
      assertEquals(2.145704456E9, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double1);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[2.145704456E9]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(stack0.contains(double1));
      assertFalse(stack0.contains((-1.0)));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList0, false);
      assertEquals(0, linkedList0.size());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range2.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertNotNull(range2);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotSame(range3, range2);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) null, 0.5, 1206);
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Number[][] numberArray0 = new Number[4][5];
      Number[] numberArray1 = new Number[8];
      Float float0 = new Float(0.5);
      assertEquals(0.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      numberArray1[0] = (Number) float0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      numberArray1[1] = (Number) bigInteger0;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[2] = (Number) integer0;
      Integer integer1 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      numberArray1[3] = (Number) integer1;
      Double double1 = new Double(999.0);
      assertEquals(999.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      numberArray1[4] = (Number) double1;
      Integer integer2 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      numberArray1[5] = (Number) integer2;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getStartY(2781, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2781, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte0);
      assertNotNull(byte0);
      
      TimeSeries timeSeries0 = new TimeSeries(byte0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      timeSeries0.removeAgedItems(12L, false);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      assertEquals(Double.NaN, number0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, (byte) (-70));
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-70), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-2025.3461), (-2025.3461));
      assertEquals((-2025.3461), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-2025.3461), lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      ArrayList<TimePeriodValuesCollection> arrayList0 = new ArrayList<TimePeriodValuesCollection>(1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String[] stringArray0 = new String[5];
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) stringArray0, (Comparable[]) stringArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(true);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      
      categoryTableXYDataset1.removeChangeListener(intervalXYDelegate0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      categoryTableXYDataset1.add(Double.NaN, 570.5, "V}RQh{fQ+Y*<v$3/");
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      Integer integer0 = new Integer((-1783));
      assertEquals((-1783), (int)integer0);
      assertNotNull(integer0);
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      
      boolean boolean0 = linkedList0.add(categoryTableXYDataset1);
      assertTrue(boolean0);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      assertTrue(linkedList0.contains(categoryTableXYDataset1));
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertNull(range1);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(number0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      String string0 = ".";
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(".", ".", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray1.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      linkedList0.push(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset(".", ".", doubleArray1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotNull(categoryDataset1);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(1, doubleArray1.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset1);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotNull(range0);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(1, doubleArray1.length);
      
      boolean boolean0 = true;
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(Double.NEGATIVE_INFINITY, number1);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotNull(number1);
      assertTrue(categoryDataset0.equals((Object)categoryDataset1));
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) ".");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>(1);
      assertEquals(1, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, false);
      assertEquals(1, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNull(range0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      TimePeriodAnchor timePeriodAnchor0 = timeTableXYDataset0.getXPosition();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      assertNotNull(timePeriodAnchor0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      defaultMultiValueCategoryDataset0.addChangeListener(intervalXYDelegate0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      
      timeTableXYDataset0.setXPosition(timePeriodAnchor0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-3196));
      assertEquals(0.0, double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      assertFalse(number0.equals((Object)double0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1612, 4);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1612, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(4, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 5, 6);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1612, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(4, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(5, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(6, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset1);
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(slidingGanttCategoryDataset1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1612, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(4, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(5, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(6, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      assertNull(range1);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(timeTableXYDataset0);
      assertEquals(Double.NaN, number1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(number1);
      assertFalse(number1.equals((Object)double0));
      assertTrue(number1.equals((Object)number0));
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1612, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(4, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(5, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(6, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      assertNull(range2);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      categoryTableXYDataset0.add(1088.564, (-1.0), "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Short) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1088.564, range0.getCentralValue(), 0.01);
      assertEquals(1088.564, range0.getUpperBound(), 0.01);
      assertEquals(1088.564, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(number0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      byte byte0 = (byte) (-31);
      Byte byte1 = new Byte((byte) (-31));
      assertEquals((byte) (-31), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-31));
      assertEquals((byte) (-31), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      boolean boolean0 = arrayList0.add(byte2);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(arrayList0.contains((byte) (-31)));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range0);
      assertTrue(arrayList0.contains((byte) (-31)));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range1);
      
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset((Object[][][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(false);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      
      categoryTableXYDataset1.removeChangeListener(intervalXYDelegate0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      categoryTableXYDataset1.add(Double.NaN, 570.5, "V}RQh{fQ+Y*<v$3/");
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      Integer integer0 = new Integer((-1783));
      assertEquals((-1783), (int)integer0);
      assertNotNull(integer0);
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(categoryTableXYDataset1));
      
      boolean boolean0 = linkedList0.add(categoryTableXYDataset1);
      assertTrue(boolean0);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      assertTrue(linkedList0.contains(categoryTableXYDataset1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.CategoryTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(true);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      
      categoryTableXYDataset1.removeChangeListener(intervalXYDelegate0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      categoryTableXYDataset1.add(Double.NaN, 570.5, "V}RQh{fQ+Y*<v$3/");
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      Integer integer0 = new Integer((-1783));
      assertEquals((-1783), (int)integer0);
      assertNotNull(integer0);
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      
      boolean boolean0 = linkedList0.add(categoryTableXYDataset1);
      assertTrue(boolean0);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1, linkedList0.size());
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertTrue(linkedList0.contains(categoryTableXYDataset1));
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.CategoryTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(number0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 181.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2271.8544);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      double[][] doubleArray1 = new double[2][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray1.length);
      
      Vector<CategoryTableXYDataset> vector0 = new Vector<CategoryTableXYDataset>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      assertFalse(vector0.contains(categoryTableXYDataset0));
      
      boolean boolean0 = vector0.add(categoryTableXYDataset0);
      assertTrue(boolean0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains(categoryTableXYDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) vector0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) vectorSeriesCollection0, true);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(3646.86, 254.908547);
      assertEquals(3646.86, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(254.908547, lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      ArrayList<TimePeriodValuesCollection> arrayList0 = new ArrayList<TimePeriodValuesCollection>(1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>(1);
      assertEquals(1, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, false);
      assertEquals(1, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNull(range0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      TimePeriodAnchor timePeriodAnchor0 = timeTableXYDataset0.getXPosition();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      assertNotNull(timePeriodAnchor0);
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-3196));
      assertEquals(0.0, double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      assertFalse(number0.equals((Object)double0));
      
      Double double1 = (Double)DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
      assertEquals(Double.NaN, (double)double1, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(double1);
      assertEquals((double)double1, (double)number0, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(defaultMultiValueCategoryDataset0, false);
      assertNull(range2);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1, (-3196));
      assertEquals((-3196.0), powerFunction2D0.getB(), 0.01);
      assertEquals(1.0, powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, Double.NaN, 698.8875531819, 0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(number0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 181.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2271.8544);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      assertEquals(0L, simpleTimePeriod0.getStartMillis());
      assertEquals(0L, simpleTimePeriod0.getEndMillis());
      assertNotNull(simpleTimePeriod0);
      
      TimeSeries timeSeries0 = new TimeSeries(Double.NEGATIVE_INFINITY);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(simpleTimePeriod0);
      assertEquals(0L, simpleTimePeriod0.getStartMillis());
      assertEquals(0L, simpleTimePeriod0.getEndMillis());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      assertEquals(0.0, number1);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(number1);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(606, 606);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(605, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(Double.NaN, number0);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(605, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, 0.0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range0);
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      TimeSeries timeSeries0 = new TimeSeries(minute0, "-P}yt", "SeriesChangeType.REMOVE");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals("SeriesChangeType.REMOVE", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("-P}yt", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals("SeriesChangeType.REMOVE", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("-P}yt", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(timeSeriesCollection0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1016L, 1016L);
      assertEquals(1016L, simpleTimePeriod0.getEndMillis());
      assertEquals(1016L, simpleTimePeriod0.getStartMillis());
      assertNotNull(simpleTimePeriod0);
      
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      assertEquals(1016L, simpleTimePeriod0.getEndMillis());
      assertEquals(1016L, simpleTimePeriod0.getStartMillis());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(1016L, simpleTimePeriod0.getEndMillis());
      assertEquals(1016L, simpleTimePeriod0.getStartMillis());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertTrue(boolean0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) null, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(true);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      
      categoryTableXYDataset1.removeChangeListener(intervalXYDelegate0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      categoryTableXYDataset1.add(Double.NaN, 570.5, "VRQh{fQ+Y*<v$3/");
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      double double1 = new Integer((-1783));
      assertEquals((-1783), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNull(range0);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertFalse(linkedList0.contains(categoryTableXYDataset0));
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(number0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 181.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2271.8544);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-2025.3461), (-2025.3461));
      assertEquals((-2025.3461), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-2025.3461), lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      MockDate mockDate0 = new MockDate(2277, 2277, 2277);
      assertNotNull(mockDate0);
      
      LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, true);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, linkedList0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(number0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 181.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2271.8544);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      assertEquals(0L, simpleTimePeriod0.getEndMillis());
      assertEquals(0L, simpleTimePeriod0.getStartMillis());
      assertNotNull(simpleTimePeriod0);
      
      TimeSeries timeSeries0 = new TimeSeries((-2271.8544), "", "");
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNotNull(timeSeries0);
      
      boolean boolean0 = categoryTableXYDataset0.equals("");
      assertFalse(boolean0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      double double0 = categoryTableXYDataset0.getDomainUpperBound(true);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset1);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotNull(intervalXYDelegate0);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, 279);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute();
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection1);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, 1.5);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(1.5, range0.getCentralValue(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(1.5, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(number0);
      
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray1.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray1.length);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset((Connection) null, "Xzk#j/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertEquals(Double.NaN, number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 2592.2463;
      doubleArray1[1] = 2.0;
      doubleArray1[2] = (-582.21836399063);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (-643.3430019428713);
      doubleArray1[5] = 0.8573917235124406;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2592.2463;
      doubleArray2[1] = 0.8573917235124406;
      doubleArray2[2] = 1142.184682;
      doubleArray2[3] = (-2932.0);
      doubleArray2[4] = 2.0;
      doubleArray2[5] = (-582.21836399063);
      doubleArray2[6] = 2.0;
      doubleArray2[7] = 915.57430586968;
      doubleArray2[8] = (-643.3430019428713);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-643.3430019428713);
      doubleArray3[1] = 0.8573917235124406;
      doubleArray3[2] = (-643.3430019428713);
      doubleArray3[3] = 0.8573917235124406;
      doubleArray3[4] = 0.8573917235124406;
      doubleArray3[5] = 915.57430586968;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 2592.2463;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = (-582.21836399063);
      doubleArray4[3] = 0.8573917235124406;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNull(range0);
      
      MockDate mockDate0 = new MockDate((-1932), 876, (-222), (-4736), (-1195), (-4736));
      assertNotNull(mockDate0);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-4736), (-2025.3461));
      assertEquals((-4736.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-2025.3461), lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      MockDate mockDate1 = new MockDate((-2055), 876, 2277);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, false);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, linkedList0, false);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNull(range2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 181.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2271.8544);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      TimeSeries timeSeries0 = new TimeSeries(Double.NEGATIVE_INFINITY);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
      assertEquals(Double.NaN, number0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[1][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Vector<CategoryTableXYDataset> vector0 = new Vector<CategoryTableXYDataset>();
      DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 181.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2271.8544);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      TimeSeries timeSeries0 = new TimeSeries(Double.NEGATIVE_INFINITY);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) null, (Range) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      MatrixSeries matrixSeries0 = new MatrixSeries("mH)[,", 2, 2);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Integer integer0 = new Integer(2);
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      double[][] doubleArray0 = new double[0][6];
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findCumulativeRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainUpperBound(false);
      categoryTableXYDataset0.add(Double.NaN, Double.NaN, "B");
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-2002.8357882233818), (-2002.8357882233818));
      ArrayList<TimePeriodValuesCollection> arrayList0 = new ArrayList<TimePeriodValuesCollection>(1);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(181, 181, minute0);
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 181;
      doubleArray1[1] = (double) 181;
      doubleArray1[2] = (double) 59;
      doubleArray1[3] = (double) 181;
      doubleArray1[4] = (double) 181;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 59;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 181;
      doubleArray2[1] = (double) 59;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 2;
      doubleArray2[7] = (double) 2;
      DatasetUtilities.isEmptyOrNull((XYDataset) dynamicTimeSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 181.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2271.8544);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      TimeSeries timeSeries0 = new TimeSeries(Double.NEGATIVE_INFINITY);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      double[][] doubleArray1 = new double[7][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-2271.8544);
      doubleArray2[1] = (-2271.8544);
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-2271.8544);
      doubleArray2[5] = Double.NEGATIVE_INFINITY;
      doubleArray2[6] = Double.NEGATIVE_INFINITY;
      doubleArray2[7] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, true);
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-2834.247089704106), (-2834.247089704106), "_7O05N-'oN CADcc");
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertEquals((-2834.247089704106), range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-2834.247089704106));
      assertEquals(2834.247089704106, range1.getLength(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, Double.POSITIVE_INFINITY);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 3);
      assertNotSame(pieDataset0, defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(0.8, 0.8, "");
      categoryTableXYDataset0.add(3568.9, 3568.9, "/");
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 2.0);
      assertEquals(3568.9, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>(1);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, false);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      TimePeriodAnchor timePeriodAnchor0 = timeTableXYDataset0.getXPosition();
      timeTableXYDataset0.setXPosition(timePeriodAnchor0);
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-3196));
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter((-1238), (-3196));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Quarter outside valid range.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 1910);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[8][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (-1244));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(185, 185, minute0);
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 185;
      doubleArray1[1] = (double) 185;
      doubleArray1[2] = (double) 59;
      doubleArray1[3] = (double) 185;
      doubleArray1[4] = (double) 185;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 59;
      doubleArray0[0] = doubleArray1;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
      try {
        defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((double[][]) null, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'data' argument.
         //
         verifyException("org.jfree.data.DataUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainUpperBound(false);
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      Millisecond millisecond0 = new Millisecond();
      MockDate mockDate0 = new MockDate();
      SerialDate.createInstance((Date) mockDate0);
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset(false);
      DatasetUtilities.calculateStackTotal(defaultTableXYDataset1, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainUpperBound(true);
      categoryTableXYDataset0.add(2960.7, (-850.73774214696), "Null 'f' argument.");
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 2044);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2044, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ijuvNz";
      stringArray0[1] = "Sb9r9CK4(@$9}c/s$";
      stringArray0[2] = "Null 'f' argument.";
      stringArray0[3] = "5<_K];3@`\"Os9n";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "zo+M=p3R;k&U2qaf316";
      stringArray0[7] = "Requires 'samples' > 1";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 30);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 90);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      categoryTableXYDataset0.getSeriesCount();
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(185, 185, minute0);
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 185;
      doubleArray1[1] = (double) 185;
      doubleArray1[2] = (double) 59;
      doubleArray1[3] = (double) 185;
      doubleArray1[4] = (double) 185;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 59;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 185;
      doubleArray2[1] = (double) 59;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 2;
      doubleArray2[7] = (double) 2;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.general.DatasetGroup", "org.jfree.data.general.DatasetGroup", doubleArray0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      linkedList0.push(defaultBoxAndWhiskerCategoryDataset0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) linkedList0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) list0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.8573917235124406, 0.0);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0, 823L);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 0.0, 0.8573917235124406, 0, simpleTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      Date date0 = serialDate0.toDate();
      Millisecond millisecond0 = new Millisecond(date0);
      millisecond0.previous();
      Millisecond millisecond1 = new Millisecond();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[0][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Vector<CategoryTableXYDataset> vector0 = new Vector<CategoryTableXYDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, false);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 999);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      linkedList0.offerFirst(defaultBoxAndWhiskerCategoryDataset0);
      linkedList0.push(defaultBoxAndWhiskerCategoryDataset0);
      categoryTableXYDataset0.add(5524.28, (-2.147483648E9), " /yy;");
      double double0 = new Float((-2.147483648E9));
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals((-2.147483648E9), number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals((-2.147483648E9), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 181.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2271.8544);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      TimeSeries timeSeries0 = new TimeSeries(Double.NEGATIVE_INFINITY);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      double[][] doubleArray1 = new double[7][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-2271.8544);
      doubleArray2[1] = (-2271.8544);
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-2271.8544);
      doubleArray2[5] = Double.NEGATIVE_INFINITY;
      doubleArray2[6] = Double.NEGATIVE_INFINITY;
      doubleArray2[7] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, true);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, 0.0);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection1);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(minute0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainUpperBound(false);
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      Millisecond millisecond0 = new Millisecond();
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) millisecond0, (double) 999, (-3757));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      XYDataset xYDataset0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = ":#_v#}YwR~313 6!8&";
      stringArray0[2] = "6]25Yg z%`>";
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetUtilities.findRangeBounds((XYDataset) defaultIntervalXYDataset0);
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[][] doubleArray2 = new double[5][7];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
      try {
        defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset: the number of series in the start value dataset does not match the number of series in the end value dataset.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = 181.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-2271.8544);
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = Double.POSITIVE_INFINITY;
      doubleArray1[6] = Double.POSITIVE_INFINITY;
      doubleArray1[7] = (-1.1952570737145785);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "^FzwoeT", doubleArray0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) null, range0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1L), (-1L));
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      simpleTimePeriod0.getStart();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) stack0, false);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) stack0, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3200, 1960);
      DatasetUtilities.findCumulativeRangeBounds(slidingGanttCategoryDataset0);
      Number number0 = DatasetUtilities.findMaximumDomainValue(vectorSeriesCollection0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(181, 181, minute0);
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 181;
      doubleArray1[1] = (double) 181;
      doubleArray1[2] = (double) 59;
      doubleArray1[3] = (double) 181;
      doubleArray1[4] = (double) 181;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 59;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 181;
      doubleArray2[1] = (double) 59;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 2;
      doubleArray2[7] = (double) 2;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.general.DatasetGroup", "org.jfree.data.general.DatasetGroup", doubleArray0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) linkedList0, range0, true);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(421.5, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(316, "org.jfree.data.function.LineFunction2D");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("org.jfree.data.function.LineFunction2D");
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      Comparable<Short>[] comparableArray0 = (Comparable<Short>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = 181.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-2271.8544);
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = Double.POSITIVE_INFINITY;
      doubleArray1[6] = Double.POSITIVE_INFINITY;
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[5] = 181.0;
      doubleArray2[6] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      timeTableXYDataset0.clear();
      LineFunction2D lineFunction2D0 = new LineFunction2D((-2025.3461), (-1450.817651513));
      MockDate mockDate0 = new MockDate(44, 3732, 1351);
      Year year0 = new Year(mockDate0);
      RegularTimePeriod regularTimePeriod0 = year0.next();
      Class<DefaultHighLowDataset> class0 = DefaultHighLowDataset.class;
      TimeZone timeZone0 = TimeZone.getDefault();
      RegularTimePeriod.createInstance(class0, mockDate0, timeZone0);
      mockDate0.clone();
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, (-1847.7632665227206), (-1847.7632665227206), 0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(181, 181, minute0);
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 181;
      doubleArray1[1] = (double) 181;
      doubleArray1[2] = (double) 59;
      doubleArray1[3] = (double) 181;
      doubleArray1[4] = (double) 181;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 59;
      doubleArray0[0] = doubleArray1;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 181.0, (-275.8227880819752), 0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("Null 'rowKeys' argument.");
      Locale locale0 = Locale.KOREAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainUpperBound(false);
      DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      categoryTableXYDataset0.add(Double.NaN, 0.8, "");
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-4406));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1L), (-1L));
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      timeSeries0.setRangeDescription("+@1CLy");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1L), (-1L));
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 0, 0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("Null 'rowKeys' argument.");
      Locale locale0 = Locale.ITALIAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 999);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) mockDate0, (KeyedValues) pieDataset0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset((Connection) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) defaultPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) defaultPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray3[5] = Double.NEGATIVE_INFINITY;
      doubleArray3[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = Double.NEGATIVE_INFINITY;
      doubleArray4[2] = Double.NEGATIVE_INFINITY;
      doubleArray4[3] = Double.NEGATIVE_INFINITY;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = Double.NEGATIVE_INFINITY;
      doubleArray4[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      int int0 = (-708);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-708), 868);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultStatisticalCategoryDataset0);
      timePeriodValuesCollection0.seriesChanged(seriesChangeEvent0);
      boolean boolean0 = false;
      DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, false);
      Minute.parseMinute("OaKFdg-$zp");
      Second second0 = null;
      try {
        second0 = new Second(1, (Minute) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'minute' argument.
         //
         verifyException("org.jfree.data.time.Second", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      int int0 = 4600;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(taskSeriesCollection0, 4600, 4600);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      Date date0 = null;
      String string0 = "F*Ces%JZH4aO";
      TimeZone timeZone0 = TimeZone.getTimeZone("F*Ces%JZH4aO");
      Hour hour0 = null;
      try {
        hour0 = new Hour((Date) null, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
         verifyException("org.jfree.data.time.Hour", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 4561.82;
      doubleArray1[1] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = 4561.82;
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = 4561.82;
      doubleArray2[5] = 4561.82;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = 4561.82;
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = 4561.82;
      doubleArray4[4] = 4561.82;
      doubleArray4[5] = 4561.82;
      doubleArray4[6] = 4561.82;
      doubleArray4[7] = 4561.82;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 4561.82;
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = 4561.82;
      doubleArray5[3] = (-1.0);
      doubleArray5[4] = 4561.82;
      doubleArray5[5] = Double.POSITIVE_INFINITY;
      doubleArray5[6] = (-1.0);
      doubleArray0[4] = doubleArray5;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 0, 0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, 0);
      Year year0 = new Year();
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter(0, year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Quarter outside valid range.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 497.2289190759163;
      doubleArray1[1] = 425.6990104135;
      doubleArray1[2] = 870.0;
      doubleArray1[3] = (-1898.44687641482);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 123.0835606479457;
      doubleArray1[6] = (-4437.0);
      doubleArray1[7] = (-134.879096);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 123.0835606479457;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 123.0835606479457;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-1898.44687641482);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-1898.44687641482);
      doubleArray3[3] = 497.2289190759163;
      doubleArray3[4] = 497.2289190759163;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = (-3024.8485091579187);
      doubleArray3[7] = 870.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (-3024.8485091579187);
      doubleArray4[1] = (-3024.8485091579187);
      doubleArray4[2] = (-4437.0);
      doubleArray4[3] = (-3024.8485091579187);
      doubleArray4[4] = 870.0;
      doubleArray4[5] = (-1898.44687641482);
      doubleArray4[6] = 425.6990104135;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (-134.879096);
      doubleArray5[2] = 870.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = 123.0835606479457;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = 425.6990104135;
      doubleArray7[1] = (-134.879096);
      doubleArray7[2] = 870.0;
      doubleArray7[3] = 123.0835606479457;
      doubleArray7[4] = 497.2289190759163;
      doubleArray7[5] = 0.0;
      doubleArray7[6] = 870.0;
      doubleArray7[7] = (-4437.0);
      doubleArray7[8] = 425.6990104135;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      doubleArray8[0] = (-4437.0);
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("eq:qaL\u001Adhl#iX>", "q", doubleArray0);
      Minute minute0 = new Minute();
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) minute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-2481L));
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(fixedMillisecond0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-2481L);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) (-2481L);
      doubleArray1[3] = (double) (-2481L);
      doubleArray1[4] = (double) (-2481L);
      doubleArray1[5] = (double) (-2481L);
      doubleArray1[6] = (double) (-2481L);
      doubleArray1[7] = (double) (-2481L);
      doubleArray1[8] = (double) (-2481L);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) (-2481L);
      doubleArray2[1] = (double) (-2481L);
      doubleArray2[2] = (double) (-2481L);
      doubleArray2[3] = Double.NaN;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 742.47238294;
      doubleArray2[7] = (double) (-2481L);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 742.47238294;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (-531.1);
      doubleArray4[1] = 742.47238294;
      doubleArray4[2] = 742.47238294;
      doubleArray4[3] = (double) (-2481L);
      doubleArray4[4] = Double.NaN;
      doubleArray4[5] = 742.47238294;
      doubleArray4[6] = (double) (-2481L);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 742.47238294;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = (-531.1);
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 742.47238294;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 0.0;
      doubleArray6[6] = 0.0;
      doubleArray6[7] = (double) (-2481L);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = Double.NaN;
      doubleArray7[1] = (double) (-2481L);
      doubleArray7[2] = (-531.1);
      doubleArray7[3] = Double.NaN;
      doubleArray7[4] = 0.0;
      doubleArray7[5] = Double.NaN;
      doubleArray7[6] = Double.NaN;
      doubleArray7[7] = 0.0;
      doubleArray7[8] = 742.47238294;
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetGroup datasetGroup0 = new DatasetGroup("&oh0");
      datasetGroup0.clone();
      defaultKeyedValues2DDataset0.setGroup(datasetGroup0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      int int0 = (-1713);
      int int1 = 0;
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("&oh0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-1L), (-1L));
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, 0.0);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0, 823L);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 0.0, 0.0, 0, simpleTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      Comparable<DefaultHighLowDataset>[] comparableArray0 = (Comparable<DefaultHighLowDataset>[]) Array.newInstance(Comparable.class, 7);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      try { 
        mockSimpleDateFormat0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      categoryTableXYDataset0.validateObject();
      categoryTableXYDataset0.getSeriesCount();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      boolean boolean0 = true;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      double double0 = (-944.40116558303);
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.setIntervalPositionFactor((-944.40116558303));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument 'd' outside valid range.
         //
         verifyException("org.jfree.data.xy.IntervalXYDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-2022.0);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 810.95430626;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.5;
      doubleArray1[5] = (-623.484905844784);
      doubleArray1[6] = 546.3482529292;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 810.95430626;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 546.3482529292;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 1.5;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 1.5;
      doubleArray4[1] = (-2022.0);
      doubleArray4[2] = 1.5;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 546.3482529292;
      doubleArray4[5] = 1757.99700877;
      doubleArray4[6] = 1.5;
      doubleArray4[7] = 1.5;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 1757.99700877;
      doubleArray5[3] = 0.0;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "%cS<Ko5~% RuUjyY3_", doubleArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      int int0 = 3580;
      int int1 = (-1437);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 3580, (-1437));
      int int2 = 1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      String string0 = ":#_v#}YwR~313 6!8&";
      stringArray0[1] = ":#_v#}YwR~313 6!8&";
      stringArray0[2] = "6]25Yg z%`>";
      Number[][] numberArray0 = new Number[9][3];
      Number[] numberArray1 = new Number[4];
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }
}
