/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:08:50 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.event.HierarchyBoundsListener;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.text.ParseException;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoField;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.EventListener;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.plaf.metal.MetalRootPaneUI;
import javax.swing.plaf.synth.SynthSeparatorUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.event.DatasetChangeInfo;
import org.jfree.chart.util.SortOrder;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryDatasetSelectionState;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.DatasetChangeEvent;
import org.jfree.data.event.DatasetChangeListener;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultHeatMapDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.BoxAndWhiskerItem;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetSelectionState;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeries;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      double[] doubleArray0 = new double[1];
      boolean boolean0 = false;
      double[][] doubleArray1 = new double[4][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-21.0);
      doubleArray2[1] = (-547.73610102);
      doubleArray2[2] = (-150.2);
      doubleArray2[3] = 1.0;
      doubleArray2[4] = (-1190.949998);
      doubleArray2[5] = (-1864.2675410045595);
      doubleArray2[6] = 1877.2231;
      doubleArray2[7] = 4.0;
      doubleArray1[3] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("'#071rAM!Oi!OWh`", "'#071rAM!Oi!OWh`", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray1.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 52, (-29));
      assertEquals((-29), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(52, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      assertEquals(4, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) (-21.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Size: 8
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      defaultTableXYDataset0.removeAllSeries();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0, false);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNull(range1);
      
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 572.67;
      doubleArray1[1] = 1.5;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = 271.00738;
      doubleArray1[5] = (-740.188);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 271.00738;
      doubleArray2[1] = (-740.188);
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = 1.5;
      doubleArray2[4] = 271.00738;
      doubleArray2[5] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-67.0566171653);
      doubleArray3[1] = 1.5;
      doubleArray3[2] = (-740.188);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 1.5;
      doubleArray4[1] = 1.5;
      doubleArray4[2] = (-740.188);
      doubleArray4[3] = Double.NaN;
      doubleArray4[4] = (-740.188);
      doubleArray4[5] = (-740.188);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = Double.NaN;
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = Double.NaN;
      doubleArray5[3] = (-1.0);
      doubleArray5[4] = 572.67;
      doubleArray5[5] = 572.67;
      doubleArray5[6] = 2224.6879378;
      doubleArray5[7] = 572.67;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = (-67.0566171653);
      doubleArray6[1] = Double.NaN;
      doubleArray6[2] = 572.67;
      doubleArray6[3] = (-1.0);
      doubleArray6[4] = (-1.0);
      doubleArray6[5] = (-740.188);
      doubleArray6[6] = (-67.0566171653);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = 271.00738;
      doubleArray7[1] = (-1.0);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Requires 'xSamples' > 0", "7", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(8, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertEquals(2964.8759378, range2.getLength(), 0.01);
      assertEquals((-740.188), range2.getLowerBound(), 0.01);
      assertEquals(742.2499688999999, range2.getCentralValue(), 0.01);
      assertEquals(2224.6879378, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
      assertEquals(8, doubleArray0.length);
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Number[][] numberArray0 = new Number[9][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, numberArray0.length);
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      Second second0 = new Second(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(999L, second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(0L, second0.getFirstMillisecond());
      assertNotNull(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Date[] dateArray0 = new Date[8];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      dateArray0[7] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(second0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(999L, second0.getLastMillisecond());
      assertEquals(0, second0.getSecond());
      assertEquals(0L, second0.getFirstMillisecond());
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(8, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("(lMb", "(lMb", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-569));
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-569), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      assertEquals(2, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "(lMb", (double) (-569), (-569));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Category 3", "<0<EY~zT(Z;;>`J", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 42);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(42, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "<0<EY~zT(Z;;>`J", (double) 42, 42);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 42, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Byte byte0 = new Byte((byte)3);
      assertNotNull(byte0);
      assertEquals((byte)3, (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte)3));
      
      ArrayList<Byte> arrayList1 = new ArrayList<Byte>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains((byte)3));
      
      Byte byte1 = new Byte((byte)33);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)33, (byte)byte1);
      
      boolean boolean0 = arrayList1.add(byte1);
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(boolean0);
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList1.contains(byte1));
      assertFalse(arrayList1.contains((byte)3));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset1);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      
      int int0 = defaultStatisticalCategoryDataset1.getColumnIndex(byte0);
      assertFalse(byte0.equals((Object)byte1));
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertEquals((-1), int0);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset1.add((Number) byte1, (Number) byte1, (Comparable) byte1, (Comparable) byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset1, (List) arrayList1, true);
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertEquals(66.0, range0.getLength(), 0.01);
      assertEquals(66.0, range0.getUpperBound(), 0.01);
      assertEquals(33.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotSame(arrayList1, arrayList0);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(arrayList1.contains(byte1));
      assertFalse(arrayList1.contains((byte)3));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset1, (Comparable) byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Byte byte0 = new Byte((byte)52);
      assertNotNull(byte0);
      assertEquals((byte)52, (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      MockDate mockDate0 = new MockDate((byte)52, 1870, 31);
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-238), "Z8b");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-238), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Z8b,offset=-238,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Z8b", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = new Locale("Khs/K^^i'M{,~N]4t", "Z8b", "@/6nMD");
      assertEquals("Z8B", locale0.getCountry());
      assertEquals("@/6nMD", locale0.getVariant());
      assertEquals("khs/k^^i'm{,~n]4t", locale0.getLanguage());
      assertEquals("khs/k^^i'm{,~n]4t_Z8B_@/6nMD", locale0.toString());
      assertNotNull(locale0);
      
      Year year0 = new Year(mockDate0, simpleTimeZone0, locale0);
      assertEquals("Thu Dec 01 00:00:00 GMT 2107", mockDate0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-238), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Z8b,offset=-238,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Z8b", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Z8B", locale0.getCountry());
      assertEquals("@/6nMD", locale0.getVariant());
      assertEquals("khs/k^^i'm{,~n]4t", locale0.getLanguage());
      assertEquals("khs/k^^i'm{,~n]4t_Z8B_@/6nMD", locale0.toString());
      assertEquals("2107", year0.toString());
      assertEquals(4352140800000L, year0.getFirstMillisecond());
      assertEquals(2107, year0.getYear());
      assertEquals(4352140800000L, year0.getLastMillisecond());
      assertEquals(2107L, year0.getSerialIndex());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Week week0 = new Week((byte)52, year0);
      assertEquals("Thu Dec 01 00:00:00 GMT 2107", mockDate0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-238), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Z8b,offset=-238,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Z8b", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Z8B", locale0.getCountry());
      assertEquals("@/6nMD", locale0.getVariant());
      assertEquals("khs/k^^i'm{,~n]4t", locale0.getLanguage());
      assertEquals("khs/k^^i'm{,~n]4t_Z8B_@/6nMD", locale0.toString());
      assertEquals("2107", year0.toString());
      assertEquals(4352140800000L, year0.getFirstMillisecond());
      assertEquals(2107, year0.getYear());
      assertEquals(4352140800000L, year0.getLastMillisecond());
      assertEquals(2107L, year0.getSerialIndex());
      assertEquals(2107, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(52, week0.getWeek());
      assertEquals(111723L, week0.getSerialIndex());
      assertNotNull(week0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) week0, (Comparable) "Z8b");
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("Thu Dec 01 00:00:00 GMT 2107", mockDate0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-238), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Z8b,offset=-238,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Z8b", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Z8B", locale0.getCountry());
      assertEquals("@/6nMD", locale0.getVariant());
      assertEquals("khs/k^^i'm{,~n]4t", locale0.getLanguage());
      assertEquals("khs/k^^i'm{,~n]4t_Z8B_@/6nMD", locale0.toString());
      assertEquals("2107", year0.toString());
      assertEquals(4352140800000L, year0.getFirstMillisecond());
      assertEquals(2107, year0.getYear());
      assertEquals(4352140800000L, year0.getLastMillisecond());
      assertEquals(2107L, year0.getSerialIndex());
      assertEquals(2107, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(52, week0.getWeek());
      assertEquals(111723L, week0.getSerialIndex());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) byte0, (Comparable) byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(byte0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, false);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(52.0, range0.getUpperBound(), 0.01);
      assertEquals(52.0, range0.getCentralValue(), 0.01);
      assertEquals(52.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertTrue(arrayList0.contains(byte0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      String string0 = hour0.toString();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(string0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("[20,14/2/2014]", string0);
      
      timeTableXYDataset0.add((TimePeriod) hour0, (Number) 0, "[20,14/2/2014]", true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<Long> arrayList1 = new ArrayList<Long>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      boolean boolean0 = arrayList1.remove((Object) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(boolean0);
      
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      boolean boolean1 = arrayList1.add(long0);
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList1.contains(long0));
      
      Range range0 = new Range(0, 0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      LinkedList<TimeSeriesCollection> linkedList0 = new LinkedList<TimeSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) arrayList1, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[3];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultHighLowDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(number0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.39240928132E12, number0);
      assertEquals(1, dateArray0.length);
      assertEquals(3, doubleArray0.length);
      
      Number[][] numberArray0 = new Number[6][4];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = number0;
      numberArray1[1] = number0;
      numberArray1[2] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = number0;
      numberArray2[1] = number0;
      numberArray2[2] = number0;
      numberArray2[3] = number0;
      numberArray2[4] = number0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[5];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = number0;
      numberArray3[1] = number0;
      numberArray3[2] = number0;
      numberArray3[3] = number0;
      numberArray3[4] = number0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[5];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[0] = number0;
      numberArray4[1] = number0;
      numberArray4[2] = number0;
      numberArray4[3] = number0;
      numberArray4[4] = number0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[6];
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray2));
      
      numberArray5[0] = number0;
      numberArray5[1] = number0;
      numberArray5[2] = number0;
      numberArray5[3] = number0;
      numberArray5[4] = number0;
      numberArray5[5] = number0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[7];
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray1));
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray2));
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      numberArray6[0] = (Number) integer0;
      numberArray6[1] = number0;
      numberArray6[2] = number0;
      TimeSeries timeSeries0 = new TimeSeries(dateArray0[0], (String) null, ";1~M,");
      assertEquals(";1~M,", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      assertEquals(1, dateArray0.length);
      
      Second second0 = new Second(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertNotNull(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Number number1 = timeSeries0.getValue((RegularTimePeriod) second0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(";1~M,", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertNull(number1);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1, dateArray0.length);
      
      numberArray6[3] = null;
      numberArray6[4] = number0;
      numberArray6[5] = number0;
      numberArray6[6] = number0;
      numberArray0[5] = numberArray6;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "@~]<o`:", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(400.0, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928092E12, range0.getLength(), 0.01);
      assertEquals(6.9620464086E11, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(6, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Byte byte0 = new Byte((byte)52);
      assertNotNull(byte0);
      assertEquals((byte)52, (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) byte0, (Comparable) byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(byte0));
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultBoxAndWhiskerCategoryDataset0, tableOrder0, (byte)52);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(52, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      assertNotNull(datasetChangeInfo0);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(tableOrder0, jDBCPieDataset0, datasetChangeInfo0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(datasetChangeEvent0);
      
      categoryToPieDataset0.datasetChanged(datasetChangeEvent0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(52, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 52, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(4, 1);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(4.0, powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.POSITIVE_INFINITY, 1323.714468);
      assertEquals(Double.POSITIVE_INFINITY, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1323.714468, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, Double.NaN, 0.8, 4, quarter0);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(Double.POSITIVE_INFINITY, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1323.714468, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(Double.POSITIVE_INFINITY, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1323.714468, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNull(range0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Byte byte0 = new Byte((byte)15);
      assertNotNull(byte0);
      assertEquals((byte)15, (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) byte0, (Comparable) byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(byte0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(15.0, range0.getLowerBound(), 0.01);
      assertEquals(15.0, range0.getUpperBound(), 0.01);
      assertEquals(15.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertTrue(arrayList0.contains(byte0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-127));
      assertNotNull(byte0);
      assertEquals((byte) (-127), (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      int int0 = defaultStatisticalCategoryDataset0.getColumnIndex(byte0);
      assertEquals((-1), int0);
      
      defaultStatisticalCategoryDataset0.add((Number) byte0, (Number) byte0, (Comparable) byte0, (Comparable) byte0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-254.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-127));
      assertNotNull(byte0);
      assertEquals((byte) (-127), (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      int int0 = defaultStatisticalCategoryDataset0.getColumnIndex(byte0);
      assertEquals((-1), int0);
      
      defaultStatisticalCategoryDataset0.add((Number) byte0, (Number) byte0, (Comparable) byte0, (Comparable) byte0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-254.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(range1);
      
      double[][] doubleArray0 = new double[8][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 551.08638980738;
      doubleArray1[1] = (-769.6269589345678);
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = (-82.809);
      doubleArray1[4] = 234.3;
      doubleArray1[5] = Double.NEGATIVE_INFINITY;
      doubleArray1[6] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = 551.08638980738;
      doubleArray2[3] = 551.08638980738;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      doubleArray3[2] = 234.3;
      doubleArray3[3] = Double.POSITIVE_INFINITY;
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray3[5] = 234.3;
      doubleArray3[6] = 234.3;
      doubleArray3[7] = Double.NEGATIVE_INFINITY;
      doubleArray3[8] = (-769.6269589345678);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray4[1] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-769.6269589345678);
      doubleArray5[1] = 1.0;
      doubleArray5[2] = 234.3;
      doubleArray5[3] = (-82.809);
      doubleArray5[4] = (-769.6269589345678);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = 551.08638980738;
      doubleArray6[1] = (-2133.1363840478);
      doubleArray6[2] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = (-2133.1363840478);
      doubleArray7[1] = 234.3;
      doubleArray7[2] = Double.NEGATIVE_INFINITY;
      doubleArray7[3] = 1.0;
      doubleArray7[4] = 1.0;
      doubleArray7[5] = (-769.6269589345678);
      doubleArray7[6] = (-2133.1363840478);
      doubleArray7[7] = (-82.809);
      doubleArray7[8] = (-2133.1363840478);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = (-2133.1363840478);
      doubleArray8[1] = 234.3;
      doubleArray8[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Z0Rov-Y", "8", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(8, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range2.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Number[][] numberArray0 = new Number[30][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(30, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(30, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(30, numberArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 5);
      assertEquals(30, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(30, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(pieDataset0);
      assertEquals(30, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertEquals(30, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(30, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(boolean0);
      assertEquals(30, numberArray0.length);
      
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 5;
      doubleArray1[1] = (-2878.01457);
      doubleArray1[2] = (double) 5;
      doubleArray1[3] = (double) 5;
      doubleArray1[4] = (double) 5;
      doubleArray1[5] = (double) 5;
      doubleArray1[6] = (double) 5;
      DefaultHighLowDataset defaultHighLowDataset0 = null;
      try {
        defaultHighLowDataset0 = new DefaultHighLowDataset((Comparable) null, dateArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'series' argument.
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-5));
      assertNotNull(byte0);
      assertEquals((byte) (-5), (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) byte0, (Comparable) byte0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, false);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range0);
      assertTrue(arrayList0.contains(byte0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1L, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)42);
      assertNotNull(byte0);
      assertEquals((byte)42, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      Range range0 = new Range(1L, 6.24168763269056);
      assertEquals(6.24168763269056, range0.getUpperBound(), 0.01);
      assertEquals(3.62084381634528, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(5.24168763269056, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(6.24168763269056, range0.getUpperBound(), 0.01);
      assertEquals(3.62084381634528, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(5.24168763269056, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-9999.0), range1.getLowerBound(), 0.01);
      assertEquals((-9999.0), range1.getUpperBound(), 0.01);
      assertEquals((-9999.0), range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(arrayList0.contains(byte0));
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(6.24168763269056, range0.getUpperBound(), 0.01);
      assertEquals(3.62084381634528, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(5.24168763269056, range0.getLength(), 0.01);
      assertEquals((-9999.0), range2.getUpperBound(), 0.01);
      assertEquals((-9999.0), range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-9999.0), range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeTableXYDataset0.add((TimePeriod) millisecond0, (Number) 0, "Nearest", false);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, double0, 0.01);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0, 0);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 0, 999, 854, "Nearest");
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(999.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(854, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNotNull(xYSeries0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(number0);
      assertTrue(number0.equals((Object)double0));
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = 0.0;
      doubleArray2[7] = (-1.0);
      doubleArray2[8] = 0.0;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      int int0 = taskSeriesCollection0.indexOf(0.0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1), int0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      defaultIntervalCategoryDataset0.addChangeListener(xYTaskDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(2, doubleArray0.length);
      
      int int1 = 0;
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(pieDataset0);
      assertEquals(2, doubleArray0.length);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) 0.0, (KeyedValues) pieDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        xYTaskDataset0.getEndY((-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)28);
      assertNotNull(byte0);
      assertEquals((byte)28, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte)28));
      
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (byte)28;
      doubleArray1[1] = (double) (byte)28;
      doubleArray1[2] = (double) (byte)28;
      doubleArray1[3] = (double) (byte)28;
      doubleArray1[4] = (double) (byte)28;
      doubleArray1[5] = (double) (byte)28;
      doubleArray1[6] = (double) (byte)28;
      doubleArray1[7] = (double) (byte)28;
      doubleArray1[8] = (double) (byte)28;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (byte)28;
      doubleArray2[1] = (double) (byte)28;
      doubleArray2[2] = (double) (byte)28;
      doubleArray2[3] = (double) (byte)28;
      doubleArray2[4] = (double) (byte)28;
      doubleArray2[5] = (double) (byte)28;
      doubleArray2[6] = (double) (byte)28;
      doubleArray2[7] = (double) (byte)28;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (byte)28;
      doubleArray3[1] = (double) (byte)28;
      doubleArray3[2] = (double) (byte)28;
      doubleArray3[3] = (double) (byte)28;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) (byte)28;
      doubleArray4[1] = (double) (byte)28;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("[mean=", "org.jfree.data.Range", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertEquals(28.0, range0.getLowerBound(), 0.01);
      assertEquals(28.0, range0.getCentralValue(), 0.01);
      assertEquals(28.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1L, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)42);
      assertNotNull(byte0);
      assertEquals((byte)42, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte)42));
      
      Range range0 = new Range(1L, 6.24168763269056);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(5.24168763269056, range0.getLength(), 0.01);
      assertEquals(6.24168763269056, range0.getUpperBound(), 0.01);
      assertEquals(3.62084381634528, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(5.24168763269056, range0.getLength(), 0.01);
      assertEquals(6.24168763269056, range0.getUpperBound(), 0.01);
      assertEquals(3.62084381634528, range0.getCentralValue(), 0.01);
      assertEquals((-9999.0), range1.getLowerBound(), 0.01);
      assertEquals((-9999.0), range1.getUpperBound(), 0.01);
      assertEquals((-9999.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(arrayList0.contains((byte)42));
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-9999.0), range2.getLowerBound(), 0.01);
      assertEquals((-9999.0), range2.getUpperBound(), 0.01);
      assertEquals((-9999.0), range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "57TY93rv%nslXG";
      int int0 = 14;
      MatrixSeries matrixSeries0 = new MatrixSeries("57TY93rv%nslXG", 4, 14);
      assertEquals(56, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(14, matrixSeries0.getColumnsCount());
      assertEquals(4, matrixSeries0.getRowCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(56, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(14, matrixSeries0.getColumnsCount());
      assertEquals(4, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertEquals(56, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(14, matrixSeries0.getColumnsCount());
      assertEquals(4, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(13.0, range0.getLength(), 0.01);
      assertEquals(13.0, range0.getUpperBound(), 0.01);
      assertEquals(6.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getValue((Comparable) "57TY93rv%nslXG", (Comparable) "57TY93rv%nslXG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key (57TY93rv%nslXG) not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      String string0 = hour0.toString();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(string0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("[20,14/2/2014]", string0);
      
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) 23;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 0;
      numberArray2[1] = (Number) 23;
      numberArray2[2] = (Number) 0;
      numberArray2[3] = (Number) 0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" Ul", " Ul", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2204);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2204, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      assertEquals(2, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) hour0, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2204, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-2096.20349772);
      doubleArray1[1] = 1158.24;
      doubleArray1[2] = 1510.0;
      doubleArray1[3] = 1259.52746982392;
      doubleArray1[4] = 57.9;
      doubleArray1[5] = (-1707.3126);
      doubleArray1[6] = (-37.30746732);
      doubleArray1[7] = 1769.34501840204;
      doubleArray1[8] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-37.30746732);
      doubleArray2[1] = 1158.24;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-2096.20349772);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 57.9;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Category 1", "Category 1", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      int int0 = (-1);
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-1));
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[][] doubleArray0 = new double[6][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = JComponent.getDefaultLocale();
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range0 = timeTableXYDataset0.getDomainBounds(false);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Stack<Locale.LanguageRange> stack1 = new Stack<Locale.LanguageRange>();
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.empty());
      assertNotNull(stack1);
      assertTrue(stack1.equals((Object)stack0));
      
      Vector<Locale> vector0 = new Vector<Locale>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      assertFalse(vector0.contains(locale0));
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack1, (Collection<Locale>) vector0);
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.empty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertTrue(stack1.equals((Object)stack0));
      assertNotSame(stack1, stack0);
      assertFalse(vector0.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) list0, locale_FilteringMode0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.empty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertTrue(stack0.equals((Object)stack1));
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(stack0, stack1);
      assertNotSame(stack1, stack0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(vector0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, Double.NaN);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-71));
      assertNotNull(byte0);
      assertEquals((byte) (-71), (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte) (-71)));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) byte0, (Comparable) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((byte) (-71)));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-71.0), range0.getUpperBound(), 0.01);
      assertEquals((-71.0), range0.getCentralValue(), 0.01);
      assertEquals((-71.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertTrue(arrayList0.contains((byte) (-71)));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals((-71.0), range1.getLowerBound(), 0.01);
      assertEquals((-71.0), range1.getUpperBound(), 0.01);
      assertEquals((-71.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>(2380);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)37);
      assertNotNull(byte0);
      assertEquals((byte)37, (byte)byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      
      boolean boolean0 = arrayList0.add(byte1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte)1));
      assertFalse(arrayList0.contains((byte)37));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) byte1, (Comparable) byte1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(arrayList0.contains((byte)1));
      assertFalse(arrayList0.contains((byte)37));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertTrue(arrayList0.contains((byte)1));
      assertFalse(arrayList0.contains((byte)37));
      
      MockDate mockDate0 = new MockDate((byte)37, 2380, 1061);
      assertNotNull(mockDate0);
      
      Day day0 = new Day(mockDate0);
      assertEquals("Wed Mar 26 00:00:00 GMT 2138", mockDate0.toString());
      assertEquals(5308848000000L, day0.getFirstMillisecond());
      assertEquals(5308848000000L, day0.getLastMillisecond());
      assertNotNull(day0);
      
      Hour hour0 = new Hour((byte)1, day0);
      assertEquals("Wed Mar 26 00:00:00 GMT 2138", mockDate0.toString());
      assertEquals(5308848000000L, day0.getFirstMillisecond());
      assertEquals(5308848000000L, day0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1, hour0.getHour());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2823, (byte)1, hour0, timeZone0);
      assertEquals("Wed Mar 26 00:00:00 GMT 2138", mockDate0.toString());
      assertEquals(5308848000000L, day0.getFirstMillisecond());
      assertEquals(5308848000000L, day0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1, hour0.getHour());
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getNewestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      assertEquals("Wed Mar 26 00:00:00 GMT 2138", mockDate0.toString());
      assertEquals(5308848000000L, day0.getFirstMillisecond());
      assertEquals(5308848000000L, day0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1, hour0.getHour());
      assertEquals("GMT-18:00", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-71));
      assertNotNull(byte0);
      assertEquals((byte) (-71), (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte) (-71)));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) byte0, (Comparable) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains((byte) (-71)));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, false);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-71.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-71.0), range0.getUpperBound(), 0.01);
      assertEquals((-71.0), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertTrue(arrayList0.contains((byte) (-71)));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>(2);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-24));
      assertNotNull(byte0);
      assertEquals((byte) (-24), (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte) (-24)));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) arrayList0, (Comparable) byte0, (Comparable) byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains((byte) (-24)));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-24.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-24.0), range0.getUpperBound(), 0.01);
      assertEquals((-24.0), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertTrue(arrayList0.contains((byte) (-24)));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)33);
      assertNotNull(byte0);
      assertEquals((byte)33, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      Byte byte1 = new Byte((byte) (-123));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-123), (byte)byte1);
      
      boolean boolean1 = arrayList0.add(byte0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(byte0.equals((Object)byte1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(byte0));
      assertFalse(arrayList0.contains((byte) (-123)));
      
      Range range0 = new Range((byte)33, (byte)48);
      assertEquals(40.5, range0.getCentralValue(), 0.01);
      assertEquals(15.0, range0.getLength(), 0.01);
      assertEquals(48.0, range0.getUpperBound(), 0.01);
      assertEquals(33.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList1 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean2 = arrayList1.add(defaultMultiValueCategoryDataset0);
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(arrayList1.contains(defaultMultiValueCategoryDataset0));
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(byte1);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertFalse(byte1.equals((Object)byte0));
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range0, true);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(40.5, range0.getCentralValue(), 0.01);
      assertEquals(15.0, range0.getLength(), 0.01);
      assertEquals(48.0, range0.getUpperBound(), 0.01);
      assertEquals(33.0, range0.getLowerBound(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNull(range1);
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(arrayList0.contains((byte)33));
      assertFalse(arrayList0.contains(byte1));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(4, 1);
      assertEquals(4.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 4, 1323.714468, 4, quarter0);
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(4.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(4.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1320.714468, range0.getLength(), 0.01);
      assertEquals(3.5, range0.getLowerBound(), 0.01);
      assertEquals(1324.214468, range0.getUpperBound(), 0.01);
      assertEquals(663.857234, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1323.714468;
      doubleArray1[1] = 1323.714468;
      doubleArray1[2] = 1323.714468;
      doubleArray1[3] = 1323.714468;
      doubleArray1[4] = 1323.714468;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = 1323.714468;
      doubleArray2[2] = (double) 4;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = 1323.714468;
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) 1;
      doubleArray2[7] = (double) 4;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = 1793.225;
      doubleArray3[2] = (double) 1;
      doubleArray3[3] = (double) 4;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "a5^X\\0L2";
      stringArray0[0] = "a5^X\u0000L2";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, stringArray0.length);
      
      DefaultHeatMapDataset defaultHeatMapDataset0 = new DefaultHeatMapDataset(10, 10, 10, 490.294, (-3327.5918156618445), (-1016.1604727465627));
      assertEquals(10.0, defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals(10, defaultHeatMapDataset0.getXSampleCount());
      assertEquals((-1016.1604727465627), defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals(490.294, defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals(10, defaultHeatMapDataset0.getYSampleCount());
      assertEquals((-3327.5918156618445), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertNotNull(defaultHeatMapDataset0);
      
      Float float0 = new Float((-3327.5918156618445));
      assertNotNull(float0);
      assertEquals((-3327.5918F), (float)float0, 0.01F);
      
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      assertNotNull(datasetChangeInfo0);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(float0, defaultIntervalCategoryDataset0, datasetChangeInfo0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(datasetChangeEvent0);
      assertEquals(1, stringArray0.length);
      
      defaultHeatMapDataset0.notifyListeners(datasetChangeEvent0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10.0, defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals(10, defaultHeatMapDataset0.getXSampleCount());
      assertEquals((-1016.1604727465627), defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals(490.294, defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals(10, defaultHeatMapDataset0.getYSampleCount());
      assertEquals((-3327.5918156618445), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals(1, stringArray0.length);
      
      DatasetGroup datasetGroup0 = defaultHeatMapDataset0.getGroup();
      assertEquals(10.0, defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals(10, defaultHeatMapDataset0.getXSampleCount());
      assertEquals((-1016.1604727465627), defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals(490.294, defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals(10, defaultHeatMapDataset0.getYSampleCount());
      assertEquals((-3327.5918156618445), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultIntervalCategoryDataset0.setGroup(datasetGroup0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10.0, defaultHeatMapDataset0.getMinimumXValue(), 0.01);
      assertEquals(10, defaultHeatMapDataset0.getXSampleCount());
      assertEquals((-1016.1604727465627), defaultHeatMapDataset0.getMaximumYValue(), 0.01);
      assertEquals(490.294, defaultHeatMapDataset0.getMaximumXValue(), 0.01);
      assertEquals(10, defaultHeatMapDataset0.getYSampleCount());
      assertEquals((-3327.5918156618445), defaultHeatMapDataset0.getMinimumYValue(), 0.01);
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((Long) null);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      boolean boolean1 = timeTableXYDataset0.equals(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range0);
      
      Comparable<Year>[] comparableArray0 = (Comparable<Year>[]) Array.newInstance(Comparable.class, 1);
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNull(serialDate0.getDescription());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(2014, serialDate0.getYYYY());
      assertNotNull(serialDate0);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      comparableArray0[0] = (Comparable<Year>) serialDate0;
      Comparable<XYBarDataset>[] comparableArray1 = (Comparable<XYBarDataset>[]) Array.newInstance(Comparable.class, 5);
      comparableArray1[0] = (Comparable<XYBarDataset>) serialDate0;
      int int0 = serialDate0.getDayOfMonth();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNull(serialDate0.getDescription());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(2, serialDate0.getMonth());
      assertEquals(41684, serialDate0.toSerial());
      assertEquals(14, serialDate0.getDayOfMonth());
      assertEquals(2014, serialDate0.getYYYY());
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(14, int0);
      
      comparableArray1[1] = (Comparable<XYBarDataset>) serialDate0;
      comparableArray1[2] = (Comparable<XYBarDataset>) serialDate0;
      comparableArray1[3] = (Comparable<XYBarDataset>) serialDate0;
      comparableArray1[4] = (Comparable<XYBarDataset>) serialDate0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray1, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, comparableArray0.length);
      assertEquals(5, comparableArray1.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (double) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      Year year0 = new Year();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-489.546125), (-489.546125), 5194.6826, Double.NEGATIVE_INFINITY, 1377.5874732);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertEquals(3, oHLCDataItemArray0.length);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 1377.5874732);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1377.5874732, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertEquals(3, oHLCDataItemArray0.length);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Long long0 = new Long((-2646L));
      assertNotNull(long0);
      assertEquals((-2646L), (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((-2646L)));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, (List) arrayList0, true);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1377.5874732, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1377.58740234375, range0.getLength(), 0.01);
      assertEquals(1.3924092806312063E12, range0.getLowerBound(), 0.01);
      assertEquals(1.3924092820087937E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertEquals(3, oHLCDataItemArray0.length);
      assertNotSame(mockDate0, mockDate1);
      assertTrue(arrayList0.contains((-2646L)));
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(xYBarDataset0, arrayList0, true);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1377.5874732, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1377.58740234375, range1.getLength(), 0.01);
      assertEquals(1.3924092820087937E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.3924092806312063E12, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertTrue(range1.equals((Object)range0));
      assertEquals(3, oHLCDataItemArray0.length);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(range1, range0);
      assertTrue(arrayList0.contains((-2646L)));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(4, 1);
      assertEquals(4.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = 1323.714468;
      doubleArray1[2] = 1323.714468;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 4;
      doubleArray1[5] = (double) 4;
      doubleArray1[6] = 1785.1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = 1323.714468;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1.5;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      double double0 = 1355.3236272049;
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate1, 9999, 1355.3236272049, 5194.6826, 1355.3236272049, (-9999));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertNotNull(oHLCDataItem0);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertEquals(2, oHLCDataItemArray0.length);
      
      double double1 = 737.77870783526;
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 737.77870783526);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(737.77870783526, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertEquals(2, oHLCDataItemArray0.length);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Long long0 = new Long((-9999));
      assertNotNull(long0);
      assertEquals((-9999L), (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(long0));
      
      boolean boolean1 = arrayList0.add(long0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(long0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, (List) arrayList0, false);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(737.77870783526, xYBarDataset0.getBarWidth(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotSame(mockDate1, mockDate0);
      assertTrue(arrayList0.contains(long0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (5194.6826) <= upper (1355.3236272049).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      Float float0 = new Float((double) 999);
      assertNotNull(float0);
      assertEquals(999.0F, (float)float0, 0.01F);
      
      timeTableXYDataset0.add((TimePeriod) millisecond0, (Number) 999, "", true);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(999.0, double0, 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(999.0, range0.getUpperBound(), 0.01);
      assertEquals(499.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(999.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate1, 9999, 1355.3236272049, 5194.6826, 1355.3236272049, (-9999));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertNotNull(oHLCDataItem0);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      Date[] dateArray0 = new Date[8];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate1;
      dateArray0[4] = (Date) mockDate1;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate1;
      dateArray0[7] = (Date) mockDate0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-9999);
      doubleArray0[1] = 1355.3236272049;
      doubleArray0[2] = (-1453.7037327);
      doubleArray0[3] = 5194.6826;
      doubleArray0[4] = (double) 9999;
      doubleArray0[5] = (double) (-9999);
      doubleArray0[6] = 1355.3236272049;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertArrayEquals(new double[] {(-9999.0), 1355.3236272049, (-1453.7037327), 5194.6826, 9999.0, (-9999.0), 1355.3236272049}, doubleArray0, 0.01);
      assertEquals(8, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-14));
      assertNotNull(byte0);
      assertEquals((byte) (-14), (byte)byte0);
      
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) byte0;
      numberArray1[1] = (Number) byte0;
      numberArray1[2] = (Number) byte0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) byte0;
      numberArray2[1] = (Number) byte0;
      numberArray2[2] = (Number) byte0;
      numberArray2[3] = (Number) byte0;
      numberArray2[4] = (Number) byte0;
      numberArray2[5] = (Number) byte0;
      numberArray2[6] = (Number) byte0;
      numberArray2[7] = (Number) byte0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Negative 'width' argument.", "Negative 'width' argument.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-14.0), range0.getCentralValue(), 0.01);
      assertEquals((-14.0), range0.getUpperBound(), 0.01);
      assertEquals((-14.0), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(2, numberArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range1);
      assertFalse(arrayList0.contains(byte0));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(4, 1);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(4.0, powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 4, 1323.714468, 4, quarter0);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(4.0, powerFunction2D0.getA(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(4.0, powerFunction2D0.getA(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(663.857234, range0.getCentralValue(), 0.01);
      assertEquals(4.0, range0.getLowerBound(), 0.01);
      assertEquals(1319.714468, range0.getLength(), 0.01);
      assertEquals(1323.714468, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 4417, 1);
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(4417, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Comparable<XYBarDataset>[] comparableArray0 = (Comparable<XYBarDataset>[]) Array.newInstance(Comparable.class, 8);
      comparableArray0[0] = (Comparable<XYBarDataset>) hour0;
      comparableArray0[1] = (Comparable<XYBarDataset>) hour0;
      comparableArray0[2] = (Comparable<XYBarDataset>) hour0;
      comparableArray0[3] = (Comparable<XYBarDataset>) hour0;
      comparableArray0[4] = (Comparable<XYBarDataset>) hour0;
      comparableArray0[5] = (Comparable<XYBarDataset>) hour0;
      comparableArray0[6] = (Comparable<XYBarDataset>) hour0;
      comparableArray0[7] = (Comparable<XYBarDataset>) hour0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, comparableArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 57);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(57, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      assertEquals(8, comparableArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = timeTableXYDataset0.getDomainBounds(false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) arrayList0, false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range1);
      
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-2757.680852);
      doubleArray1[1] = (-2757.680852);
      doubleArray1[2] = (-2757.680852);
      doubleArray1[3] = (-3639.1577569296064);
      doubleArray1[4] = (-2757.680852);
      doubleArray1[5] = (-2757.680852);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2757.680852);
      doubleArray2[1] = (-2757.680852);
      doubleArray2[2] = (-2757.680852);
      doubleArray2[3] = (-3639.1577569296064);
      doubleArray2[4] = (-2757.680852);
      doubleArray2[5] = (-3639.1577569296064);
      doubleArray2[6] = (-2757.680852);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-2757.680852);
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("TimeSeriesDataset.addSeries(): cannot add more series than specified in c'tor", "Category 2", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertEquals((-2757.680852), range2.getUpperBound(), 0.01);
      assertEquals((-3639.1577569296064), range2.getLowerBound(), 0.01);
      assertEquals((-3198.419304464803), range2.getCentralValue(), 0.01);
      assertEquals(881.4769049296065, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      assertNotNull(metalRootPaneUI0);
      
      boolean boolean0 = defaultXYZDataset0.hasListener(metalRootPaneUI0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0, true);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[6][8];
      Number[] numberArray1 = new Number[8];
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      numberArray1[0] = (Number) bigInteger0;
      int int0 = (-879);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-879), (-879));
      assertEquals((-879), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-879), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(4, 1);
      assertEquals(4.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 4, 1323.714468, 4, quarter0);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(4.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(4.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1323.714468, range0.getUpperBound(), 0.01);
      assertEquals(4.0, range0.getLowerBound(), 0.01);
      assertEquals(663.857234, range0.getCentralValue(), 0.01);
      assertEquals(1319.714468, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(4.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(16.0, range1.getLowerBound(), 0.01);
      assertEquals(5294.857872, range1.getUpperBound(), 0.01);
      assertEquals(5278.857872, range1.getLength(), 0.01);
      assertEquals(2655.428936, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) hour0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(pieDataset0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 23;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(hour0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 23.0}, doubleArray0, 0.01);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(4, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Number[][] numberArray0 = new Number[31][5];
      double[][] doubleArray0 = new double[7][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 563.416;
      doubleArray1[1] = 1859.664478496626;
      doubleArray1[2] = (-354.92211447603);
      doubleArray1[3] = 406.01260498;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 406.01260498;
      doubleArray3[1] = 406.01260498;
      doubleArray3[2] = 1859.664478496626;
      doubleArray3[3] = 1859.664478496626;
      doubleArray3[4] = 563.416;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 1859.664478496626;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = 563.416;
      doubleArray6[1] = 1859.664478496626;
      doubleArray6[2] = (-354.92211447603);
      doubleArray6[3] = (-2001.0932799445);
      doubleArray6[4] = (-354.92211447603);
      doubleArray6[5] = 563.416;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      
      doubleArray7[0] = 563.416;
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(7, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals((-70.71440072393693), range0.getCentralValue(), 0.01);
      assertEquals((-2001.0932799445), range0.getLowerBound(), 0.01);
      assertEquals(1859.664478496626, range0.getUpperBound(), 0.01);
      assertEquals(3860.757758441126, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Date[] dateArray0 = new Date[5];
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(0L);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      dateArray0[1] = (Date) mockDate1;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = 6.283185307179586;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = 2217.86332991352;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (double) 0L;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2217.86332991352;
      doubleArray1[1] = 2217.86332991352;
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = 6.283185307179586;
      doubleArray1[4] = 6.283185307179586;
      doubleArray1[5] = (double) 0L;
      doubleArray1[6] = 2217.86332991352;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2217.86332991352, 2217.86332991352, 0.0, 6.283185307179586, 6.283185307179586, 0.0, 2217.86332991352}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 6.283185307179586, 0.0, 2217.86332991352, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, dateArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(0L));
      
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      boolean boolean0 = arrayList0.add(long1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(long1.equals((Object)long0));
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(long1));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, false);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(6.9620464066E11, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getLength(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotNull(range0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2217.86332991352, 2217.86332991352, 0.0, 6.283185307179586, 6.283185307179586, 0.0, 2217.86332991352}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 6.283185307179586, 0.0, 2217.86332991352, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, dateArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(arrayList0.contains(long1));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) 0.0, (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1L, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)42);
      assertNotNull(byte0);
      assertEquals((byte)42, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      Range range0 = new Range(1L, 5.690232846325658);
      assertEquals(4.690232846325658, range0.getLength(), 0.01);
      assertEquals(3.345116423162829, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(5.690232846325658, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(4.690232846325658, range0.getLength(), 0.01);
      assertEquals(3.345116423162829, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(5.690232846325658, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(arrayList0.contains(byte0));
      
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (-9999);
      doubleArray1[1] = (double) 1L;
      doubleArray1[2] = (double) 1L;
      doubleArray1[3] = (double) (-9999);
      doubleArray1[4] = (double) 9999;
      doubleArray1[5] = (double) 1L;
      doubleArray1[6] = (double) (byte)42;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 5.690232846325658;
      doubleArray2[1] = (double) (byte)42;
      doubleArray2[2] = (double) 9999;
      doubleArray2[3] = 5.690232846325658;
      doubleArray2[4] = (double) (byte)42;
      doubleArray2[5] = (double) 1L;
      doubleArray2[6] = 5.690232846325658;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("{T_Aq`K", "OAS*e@L@SZ/|&ftZ)p", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(19998.0, range2.getLength(), 0.01);
      assertEquals((-9999.0), range2.getLowerBound(), 0.01);
      assertEquals(9999.0, range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)33);
      assertNotNull(byte0);
      assertEquals((byte)33, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      Byte byte1 = new Byte((byte) (-123));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-123), (byte)byte1);
      
      Byte byte2 = new Byte((byte)48);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)48, (byte)byte2);
      
      boolean boolean1 = arrayList0.add(byte2);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(byte2));
      assertFalse(arrayList0.contains(byte1));
      
      Range range0 = new Range((byte)42, (byte)48);
      assertEquals(48.0, range0.getUpperBound(), 0.01);
      assertEquals(42.0, range0.getLowerBound(), 0.01);
      assertEquals(6.0, range0.getLength(), 0.01);
      assertEquals(45.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      ChronoField chronoField0 = ChronoField.MICRO_OF_DAY;
      assertEquals(ChronoField.MICRO_OF_DAY, chronoField0);
      
      boolean boolean2 = zoneOffset0.isSupported(chronoField0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("UTC", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      ArrayList<IntervalXYDelegate> arrayList1 = new ArrayList<IntervalXYDelegate>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeTableXYDataset0, true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      boolean boolean0 = arrayList1.add(intervalXYDelegate0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertTrue(boolean0);
      assertTrue(arrayList1.contains(intervalXYDelegate0));
      
      IntervalXYDelegate intervalXYDelegate1 = new IntervalXYDelegate(timeTableXYDataset0, false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate1.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate1);
      assertFalse(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      
      boolean boolean1 = arrayList1.add(intervalXYDelegate1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(2, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1.0, intervalXYDelegate1.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate1.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate1.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate1.equals((Object)intervalXYDelegate0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(intervalXYDelegate1, intervalXYDelegate0);
      assertTrue(arrayList1.contains(intervalXYDelegate0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) arrayList1, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.IntervalXYDelegate cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      Float float0 = new Float(5367.0);
      assertNotNull(float0);
      assertEquals(5367.0F, (float)float0, 0.01F);
      
      timeTableXYDataset0.add((TimePeriod) millisecond0, (Number) float0, "", true);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(5367.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      Float float0 = new Float(Double.NEGATIVE_INFINITY);
      assertNotNull(float0);
      assertEquals(Float.NEGATIVE_INFINITY, (float)float0, 0.01F);
      
      timeTableXYDataset0.add((TimePeriod) millisecond0, (Number) float0, "", true);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      Range range0 = timeTableXYDataset0.getDomainBounds(true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) 0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)48);
      assertNotNull(byte0);
      assertEquals((byte)48, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection((byte)48, 336);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(335, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockDate mockDate0 = new MockDate(537, 537, 537, 537, 537, 537);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 537;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals("Mon Apr 12 18:05:57 GMT 2483", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {537.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      
      Long long0 = new Long(537);
      assertNotNull(long0);
      assertEquals(537L, (long)long0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(long0));
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) 537.0);
      assertNotNull(pieDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
      assertEquals("Mon Apr 12 18:05:57 GMT 2483", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.6197559557E13, range0.getLowerBound(), 0.01);
      assertEquals(1.6197559557E13, range0.getUpperBound(), 0.01);
      assertEquals(1.6197559557E13, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertArrayEquals(new double[] {537.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[][] doubleArray0 = new double[17][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(17, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(17, doubleArray0.length);
      
      byte byte0 = (byte)7;
      Byte byte1 = new Byte((byte)7);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)7, (byte)byte1);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (int) (byte)7);
      assertEquals(17, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultPieDataset0);
      assertEquals(17, doubleArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      defaultPieDataset0.insertValue(2, (Comparable) byte1, (double) 2);
      assertEquals(17, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(byte1.equals((Object)byte0));
      assertEquals(17, doubleArray0.length);
      
      defaultPieDataset0.addChangeListener(xYTaskDataset0);
      assertEquals(17, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(17, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) byte1, (double) (byte)7, (-2587));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-9999), 0L, 1.0, (-315.277), 4.0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(1.0, number0);
      assertEquals(9, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertEquals(9, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[][] doubleArray0 = new double[17][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(17, doubleArray0.length);
      
      Byte byte0 = new Byte((byte)7);
      assertNotNull(byte0);
      assertEquals((byte)7, (byte)byte0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (int) (byte)7);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(pieDataset0);
      assertEquals(17, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) byte0, (double) (byte)7, (-2587));
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(pieDataset1);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertEquals(17, doubleArray0.length);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Number[][] numberArray0 = new Number[12][5];
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)111);
      assertNotNull(byte0);
      assertEquals((byte)111, (byte)byte0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("T_i_oY", "5", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(12, numberArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 2);
      assertNotNull(pieDataset0);
      assertEquals(12, numberArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "T_i_oY", (double) 2, (-4991));
      assertNotNull(pieDataset1);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertEquals(12, numberArray0.length);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(4, 1);
      assertEquals(4.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 4, 1323.714468, 4, quarter0);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(4.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(4.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, powerFunction2D0.getB(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1323.714468, range0.getUpperBound(), 0.01);
      assertEquals(1319.714468, range0.getLength(), 0.01);
      assertEquals(4.0, range0.getLowerBound(), 0.01);
      assertEquals(663.857234, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = 1323.714468;
      doubleArray1[2] = (double) 4;
      doubleArray1[3] = (double) 4;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 4;
      doubleArray1[6] = (-798.9913);
      doubleArray1[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1330.1256936411557;
      doubleArray2[1] = 1323.714468;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = Double.NEGATIVE_INFINITY;
      doubleArray2[6] = (double) 4;
      doubleArray2[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-798.9913);
      doubleArray3[1] = 1323.714468;
      doubleArray3[2] = (double) 4;
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray3[5] = (-798.9913);
      doubleArray3[6] = 1323.714468;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 29998.6;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 1330.1256936411557;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = (double) 1;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = (double) 4;
      doubleArray7[1] = 1323.714468;
      doubleArray7[2] = 1323.714468;
      doubleArray7[3] = (double) 1;
      doubleArray7[4] = 29998.6;
      doubleArray7[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[8];
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      
      doubleArray8[0] = (-798.9913);
      doubleArray8[1] = (double) 4;
      doubleArray8[2] = (-798.9913);
      doubleArray8[3] = (double) 4;
      doubleArray8[4] = 1323.714468;
      doubleArray8[5] = (-798.9913);
      doubleArray8[6] = (double) 4;
      doubleArray8[7] = (-798.9913);
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1L, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) (-9999);
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) (-9999);
      doubleArray0[4] = (double) 9999;
      doubleArray0[5] = (double) (-9999);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3.5;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1L;
      doubleArray2[1] = (double) (-9999);
      doubleArray2[2] = (double) 1L;
      doubleArray2[3] = (double) 1L;
      doubleArray2[4] = (double) 9999;
      doubleArray2[5] = 3.5;
      doubleArray2[6] = 3.5;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray0, doubleArray2);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, (-9999.0), 1.0, (-9999.0), 9999.0, (-9999.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.5}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, (-9999.0), 1.0, 1.0, 9999.0, 3.5, 3.5}, doubleArray2, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(number0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, number0);
      assertEquals(1, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Number[][] numberArray0 = new Number[5][9];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = number0;
      numberArray1[1] = number0;
      numberArray1[2] = number0;
      numberArray1[3] = number0;
      numberArray1[4] = number0;
      numberArray1[5] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = number0;
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      numberArray2[1] = (Number) integer0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      numberArray2[2] = (Number) bigInteger0;
      numberArray2[3] = number0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) integer0;
      numberArray3[1] = (Number) bigInteger0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[2];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = (Number) bigInteger0;
      numberArray4[1] = (Number) bigInteger0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[0];
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray2));
      
      numberArray0[4] = numberArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("3", "3", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, numberArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 0.0);
      assertEquals((-30000.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(30000.0, range0.getLength(), 0.01);
      assertEquals((-15000.0), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(5, numberArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, range0, true);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals((-30000.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(30000.0, range0.getLength(), 0.01);
      assertEquals((-15000.0), range0.getCentralValue(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(856.409401, 539.417);
      assertEquals(539.417, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(856.409401, normalDistributionFunction2D0.getMean(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(84);
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(84, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, spreadsheetDate0.getMonth());
      assertEquals(24, spreadsheetDate0.getDayOfMonth());
      assertNotNull(spreadsheetDate0);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      
      Date date0 = spreadsheetDate0.toDate();
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(84, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(3, spreadsheetDate0.getMonth());
      assertEquals(24, spreadsheetDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Quarter quarter0 = new Quarter();
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 856.409401, Double.POSITIVE_INFINITY, 84, quarter0);
      assertEquals(539.417, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(856.409401, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) jDBCXYDataset0, false);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals(539.417, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(856.409401, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(Double.NaN, range3.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range3.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range3.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range3.getCentralValue(), 0.01);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range0));
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotSame(range3, range0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      Float float0 = new Float(Double.NEGATIVE_INFINITY);
      assertNotNull(float0);
      assertEquals(Float.NEGATIVE_INFINITY, (float)float0, 0.01F);
      
      timeTableXYDataset0.add((TimePeriod) millisecond0, (Number) float0, "", false);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup("");
      assertEquals("", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)7);
      assertNotNull(byte0);
      assertEquals((byte)7, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      MatrixSeries matrixSeries0 = new MatrixSeries("Nult 'f' argumenta", (byte)7, (byte)7);
      assertEquals(49, matrixSeries0.getItemCount());
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(7, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(49, matrixSeries0.getItemCount());
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(7, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(49, matrixSeries0.getItemCount());
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(7, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(6.0, number0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Short short0 = new Short((short)47);
      assertNotNull(short0);
      assertEquals((short)47, (short)short0);
      
      defaultStatisticalCategoryDataset0.add((Number) short0, (Number) short0, (Comparable) short0, (Comparable) short0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultStatisticalCategoryDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(47.0, range0.getLength(), 0.01);
      assertEquals(23.5, range0.getCentralValue(), 0.01);
      assertEquals(47.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("(IQFP|$`BWQIB>.12", (short)47, (short)47);
      assertEquals(2209, matrixSeries0.getItemCount());
      assertEquals(47, matrixSeries0.getRowCount());
      assertEquals(47, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(2209, matrixSeries0.getItemCount());
      assertEquals(47, matrixSeries0.getRowCount());
      assertEquals(47, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(2209, matrixSeries0.getItemCount());
      assertEquals(47, matrixSeries0.getRowCount());
      assertEquals(47, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(number0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, number0);
      assertEquals(1, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      double[][] doubleArray1 = new double[8][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = (-661.55772346);
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 1314.9;
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      doubleArray3[2] = (-661.55772346);
      doubleArray1[7] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "e-x", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(8, doubleArray1.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals((-661.55772346), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Number[][] numberArray0 = new Number[18][5];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      assertEquals(18, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(18, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(18, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(boolean0);
      assertEquals(18, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(18, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNull(range0);
      assertEquals(18, numberArray0.length);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 77, 77);
      assertEquals(5929, matrixSeries0.getItemCount());
      assertEquals(77, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(77, matrixSeries0.getColumnsCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(5929, matrixSeries0.getItemCount());
      assertEquals(77, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(77, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      SynthSeparatorUI synthSeparatorUI0 = new SynthSeparatorUI();
      assertNotNull(synthSeparatorUI0);
      
      matrixSeries0.addPropertyChangeListener(synthSeparatorUI0);
      assertEquals(5929, matrixSeries0.getItemCount());
      assertEquals(77, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(77, matrixSeries0.getColumnsCount());
      
      boolean boolean1 = matrixSeriesCollection0.hasListener(defaultIntervalCategoryDataset0);
      assertEquals(18, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5929, matrixSeries0.getItemCount());
      assertEquals(77, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(77, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(18, numberArray0.length);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertEquals(5929, matrixSeries0.getItemCount());
      assertEquals(77, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(77, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(38.0, range1.getCentralValue(), 0.01);
      assertEquals(76.0, range1.getUpperBound(), 0.01);
      assertEquals(76.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Number[][] numberArray0 = new Number[18][5];
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(18, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(boolean0);
      assertEquals(18, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNull(range0);
      assertEquals(18, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1L, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, oHLCDataItemArray0.length);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)36);
      assertNotNull(byte0);
      assertEquals((byte)36, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      Range range0 = new Range(0.8, 2220.198843092275);
      assertEquals(2219.398843092275, range0.getLength(), 0.01);
      assertEquals(0.8, range0.getLowerBound(), 0.01);
      assertEquals(2220.198843092275, range0.getUpperBound(), 0.01);
      assertEquals(1110.4994215461377, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2219.398843092275, range0.getLength(), 0.01);
      assertEquals(0.8, range0.getLowerBound(), 0.01);
      assertEquals(2220.198843092275, range0.getUpperBound(), 0.01);
      assertEquals(1110.4994215461377, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-9999.0), range1.getLowerBound(), 0.01);
      assertEquals((-9999.0), range1.getUpperBound(), 0.01);
      assertEquals((-9999.0), range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(arrayList0.contains(byte0));
      
      Range range2 = Range.scale(range0, 9999);
      assertEquals(2219.398843092275, range0.getLength(), 0.01);
      assertEquals(0.8, range0.getLowerBound(), 0.01);
      assertEquals(2220.198843092275, range0.getUpperBound(), 0.01);
      assertEquals(1110.4994215461377, range0.getCentralValue(), 0.01);
      assertEquals(2.219176903207966E7, range2.getLength(), 0.01);
      assertEquals(2.219976823207966E7, range2.getUpperBound(), 0.01);
      assertEquals(7999.200000000001, range2.getLowerBound(), 0.01);
      assertEquals(1.1103883716039829E7, range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999.0), number0);
      assertEquals(1, oHLCDataItemArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range3);
      assertTrue(arrayList0.contains(byte0));
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals((-9999.0), range4.getUpperBound(), 0.01);
      assertEquals((-9999.0), range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals((-9999.0), range4.getLowerBound(), 0.01);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(range4);
      assertTrue(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, oHLCDataItemArray0.length);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      
      Range range5 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range5);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)7);
      assertNotNull(byte0);
      assertEquals((byte)7, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte)7));
      
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'f' argument.", (byte)7, (byte)7);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(7, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertEquals(49, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(7, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertEquals(49, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(7, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertEquals(49, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(6.0, range0.getLength(), 0.01);
      assertEquals(3.0, range0.getCentralValue(), 0.01);
      assertEquals(6.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      assertNotNull(sortOrder0);
      
      defaultPieDataset0.sortByKeys(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals(0.0, double0, 0.01);
      
      Number[][] numberArray0 = new Number[4][6];
      Number[] numberArray1 = new Number[6];
      Long long0 = new Long((-2939L));
      assertNotNull(long0);
      assertEquals((-2939L), (long)long0);
      
      numberArray1[0] = (Number) long0;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      Number number0 = xYTaskDataset0.getEndX((-2357), (-1087));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(number0);
      assertFalse(number0.equals((Object)double0));
      assertEquals((-2356.6), number0);
      
      numberArray1[1] = number0;
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      numberArray1[2] = (Number) float0;
      Long long1 = new Long(24L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(24L, (long)long1);
      
      numberArray1[3] = (Number) long1;
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      numberArray1[4] = (Number) integer0;
      Double double1 = new Double(24L);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)number0, 0.01);
      assertEquals(24.0, (double)double1, 0.01);
      
      numberArray1[5] = (Number) double1;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) long1;
      Float float1 = new Float((float) 24L);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(24.0F, (float)float1, 0.01F);
      
      numberArray2[1] = (Number) float1;
      numberArray2[2] = (Number) double1;
      numberArray2[3] = number0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[9];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) integer0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      numberArray3[1] = (Number) bigInteger0;
      numberArray3[2] = (Number) float1;
      numberArray3[3] = (Number) long0;
      numberArray3[4] = (Number) float1;
      numberArray3[5] = (Number) long0;
      numberArray3[6] = (Number) float0;
      numberArray3[7] = (Number) long1;
      numberArray3[8] = (Number) long1;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[2];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray4[0] = (Number) long1;
      numberArray4[1] = (Number) long0;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-45));
      assertNotNull(byte0);
      assertEquals((byte) (-45), (byte)byte0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(byte0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, arrayList0, true);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range0);
      assertTrue(arrayList0.contains(byte0));
      
      Comparable<DynamicTimeSeriesCollection>[] comparableArray0 = (Comparable<DynamicTimeSeriesCollection>[]) Array.newInstance(Comparable.class, 1);
      MockDate mockDate0 = new MockDate(1606, (-169), (-169), 1442, 85);
      assertNotNull(mockDate0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertEquals("Thu Aug 13 03:25:00 GMT 3491", mockDate0.toString());
      assertEquals(48017503500000L, millisecond0.getLastMillisecond());
      assertEquals(48017503500000L, millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertEquals("Thu Aug 13 03:25:00 GMT 3491", mockDate0.toString());
      assertEquals(48017503500000L, millisecond0.getLastMillisecond());
      assertEquals(48017503500000L, millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(1L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertNotNull(millisecond1);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      
      comparableArray0[0] = (Comparable<DynamicTimeSeriesCollection>) millisecond1;
      Comparable<Byte>[] comparableArray1 = (Comparable<Byte>[]) Array.newInstance(Comparable.class, 4);
      Millisecond millisecond2 = (Millisecond)millisecond0.previous();
      assertEquals("Thu Aug 13 03:25:00 GMT 3491", mockDate0.toString());
      assertEquals(48017503500000L, millisecond0.getLastMillisecond());
      assertEquals(48017503500000L, millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(999L, millisecond2.getMillisecond());
      assertEquals(1392409281320L, millisecond2.getLastMillisecond());
      assertEquals(1392409281320L, millisecond2.getFirstMillisecond());
      assertNotNull(millisecond2);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(millisecond2.equals((Object)millisecond1));
      assertFalse(millisecond2.equals((Object)millisecond0));
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond0, millisecond2);
      assertNotSame(millisecond2, millisecond1);
      assertNotSame(millisecond2, millisecond0);
      
      Week week0 = new Week(mockDate0);
      assertEquals("Thu Aug 13 03:25:00 GMT 3491", mockDate0.toString());
      assertEquals(3491, week0.getYearValue());
      assertEquals(185056L, week0.getSerialIndex());
      assertEquals(48017503499999L, week0.getLastMillisecond());
      assertEquals(33, week0.getWeek());
      assertEquals(48017503500000L, week0.getFirstMillisecond());
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      comparableArray1[0] = (Comparable<Byte>) week0;
      comparableArray1[1] = (Comparable<Byte>) millisecond1;
      comparableArray1[2] = (Comparable<Byte>) millisecond0;
      comparableArray1[3] = (Comparable<Byte>) millisecond0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'columnKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[][] doubleArray0 = new double[10][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(10, doubleArray0.length);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 273);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(273, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      assertEquals(10, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)7);
      assertNotNull(byte0);
      assertEquals((byte)7, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(byte0, (OHLCDataItem[]) null);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, (-9999));
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-9999.0), xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Long long0 = new Long(9999);
      assertNotNull(long0);
      assertEquals(9999L, (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(long0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      String string0 = hour0.toString();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(string0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("[20,14/2/2014]", string0);
      
      timeTableXYDataset0.add((TimePeriod) hour0, (Number) 0, "[20,14/2/2014]", false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeTableXYDataset0, false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("[20,14/2/2014]");
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup("[20,14/2/2014]");
      assertEquals("[20,14/2/2014]", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      simpleHistogramDataset0.setGroup(datasetGroup0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals("[20,14/2/2014]", datasetGroup0.getID());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 452);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 452, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1L, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem[] oHLCDataItemArray1 = new OHLCDataItem[5];
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      
      oHLCDataItemArray1[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 6.283185307179586, 9999, 1L, (-1185.7), (-1185.7));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray1[1] = oHLCDataItem1;
      oHLCDataItemArray1[2] = oHLCDataItem0;
      oHLCDataItemArray1[3] = oHLCDataItem0;
      oHLCDataItemArray1[4] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      assertEquals(5, oHLCDataItemArray1.length);
      
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(oHLCDataItem1, oHLCDataItemArray1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertNotNull(defaultOHLCDataset1);
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(5, oHLCDataItemArray1.length);
      
      Date date0 = year0.getEnd();
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      assertFalse(date0.equals((Object)mockDate0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotSame(date0, mockDate0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      assertFalse(mockDate0.equals((Object)date0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte1);
      
      boolean boolean0 = arrayList0.add(byte1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte1));
      
      Range range0 = new Range((-548.24), (-144.06795));
      assertEquals((-346.153975), range0.getCentralValue(), 0.01);
      assertEquals((-144.06795), range0.getUpperBound(), 0.01);
      assertEquals((-548.24), range0.getLowerBound(), 0.01);
      assertEquals(404.17205, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset1, (List) arrayList0, range0, true);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-346.153975), range0.getCentralValue(), 0.01);
      assertEquals((-144.06795), range0.getUpperBound(), 0.01);
      assertEquals((-548.24), range0.getLowerBound(), 0.01);
      assertEquals(404.17205, range0.getLength(), 0.01);
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertNull(range1);
      assertFalse(mockDate0.equals((Object)date0));
      assertFalse(oHLCDataItemArray1.equals((Object)oHLCDataItemArray0));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertFalse(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(5, oHLCDataItemArray1.length);
      assertNotSame(mockDate0, date0);
      assertNotSame(oHLCDataItemArray1, oHLCDataItemArray0);
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      assertTrue(arrayList0.contains(byte1));
      
      // Undeclared exception!
      try { 
        Range.scale(range0, (-41.21117726808));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("Requires 'start' < 'end'.");
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, false);
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range0);
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      
      Byte byte0 = new Byte((byte) (-76));
      assertNotNull(byte0);
      assertEquals((byte) (-76), (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean1 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      MockDate mockDate0 = new MockDate(790, 790, 790);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Null 'rowData' argument.");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertNotNull(locale0);
      
      timeZone0.setID("Requires 'start' < 'end'.");
      assertEquals("Requires 'start' < 'end'.", timeZone0.getID());
      
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      assertEquals("Sun Dec 29 00:00:00 GMT 2757", mockDate0.toString());
      assertEquals("Requires 'start' < 'end'.", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals(52, week0.getWeek());
      assertEquals(2757, week0.getYearValue());
      assertEquals(24866611200000L, week0.getFirstMillisecond());
      assertEquals(24866611199999L, week0.getLastMillisecond());
      assertEquals(146173L, week0.getSerialIndex());
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      Locale locale1 = Locale.JAPANESE;
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale1);
      assertEquals("Sun Dec 29 00:00:00 GMT 2757", mockDate0.toString());
      assertEquals("Requires 'start' < 'end'.", timeZone0.getID());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals(11032L, quarter0.getSerialIndex());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(2757, quarter0.getYearValue());
      assertEquals(24866611200000L, quarter0.getFirstMillisecond());
      assertEquals(24866611200000L, quarter0.getLastMillisecond());
      assertNotNull(quarter0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      Quarter quarter1 = (Quarter)quarter0.next();
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(2758, quarter1.getYearValue());
      assertEquals(11033L, quarter1.getSerialIndex());
      assertEquals(1, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals("Sun Dec 29 00:00:00 GMT 2757", mockDate0.toString());
      assertEquals("Requires 'start' < 'end'.", timeZone0.getID());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals(11032L, quarter0.getSerialIndex());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(2757, quarter0.getYearValue());
      assertEquals(24866611200000L, quarter0.getFirstMillisecond());
      assertEquals(24866611200000L, quarter0.getLastMillisecond());
      assertNotNull(quarter1);
      assertFalse(quarter1.equals((Object)quarter0));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotSame(quarter1, quarter0);
      assertNotSame(locale1, locale0);
      assertNotSame(quarter0, quarter1);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, (-891), quarter1);
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(2758, quarter1.getYearValue());
      assertEquals(11033L, quarter1.getSerialIndex());
      assertEquals(1, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals((-892), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals("Sun Dec 29 00:00:00 GMT 2757", mockDate0.toString());
      assertEquals("Requires 'start' < 'end'.", timeZone0.getID());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals(11032L, quarter0.getSerialIndex());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(2757, quarter0.getYearValue());
      assertEquals(24866611200000L, quarter0.getFirstMillisecond());
      assertEquals(24866611200000L, quarter0.getLastMillisecond());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertFalse(quarter1.equals((Object)quarter0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(quarter0.equals((Object)quarter1));
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack1 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      assertFalse(stack1.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][5];
      Number[] numberArray1 = new Number[1];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      numberArray1[0] = (Number) float0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) float0;
      numberArray2[1] = (Number) float0;
      numberArray2[2] = (Number) float0;
      numberArray2[3] = (Number) float0;
      numberArray2[4] = (Number) float0;
      numberArray2[5] = (Number) float0;
      numberArray2[6] = (Number) float0;
      numberArray2[7] = (Number) float0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[6];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = (Number) float0;
      numberArray4[1] = (Number) float0;
      numberArray4[2] = (Number) float0;
      numberArray4[3] = (Number) float0;
      numberArray4[4] = (Number) float0;
      numberArray4[5] = (Number) float0;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      String string0 = hour0.toString();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(string0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("[20,14/2/2014]", string0);
      
      timeTableXYDataset0.add((TimePeriod) hour0, (Number) 0, "[20,14/2/2014]", false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeTableXYDataset0, false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("[20,14/2/2014]");
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup("[20,14/2/2014]");
      assertEquals("[20,14/2/2014]", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      simpleHistogramDataset0.setGroup(datasetGroup0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals("[20,14/2/2014]", datasetGroup0.getID());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Number[][] numberArray0 = new Number[2][6];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) 23;
      numberArray1[1] = (Number) 0;
      numberArray1[2] = (Number) 23;
      numberArray1[3] = (Number) 23;
      numberArray1[4] = (Number) 0;
      numberArray1[5] = (Number) 0;
      numberArray1[6] = (Number) 0;
      numberArray1[7] = (Number) 0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[6];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 23;
      numberArray2[1] = (Number) 23;
      numberArray2[2] = (Number) 23;
      numberArray2[3] = (Number) 23;
      numberArray2[4] = (Number) 0;
      numberArray2[5] = (Number) 0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockDate mockDate0 = new MockDate(537, 537, 537, 537, 537, 537);
      assertNotNull(mockDate0);
      
      mockDate0.setTime(2963L);
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[7];
      double[][] doubleArray1 = new double[7][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[0] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      UnaryOperator<Byte> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Byte byte0 = new Byte((byte)16);
      assertNotNull(byte0);
      assertEquals((byte)16, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      Byte byte1 = new Byte((byte)64);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)64, (byte)byte1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(byte1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean boolean1 = arrayList0.add(byte1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(byte0));
      
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener1);
      assertNotNull(hierarchyBoundsListener2);
      
      HierarchyBoundsListener hierarchyBoundsListener3 = AWTEventMulticaster.remove(hierarchyBoundsListener2, hierarchyBoundsListener2);
      assertNull(hierarchyBoundsListener3);
      
      boolean boolean2 = defaultBoxAndWhiskerCategoryDataset0.hasListener((EventListener) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, arrayList0, true);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(range0);
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(arrayList0.contains(byte0));
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((byte)16, (byte)64);
      assertEquals(16.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(64.0, lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(byte1);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      assertFalse(byte1.equals((Object)byte0));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range1);
      assertFalse(byte1.equals((Object)byte0));
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1L, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1.0, number0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-9999.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-9999.0), range0.getUpperBound(), 0.01);
      assertEquals((-9999.0), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotSame(range1, range0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Null 'dataset' argument.";
      stringArray0[1] = "vo +{7";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, stringArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(quarter0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(quarter0, (OHLCDataItem[]) null);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(number0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      Date date0 = year0.getStart();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      int int0 = defaultOHLCDataset0.indexOf(date0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-1), int0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Byte byte0 = new Byte((byte)36);
      assertNotNull(byte0);
      assertEquals((byte)36, (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte)36));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      MockDate mockDate0 = new MockDate(4L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1.0, (-2876.08), 843.87425);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 1917.2);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1917.2, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      defaultOHLCDataset0.addChangeListener(xYBarDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1917.2, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(xYBarDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1917.2, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(number0);
      assertEquals(962.6, number0);
      assertEquals(3, oHLCDataItemArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(4.0, number1);
      assertEquals(3, oHLCDataItemArray0.length);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      // Undeclared exception!
      try { 
        defaultBoxAndWhiskerXYDataset0.add(mockDate0, (BoxAndWhiskerItem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      DefaultListModel<Double> defaultListModel0 = new DefaultListModel<Double>();
      assertNotNull(defaultListModel0);
      
      JList<Double> jList0 = new JList<Double>(defaultListModel0);
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.getIgnoreRepaint());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertNotNull(jList0);
      
      List<Double> list0 = jList0.getSelectedValuesList();
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.getIgnoreRepaint());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) list0, false);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.getIgnoreRepaint());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(range0);
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset1);
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      
      defaultKeyedValuesDataset0.setValue((Comparable) byte0, (double) (-9999));
      assertFalse(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-9999);
      doubleArray2[1] = (double) (-9999);
      doubleArray2[2] = (-1460.5466);
      doubleArray2[3] = (double) (-9999);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("J|R", "J|R", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertEquals((-1460.5466), range0.getUpperBound(), 0.01);
      assertEquals((-9999.0), range0.getLowerBound(), 0.01);
      assertEquals((-5729.7733), range0.getCentralValue(), 0.01);
      assertEquals(8538.4534, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1230L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-769.6), 5000.5, (-9999), 23.0, (-811.051204));
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1206.0, (-769.6), Double.NEGATIVE_INFINITY, 3194.0, 5000.5);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(6, oHLCDataItemArray0.length);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 5000.5);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(5000.5, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(6, oHLCDataItemArray0.length);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(1230L));
      
      Long long0 = new Long(1230L);
      assertNotNull(long0);
      assertEquals(1230L, (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(1230L));
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1L, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, (-9999));
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-9999.0), xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      defaultOHLCDataset0.addChangeListener(xYBarDataset0);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-9999.0), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1.0, number0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1.0, number1);
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYBarDataset0);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-9999.0), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range1 = Range.shift(range0, (-742.0));
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-9999.0), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range2 = Range.expandToInclude(range1, (-9999));
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(9999.0, range2.getLength(), 0.01);
      assertEquals((-9999.0), range2.getLowerBound(), 0.01);
      assertEquals((-4999.5), range2.getCentralValue(), 0.01);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-9999.0), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      
      boolean boolean0 = arrayList0.add(defaultMultiValueCategoryDataset0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(defaultMultiValueCategoryDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range1, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      UnaryOperator<Byte> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) hour0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      UnaryOperator<Byte> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte1);
      
      boolean boolean0 = arrayList0.add(byte1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1066L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-9999), 1066L, 537, (-9999), (-2764.6036));
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, 537);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(537.0, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      
      defaultOHLCDataset0.addChangeListener(xYBarDataset0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(537.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(4, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(1066.0, number0);
      assertEquals(4, oHLCDataItemArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(xYBarDataset0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(537.0, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(797.5, number1);
      assertEquals(4, oHLCDataItemArray0.length);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(mockDate0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYBarDataset0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(537.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals((-9999.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-9999.0), range0.getUpperBound(), 0.01);
      assertEquals((-9999.0), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(4, oHLCDataItemArray0.length);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = arrayList0.add(defaultMultiValueCategoryDataset0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(defaultMultiValueCategoryDataset0));
      
      Range range1 = Range.shift(range0, (double) 9999);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(537.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals((-9999.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-9999.0), range0.getUpperBound(), 0.01);
      assertEquals((-9999.0), range0.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(4, oHLCDataItemArray0.length);
      assertNotSame(range1, range0);
      assertNotSame(range0, range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, (List) arrayList0, range0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Year year0 = new Year();
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      Date date0 = year0.getStart();
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 9999, (-9999), (-5314.0), 9999, (-173.9));
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-5314.0), (-9999), (-5314.0), (-5314.0), (-1.7976931348623157E308));
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Byte byte0 = new Byte((byte)14);
      assertNotNull(byte0);
      assertEquals((byte)14, (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte)14));
      
      boolean boolean0 = arrayList0.add((Byte) null);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertFalse(arrayList0.contains((byte)14));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-5314.0), number0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries(">m&>J'Tl=l!3", 7, 7);
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertEquals(49, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(7, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertEquals(49, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(7, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate(152, 7, (-787));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(24L);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      dateArray0[1] = (Date) mockDate1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = (double) 152;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(">m&>J'Tl=l!3", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 152.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      
      XYDatasetSelectionState xYDatasetSelectionState0 = defaultHighLowDataset0.getSelectionState();
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, xYDatasetSelectionState0.getSeriesCount());
      assertNotNull(xYDatasetSelectionState0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 152.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertSame(defaultHighLowDataset0, xYDatasetSelectionState0);
      assertSame(xYDatasetSelectionState0, defaultHighLowDataset0);
      
      matrixSeriesCollection0.setSelectionState(xYDatasetSelectionState0);
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertEquals(49, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(7, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, xYDatasetSelectionState0.getSeriesCount());
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 152.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(2, doubleArray0.length);
      assertSame(defaultHighLowDataset0, xYDatasetSelectionState0);
      assertSame(xYDatasetSelectionState0, defaultHighLowDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) vector0, true);
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertEquals(49, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(7, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertEquals(49, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(7, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(6.0, range1.getLength(), 0.01);
      assertEquals(6.0, range1.getUpperBound(), 0.01);
      assertEquals(3.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      Number[][] numberArray0 = new Number[0][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(">m&>J'Tl=l!3", "+ehq28s)'b&I:Eq{(D'", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, numberArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) mockDate0);
      assertEquals("Sun Jun 05 00:00:00 GMT 2050", mockDate0.toString());
      assertNotNull(pieDataset0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertEquals(0, numberArray0.length);
      assertNotSame(mockDate0, mockDate1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      Date date0 = year0.getStart();
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Byte byte0 = new Byte((byte)36);
      assertNotNull(byte0);
      assertEquals((byte)36, (byte)byte0);
      
      Number[][] numberArray0 = new Number[4][6];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 9999;
      numberArray1[1] = (Number) (-9999);
      numberArray1[2] = (Number) 9999;
      numberArray1[3] = (Number) (-9999);
      numberArray0[2] = numberArray1;
      Number[] numberArray2 = new Number[0];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[7];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) (-9999);
      numberArray3[1] = (Number) 9999;
      numberArray3[2] = (Number) (-9999);
      numberArray3[3] = (Number) byte0;
      numberArray3[4] = (Number) (-9999);
      numberArray3[5] = (Number) (-9999);
      numberArray3[6] = (Number) 9999;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[2];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray4[0] = (Number) (-9999);
      numberArray4[1] = (Number) 9999;
      numberArray0[3] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      Date date0 = year0.getStart();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Byte byte0 = new Byte((byte)36);
      assertNotNull(byte0);
      assertEquals((byte)36, (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte)36));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte)36));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, range0, true);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNull(range1);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      double double0 = (-2286.8928);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1L, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertNotNull(defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)36);
      assertNotNull(byte0);
      assertEquals((byte)36, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      Range range0 = new Range(0.8, 6.283185307179586);
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(5.483185307179586, range0.getLength(), 0.01);
      assertEquals(3.541592653589793, range0.getCentralValue(), 0.01);
      assertEquals(0.8, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(5.483185307179586, range0.getLength(), 0.01);
      assertEquals(3.541592653589793, range0.getCentralValue(), 0.01);
      assertEquals(0.8, range0.getLowerBound(), 0.01);
      assertEquals((-9999.0), range1.getUpperBound(), 0.01);
      assertEquals((-9999.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-9999.0), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertFalse(range1.equals((Object)range0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(arrayList0.contains(byte0));
      
      Range range2 = Range.scale(range1, 1L);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-9999.0), range2.getUpperBound(), 0.01);
      assertEquals((-9999.0), range2.getCentralValue(), 0.01);
      assertEquals((-9999.0), range2.getLowerBound(), 0.01);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(5.483185307179586, range0.getLength(), 0.01);
      assertEquals(3.541592653589793, range0.getCentralValue(), 0.01);
      assertEquals(0.8, range0.getLowerBound(), 0.01);
      assertEquals((-9999.0), range1.getUpperBound(), 0.01);
      assertEquals((-9999.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-9999.0), range1.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertTrue(arrayList0.contains(byte0));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-9999), 1271.5279863655837, 1774.7709854930517, (-1827.67097994), 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, (-9999));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-9999.0), xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      defaultOHLCDataset0.addChangeListener(xYBarDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-9999.0), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(xYBarDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1L, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, (-9999));
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-9999.0), xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      defaultOHLCDataset0.addChangeListener(xYBarDataset0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-9999.0), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1.0, number0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1.0, number1);
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYBarDataset0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-9999.0), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range1 = Range.shift(range0, (-742.0));
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-9999.0), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) arrayList0, range1, true);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-9999.0), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      int int0 = 537;
      MockDate mockDate0 = new MockDate(537, 537, 537, 537, 359, 537);
      assertNotNull(mockDate0);
      
      boolean boolean0 = mockDate0.before(mockDate0);
      assertEquals("Mon Apr 12 15:07:57 GMT 2483", mockDate0.toString());
      assertFalse(boolean0);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 8;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertEquals("Mon Apr 12 15:07:57 GMT 2483", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray1.length);
      
      Long long0 = new Long(12L);
      assertNotNull(long0);
      assertEquals(12L, (long)long0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(long0));
      
      boolean boolean1 = arrayList0.add(long0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(long0));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, arrayList0, false);
      assertEquals("Mon Apr 12 15:07:57 GMT 2483", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1.6197548877E13, range0.getUpperBound(), 0.01);
      assertEquals(1.6197548877E13, range0.getCentralValue(), 0.01);
      assertEquals(1.6197548877E13, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertArrayEquals(new double[] {8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray1.length);
      assertTrue(arrayList0.contains(long0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1L, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertNotNull(defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)36);
      assertNotNull(byte0);
      assertEquals((byte)36, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte)36));
      
      Range range0 = new Range(0.8, 6.283185307179586);
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(3.541592653589793, range0.getCentralValue(), 0.01);
      assertEquals(5.483185307179586, range0.getLength(), 0.01);
      assertEquals(0.8, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(3.541592653589793, range0.getCentralValue(), 0.01);
      assertEquals(5.483185307179586, range0.getLength(), 0.01);
      assertEquals(0.8, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertFalse(range1.equals((Object)range0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(arrayList0.contains((byte)36));
      
      Range range2 = Range.scale(range1, 1L);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getLowerBound(), 0.01);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(3.541592653589793, range0.getCentralValue(), 0.01);
      assertEquals(5.483185307179586, range0.getLength(), 0.01);
      assertEquals(0.8, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertTrue(arrayList0.contains((byte)36));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-3034.883), Double.POSITIVE_INFINITY, 2, hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range1 = Range.scale(range0, 0.0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1, doubleArray0.length);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertTrue(boolean0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-1));
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      String string0 = hour0.toString();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(string0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("[20,14/2/2014]", string0);
      
      timeTableXYDataset0.add((TimePeriod) hour0, (Number) 0, "[20,14/2/2014]", false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeTableXYDataset0, false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("[20,14/2/2014]");
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup("[20,14/2/2014]");
      assertEquals("[20,14/2/2014]", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      simpleHistogramDataset0.setGroup(datasetGroup0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals("[20,14/2/2014]", datasetGroup0.getID());
      
      Range range0 = intervalXYDelegate0.getDomainBounds(false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, false);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-63));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      ArrayList<Byte> arrayList1 = new ArrayList<Byte>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains(byte0));
      
      Byte byte1 = new Byte((byte)0);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-39));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-39), (byte)byte2);
      
      boolean boolean0 = arrayList1.add(byte2);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(boolean0);
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList1.contains(byte2));
      assertFalse(arrayList1.contains(byte0));
      
      Range range0 = new Range((-2896.960641487), (-2896.960641487));
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2896.960641487), range0.getLowerBound(), 0.01);
      assertEquals((-2896.960641487), range0.getUpperBound(), 0.01);
      assertEquals((-2896.960641487), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)36;
      doubleArray0[1] = 1364.2147715978813;
      doubleArray0[2] = (-1399.08194);
      doubleArray0[3] = (-2896.960641487);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {36.0, 1364.2147715978813, (-1399.08194), (-2896.960641487)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1323.714468, 1364.2147715978813, (byte)36, 36.0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals((-7.35774015643204E12), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-6.721773058122094E12), xYSeries0.getMaxY(), 0.01);
      assertEquals(36, xYSeries0.getItemCount());
      assertEquals(1364.2147715978813, xYSeries0.getMaxX(), 0.01);
      assertEquals(1323.714468, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNotNull(xYSeries0);
      assertArrayEquals(new double[] {36.0, 1364.2147715978813, (-1399.08194), (-2896.960641487)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals((-7.35774015643204E12), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-6.721773058122094E12), xYSeries0.getMaxY(), 0.01);
      assertEquals(36, xYSeries0.getItemCount());
      assertEquals(1364.2147715978813, xYSeries0.getMaxX(), 0.01);
      assertEquals(1323.714468, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      assertArrayEquals(new double[] {36.0, 1364.2147715978813, (-1399.08194), (-2896.960641487)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, range0, true);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2896.960641487), range0.getLowerBound(), 0.01);
      assertEquals((-2896.960641487), range0.getUpperBound(), 0.01);
      assertEquals((-2896.960641487), range0.getCentralValue(), 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals((-7.35774015643204E12), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-6.721773058122094E12), xYSeries0.getMaxY(), 0.01);
      assertEquals(36, xYSeries0.getItemCount());
      assertEquals(1364.2147715978813, xYSeries0.getMaxX(), 0.01);
      assertEquals(1323.714468, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNull(range1);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertArrayEquals(new double[] {36.0, 1364.2147715978813, (-1399.08194), (-2896.960641487)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotSame(arrayList0, arrayList1);
      assertFalse(arrayList0.contains(byte0));
      
      // Undeclared exception!
      try { 
        Range.scale((Range) null, 39.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("Requires 'start' < 'end'.");
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range0);
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      
      Byte byte0 = new Byte((byte) (-76));
      assertNotNull(byte0);
      assertEquals((byte) (-76), (byte)byte0);
      
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(byte0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, stack0, false);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(range1);
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1L, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultOHLCDataset0, (-9999));
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-9999.0), xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      defaultOHLCDataset0.addChangeListener(xYBarDataset0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-9999.0), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(1L));
      
      Long long0 = new Long(9999);
      assertNotNull(long0);
      assertEquals(9999L, (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertFalse(arrayList0.contains(1L));
      assertTrue(arrayList0.contains(long0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (5000.5) <= upper (-4998.5).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      TaskSeriesCollection taskSeriesCollection1 = (TaskSeriesCollection)taskSeriesCollection0.clone();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertNotNull(taskSeriesCollection1);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(taskSeriesCollection1, taskSeriesCollection0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 1046);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(defaultPieDataset0);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(3325.06, 1046);
      assertEquals(3325.06, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1046.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      MockDate mockDate0 = (MockDate)year0.getStart();
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-1528.741760265561), (-522.1943676541), 1046, year0);
      assertEquals(3325.06, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1046.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1046, xYSeries0.getItemCount());
      assertEquals(8.046151078041812E-9, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-522.1943676541), xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(4.4032949180609545E-7, xYSeries0.getMaxY(), 0.01);
      assertEquals((-1528.741760265561), xYSeries0.getMinX(), 0.01);
      assertNotNull(xYSeries0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset1);
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0, false);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) integer0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("I|_PRn45]pA>fkK", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(600.0, range0.getUpperBound(), 0.01);
      assertEquals(300.0, range0.getCentralValue(), 0.01);
      assertEquals(600.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(2, numberArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertEquals(200.0, range1.getLowerBound(), 0.01);
      assertEquals(200.0, range1.getCentralValue(), 0.01);
      assertEquals(200.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, numberArray0.length);
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertEquals(200.0, range2.getLowerBound(), 0.01);
      assertEquals(200.0, range2.getCentralValue(), 0.01);
      assertEquals(200.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertEquals(2, numberArray0.length);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      long long0 = year0.getFirstMillisecond(calendar0);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=0,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=1,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1392409281320L, long0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Byte byte0 = new Byte((byte)36);
      assertNotNull(byte0);
      assertEquals((byte)36, (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte)36));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte)36));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("Requires 'start' < 'end'.");
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      
      Byte byte0 = new Byte((byte) (-76));
      assertNotNull(byte0);
      assertEquals((byte) (-76), (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean1 = arrayList0.add(byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      MockDate mockDate0 = new MockDate(2, (byte) (-76), 2);
      assertNotNull(mockDate0);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Byte byte0 = new Byte((byte)36);
      assertNotNull(byte0);
      assertEquals((byte)36, (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      Range range1 = Range.combine(range0, range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Range range2 = Range.scale(range1, 9999);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range2.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      String string0 = hour0.toString();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(string0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("[20,14/2/2014]", string0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      timeTableXYDataset0.add((TimePeriod) hour0, (Number) 0, "[20,14/2/2014]", false);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeTableXYDataset0, false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      DatasetGroup datasetGroup0 = new DatasetGroup(".`m[W_nK8t:kziT/{");
      assertEquals(".`m[W_nK8t:kziT/{", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      simpleHistogramDataset0.setGroup(datasetGroup0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(".`m[W_nK8t:kziT/{", datasetGroup0.getID());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, false);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(range0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("E4,4DZ'3", ".`m[W_nK8t:kziT/{", "E4,4DZ'3", "");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      boolean boolean0 = arrayList0.add(defaultTableXYDataset0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(defaultTableXYDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, arrayList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Byte byte0 = new Byte((byte)39);
      assertNotNull(byte0);
      assertEquals((byte)39, (byte)byte0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset1);
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      
      defaultKeyedValuesDataset0.setValue((Comparable) byte0, (-1.0));
      assertFalse(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertFalse(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertTrue(boolean0);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Byte byte0 = new Byte((byte)39);
      assertNotNull(byte0);
      assertEquals((byte)39, (byte)byte0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset1);
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      
      defaultKeyedValuesDataset0.setValue((Comparable) byte0, (-1.0));
      assertFalse(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertFalse(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertTrue(boolean0);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1L, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 6.283185307179586, 6.283185307179586, (-9999), 0.8, (-9999));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertNotNull(defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)36);
      assertNotNull(byte0);
      assertEquals((byte)36, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      Range range0 = new Range(0.8, 6.283185307179586);
      assertEquals(3.541592653589793, range0.getCentralValue(), 0.01);
      assertEquals(0.8, range0.getLowerBound(), 0.01);
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(5.483185307179586, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.9, range1.getCentralValue(), 0.01);
      assertEquals(0.8, range1.getLowerBound(), 0.01);
      assertEquals(0.19999999999999996, range1.getLength(), 0.01);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(3.541592653589793, range0.getCentralValue(), 0.01);
      assertEquals(0.8, range0.getLowerBound(), 0.01);
      assertEquals(6.283185307179586, range0.getUpperBound(), 0.01);
      assertEquals(5.483185307179586, range0.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotSame(range1, range0);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertNotSame(range0, range1);
      assertTrue(arrayList0.contains(byte0));
      
      // Undeclared exception!
      try { 
        Range.scale(range1, (-2286.8928));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'factor' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Byte byte0 = new Byte((byte)36);
      assertNotNull(byte0);
      assertEquals((byte)36, (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean0 = arrayList0.add(byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, range0, true);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNull(range1);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      // Undeclared exception!
      try { 
        Range.scale((Range) null, (-2286.8928));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(0.0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(number0);
      
      Comparable<XYBarDataset>[] comparableArray0 = (Comparable<XYBarDataset>[]) Array.newInstance(Comparable.class, 1);
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      comparableArray0[0] = (Comparable<XYBarDataset>) year0;
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(1, comparableArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("Requires 'start' < 'end'.");
      assertFalse(stack0.isEmpty());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertFalse(stack0.isEmpty());
      assertEquals("[Requires 'start' < 'end'.]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      assertTrue(stack0.contains("Requires 'start' < 'end'."));
      
      Byte byte0 = new Byte((byte) (-76));
      assertNotNull(byte0);
      assertEquals((byte) (-76), (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      boolean boolean1 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      
      MockDate mockDate0 = new MockDate(2, (byte) (-76), 2);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Requires 'start' < 'end'.");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      timeZone0.setID("Requires 'start' < 'end'.");
      assertEquals("Requires 'start' < 'end'.", timeZone0.getID());
      
      Week week0 = new Week(mockDate0, timeZone0, locale0);
      assertEquals("Mon Sep 02 00:00:00 GMT 1895", mockDate0.toString());
      assertEquals("Requires 'start' < 'end'.", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals(1895, week0.getYearValue());
      assertEquals((-2345673600000L), week0.getFirstMillisecond());
      assertEquals((-2345673600001L), week0.getLastMillisecond());
      assertEquals(100471L, week0.getSerialIndex());
      assertEquals(36, week0.getWeek());
      assertNotNull(week0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 273, week0);
      assertEquals("Mon Sep 02 00:00:00 GMT 1895", mockDate0.toString());
      assertEquals("Requires 'start' < 'end'.", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals(1895, week0.getYearValue());
      assertEquals((-2345673600000L), week0.getFirstMillisecond());
      assertEquals((-2345673600001L), week0.getLastMillisecond());
      assertEquals(100471L, week0.getSerialIndex());
      assertEquals(36, week0.getWeek());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(272, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, range1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1L, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 6.283185307179586, 6.283185307179586, (-9999), (-907.13), (-9999));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertNotNull(defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)36);
      assertNotNull(byte0);
      assertEquals((byte)36, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertNull(range1);
      assertTrue(defaultOHLCDataset0.equals((Object)defaultOHLCDataset1));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotSame(defaultOHLCDataset0, defaultOHLCDataset1);
      assertTrue(arrayList0.contains(byte0));
      
      // Undeclared exception!
      try { 
        Range.scale((Range) null, (-2286.8928));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Byte byte0 = new Byte((byte)27);
      assertNotNull(byte0);
      assertEquals((byte)27, (byte)byte0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Object object0 = defaultKeyedValuesDataset0.clone();
      assertNotNull(object0);
      assertTrue(object0.equals((Object)defaultKeyedValuesDataset0));
      assertNotSame(defaultKeyedValuesDataset0, object0);
      assertNotSame(object0, defaultKeyedValuesDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(byte0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin((byte)27, Double.NaN, true, true);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(Double.NaN, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(27.0, simpleHistogramBin0.getLowerBound(), 0.01);
      assertNotNull(simpleHistogramBin0);
      
      simpleHistogramDataset0.addBin(simpleHistogramBin0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertFalse(simpleHistogramBin0.isSelected());
      assertEquals(Double.NaN, simpleHistogramBin0.getUpperBound(), 0.01);
      assertEquals(27.0, simpleHistogramBin0.getLowerBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(number0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0, true);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      MockDate mockDate0 = new MockDate((-242), (-242), (-242));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-4150.852), 496.1, (-242), (-242), (-2727.1));
      assertEquals("Tue Mar 03 00:00:00 GMT 1637", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 5.89979040347805, (-242), (-242), (-907.13), (-4150.852));
      assertEquals("Tue Mar 03 00:00:00 GMT 1637", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[5] = oHLCDataItem1;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertEquals("Tue Mar 03 00:00:00 GMT 1637", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(8, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals("Tue Mar 03 00:00:00 GMT 1637", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals((-1.05031296E13), number0);
      assertEquals(8, oHLCDataItemArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(xYTaskDataset0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) oHLCDataItem0, 5.89979040347805, 4063);
      assertEquals("Tue Mar 03 00:00:00 GMT 1637", mockDate0.toString());
      assertNotNull(pieDataset0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(xYTaskDataset0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number1);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals("Tue Mar 03 00:00:00 GMT 1637", mockDate0.toString());
      assertEquals((-1.05031296E13), range0.getLowerBound(), 0.01);
      assertEquals((-1.05031296E13), range0.getUpperBound(), 0.01);
      assertEquals((-1.05031296E13), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(range0);
      assertEquals(8, oHLCDataItemArray0.length);
      
      Number number2 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1L, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 6.283185307179586, 6.283185307179586, (-9999), (-907.13), (-9999));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultOHLCDataset defaultOHLCDataset1 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertNotNull(defaultOHLCDataset1);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset1);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset1.getSeriesCount());
      assertNotNull(number0);
      assertTrue(defaultOHLCDataset1.equals((Object)defaultOHLCDataset0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1.0, number0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotSame(defaultOHLCDataset1, defaultOHLCDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) oHLCDataItem0, (double) 1L, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(pieDataset0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYTaskDataset0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNull(range0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number1);
      
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1L;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = (-907.13);
      doubleArray2[3] = (-907.13);
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) oHLCDataItemArray0, (Comparable[]) oHLCDataItemArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 5.399790403478091;
      doubleArray1[1] = (-5314.0);
      doubleArray1[2] = (-171.2111392);
      doubleArray1[0] = 2.0;
      doubleArray1[4] = (-3245.0);
      doubleArray1[5] = 2269.0632;
      doubleArray1[6] = (-2910.924);
      doubleArray1[7] = 1.0;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2269.0632, range0.getUpperBound(), 0.01);
      assertEquals(7583.0632000000005, range0.getLength(), 0.01);
      assertEquals((-1522.4684), range0.getCentralValue(), 0.01);
      assertEquals((-5314.0), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Vector<String> vector0 = new Vector<String>(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, vector0.capacity());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add("F\"$=~JuSu.+lo9Q");
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[F\"$=~JuSu.+lo9Q]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.capacity());
      assertTrue(boolean0);
      assertFalse(arrayDeque0.contains("F\"$=~JuSu.+lo9Q"));
      assertTrue(vector0.contains("F\"$=~JuSu.+lo9Q"));
      
      Stack<Long> stack0 = new Stack<Long>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
      assertEquals(7583.0632000000005, range1.getLength(), 0.01);
      assertEquals((-5314.0), range1.getLowerBound(), 0.01);
      assertEquals(2269.0632, range1.getUpperBound(), 0.01);
      assertEquals((-1522.4684), range1.getCentralValue(), 0.01);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(1, doubleArray0.length);
      assertNotSame(range1, range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2269.0632, range0.getUpperBound(), 0.01);
      assertEquals(7583.0632000000005, range0.getLength(), 0.01);
      assertEquals((-1522.4684), range0.getCentralValue(), 0.01);
      assertEquals((-5314.0), range0.getLowerBound(), 0.01);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("[F\"$=~JuSu.+lo9Q]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.capacity());
      assertNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertEquals(1, doubleArray0.length);
      assertNotSame(range0, range1);
      assertFalse(arrayDeque0.contains("F\"$=~JuSu.+lo9Q"));
      assertTrue(vector0.contains("F\"$=~JuSu.+lo9Q"));
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(number0);
      assertEquals(2269.0632, number0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-233L);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-233L);
      doubleArray2[1] = (-2385.882960238024);
      doubleArray2[2] = (double) (-233L);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Integer integer0 = new Integer((-500));
      assertNotNull(integer0);
      assertEquals((-500), (int)integer0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      String string0 = hour0.toString();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(string0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("[20,14/2/2014]", string0);
      
      timeTableXYDataset0.add((TimePeriod) hour0, (Number) 0, "[20,14/2/2014]", false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(integer0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      simpleHistogramDataset0.addBin((SimpleHistogramBin) null);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate(359, (-1), (-1), 2, (-1), (-1550));
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate((-905L));
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      boolean boolean0 = mockDate0.before(mockDate1);
      assertEquals("Mon Nov 29 01:33:10 GMT 2258", mockDate0.toString());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate1.toString());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(boolean0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate1, mockDate0);
      
      Date[] dateArray0 = new Date[8];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate1;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate1;
      dateArray0[4] = (Date) mockDate1;
      dateArray0[5] = (Date) mockDate1;
      dateArray0[6] = (Date) mockDate0;
      dateArray0[7] = (Date) mockDate1;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (-905L);
      doubleArray1[2] = (double) (-905L);
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) (-1);
      doubleArray1[5] = (double) (-905L);
      doubleArray1[6] = (double) (-1550);
      doubleArray1[7] = (double) 359;
      doubleArray1[8] = 1844.48;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertEquals("Mon Nov 29 01:33:10 GMT 2258", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertArrayEquals(new double[] {(-1.0), (-905.0), (-905.0), 2.0, (-1.0), (-905.0), (-1550.0), 359.0, 1844.48}, doubleArray1, 0.01);
      assertEquals(8, dateArray0.length);
      assertEquals(9, doubleArray1.length);
      
      Long long0 = new Long(359);
      assertNotNull(long0);
      assertEquals(359L, (long)long0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((-905L)));
      
      Long long1 = new Long(72L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(72L, (long)long1);
      
      boolean boolean1 = arrayList0.add(long1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(long1.equals((Object)long0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayList0.contains((-905L)));
      assertTrue(arrayList0.contains(long1));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, true);
      assertEquals("Mon Nov 29 01:33:10 GMT 2258", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(4.5585531945475E12, range0.getCentralValue(), 0.01);
      assertEquals(9.11710639E12, range0.getUpperBound(), 0.01);
      assertEquals((-905.0), range0.getLowerBound(), 0.01);
      assertEquals(9.117106390905E12, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertArrayEquals(new double[] {(-1.0), (-905.0), (-905.0), 2.0, (-1.0), (-905.0), (-1550.0), 359.0, 1844.48}, doubleArray1, 0.01);
      assertEquals(8, dateArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(mockDate0, mockDate1);
      assertFalse(arrayList0.contains((-905L)));
      assertTrue(arrayList0.contains(long1));
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertEquals("Mon Nov 29 01:33:10 GMT 2258", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4.5585531945475E12, range1.getCentralValue(), 0.01);
      assertEquals(9.11710639E12, range1.getUpperBound(), 0.01);
      assertEquals((-905.0), range1.getLowerBound(), 0.01);
      assertEquals(9.117106390905E12, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertTrue(range1.equals((Object)range0));
      assertArrayEquals(new double[] {(-1.0), (-905.0), (-905.0), 2.0, (-1.0), (-905.0), (-1550.0), 359.0, 1844.48}, doubleArray1, 0.01);
      assertEquals(8, dateArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertEquals("Mon Nov 29 01:33:10 GMT 2258", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-1550.0), range2.getLowerBound(), 0.01);
      assertEquals(359.0, range2.getUpperBound(), 0.01);
      assertEquals(1909.0, range2.getLength(), 0.01);
      assertEquals((-595.5), range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertArrayEquals(new double[] {(-1.0), (-905.0), (-905.0), 2.0, (-1.0), (-905.0), (-1550.0), 359.0, 1844.48}, doubleArray1, 0.01);
      assertEquals(8, dateArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      UnaryOperator<Byte> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Byte byte0 = new Byte((byte)64);
      assertNotNull(byte0);
      assertEquals((byte)64, (byte)byte0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(byte0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Byte byte1 = new Byte((byte) (-84));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-84), (byte)byte1);
      
      boolean boolean0 = arrayList0.add(byte1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(boolean0);
      assertFalse(arrayList0.contains(byte0));
      assertTrue(arrayList0.contains(byte1));
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) arrayList0, range1, false);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertNull(range2);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertFalse(arrayList0.contains(byte0));
      assertTrue(arrayList0.contains(byte1));
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      double[] doubleArray1 = new double[16];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(15, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertEquals(16, doubleArray1.length);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(15, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(16, doubleArray1.length);
      assertEquals(16, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = polynomialFunction2D0.getCoefficients();
      assertEquals(15, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray3);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(16, doubleArray1.length);
      assertEquals(16, doubleArray3.length);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(11, doubleArray0.length);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) double0, 7.677786874990958);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, doubleArray0.length);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "TimePeriodAnchor.MIDDLE", 7.677786874990958);
      assertNotNull(defaultPieDataset0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-753.7162626303353), 7.677786874990958, 14, "TimePeriodAnchor.MIDDLE");
      assertEquals(15, polynomialFunction2D0.getOrder());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(7.677786874990943, xYSeries0.getMaxX(), 0.01);
      assertEquals((-753.7162626303353), xYSeries0.getMinX(), 0.01);
      assertEquals(14, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertNotNull(xYSeries0);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(16, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)21);
      assertNotNull(byte0);
      assertEquals((byte)21, (byte)byte0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("");
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      assertTrue(stack0.contains(""));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<Long> stack1 = new Stack<Long>();
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range0);
      assertTrue(stack0.contains(""));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range1);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      keyToGroupMap0.mapKeyToGroup(byte0, byte0);
      assertEquals(2, keyToGroupMap0.getGroupCount());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(2, keyToGroupMap0.getGroupCount());
      assertNull(range2);
      
      Range range3 = Range.combine((Range) null, (Range) null);
      assertNull(range3);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Integer integer0 = new Integer((-492));
      assertNotNull(integer0);
      assertEquals((-492), (int)integer0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      String string0 = hour0.toString();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(string0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("[20,14/2/2014]", string0);
      
      timeTableXYDataset0.add((TimePeriod) hour0, (Number) 0, "[20,14/2/2014]", false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 2);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "[20,14/2/2014]", (double) 2919);
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) "[20,14/2/2014]", (double) 23, 2);
      assertNotNull(pieDataset2);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, pieDataset2);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset2, pieDataset1);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeTableXYDataset0, true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList1 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset1);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset0.equals((Object)pieDataset2));
      assertTrue(pieDataset1.equals((Object)pieDataset2));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(boolean0);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, pieDataset2);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add("");
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean0);
      assertTrue(vector0.contains(""));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultWindDataset0, vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid series index: -1
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1L, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      Instant instant0 = mockDate0.toInstant();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(instant0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1.0, number0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-9999.0), range0.getUpperBound(), 0.01);
      assertEquals((-9999.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-9999.0), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) oHLCDataItemArray0, (Comparable[]) null, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      UnaryOperator<Byte> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Byte byte0 = new Byte((byte)16);
      assertNotNull(byte0);
      assertEquals((byte)16, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte)16));
      
      Byte byte1 = new Byte((byte)64);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)64, (byte)byte1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(byte1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean boolean1 = arrayList0.add(byte1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains((byte)16));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, arrayList0, true);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(range0);
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(arrayList0.contains((byte)16));
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(1064, (byte)64);
      assertEquals(1064.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(64.0, lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      XYSeries xYSeries0 = new XYSeries(byte1, true);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertNotNull(xYSeries0);
      assertFalse(byte1.equals((Object)byte0));
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) 1064, 489.76762);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(489.76762, xYSeries0.getMaxY(), 0.01);
      assertEquals(1064.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1064.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(489.76762, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYDataItem0);
      assertFalse(byte1.equals((Object)byte0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, (-1092.9314493), 1064, 100, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[8][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(8, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(0.0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      double[][] doubleArray1 = new double[3][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("v.7PWvVQ$)I2dd", "v.7PWvVQ$)I2dd", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray1.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(3, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(3, doubleArray1.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) vector0, range0, true);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNull(range1);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      assertNotNull(byte0);
      assertEquals((byte)48, (byte)byte0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1072, (-377.74037623));
      assertEquals(1072.0, powerFunction2D0.getA(), 0.01);
      assertEquals((-377.74037623), powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-377.74037623), 5.399790403478091, 1072, byte0);
      assertEquals(1072.0, powerFunction2D0.getA(), 0.01);
      assertEquals((-377.74037623), powerFunction2D0.getB(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals(1072.0, powerFunction2D0.getA(), 0.01);
      assertEquals((-377.74037623), powerFunction2D0.getB(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-186.17029291326094), range0.getCentralValue(), 0.01);
      assertEquals(384.1401666334781, range0.getLength(), 0.01);
      assertEquals((-378.24037623), range0.getLowerBound(), 0.01);
      assertEquals(5.899790403478107, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(byte0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      simpleHistogramDataset0.setGroup(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertEquals(1072.0, powerFunction2D0.getA(), 0.01);
      assertEquals((-377.74037623), powerFunction2D0.getB(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(2.409173133508774E-274, range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      assertNotNull(byte0);
      assertEquals((byte)48, (byte)byte0);
      
      MockDate mockDate0 = new MockDate((byte)48, (byte)48, (byte)48, 184, 1426, 359);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(1426);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      boolean boolean0 = mockDate0.before(mockDate1);
      assertEquals("Mon Feb 25 15:51:59 GMT 1952", mockDate0.toString());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate1.toString());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertTrue(boolean0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate1, mockDate0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Day day0 = new Day(mockDate1, timeZone0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate1.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1426L, day0.getFirstMillisecond());
      assertEquals(1426L, day0.getLastMillisecond());
      assertNotNull(day0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate1;
      dateArray0[2] = (Date) mockDate1;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 761L;
      doubleArray0[1] = (double) 359;
      doubleArray0[2] = (double) 359;
      doubleArray0[3] = (double) 761L;
      doubleArray0[4] = (double) 1426;
      doubleArray0[5] = (double) 761L;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte)48;
      doubleArray1[1] = (double) 761L;
      doubleArray1[2] = (double) 761L;
      doubleArray1[3] = (double) 184;
      doubleArray1[4] = (double) 359;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(day0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate1.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1426L, day0.getFirstMillisecond());
      assertEquals(1426L, day0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {48.0, 761.0, 761.0, 184.0, 359.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {761.0, 359.0, 359.0, 761.0, 1426.0, 761.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      
      Long long0 = new Long(12L);
      assertNotNull(long0);
      assertEquals(12L, (long)long0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(12L));
      
      Long long1 = new Long(1197L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1197L, (long)long1);
      
      boolean boolean1 = arrayList0.add(long1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(long1.equals((Object)long0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayList0.contains(12L));
      assertTrue(arrayList0.contains(1197L));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, true);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate1.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1426L, day0.getFirstMillisecond());
      assertEquals(1426L, day0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-2.81635439787E11), range0.getCentralValue(), 0.01);
      assertEquals((-5.63270881E11), range0.getLowerBound(), 0.01);
      assertEquals(5.63270882426E11, range0.getLength(), 0.01);
      assertEquals(1426.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {48.0, 761.0, 761.0, 184.0, 359.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {761.0, 359.0, 359.0, 761.0, 1426.0, 761.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(arrayList0.contains(12L));
      assertTrue(arrayList0.contains(1197L));
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate1.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1426L, day0.getFirstMillisecond());
      assertEquals(1426L, day0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-2.81635439787E11), range1.getCentralValue(), 0.01);
      assertEquals(5.63270882426E11, range1.getLength(), 0.01);
      assertEquals(1426.0, range1.getUpperBound(), 0.01);
      assertEquals((-5.63270881E11), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(range1.equals((Object)range0));
      assertArrayEquals(new double[] {48.0, 761.0, 761.0, 184.0, 359.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {761.0, 359.0, 359.0, 761.0, 1426.0, 761.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      xYTaskDataset0.setSeriesWidth((byte)1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1.0, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      defaultKeyedValuesDataset0.setValue((Comparable) byte0, (Number) integer0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) integer0, 1163.5570817418327, (-465));
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      Date date0 = year0.getStart();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Byte byte0 = new Byte((byte)44);
      assertNotNull(byte0);
      assertEquals((byte)44, (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte)44));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(defaultBoxAndWhiskerCategoryDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate(537, 537, 537, (-1907), 359, 537);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(761L);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      boolean boolean0 = mockDate1.before(mockDate1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(boolean0);
      assertNotSame(mockDate1, mockDate0);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 8;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertArrayEquals(new double[] {8.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Long long0 = new Long(12L);
      assertNotNull(long0);
      assertEquals(12L, (long)long0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(12L));
      
      Long long1 = new Long((-297L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-297L), (long)long1);
      
      boolean boolean1 = arrayList0.add(long1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(long1.equals((Object)long0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayList0.contains(12L));
      assertTrue(arrayList0.contains((-297L)));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, true);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1.6188750477E13, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.6188750477E13, range0.getUpperBound(), 0.01);
      assertEquals(1.6188750477E13, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertArrayEquals(new double[] {8.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(arrayList0.contains(12L));
      assertTrue(arrayList0.contains((-297L)));
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.6188750477E13, range1.getLowerBound(), 0.01);
      assertEquals(1.6188750477E13, range1.getUpperBound(), 0.01);
      assertEquals(1.6188750477E13, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertTrue(range1.equals((Object)range0));
      assertArrayEquals(new double[] {8.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, false);
      assertEquals(1.6188750477E13, range2.getLowerBound(), 0.01);
      assertEquals(1.6188750477E13, range2.getUpperBound(), 0.01);
      assertEquals(1.6188750477E13, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertArrayEquals(new double[] {8.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(mockDate1, mockDate0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-243L));
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2722.72131), (-9999), (-9999), 9999, (-9999));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      MockDate mockDate1 = new MockDate((-953L));
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      boolean boolean0 = mockDate0.before(mockDate1);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate1.toString());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(boolean0);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate1, mockDate0);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-953L);
      doubleArray0[1] = (double) (-243L);
      doubleArray0[2] = (double) (-953L);
      doubleArray0[3] = 2677.4047349482134;
      doubleArray0[4] = (double) (-9999);
      doubleArray0[5] = (double) (-243L);
      doubleArray0[6] = (double) (-953L);
      doubleArray0[7] = (double) (-243L);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(oHLCDataItem0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertNotNull(defaultHighLowDataset0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertArrayEquals(new double[] {(-953.0), (-243.0), (-953.0), 2677.4047349482134, (-9999.0), (-243.0), (-953.0), (-243.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      
      Long long0 = new Long((-9999));
      assertNotNull(long0);
      assertEquals((-9999L), (long)long0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((-243L)));
      
      Long long1 = new Long((-691L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-691L), (long)long1);
      
      Long long2 = new Long(0L);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(0L, (long)long2);
      
      boolean boolean1 = arrayList0.add(long2);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayList0.contains(long0));
      assertTrue(arrayList0.contains(long2));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, false);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-243.0), range0.getLowerBound(), 0.01);
      assertEquals((-243.0), range0.getUpperBound(), 0.01);
      assertEquals((-243.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertArrayEquals(new double[] {(-953.0), (-243.0), (-953.0), 2677.4047349482134, (-9999.0), (-243.0), (-953.0), (-243.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertNotSame(mockDate0, mockDate1);
      assertFalse(arrayList0.contains(long0));
      assertTrue(arrayList0.contains(long2));
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals((-243.0), range1.getLowerBound(), 0.01);
      assertEquals((-243.0), range1.getUpperBound(), 0.01);
      assertEquals((-243.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertTrue(range1.equals((Object)range0));
      assertArrayEquals(new double[] {(-953.0), (-243.0), (-953.0), 2677.4047349482134, (-9999.0), (-243.0), (-953.0), (-243.0)}, doubleArray0, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-1488), (-1488));
      assertEquals((-1488), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1488), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate(537, 1061, 537, (-1907), 359, 1061);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(761L);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      boolean boolean0 = mockDate1.before(mockDate1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(boolean0);
      assertNotSame(mockDate1, mockDate0);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 8;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertArrayEquals(new double[] {8.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(number0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertArrayEquals(new double[] {8.0}, doubleArray1, 0.01);
      assertEquals(8.0, number0);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(mockDate1, mockDate0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(8.0, range0.getUpperBound(), 0.01);
      assertEquals(8.0, range0.getCentralValue(), 0.01);
      assertEquals(8.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertArrayEquals(new double[] {8.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(mockDate1, mockDate0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1L, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1.0, number0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNull(range0);
      
      Year year1 = (Year)year0.previous();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals("2013", year1.toString());
      assertEquals(2013, year1.getYear());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(number1);
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-9999.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-9999.0), range1.getUpperBound(), 0.01);
      assertEquals((-9999.0), range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(year0.equals((Object)year1));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotSame(year0, year1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-9999.0), range2.getLowerBound(), 0.01);
      assertEquals((-9999.0), range2.getUpperBound(), 0.01);
      assertEquals((-9999.0), range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertFalse(year0.equals((Object)year1));
      assertTrue(range2.equals((Object)range1));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotSame(year0, year1);
      assertNotSame(range2, range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      MockDate mockDate0 = new MockDate((-9999));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-639.28), (-766.0), 9999, 9999, (-766.0));
      assertEquals("Wed Dec 31 23:59:50 GMT 1969", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals("Wed Dec 31 23:59:50 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals("Wed Dec 31 23:59:50 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals((-9999.0), number0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Range range0 = new Range((-9999), (-766.0));
      assertEquals((-766.0), range0.getUpperBound(), 0.01);
      assertEquals(9233.0, range0.getLength(), 0.01);
      assertEquals((-5382.5), range0.getCentralValue(), 0.01);
      assertEquals((-9999.0), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number1);
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (9999.0) <= upper (-766.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-377.74037623);
      doubleArray0[1] = 955.34639;
      doubleArray0[2] = 4117.0;
      doubleArray0[3] = 12.339397619846345;
      doubleArray0[4] = (-4427.94805788);
      doubleArray0[5] = (-0.6119847840776749);
      doubleArray0[6] = (-213.7809104);
      doubleArray0[7] = 1.7976931348623157E308;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-377.74037623), 955.34639, 4117.0, 12.339397619846345, (-4427.94805788), (-0.6119847840776749), (-213.7809104), 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(2096.0577399292, 23.0);
      assertEquals(2096.0577399292, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertNotNull(lineFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-2184.6), (-213.7809104), 627, (-0.6119847840776749));
      assertEquals(2096.0577399292, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals(2096.0577399292, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1199.1904552), range0.getCentralValue(), 0.01);
      assertEquals((-213.28091040000004), range0.getUpperBound(), 0.01);
      assertEquals(1971.8190895999999, range0.getLength(), 0.01);
      assertEquals((-2185.1), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(12.339397619846345);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      simpleHistogramDataset0.setGroup(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, 8.0);
      assertEquals(8.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(2096.0577399292, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYBarDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYBarDataset0, false);
      assertEquals(8.0, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals((-25485.3227296708), range1.getCentralValue(), 0.01);
      assertEquals((-48149.742260070794), range1.getLowerBound(), 0.01);
      assertEquals(45328.83906079999, range1.getLength(), 0.01);
      assertEquals((-2820.903199270801), range1.getUpperBound(), 0.01);
      assertEquals(2096.0577399292, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(23.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Comparable<DefaultIntervalCategoryDataset>[] comparableArray0 = (Comparable<DefaultIntervalCategoryDataset>[]) Array.newInstance(Comparable.class, 8);
      double[][] doubleArray0 = new double[3][6];
      doubleArray0[1] = doubleArray0[0];
      double[] doubleArray1 = new double[8];
      doubleArray1[7] = 1.0;
      doubleArray1[0] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 2792.986203;
      doubleArray1[5] = (double) (-505);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(xYDatasetTableModel0);
      
      timeTableXYDataset0.removeChangeListener(xYDatasetTableModel0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      doubleArray1[6] = 1.0;
      doubleArray0[2] = doubleArray0[1];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(17, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertEquals(18, doubleArray0.length);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(0.0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      simpleHistogramDataset0.addBin((SimpleHistogramBin) null);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Comparable<JDBCXYDataset>[] comparableArray0 = (Comparable<JDBCXYDataset>[]) Array.newInstance(Comparable.class, 2);
      comparableArray0[0] = (Comparable<JDBCXYDataset>) null;
      comparableArray0[1] = (Comparable<JDBCXYDataset>) null;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, comparableArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[][] doubleArray0 = new double[18][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(18, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(18, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)20);
      assertNotNull(byte0);
      assertEquals((byte)20, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte)20));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) histogramDataset0, (List) arrayList0, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-1.0));
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(11, doubleArray0.length);
      assertNotSame(range1, range0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-125));
      assertNotNull(byte0);
      assertEquals((byte) (-125), (byte)byte0);
      
      byte byte1 = (byte)6;
      HashSet<ChronoLocalDate> hashSet0 = new HashSet<ChronoLocalDate>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(8, ",Uw_&", 9, 59, 8, 1055, 1055, 3, 9, (-2563), (-2563), (byte)6, 1061);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day of week 8
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultIntervalCategoryDataset0.setGroup(datasetGroup0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(11, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-769.6269589345678);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-769.6269589345678), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-769.6269589345678), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-769.6269589345678), 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-769.6269589345678), 6.283185307179586, 1072, (-769.6269589345678));
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-769.6269589345678), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      
      Range range1 = xYSeriesCollection0.getRangeBounds(false);
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-769.6269589345678), range1.getLowerBound(), 0.01);
      assertEquals((-769.6269589345678), range1.getUpperBound(), 0.01);
      assertEquals((-769.6269589345678), range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(range1.equals((Object)range0));
      assertArrayEquals(new double[] {(-769.6269589345678), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertEquals(4, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(6.283185307179565, range2.getUpperBound(), 0.01);
      assertEquals((-769.6269589345678), range2.getLowerBound(), 0.01);
      assertEquals(775.9101442417474, range2.getLength(), 0.01);
      assertEquals((-381.67188681369413), range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertArrayEquals(new double[] {(-769.6269589345678), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      Number[][] numberArray0 = new Number[1][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNull(range0);
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)27);
      assertNotNull(byte0);
      assertEquals((byte)27, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte)27));
      
      Byte byte1 = new Byte((byte)27);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)27, (byte)byte1);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(range0);
      assertTrue(arrayList0.contains((byte)27));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      UnaryOperator<Byte> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      byte byte0 = (byte)64;
      Byte byte1 = new Byte((byte)23);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)23, (byte)byte1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(byte1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean boolean0 = arrayList0.add(byte1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(boolean0);
      assertFalse(arrayList0.contains(byte0));
      assertTrue(arrayList0.contains((byte)23));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset1 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset1);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset1.getRangeBounds(true);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertTrue(defaultBoxAndWhiskerCategoryDataset1.equals((Object)defaultBoxAndWhiskerCategoryDataset0));
      assertNotSame(defaultBoxAndWhiskerCategoryDataset1, defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("UTC", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("UTC", timeZone0.getID());
      assertNotNull(timeTableXYDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) (byte)64);
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(64.0, range1.getLowerBound(), 0.01);
      assertEquals(64.0, range1.getCentralValue(), 0.01);
      assertEquals(64.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("UTC", timeZone0.getID());
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultWindDataset0, (List) arrayList0, range1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid series index: -1
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)27);
      assertNotNull(byte0);
      assertEquals((byte)27, (byte)byte0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      assertFalse(arrayList0.contains(byte0));
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(range1);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add("zCp,cNv4=@q#h");
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[zCp,cNv4=@q#h]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      assertTrue(vector0.contains("zCp,cNv4=@q#h"));
      
      boolean boolean1 = vector0.add("");
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[zCp,cNv4=@q#h, ]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(vector0.contains(""));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNull(range1);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      Number[][] numberArray0 = new Number[2][5];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) integer0, (-3288.77724581621), (-388));
      assertNotNull(pieDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) integer0, 278.4227073062156);
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNull(number1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long long0 = (-243L);
      MockDate mockDate0 = new MockDate((-243L));
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2722.72131), (-9999), (-9999), 9999, (-9999));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add("v]C9ef~j.}");
      assertEquals(10, vector0.capacity());
      assertEquals("[v]C9ef~j.}]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      assertTrue(vector0.contains("v]C9ef~j.}"));
      
      boolean boolean1 = vector0.add("v]C9ef~j.}");
      assertEquals(2, vector0.size());
      assertEquals("[v]C9ef~j.}, v]C9ef~j.}]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(vector0.contains("v]C9ef~j.}"));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultXYDataset0, 9999);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(9999.0, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      defaultXYDataset0.addChangeListener(xYBarDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(9999.0, xYBarDataset0.getBarWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(xYBarDataset0, vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[][] doubleArray0 = new double[15][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(15, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(15, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(15, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(15, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(15, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(15, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(15, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(15, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(15, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-769.6269589345678);
      Range range1 = Range.combine(range0, range0);
      assertEquals(15, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(15, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(15, doubleArray0.length);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = polynomialFunction2D0.getCoefficients();
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray3);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray3, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray3.length);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(defaultMultiValueCategoryDataset0));
      
      boolean boolean0 = arrayList0.add(defaultMultiValueCategoryDataset0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(defaultMultiValueCategoryDataset0));
      
      Range range2 = Range.shift(range0, (-769.6269589345678), true);
      assertEquals(15, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(15, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-769.6269589345678), range2.getUpperBound(), 0.01);
      assertEquals((-769.6269589345678), range2.getCentralValue(), 0.01);
      assertEquals((-769.6269589345678), range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(15, doubleArray0.length);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)27);
      assertNotNull(byte0);
      assertEquals((byte)27, (byte)byte0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      assertFalse(arrayList0.contains((byte)27));
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 1064.0);
      assertNull(range0);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNull(range1);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      LinkedList<DefaultStatisticalCategoryDataset> linkedList0 = new LinkedList<DefaultStatisticalCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, linkedList0.size());
      assertNull(range2);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number0);
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, true);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNull(range3);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      UnaryOperator<Byte> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Byte byte0 = new Byte((byte)64);
      assertNotNull(byte0);
      assertEquals((byte)64, (byte)byte0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(byte0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte)64));
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) arrayList0, range0, false);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertNull(range1);
      assertTrue(arrayList0.contains((byte)64));
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(number0);
      
      MockDate mockDate0 = new MockDate((-9223372036854775808L));
      assertNotNull(mockDate0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      jDBCXYDataset0.setTimeSeries(false);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(range1);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      Number[][] numberArray0 = new Number[2][5];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1053, 1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1053, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      List list0 = slidingGanttCategoryDataset0.getColumnKeys();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1053, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate(537, 1061, 1, (-1907), 359, 1061);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(761L);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      MockDate mockDate2 = new MockDate(3301L);
      assertNotNull(mockDate2);
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertFalse(mockDate2.equals((Object)mockDate0));
      
      boolean boolean0 = mockDate2.before(mockDate1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals("Thu Jan 01 00:00:03 GMT 1970", mockDate2.toString());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(mockDate1.equals((Object)mockDate2));
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertFalse(mockDate2.equals((Object)mockDate0));
      assertFalse(boolean0);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(mockDate1, mockDate2);
      assertNotSame(mockDate2, mockDate1);
      assertNotSame(mockDate2, mockDate0);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 8;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(mockDate1.equals((Object)mockDate2));
      assertArrayEquals(new double[] {8.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(number0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(mockDate1.equals((Object)mockDate2));
      assertArrayEquals(new double[] {8.0}, doubleArray1, 0.01);
      assertEquals(8.0, number0);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(mockDate1, mockDate2);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) number0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(predicate0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(mockDate1.equals((Object)mockDate2));
      assertArrayEquals(new double[] {8.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(mockDate1, mockDate2);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(predicate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(mockDate1.equals((Object)mockDate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertArrayEquals(new double[] {8.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(mockDate1, mockDate2);
      
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(predicate2);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(mockDate1.equals((Object)mockDate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertArrayEquals(new double[] {8.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(mockDate1, mockDate2);
      
      boolean boolean1 = stack0.removeIf(predicate2);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(mockDate1.equals((Object)mockDate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertArrayEquals(new double[] {8.0}, doubleArray1, 0.01);
      assertFalse(boolean1);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(mockDate1, mockDate2);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(dateArray0, dateArray0, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(1, dateArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1, (List) stack0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "?@*%";
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 3286.682794;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "?@*%", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) "?@*%");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (-5544.522747252615));
      assertNull(range0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)27);
      assertNotNull(byte0);
      assertEquals((byte)27, (byte)byte0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      int int1 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range1);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) byte0, (-5544.522747252615), (int) (byte)27);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      assertNotNull(byte0);
      assertEquals((byte)48, (byte)byte0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(byte0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Long long0 = new Long((byte)48);
      assertNotNull(long0);
      assertEquals(48L, (long)long0);
      
      double[][] doubleArray0 = new double[0][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "The number of categories does not match the data.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      assertNotNull(byte0);
      assertEquals((byte)48, (byte)byte0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Byte byte1 = new Byte((byte)1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte)48));
      
      Byte byte2 = new Byte((byte)103);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)103, (byte)byte2);
      
      boolean boolean0 = arrayList0.add(byte2);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte)103));
      assertFalse(arrayList0.contains((byte)48));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range0);
      assertTrue(arrayList0.contains((byte)103));
      assertFalse(arrayList0.contains((byte)48));
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range1);
      assertTrue(arrayList0.contains((byte)103));
      assertFalse(arrayList0.contains((byte)48));
      
      Range range2 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-769.6269589345678);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-769.6269589345678), 1072, 1072, (-769.6269589345678));
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1842.626958934568, range1.getLength(), 0.01);
      assertEquals(151.1865205327161, range1.getCentralValue(), 0.01);
      assertEquals((-770.1269589345678), range1.getLowerBound(), 0.01);
      assertEquals(1072.5, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(range1.equals((Object)range0));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(range1, range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-769.6269589345678));
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      simpleHistogramDataset0.setGroup(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals((-769.6269589345678), range2.getLowerBound(), 0.01);
      assertEquals((-769.6269589345678), range2.getUpperBound(), 0.01);
      assertEquals((-769.6269589345678), range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals((-769.6269589345678), range3.getLowerBound(), 0.01);
      assertEquals((-769.6269589345678), range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-769.6269589345678), range3.getUpperBound(), 0.01);
      assertNotNull(range3);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = defaultBoxAndWhiskerCategoryDataset0.getRowCount();
      assertEquals(0, int0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(number0);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYIntervalSeriesCollection0, true);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 23.0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(23.0, range1.getLowerBound(), 0.01);
      assertEquals(23.0, range1.getUpperBound(), 0.01);
      assertEquals(23.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(boolean0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(Double.NaN, range2.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range1);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range3);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      // Undeclared exception!
      try { 
        xIntervalSeriesCollection0.getSeries(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XIntervalSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 1064.0);
      assertNull(range0);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add("Null 'rowKey' argument.");
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[Null 'rowKey' argument.]", vector0.toString());
      assertEquals(1, vector0.size());
      assertTrue(boolean0);
      assertTrue(vector0.contains("Null 'rowKey' argument."));
      
      boolean boolean1 = true;
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[Null 'rowKey' argument.]", vector0.toString());
      assertEquals(1, vector0.size());
      assertNull(range1);
      assertTrue(vector0.contains("Null 'rowKey' argument."));
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      Byte byte0 = new Byte((byte)37);
      assertNotNull(byte0);
      assertEquals((byte)37, (byte)byte0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      KeyToGroupMap keyToGroupMap1 = (KeyToGroupMap)keyToGroupMap0.clone();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertNotNull(keyToGroupMap1);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertNotSame(keyToGroupMap0, keyToGroupMap1);
      assertNotSame(keyToGroupMap1, keyToGroupMap0);
      
      KeyToGroupMap keyToGroupMap2 = new KeyToGroupMap("Null 'rowKey' argument.");
      assertEquals(1, keyToGroupMap2.getGroupCount());
      assertNotNull(keyToGroupMap2);
      assertFalse(keyToGroupMap2.equals((Object)keyToGroupMap1));
      assertFalse(keyToGroupMap2.equals((Object)keyToGroupMap0));
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap2);
      assertEquals(1, keyToGroupMap2.getGroupCount());
      assertNull(range2);
      assertFalse(keyToGroupMap2.equals((Object)keyToGroupMap1));
      assertFalse(keyToGroupMap2.equals((Object)keyToGroupMap0));
      assertNotSame(keyToGroupMap2, keyToGroupMap1);
      assertNotSame(keyToGroupMap2, keyToGroupMap0);
      
      Object[][][] objectArray0 = new Object[3][6][0];
      Object[][] objectArray1 = new Object[0][7];
      objectArray0[0] = objectArray1;
      Object[][] objectArray2 = new Object[8][3];
      assertFalse(objectArray2.equals((Object)objectArray1));
      
      Object[] objectArray3 = new Object[5];
      objectArray3[0] = (Object) null;
      objectArray3[1] = (Object) timeZone0;
      objectArray3[2] = (Object) keyToGroupMap2;
      objectArray3[3] = (Object) null;
      objectArray3[4] = (Object) null;
      objectArray2[0] = objectArray3;
      Object[] objectArray4 = new Object[0];
      assertFalse(objectArray4.equals((Object)objectArray3));
      
      objectArray2[1] = objectArray4;
      Object[] objectArray5 = new Object[6];
      assertFalse(objectArray5.equals((Object)objectArray4));
      assertFalse(objectArray5.equals((Object)objectArray3));
      
      objectArray5[0] = (Object) null;
      objectArray5[1] = (Object) "Null 'rowKey' argument.";
      objectArray5[2] = (Object) null;
      objectArray5[3] = (Object) keyToGroupMap1;
      objectArray5[4] = (Object) null;
      objectArray5[5] = (Object) vector0;
      objectArray2[2] = objectArray5;
      Object[] objectArray6 = new Object[5];
      assertFalse(objectArray6.equals((Object)objectArray3));
      assertFalse(objectArray6.equals((Object)objectArray4));
      assertFalse(objectArray6.equals((Object)objectArray5));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray6[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray6[1] = object1;
      objectArray6[2] = (Object) null;
      objectArray6[3] = (Object) byte0;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray6[4] = object2;
      objectArray2[3] = objectArray6;
      Object[] objectArray7 = new Object[7];
      assertFalse(objectArray7.equals((Object)objectArray3));
      assertFalse(objectArray7.equals((Object)objectArray6));
      assertFalse(objectArray7.equals((Object)objectArray5));
      assertFalse(objectArray7.equals((Object)objectArray4));
      
      objectArray7[0] = (Object) vector0;
      objectArray7[1] = (Object) null;
      objectArray7[2] = object1;
      objectArray7[3] = (Object) vector0;
      objectArray7[4] = (Object) null;
      objectArray7[5] = (Object) mockDate0;
      objectArray7[6] = (Object) "Null 'rowKey' argument.";
      objectArray2[4] = objectArray7;
      Object[] objectArray8 = new Object[8];
      assertFalse(objectArray8.equals((Object)objectArray5));
      assertFalse(objectArray8.equals((Object)objectArray7));
      assertFalse(objectArray8.equals((Object)objectArray6));
      assertFalse(objectArray8.equals((Object)objectArray3));
      assertFalse(objectArray8.equals((Object)objectArray4));
      
      objectArray8[0] = (Object) timeZone0;
      objectArray8[1] = (Object) null;
      objectArray8[2] = (Object) null;
      objectArray8[3] = (Object) keyToGroupMap0;
      objectArray8[4] = object0;
      objectArray8[5] = object0;
      objectArray8[6] = (Object) vector0;
      objectArray8[7] = (Object) null;
      objectArray2[5] = objectArray8;
      Object[] objectArray9 = new Object[9];
      assertFalse(objectArray9.equals((Object)objectArray8));
      assertFalse(objectArray9.equals((Object)objectArray5));
      assertFalse(objectArray9.equals((Object)objectArray3));
      assertFalse(objectArray9.equals((Object)objectArray6));
      assertFalse(objectArray9.equals((Object)objectArray7));
      assertFalse(objectArray9.equals((Object)objectArray4));
      
      objectArray9[0] = (Object) defaultStatisticalCategoryDataset0;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      
      objectArray9[1] = object3;
      objectArray9[2] = (Object) null;
      objectArray9[3] = object1;
      objectArray9[4] = (Object) defaultStatisticalCategoryDataset0;
      objectArray9[5] = (Object) keyToGroupMap0;
      objectArray9[6] = (Object) null;
      objectArray9[7] = (Object) timeZone0;
      objectArray9[8] = object2;
      objectArray2[6] = objectArray9;
      Object[] objectArray10 = new Object[0];
      assertFalse(objectArray10.equals((Object)objectArray6));
      assertFalse(objectArray10.equals((Object)objectArray4));
      assertFalse(objectArray10.equals((Object)objectArray7));
      assertFalse(objectArray10.equals((Object)objectArray3));
      assertFalse(objectArray10.equals((Object)objectArray5));
      assertFalse(objectArray10.equals((Object)objectArray9));
      assertFalse(objectArray10.equals((Object)objectArray8));
      
      objectArray2[7] = objectArray10;
      objectArray0[1] = objectArray2;
      Object[][] objectArray11 = new Object[8][7];
      assertFalse(objectArray11.equals((Object)objectArray2));
      assertFalse(objectArray11.equals((Object)objectArray1));
      
      objectArray11[0] = objectArray10;
      objectArray11[1] = objectArray8;
      objectArray11[2] = objectArray6;
      objectArray11[3] = objectArray4;
      objectArray11[4] = objectArray4;
      objectArray11[5] = objectArray5;
      objectArray11[6] = objectArray9;
      objectArray11[7] = objectArray4;
      objectArray0[2] = objectArray11;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-769.6269589345678);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-769.6269589345678), 6.283185307179586, 1072, (-769.6269589345678));
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(776.9101442417474, range1.getLength(), 0.01);
      assertEquals(6.783185307179565, range1.getUpperBound(), 0.01);
      assertEquals((-381.67188681369413), range1.getCentralValue(), 0.01);
      assertEquals((-770.1269589345678), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(range1.equals((Object)range0));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(range1, range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-769.6269589345678));
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      simpleHistogramDataset0.setGroup(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-769.6269589345678), range2.getLowerBound(), 0.01);
      assertEquals((-769.6269589345678), range2.getCentralValue(), 0.01);
      assertEquals((-769.6269589345678), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-769.6269589345678), range3.getCentralValue(), 0.01);
      assertEquals((-769.6269589345678), range3.getLowerBound(), 0.01);
      assertEquals((-769.6269589345678), range3.getUpperBound(), 0.01);
      assertNotNull(range3);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1.0, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 6.9695986567776185, (-2670.606), (-9999), (-907.13), (-9999));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) oHLCDataItem0, (double) 1L, 2944);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(defaultPieDataset0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      
      defaultPieDataset0.setValue((Comparable) oHLCDataItem1, (-2951.8399));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertTrue(boolean0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Byte byte0 = new Byte((byte)10);
      assertNotNull(byte0);
      assertEquals((byte)10, (byte)byte0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(byte0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (byte)1;
      doubleArray1[1] = (double) (byte)1;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = polynomialFunction2D0.getCoefficients();
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray3);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray3, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(1.0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(number0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      Range range1 = xYSeriesCollection0.getRangeBounds(true);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNull(range1);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long(0L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, vector0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)116);
      assertNotNull(byte0);
      assertEquals((byte)116, (byte)byte0);
      
      Byte byte1 = new Byte((byte)116);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)116, (byte)byte1);
      
      MockDate mockDate0 = new MockDate((-1290), 1049, 1049, 1068, (byte)116);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (byte)116;
      doubleArray2[1] = (double) 1049;
      doubleArray2[2] = (double) 1068;
      doubleArray2[3] = (double) 1068;
      doubleArray2[4] = (double) 1049;
      doubleArray2[5] = (-789.5496198236481);
      doubleArray2[6] = (double) (-1290);
      doubleArray2[7] = (double) 1068;
      doubleArray2[8] = (double) 1068;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(byte1, dateArray0, doubleArray1, doubleArray1, doubleArray2, doubleArray1, doubleArray1);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {116.0, 1049.0, 1068.0, 1068.0, 1049.0, (-789.5496198236481), (-1290.0), 1068.0, 1068.0}, doubleArray2, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, false);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-4.006423464E13), range1.getCentralValue(), 0.01);
      assertEquals((-4.006423464E13), range1.getUpperBound(), 0.01);
      assertEquals((-4.006423464E13), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(range1.equals((Object)range0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {116.0, 1049.0, 1068.0, 1068.0, 1049.0, (-789.5496198236481), (-1290.0), 1068.0, 1068.0}, doubleArray2, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(range1, range0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      MockDate mockDate0 = new MockDate(359, (-1955), 575, 359, 3243, 1047);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate((-880L));
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      MockDate mockDate2 = new MockDate((-576L));
      assertNotNull(mockDate2);
      assertFalse(mockDate2.equals((Object)mockDate0));
      assertFalse(mockDate2.equals((Object)mockDate1));
      
      boolean boolean0 = mockDate2.before(mockDate1);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate1.toString());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate2.toString());
      assertFalse(mockDate1.equals((Object)mockDate2));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(mockDate2.equals((Object)mockDate0));
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertFalse(boolean0);
      assertNotSame(mockDate1, mockDate2);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(mockDate2, mockDate0);
      assertNotSame(mockDate2, mockDate1);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate2;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 575;
      doubleArray2[1] = (double) 761L;
      long long0 = mockDate2.getTime();
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate2.toString());
      assertFalse(mockDate2.equals((Object)mockDate0));
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertEquals((-576L), long0);
      assertNotSame(mockDate2, mockDate0);
      assertNotSame(mockDate2, mockDate1);
      
      doubleArray2[2] = 4110.3358457638;
      doubleArray2[3] = (-769.6269589345678);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray1, doubleArray2, doubleArray2, doubleArray1, doubleArray2);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Sat Sep 14 05:20:27 GMT 2097", mockDate0.toString());
      assertNotNull(defaultHighLowDataset0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(mockDate0.equals((Object)mockDate2));
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {575.0, 761.0, 4110.3358457638, (-769.6269589345678)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertEquals(4, doubleArray2.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Sat Sep 14 05:20:27 GMT 2097", mockDate0.toString());
      assertNotNull(number0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(mockDate0.equals((Object)mockDate2));
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {575.0, 761.0, 4110.3358457638, (-769.6269589345678)}, doubleArray2, 0.01);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(mockDate0, mockDate2);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(doubleArray2, doubleArray1);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("Sat Sep 14 05:20:27 GMT 2097", mockDate0.toString());
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(mockDate0.equals((Object)mockDate2));
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {575.0, 761.0, 4110.3358457638, (-769.6269589345678)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(range1, range0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(mockDate0, mockDate2);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(doubleArray2, doubleArray1);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Sat Sep 14 05:20:27 GMT 2097", mockDate0.toString());
      assertNotNull(number1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertTrue(number1.equals((Object)number0));
      assertFalse(mockDate0.equals((Object)mockDate2));
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {575.0, 761.0, 4110.3358457638, (-769.6269589345678)}, doubleArray2, 0.01);
      assertEquals(0.0, number1);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, dateArray0.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(mockDate0, mockDate2);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(doubleArray2, doubleArray1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (575.0) <= upper (0.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-769.6269589345678);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-769.6269589345678), 6.283185307179586, 1072, (-769.6269589345678));
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(776.9101442417474, range1.getLength(), 0.01);
      assertEquals(6.783185307179565, range1.getUpperBound(), 0.01);
      assertEquals((-381.67188681369413), range1.getCentralValue(), 0.01);
      assertEquals((-770.1269589345678), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(range1.equals((Object)range0));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(range1, range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Date[] dateArray0 = new Date[3];
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(482);
      assertEquals(26, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(482, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertNotNull(spreadsheetDate0);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      Date date0 = spreadsheetDate0.toDate();
      assertEquals(26, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertEquals(482, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(4, spreadsheetDate0.getMonth());
      assertEquals(1901, spreadsheetDate0.getYYYY());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      
      dateArray0[0] = date0;
      MockDate mockDate0 = new MockDate((-38), 3, 2, 2, 2958465);
      assertNotNull(mockDate0);
      
      dateArray0[1] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(3, 3, 2958465, 121, 121, 5);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      dateArray0[2] = (Date) mockDate1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset((-769.6269589345678), dateArray0, doubleArray2, doubleArray2, doubleArray2, doubleArray2, doubleArray2);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(defaultHighLowDataset0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(3, dateArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate(537, 1061, 1, (-1907), 359, 1061);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(761L);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      MockDate mockDate2 = new MockDate(3301L);
      assertNotNull(mockDate2);
      assertFalse(mockDate2.equals((Object)mockDate0));
      assertFalse(mockDate2.equals((Object)mockDate1));
      
      boolean boolean0 = mockDate2.before(mockDate1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals("Thu Jan 01 00:00:03 GMT 1970", mockDate2.toString());
      assertFalse(mockDate1.equals((Object)mockDate2));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(mockDate2.equals((Object)mockDate0));
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertFalse(boolean0);
      assertNotSame(mockDate1, mockDate2);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(mockDate2, mockDate0);
      assertNotSame(mockDate2, mockDate1);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 8;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertFalse(mockDate1.equals((Object)mockDate2));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertArrayEquals(new double[] {8.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(number0);
      assertFalse(mockDate1.equals((Object)mockDate2));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertArrayEquals(new double[] {8.0}, doubleArray1, 0.01);
      assertEquals(8.0, number0);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(mockDate1, mockDate2);
      assertNotSame(mockDate1, mockDate0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(8.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(8.0, range0.getUpperBound(), 0.01);
      assertEquals(8.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertFalse(mockDate1.equals((Object)mockDate2));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertArrayEquals(new double[] {8.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(mockDate1, mockDate2);
      assertNotSame(mockDate1, mockDate0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(number1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2951.0122;
      doubleArray1[1] = (-2.147483648E9);
      doubleArray1[2] = (-2.147483648E9);
      doubleArray1[3] = 2951.0122;
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals((-1.0737403484939E9), range0.getCentralValue(), 0.01);
      assertEquals((-2.147483648E9), range0.getLowerBound(), 0.01);
      assertEquals(2.1474865990122E9, range0.getLength(), 0.01);
      assertEquals(2951.0122, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      List list1 = keyToGroupMap0.getGroups();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-1.0737403484939E9), range1.getCentralValue(), 0.01);
      assertEquals(2951.0122, range1.getUpperBound(), 0.01);
      assertEquals((-2.147483648E9), range1.getLowerBound(), 0.01);
      assertEquals(2.1474865990122E9, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[][] doubleArray0 = new double[18][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(18, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(boolean0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(18, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(18, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(18, doubleArray0.length);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Integer integer0 = new Integer((-505));
      assertNotNull(integer0);
      assertEquals((-505), (int)integer0);
      
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      String string0 = hour0.toString();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(string0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("[20,14/2/2014]", string0);
      
      timeTableXYDataset0.add((TimePeriod) hour0, (Number) 23, "[20,14/2/2014]", true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Hour hour1 = (Hour)hour0.next();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertNotNull(hour1);
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(double0);
      assertEquals(23.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, (double) 9999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range0);
      
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate(1056);
      assertNotNull(mockDate0);
      
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) (-9999);
      doubleArray0[2] = (double) (-284);
      long long0 = year0.getMiddleMillisecond();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1392409281320L, long0);
      
      doubleArray0[3] = (double) 1056;
      doubleArray0[4] = (double) (-284);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1037;
      doubleArray1[1] = (double) 9999;
      doubleArray1[2] = (double) 1037;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(year0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertNotNull(defaultHighLowDataset0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-9999.0), (-284.0), 1056.0, (-284.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1037.0, 9999.0, 1037.0}, doubleArray1, 0.01);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(9999.0, range1.getLength(), 0.01);
      assertEquals((-4999.5), range1.getCentralValue(), 0.01);
      assertEquals((-9999.0), range1.getLowerBound(), 0.01);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertNotNull(range1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-9999.0), (-284.0), 1056.0, (-284.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1037.0, 9999.0, 1037.0}, doubleArray1, 0.01);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("}", "Ms9Qg$Z]b'HV", "}", "VGwKDp1jN~^");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      Year year1 = (Year)year0.next();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals("2015", year1.toString());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2015, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      MockDate mockDate0 = new MockDate(1900, 9999, (-284), (-284), 14, (-284));
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(0L);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate1;
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertNotNull(date0);
      
      dateArray0[1] = date0;
      dateArray0[2] = (Date) mockDate1;
      dateArray0[3] = (Date) mockDate1;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 1056;
      doubleArray0[3] = (double) (-9999);
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) (-284);
      doubleArray0[6] = (double) 2;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(integer0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {1.0, 1.0, 1056.0, (-9999.0), 0.0, (-284.0), 2.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(7, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1056.0, range0.getUpperBound(), 0.01);
      assertEquals((-9999.0), range0.getLowerBound(), 0.01);
      assertEquals((-4471.5), range0.getCentralValue(), 0.01);
      assertEquals(11055.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertArrayEquals(new double[] {1.0, 1.0, 1056.0, (-9999.0), 0.0, (-284.0), 2.0}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(0.0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      double[][] doubleArray1 = new double[3][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[1] = 269.1637330785202;
      doubleArray2[2] = (double) 1L;
      doubleArray2[3] = (double) 1L;
      doubleArray2[4] = (double) 1L;
      doubleArray2[5] = (double) 1L;
      doubleArray2[6] = (double) 1L;
      doubleArray2[7] = (double) 1L;
      doubleArray1[2] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray1.length);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(simpleHistogramDataset0, vector0, false);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1342);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1342, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 1064.0);
      assertNull(range0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      UnaryOperator<Byte> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      byte byte0 = (byte)124;
      Byte byte1 = new Byte((byte)124);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)124, (byte)byte1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(byte1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      assertTrue(byte1.equals((Object)byte0));
      
      boolean boolean0 = arrayList0.add(byte1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range1);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-1647.4125102915996));
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1647.4125102915996), range2.getLowerBound(), 0.01);
      assertEquals((-1647.4125102915996), range2.getCentralValue(), 0.01);
      assertEquals((-1647.4125102915996), range2.getUpperBound(), 0.01);
      assertNotNull(range2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) arrayList0, range2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 1064.0);
      assertNull(range0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)124);
      assertNotNull(byte0);
      assertEquals((byte)124, (byte)byte0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(byte0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) byte0, (Number) byte0);
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, hour0.getHour());
      assertEquals(0L, hour0.getLastMillisecond());
      assertEquals(0L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Hour hour1 = (Hour)hour0.next();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, hour0.getHour());
      assertEquals(0L, hour0.getLastMillisecond());
      assertEquals(0L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1, hour1.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertNotNull(hour1);
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) hour1, (-2.147483648E9), 23);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, hour0.getHour());
      assertEquals(0L, hour0.getLastMillisecond());
      assertEquals(0L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1, hour1.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertNotNull(defaultPieDataset0);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 426);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("'%9$L%0<r.P=Bk|U,UA");
      assertFalse(stack0.isEmpty());
      assertEquals("['%9$L%0<r.P=Bk|U,UA]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      assertTrue(stack0.contains("'%9$L%0<r.P=Bk|U,UA"));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      Year year1 = (Year)year0.next();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals("2015", year1.toString());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals(2015, year1.getYear());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-9999);
      doubleArray0[2] = (double) (-9999);
      doubleArray0[3] = (double) 9999;
      doubleArray0[4] = (double) 9999;
      doubleArray0[5] = 4819.27809024;
      doubleArray0[6] = (double) (-9999);
      doubleArray0[7] = 805.223;
      doubleArray0[8] = (double) 9999;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-9999.0), 0.0, (-9999.0), 9999.0, 9999.0, 4819.27809024, (-9999.0), 805.223, 9999.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-9999.0), 0.0, (-9999.0), 9999.0, 9999.0, 4819.27809024, (-9999.0), 805.223, 9999.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-9999.0), 0.0, (-9999.0), 9999.0, 9999.0, 4819.27809024, (-9999.0), 805.223, 9999.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-9999.0));
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(number0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection((XYSeries) null);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = xYSeriesCollection0.getRangeBounds(false);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNull(range0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long(9999);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(9999L, (long)long1);
      
      boolean boolean0 = arrayList0.add(long1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(long1.equals((Object)long0));
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(long1));
      assertFalse(arrayList0.contains(long0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate(537, 1061, 537, (-1907), 359, 1061);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(761L);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      boolean boolean0 = mockDate1.before(mockDate1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(boolean0);
      assertNotSame(mockDate1, mockDate0);
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 8;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate1, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertArrayEquals(new double[] {8.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Long long0 = new Long(12L);
      assertNotNull(long0);
      assertEquals(12L, (long)long0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(long0));
      
      Long long1 = new Long((-297L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-297L), (long)long1);
      
      boolean boolean1 = arrayList0.add(long1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(long1.equals((Object)long0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayList0.contains(long0));
      assertTrue(arrayList0.contains(long1));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) arrayList0, true);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.7566658201E13, range0.getLowerBound(), 0.01);
      assertEquals(1.7566658201E13, range0.getUpperBound(), 0.01);
      assertEquals(1.7566658201E13, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertArrayEquals(new double[] {8.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(arrayList0.contains(long0));
      assertTrue(arrayList0.contains(long1));
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.7566658201E13, range1.getUpperBound(), 0.01);
      assertEquals(1.7566658201E13, range1.getCentralValue(), 0.01);
      assertEquals(1.7566658201E13, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertTrue(range1.equals((Object)range0));
      assertArrayEquals(new double[] {8.0}, doubleArray1, 0.01);
      assertEquals(1, dateArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1.0, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 6.9695986567776185, (-2670.606), (-9999), (-907.13), (-9999));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(double0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1.0, (double)double0, 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) double0, (Number) double0);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) oHLCDataItem0, (double) 1L, 2944);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(defaultPieDataset0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultOHLCDataset0, true);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNotNull(range0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYTaskDataset0, (List) arrayList0, range0, true);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertNull(range1);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Double double1 = (Double)DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1.0, (double)double1, 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(boolean0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      
      double double2 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals(1.0, double2, 0.01);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 1064.0);
      assertNull(range0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)124);
      assertNotNull(byte0);
      assertEquals((byte)124, (byte)byte0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(byte0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte)124));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range1);
      assertTrue(arrayList0.contains((byte)124));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-1647.4125102915996));
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals((-1647.4125102915996), range2.getCentralValue(), 0.01);
      assertEquals((-1647.4125102915996), range2.getLowerBound(), 0.01);
      assertEquals((-1647.4125102915996), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-769.6269589345678);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(defaultMultiValueCategoryDataset0));
      
      boolean boolean0 = arrayList0.add(defaultMultiValueCategoryDataset0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(defaultMultiValueCategoryDataset0));
      
      Range range1 = Range.shift(range0, (-769.6269589345678), true);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals((-769.6269589345678), range1.getLowerBound(), 0.01);
      assertEquals((-769.6269589345678), range1.getUpperBound(), 0.01);
      assertEquals((-769.6269589345678), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(11, doubleArray0.length);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultXYDataset0, (-399.090428));
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals((-399.090428), xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0, (List) arrayList0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(range1);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number[][] numberArray0 = new Number[2][5];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      assertEquals(0, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(2, numberArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset((String[]) null, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Requires 'start' < 'end'.", "+=", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = new Range(1064.0, 1064.0);
      assertEquals(1064.0, range0.getUpperBound(), 0.01);
      assertEquals(1064.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1064.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)103);
      assertNotNull(byte0);
      assertEquals((byte)103, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range1);
      assertTrue(arrayList0.contains(byte0));
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      boolean boolean1 = arrayList1.add((String) null);
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      Stack<XYIntervalSeriesCollection> stack0 = new Stack<XYIntervalSeriesCollection>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Integer integer0 = new Integer((-500));
      assertNotNull(integer0);
      assertEquals((-500), (int)integer0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      String string0 = hour0.toString();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(string0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("[20,14/2/2014]", string0);
      
      timeTableXYDataset0.add((TimePeriod) hour0, (Number) 0, "[20,14/2/2014]", false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 2);
      assertNotNull(pieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "[20,14/2/2014]", (double) 2944);
      assertNotNull(defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      assertNotNull(sortOrder0);
      
      defaultPieDataset0.sortByValues(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "[20,14/2/2014]", (double) 23, 2);
      assertNotNull(defaultPieDataset1);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, pieDataset0);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeTableXYDataset0, true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.3924092813195E12, range0.getLowerBound(), 0.01);
      assertEquals(1.3924092813205E12, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = arrayList0.add(defaultMultiValueCategoryDataset0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(defaultMultiValueCategoryDataset0));
      
      Range range1 = Range.shift(range0, (double) 2, false);
      assertEquals(1.3924092813215E12, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(1.392409281322E12, range1.getCentralValue(), 0.01);
      assertEquals(1.3924092813225E12, range1.getUpperBound(), 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.3924092813195E12, range0.getLowerBound(), 0.01);
      assertEquals(1.3924092813205E12, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertNotSame(range0, range1);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xIntervalSeriesCollection0, 6.783185307179565);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals(6.783185307179565, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, (List) arrayList0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Integer integer0 = new Integer((-505));
      assertNotNull(integer0);
      assertEquals((-505), (int)integer0);
      
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 4.249063239671166;
      doubleArray2[0] = 4.249063239671166;
      doubleArray2[2] = 4.249063239671166;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 2792.986203;
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range0);
      
      LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) linkedList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Year year0 = new Year();
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      Year year1 = (Year)year0.next();
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2015", year1.toString());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2015, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Vector<String> vector0 = new Vector<String>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add(".m!S|YG@[-");
      assertEquals("[.m!S|YG@[-]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(boolean0);
      assertTrue(vector0.contains(".m!S|YG@[-"));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, true);
      assertEquals("[.m!S|YG@[-]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertNull(range0);
      assertTrue(vector0.contains(".m!S|YG@[-"));
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertNull(double0);
      
      MockDate mockDate0 = new MockDate((-9999));
      assertNotNull(mockDate0);
      
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte)2));
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1.0, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 6.9695986567776185, (-2670.606), (-9999), (-907.13), (-9999));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(double0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1.0, (double)double0, 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) double0, (Number) double0);
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) oHLCDataItem0, (double) 1L, 2944);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(defaultPieDataset0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultOHLCDataset0, true);
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotNull(intervalXYDelegate0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotNull(range0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYTaskDataset0, (List) arrayList0, range0, true);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNull(range1);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Double double1 = (Double)DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1.0, (double)double1, 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(boolean0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals((-9999.0), range3.getLowerBound(), 0.01);
      assertEquals((-6334.803), range3.getCentralValue(), 0.01);
      assertEquals((-2670.606), range3.getUpperBound(), 0.01);
      assertEquals(7328.394, range3.getLength(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotSame(range3, range0);
      
      Range range4 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range4);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range0);
      
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Date[] dateArray0 = new Date[2];
      MockDate mockDate0 = new MockDate(9999, 9999, 1037, 2, (-284), 1056);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate(1056);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      dateArray0[1] = (Date) mockDate1;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-284);
      doubleArray0[1] = (double) (-9999);
      doubleArray0[2] = (double) (-284);
      doubleArray0[3] = (double) 1056;
      doubleArray0[4] = (double) (-284);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1037;
      doubleArray1[1] = (double) 9999;
      doubleArray1[2] = (double) 1037;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(year0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertNotNull(defaultHighLowDataset0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-284.0), (-9999.0), (-284.0), 1056.0, (-284.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1037.0, 9999.0, 1037.0}, doubleArray1, 0.01);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals((-5141.5), range1.getCentralValue(), 0.01);
      assertEquals(9715.0, range1.getLength(), 0.01);
      assertEquals((-9999.0), range1.getLowerBound(), 0.01);
      assertEquals((-284.0), range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-284.0), (-9999.0), (-284.0), 1056.0, (-284.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1037.0, 9999.0, 1037.0}, doubleArray1, 0.01);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Integer integer0 = new Integer((-500));
      assertNotNull(integer0);
      assertEquals((-500), (int)integer0);
      
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      String string0 = hour0.toString();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(string0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("[20,14/2/2014]", string0);
      
      timeTableXYDataset0.add((TimePeriod) hour0, (Number) 0, "[20,14/2/2014]", false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 2);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "[20,14/2/2014]", (double) 2944);
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) "[20,14/2/2014]", (double) 23, 2);
      assertNotNull(pieDataset2);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, pieDataset2);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset2, pieDataset1);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeTableXYDataset0, true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertNotNull(intervalXYDelegate0);
      
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.3924092813195E12, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.3924092813205E12, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, (double) 2, false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.3924092813195E12, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.3924092813205E12, range0.getUpperBound(), 0.01);
      assertEquals(1.3924092813215E12, range1.getLowerBound(), 0.01);
      assertEquals(1.3924092813225E12, range1.getUpperBound(), 0.01);
      assertEquals(1.392409281322E12, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xIntervalSeriesCollection0, 6.783185307179565);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals(6.783185307179565, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, (List) arrayList0, range0, true);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.3924092813195E12, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.3924092813205E12, range0.getUpperBound(), 0.01);
      assertEquals(6.783185307179565, xYBarDataset0.getBarWidth(), 0.01);
      assertNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertNotSame(range0, range1);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) 23);
      assertEquals(23.0, range3.getLowerBound(), 0.01);
      assertEquals(23.0, range3.getUpperBound(), 0.01);
      assertEquals(23.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Integer integer0 = new Integer((-505));
      assertNotNull(integer0);
      assertEquals((-505), (int)integer0);
      
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      String string0 = hour0.toString();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(string0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("[20,14/2/2014]", string0);
      
      timeTableXYDataset0.add((TimePeriod) hour0, (Number) 23, "[20,14/2/2014]", true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      int int0 = taskSeriesCollection0.getColumnIndex(integer0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1), int0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 23, 3193);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(3193, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(23, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(slidingGanttCategoryDataset0, 23, 1052);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(3193, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(23, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(23, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1052, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) vector0, false);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(3193, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(23, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(23, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1052, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) 3193);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(23.0, range1.getLength(), 0.01);
      assertEquals(3193.0, range1.getLowerBound(), 0.01);
      assertEquals(3216.0, range1.getUpperBound(), 0.01);
      assertEquals(3204.5, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-769.6269589345678);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-769.6269589345678), 6.283185307179586, 1072, (-769.6269589345678));
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(776.9101442417474, range1.getLength(), 0.01);
      assertEquals(6.783185307179565, range1.getUpperBound(), 0.01);
      assertEquals((-381.67188681369413), range1.getCentralValue(), 0.01);
      assertEquals((-770.1269589345678), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(range1.equals((Object)range0));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(range1, range0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      assertFalse(stack0.contains((-769.6269589345678)));
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (double) 1072);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1072.0, range2.getUpperBound(), 0.01);
      assertEquals(1072.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1072.0, range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(11, doubleArray0.length);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) xYSeriesCollection0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(double0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals((-769.6269589345678), (double)double0, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[3][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 103.0;
      doubleArray2[1] = 0.5;
      doubleArray2[2] = (-859.12237);
      doubleArray2[3] = 1290.908932344;
      doubleArray1[2] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray1.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(103.0, range0.getUpperBound(), 0.01);
      assertEquals(51.5, range0.getCentralValue(), 0.01);
      assertEquals(103.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(3, doubleArray1.length);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)2);
      assertNotNull(byte0);
      assertEquals((byte)2, (byte)byte0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(0.5));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-1.0));
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(103.0, range1.getLength(), 0.01);
      assertEquals(102.0, range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(50.5, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(3, doubleArray1.length);
      assertNotSame(range1, range0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      Year year1 = (Year)year0.next();
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2015, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals("2015", year1.toString());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, true);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNull(range0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertNull(double0);
      
      Date[] dateArray0 = new Date[4];
      MockDate mockDate0 = new MockDate((-9999));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate((-1634), 814, 2878, 2771, 1431655765, 2);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      dateArray0[1] = (Date) mockDate1;
      MockDate mockDate2 = new MockDate((-895L));
      assertNotNull(mockDate2);
      assertFalse(mockDate2.equals((Object)mockDate0));
      assertFalse(mockDate2.equals((Object)mockDate1));
      
      dateArray0[2] = (Date) mockDate2;
      MockDate mockDate3 = new MockDate(0L);
      assertNotNull(mockDate3);
      assertFalse(mockDate3.equals((Object)mockDate1));
      assertFalse(mockDate3.equals((Object)mockDate2));
      assertFalse(mockDate3.equals((Object)mockDate0));
      
      dateArray0[3] = (Date) mockDate3;
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0L;
      doubleArray0[1] = (double) 2771;
      doubleArray0[2] = 779.65193973;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparableArray0[2], dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 2771.0, 779.65193973}, doubleArray0, 0.01);
      assertEquals(9, comparableArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, dateArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      Year year1 = (Year)year0.next();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2015, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals("2015", year1.toString());
      assertEquals(2015L, year1.getSerialIndex());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Year year2 = (Year)year1.next();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2015, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals("2015", year1.toString());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals(2016L, year2.getSerialIndex());
      assertEquals(1392409281320L, year2.getLastMillisecond());
      assertEquals(1392409281320L, year2.getFirstMillisecond());
      assertEquals(2016, year2.getYear());
      assertEquals("2016", year2.toString());
      assertNotNull(year2);
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertFalse(year2.equals((Object)year0));
      assertFalse(year2.equals((Object)year1));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year2);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertNotSame(year1, year2);
      assertNotSame(year2, year0);
      assertNotSame(year2, year1);
      
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer1);
      assertEquals(200, (int)integer1);
      
      MockDate mockDate0 = new MockDate((-31L));
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(782L);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate1;
      dateArray0[1] = (Date) mockDate0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 9999;
      doubleArray0[1] = (double) (-31L);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 9999;
      doubleArray1[1] = (double) (-9999);
      doubleArray1[2] = (double) (-9999);
      doubleArray1[3] = (double) (-9999);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(year0, dateArray0, doubleArray0, doubleArray0, doubleArray1, doubleArray1, doubleArray0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(year0.equals((Object)year2));
      assertFalse(year0.equals((Object)year1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {9999.0, (-31.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9999.0, (-9999.0), (-9999.0), (-9999.0)}, doubleArray1, 0.01);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(2, dateArray0.length);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(9999.0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(0, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNull(range0);
      assertEquals(0, oHLCDataItemArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Integer integer0 = new Integer((-500));
      assertNotNull(integer0);
      assertEquals((-500), (int)integer0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      String string0 = hour0.toString();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(string0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("[20,14/2/2014]", string0);
      
      timeTableXYDataset0.add((TimePeriod) hour0, (Number) 0, "[20,14/2/2014]", false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 2);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "[20,14/2/2014]", (double) 2944);
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) "[20,14/2/2014]", (double) 23, 2);
      assertNotNull(pieDataset2);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset1, pieDataset2);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset2, pieDataset1);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(timeTableXYDataset0, true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.3924092813205E12, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.3924092813195E12, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = Range.shift(range0, (double) 2, false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.3924092813205E12, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.3924092813195E12, range0.getLowerBound(), 0.01);
      assertEquals(1.3924092813215E12, range1.getLowerBound(), 0.01);
      assertEquals(1.3924092813225E12, range1.getUpperBound(), 0.01);
      assertEquals(1.392409281322E12, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xIntervalSeriesCollection0, 6.783185307179565);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals(6.783185307179565, xYBarDataset0.getBarWidth(), 0.01);
      assertNotNull(xYBarDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0, (List) arrayList0, range0, true);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.3924092813205E12, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.3924092813195E12, range0.getLowerBound(), 0.01);
      assertEquals(6.783185307179565, xYBarDataset0.getBarWidth(), 0.01);
      assertNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertNotSame(range0, range1);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset2);
      assertTrue(pieDataset0.equals((Object)pieDataset2));
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset1.equals((Object)pieDataset2));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertTrue(boolean0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset1, pieDataset2);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset2, pieDataset1);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      byte byte1 = (byte)2;
      Byte byte2 = new Byte((byte)2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte2);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      boolean boolean0 = false;
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      ArrayList<XYSeriesCollection> arrayList1 = new ArrayList<XYSeriesCollection>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList1, false);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) byte2, (double) (byte)1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Integer integer0 = new Integer((-500));
      assertNotNull(integer0);
      assertEquals((-500), (int)integer0);
      
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      String string0 = hour0.toString();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(string0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("[20,14/2/2014]", string0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      assertFalse(stack0.contains((-500)));
      
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) (-500);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (byte) (-1);
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 23;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) (byte) (-1);
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 23;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (double) (byte) (-1);
      doubleArray4[2] = (double) (byte) (-1);
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'f' argument.", "Null 'f' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) (byte) (-1));
      assertEquals((-240.0), range0.getCentralValue(), 0.01);
      assertEquals((-502.0), range0.getLowerBound(), 0.01);
      assertEquals(22.0, range0.getUpperBound(), 0.01);
      assertEquals(524.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(4, doubleArray0.length);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 1064.0);
      assertNull(range0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)124);
      assertNotNull(byte0);
      assertEquals((byte)124, (byte)byte0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(byte0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      simpleHistogramDataset0.setGroup(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range2);
      assertFalse(arrayList0.contains(byte0));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(number0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1.0, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 6.9695986567776185, (-2670.606), 2206.113855341016, (-907.13), 2206.113855341016);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(double0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1.0, (double)double0, 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) double0, (Number) double0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) oHLCDataItem0, (double) 1L, 2944);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(defaultPieDataset0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultOHLCDataset0, true);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(intervalXYDelegate0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = intervalXYDelegate0.getDomainBounds(true);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNotNull(range0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYTaskDataset0, (List) arrayList0, range0, true);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.5, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertNull(range1);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Double double1 = (Double)DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1.0, (double)double1, 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(boolean0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte0));
      
      Vector<Short> vector0 = new Vector<Short>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range1);
      assertEquals(11, doubleArray0.length);
      assertFalse(arrayList0.contains(byte0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      xYTaskDataset0.setSeriesWidth((byte)1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(1.0, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      defaultKeyedValuesDataset0.setValue((Comparable) byte0, (Number) byte0);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) byte0, 1162.1544950317227, (int) (byte)1);
      assertNotNull(pieDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(1.0, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (-5544.1827194));
      assertNull(range0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      MockDate mockDate0 = new MockDate(537, (-1413), 1049, (-708), (-1634), 8);
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate(0L);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      MockDate mockDate2 = new MockDate(5550L);
      assertNotNull(mockDate2);
      assertFalse(mockDate2.equals((Object)mockDate0));
      assertFalse(mockDate2.equals((Object)mockDate1));
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate2;
      dateArray0[1] = (Date) mockDate1;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2771;
      doubleArray0[1] = (double) (-895L);
      boolean boolean0 = mockDate1.before(mockDate2);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate1.toString());
      assertEquals("Thu Jan 01 00:00:05 GMT 1970", mockDate2.toString());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(mockDate1.equals((Object)mockDate2));
      assertFalse(mockDate2.equals((Object)mockDate0));
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertTrue(boolean0);
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(mockDate1, mockDate2);
      assertNotSame(mockDate2, mockDate0);
      assertNotSame(mockDate2, mockDate1);
      
      doubleArray0[2] = (double) (-1413);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 1049;
      doubleArray0[5] = (double) 1049;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Thu Jan 12 08:46:08 GMT 2322", mockDate0.toString());
      assertNotNull(defaultHighLowDataset0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(mockDate0.equals((Object)mockDate2));
      assertArrayEquals(new double[] {2771.0, (-895.0), (-1413.0), 0.0, 1049.0, 1049.0}, doubleArray0, 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("Thu Jan 12 08:46:08 GMT 2322", mockDate0.toString());
      assertNotNull(number0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(mockDate0.equals((Object)mockDate2));
      assertArrayEquals(new double[] {2771.0, (-895.0), (-1413.0), 0.0, 1049.0, 1049.0}, doubleArray0, 0.01);
      assertEquals(2771.0, number0);
      assertEquals(2, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate0, mockDate2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Integer integer0 = new Integer((-505));
      assertNotNull(integer0);
      assertEquals((-505), (int)integer0);
      
      double double0 = 1.0;
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)27);
      assertNotNull(byte0);
      assertEquals((byte)27, (byte)byte0);
      
      Byte byte1 = new Byte((byte)96);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)96, (byte)byte1);
      
      boolean boolean0 = arrayList0.add(byte1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(boolean0);
      assertFalse(arrayList0.contains(byte0));
      assertTrue(arrayList0.contains((byte)96));
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "The number of column keys does not match the number of columns in the data array.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Integer integer0 = new Integer((-500));
      assertNotNull(integer0);
      assertEquals((-500), (int)integer0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      String string0 = hour0.toString();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(string0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("[20,14/2/2014]", string0);
      
      timeTableXYDataset0.add((TimePeriod) hour0, (Number) 0, "[20,14/2/2014]", false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, false);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNull(range0);
      
      Range range1 = Range.expandToInclude((Range) null, (-2864.0));
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2864.0), range1.getLowerBound(), 0.01);
      assertEquals((-2864.0), range1.getUpperBound(), 0.01);
      assertEquals((-2864.0), range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) stack0, range1, false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2864.0), range1.getLowerBound(), 0.01);
      assertEquals((-2864.0), range1.getUpperBound(), 0.01);
      assertEquals((-2864.0), range1.getCentralValue(), 0.01);
      assertNull(range2);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-929.0806690870143), 0.0);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertEquals((-929.0806690870143), powerFunction2D0.getA(), 0.01);
      assertNotNull(powerFunction2D0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-929.0806690870143), 0.0, 1062, integer0);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertEquals((-929.0806690870143), powerFunction2D0.getA(), 0.01);
      assertEquals((-929.0806690870143), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1062, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-929.0806690870143), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-929.0806690870143), xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertNotNull(xYSeries0);
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.39240928132E12, range3.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1.39240928132E12, range3.getLowerBound(), 0.01);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range1));
      assertNotSame(range3, range1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Integer integer0 = new Integer((-505));
      assertNotNull(integer0);
      assertEquals((-505), (int)integer0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      String string0 = hour0.toString();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(string0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals("[20,14/2/2014]", string0);
      
      timeTableXYDataset0.add((TimePeriod) hour0, (Number) 23, "[20,14/2/2014]", true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Hour hour1 = (Hour)hour0.next();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertNotNull(hour1);
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(range1);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number[][] numberArray0 = new Number[2][5];
      Number[] numberArray1 = new Number[2];
      numberArray1[1] = (Number) integer0;
      numberArray1[1] = (Number) integer0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(2, numberArray0.length);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Requires 'start' < 'end'.", ">tR'X<P4lU/sHBH", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset1);
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getColumnCount());
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(2, numberArray0.length);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        TimeZone.getTimeZone((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 1064.0);
      assertNull(range0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)103);
      assertNotNull(byte0);
      assertEquals((byte)103, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte)103));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(range1);
      assertTrue(arrayList0.contains((byte)103));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (double) (byte)103);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(103.0, range2.getLowerBound(), 0.01);
      assertEquals(103.0, range2.getUpperBound(), 0.01);
      assertEquals(103.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.removeChangeListener((DatasetChangeListener) null);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-769.6269589345678);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-769.6269589345678));
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(number0);
      
      simpleHistogramDataset0.clearSelection();
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection((XYSeries) null);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      Range range1 = xYSeriesCollection0.getRangeBounds(true);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long(1868L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1868L, (long)long1);
      
      boolean boolean0 = arrayList0.add(long1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(long1.equals((Object)long0));
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(1868L));
      assertFalse(arrayList0.contains(0L));
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) simpleHistogramDataset0, (List) arrayList0, true);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range2);
      assertTrue(arrayList0.contains(1868L));
      assertFalse(arrayList0.contains(0L));
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertNull(range3);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(number1);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte1));
      
      Byte byte2 = new Byte((byte) (-5));
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-5), (byte)byte2);
      
      boolean boolean0 = arrayList0.add(byte1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(byte1.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte1));
      assertFalse(arrayList0.contains(byte2));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-769.6269589345678);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-769.6269589345678), 6.283185307179586, 1072, (-769.6269589345678));
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals((-381.67188681369413), range1.getCentralValue(), 0.01);
      assertEquals((-770.1269589345678), range1.getLowerBound(), 0.01);
      assertEquals(6.783185307179565, range1.getUpperBound(), 0.01);
      assertEquals(776.9101442417474, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(range1.equals((Object)range0));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(range1, range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-769.6269589345678));
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      simpleHistogramDataset0.setGroup(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals((-769.6269589345678), range2.getUpperBound(), 0.01);
      assertEquals((-769.6269589345678), range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-769.6269589345678), range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, false);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNull(range3);
      assertEquals(11, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-769.6269589345678);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-769.6269589345678));
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(number0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection((XYSeries) null);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      
      Range range1 = xYSeriesCollection0.getRangeBounds(true);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNull(range1);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long(1868L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(1868L, (long)long1);
      
      boolean boolean0 = arrayList0.add(long1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(long1.equals((Object)long0));
      assertTrue(boolean0);
      assertFalse(arrayList0.contains(0L));
      assertTrue(arrayList0.contains(long1));
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) simpleHistogramDataset0, (List) arrayList0, true);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(range2);
      assertFalse(arrayList0.contains(0L));
      assertTrue(arrayList0.contains(long1));
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (-5544.1827194));
      assertNull(range0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte)27);
      assertNotNull(byte0);
      assertEquals((byte)27, (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains((byte)27));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range1);
      assertTrue(arrayList0.contains((byte)27));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-1901.82));
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1901.82), range2.getLowerBound(), 0.01);
      assertEquals((-1901.82), range2.getUpperBound(), 0.01);
      assertEquals((-1901.82), range2.getCentralValue(), 0.01);
      assertNotNull(range2);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte)1));
      
      Byte byte2 = new Byte((byte)2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte2);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      assertFalse(stack0.contains((byte)1));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (double) (byte)2);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2.0, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(11, doubleArray0.length);
      assertNotSame(range1, range0);
      
      double double0 = (-1.0);
      NormalDistributionFunction2D normalDistributionFunction2D0 = null;
      try {
        normalDistributionFunction2D0 = new NormalDistributionFunction2D(4538.43286901, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'std' > 0.
         //
         verifyException("org.jfree.data.function.NormalDistributionFunction2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(11, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Integer integer0 = new Integer((-505));
      assertNotNull(integer0);
      assertEquals((-505), (int)integer0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      String string0 = hour0.toString();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(string0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("[20,14/2/2014]", string0);
      
      timeTableXYDataset0.add((TimePeriod) hour0, (Number) 0, "{H%q8lT", true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      timeTableXYDataset0.add((TimePeriod) hour0, (Number) integer0, "[20,14/2/2014]", false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Hour hour1 = (Hour)hour0.next();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertNotNull(hour1);
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(505.0, range0.getLength(), 0.01);
      assertEquals((-505.0), range0.getLowerBound(), 0.01);
      assertEquals((-252.5), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertNotNull(range0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        defaultMultiValueCategoryDataset0.getColumnKey(23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      Year year1 = (Year)year0.next();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2015", year1.toString());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2015, year1.getYear());
      assertEquals(2015L, year1.getSerialIndex());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Vector<String> vector0 = new Vector<String>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, true);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNull(range0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertNull(double0);
      
      Date[] dateArray0 = new Date[4];
      MockDate mockDate0 = new MockDate((-9999));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate((-1634), 814, 2878, 2771, 1431655765, 2);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      dateArray0[1] = (Date) mockDate1;
      MockDate mockDate2 = new MockDate((-895L));
      assertNotNull(mockDate2);
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertFalse(mockDate2.equals((Object)mockDate0));
      
      dateArray0[2] = (Date) mockDate2;
      MockDate mockDate3 = new MockDate(0L);
      assertNotNull(mockDate3);
      assertFalse(mockDate3.equals((Object)mockDate0));
      assertFalse(mockDate3.equals((Object)mockDate2));
      assertFalse(mockDate3.equals((Object)mockDate1));
      
      dateArray0[3] = (Date) mockDate3;
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0L;
      doubleArray0[1] = (double) 2771;
      doubleArray0[2] = 779.65193973;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparableArray0[2], dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 2771.0, 779.65193973}, doubleArray0, 0.01);
      assertEquals(9, comparableArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, dateArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1.0, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add("v]C9ef~j.}");
      assertEquals(10, vector0.capacity());
      assertEquals("[v]C9ef~j.}]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      assertTrue(vector0.contains("v]C9ef~j.}"));
      
      boolean boolean1 = vector0.add("v]C9ef~j.}");
      assertEquals("[v]C9ef~j.}, v]C9ef~j.}]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(vector0.contains("v]C9ef~j.}"));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertEquals("[v]C9ef~j.}, v]C9ef~j.}]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
      assertTrue(vector0.contains("v]C9ef~j.}"));
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number0);
      
      MockDate mockDate1 = new MockDate(0L);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      byte byte0 = (byte) (-15);
      Byte byte1 = new Byte((byte) (-15));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-15), (byte)byte1);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(byte1));
      
      Byte byte2 = new Byte((byte)26);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)26, (byte)byte2);
      
      boolean boolean0 = arrayList0.add(byte2);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte2));
      assertFalse(arrayList0.contains(byte1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains((byte)1));
      
      Byte byte2 = new Byte((byte)2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)2, (byte)byte2);
      
      boolean boolean0 = arrayList0.add(byte2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(boolean0);
      assertFalse(arrayList0.contains((byte)1));
      assertTrue(arrayList0.contains(byte2));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Integer integer0 = new Integer((-505));
      assertNotNull(integer0);
      assertEquals((-505), (int)integer0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      String string0 = hour0.toString();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(string0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("[20,14/2/2014]", string0);
      
      timeTableXYDataset0.add((TimePeriod) hour0, (Number) 0, "[20,14/2/2014]", true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Hour hour1 = (Hour)hour0.next();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertNotNull(hour1);
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) null, range0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Range range1 = Range.shift(range0, (-4757.59397140584), true);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals((-4757.59397140584), range1.getLowerBound(), 0.01);
      assertEquals((-4757.59397140584), range1.getUpperBound(), 0.01);
      assertEquals((-4757.59397140584), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(11, doubleArray0.length);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Range range2 = Range.expandToInclude(range0, (-5137.6068));
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(5137.6068, range2.getLength(), 0.01);
      assertEquals((-2568.8034), range2.getCentralValue(), 0.01);
      assertEquals((-5137.6068), range2.getLowerBound(), 0.01);
      assertNotNull(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertEquals(11, doubleArray0.length);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertEquals(11, doubleArray0.length);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      
      Range range4 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertNotNull(range4);
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range3));
      assertEquals(11, doubleArray0.length);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) arrayList0, range2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-769.6269589345678);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-769.6269589345678));
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(number0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(range1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      simpleHistogramDataset0.setGroup(datasetGroup0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, true);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNull(range3);
      assertEquals(11, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Day day0 = new Day();
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertNotNull(day0);
      
      Hour hour0 = new Hour(3, day0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(3, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) hour0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Byte byte0 = new Byte((byte) (-21));
      assertNotNull(byte0);
      assertEquals((byte) (-21), (byte)byte0);
      
      boolean boolean0 = arrayList0.add(byte0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, false);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range0);
      assertTrue(arrayList0.contains(byte0));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (double) (byte) (-21));
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-21.0), range1.getLowerBound(), 0.01);
      assertEquals((-21.0), range1.getUpperBound(), 0.01);
      assertEquals((-21.0), range1.getCentralValue(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1048.146328);
      doubleArray1[1] = 1.7976931348623157E308;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1048.146328);
      doubleArray2[1] = 1.7976931348623157E308;
      doubleArray2[2] = (-1048.146328);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 1.7976931348623157E308;
      doubleArray4[1] = (-1048.146328);
      doubleArray4[2] = (-1048.146328);
      doubleArray4[3] = 1.7976931348623157E308;
      doubleArray4[4] = (-176.7953547229);
      doubleArray4[5] = (-1048.146328);
      doubleArray4[6] = (-1137.6);
      doubleArray4[7] = (-1048.146328);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-176.7953547229);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-1137.6);
      doubleArray5[3] = (-1.7976931348623157E308);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = (-1.7976931348623157E308);
      doubleArray7[1] = (-1057.04);
      doubleArray7[2] = 1.7976931348623157E308;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = (-1.7976931348623157E308);
      doubleArray7[5] = (-176.7953547229);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = (-1137.6);
      doubleArray8[1] = (-1.7976931348623157E308);
      doubleArray8[2] = (-1057.04);
      doubleArray8[3] = (-1057.04);
      doubleArray8[4] = (-1.7976931348623157E308);
      doubleArray8[5] = 1.7976931348623157E308;
      doubleArray8[6] = (-1.7976931348623157E308);
      doubleArray8[7] = (-1057.04);
      doubleArray8[8] = (-176.7953547229);
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(range1);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number[][] numberArray0 = new Number[2][5];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      assertEquals(0, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(2, numberArray0.length);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Requires 'start' < 'end'.", "|SZ1h$A", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(11, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Requires 'start' < 'end'.", ">tR'X<P4lU/sHBH", doubleArray0);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(11, doubleArray0.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset1);
      assertEquals(0, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(2, numberArray0.length);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) jDBCXYDataset0, true);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-769.6269589345678);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-769.6269589345678));
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(number0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, false);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      String string0 = "?f}_uN9q?Wa0bc";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "?f}_uN9q?Wa0bc");
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=?f}_uN9q?Wa0bc,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("?f}_uN9q?Wa0bc", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=?f}_uN9q?Wa0bc,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("?f}_uN9q?Wa0bc", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      timeSeriesCollection0.validateObject();
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=?f}_uN9q?Wa0bc,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("?f}_uN9q?Wa0bc", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=?f}_uN9q?Wa0bc,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("?f}_uN9q?Wa0bc", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNull(number0);
      
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=?f}_uN9q?Wa0bc,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("?f}_uN9q?Wa0bc", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      DefaultXYDataset defaultXYDataset1 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      assertNotNull(defaultXYDataset1);
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-769.6269589345678);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-769.6269589345678), 6.283185307179586, 1072, (-769.6269589345678));
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      Range range0 = xYSeriesCollection0.getRangeBounds(false);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-769.6269589345678), range0.getLowerBound(), 0.01);
      assertEquals((-769.6269589345678), range0.getUpperBound(), 0.01);
      assertEquals((-769.6269589345678), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-381.67188681369413), range1.getCentralValue(), 0.01);
      assertEquals((-770.1269589345678), range1.getLowerBound(), 0.01);
      assertEquals(6.783185307179565, range1.getUpperBound(), 0.01);
      assertEquals(776.9101442417474, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(range1.equals((Object)range0));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(range1, range0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range2 = jDBCXYDataset0.getRangeBounds(true);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      double double0 = DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 365);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, double0, 0.01);
      
      Double double1 = (Double)DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotNull(double1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray0, 0.01);
      assertEquals((-770.1269589345678), (double)double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1L, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1.0, number0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(defaultOHLCDataset0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1.0, number1);
      assertEquals(2, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultIntervalCategoryDataset0.setGroup(datasetGroup0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(11, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-769.6269589345678);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      int int0 = 1072;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, doubleArray0.length);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Number[][] numberArray0 = new Number[5][5];
      Number[] numberArray1 = new Number[0];
      numberArray0[2] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, numberArray0.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      assertEquals(5, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(5, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-769.6269589345678);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-769.6269589345678), 6.283185307179586, 1072, (-769.6269589345678));
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      
      Range range1 = xYSeriesCollection0.getRangeBounds(false);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-769.6269589345678), range1.getLowerBound(), 0.01);
      assertEquals((-769.6269589345678), range1.getUpperBound(), 0.01);
      assertEquals((-769.6269589345678), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(range1.equals((Object)range0));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(range1, range0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Long long0 = new Long(1072);
      assertNotNull(long0);
      assertEquals(1072L, (long)long0);
      
      boolean boolean0 = arrayList0.add(long0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(long0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = new double[10];
      doubleArray1[0] = (-769.6269589345678);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(9, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-769.6269589345678), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(10, doubleArray1.length);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, true);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNull(range1);
      assertEquals(11, doubleArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      XYTaskDataset xYTaskDataset1 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset1.isTransposed());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset1);
      assertTrue(xYTaskDataset1.equals((Object)xYTaskDataset0));
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) (-769.6269589345678), (Number) (-769.6269589345678));
      int int0 = 2944;
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) (-769.6269589345678), (-769.6269589345678), 2944);
      assertNotNull(pieDataset0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(range2);
      assertTrue(range2.equals((Object)range0));
      assertEquals(11, doubleArray0.length);
      assertNotSame(range2, range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 2944);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray0);
      assertEquals(2, polynomialFunction2D1.getOrder());
      assertNotNull(polynomialFunction2D1);
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[][] doubleArray1 = new double[4][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray1.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset1, (Comparable) "");
      assertNotNull(pieDataset1);
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertNotSame(pieDataset1, pieDataset0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, arrayList0, true);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, false);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(xYIntervalSeriesCollection0, arrayList0, true);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = Double.POSITIVE_INFINITY;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = Double.POSITIVE_INFINITY;
      doubleArray2[6] = Double.POSITIVE_INFINITY;
      doubleArray2[7] = Double.POSITIVE_INFINITY;
      doubleArray2[8] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Z[,vW2Uf", (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-1807));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1970, year0.getYear());
      assertEquals("1970", year0.toString());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1L, year0.getLastMillisecond());
      assertEquals(1L, year0.getFirstMillisecond());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1.0, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      long long0 = MockDate.UTC((-9999), 1212, (-9999), (-9999), (-9999), (-2212));
      assertEquals((-315465632152000L), long0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 6.283185307179586, (-2670.606), 2206.113855341016, (-907.13), 2206.113855341016);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1970, year0.getYear());
      assertEquals("1970", year0.toString());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1L, year0.getLastMillisecond());
      assertEquals(1L, year0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1970, year0.getYear());
      assertEquals("1970", year0.toString());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1L, year0.getLastMillisecond());
      assertEquals(1L, year0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1.0, number0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      String string0 = "Zc\\J\\v{?5";
      String string1 = "";
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1L;
      doubleArray1[1] = (-2670.606);
      doubleArray1[2] = (double) (-9999);
      doubleArray1[3] = (-907.13);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 9999;
      doubleArray2[1] = (double) (-315465632152000L);
      doubleArray2[2] = (double) 1L;
      doubleArray2[3] = (double) 1212;
      doubleArray2[4] = (double) (-2212);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-2670.606);
      doubleArray3[1] = 9999.0;
      doubleArray3[2] = (double) 9999;
      doubleArray3[3] = 2206.113855341016;
      doubleArray3[4] = (double) 1L;
      doubleArray3[5] = (double) (-315465632152000L);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 1.0;
      doubleArray4[1] = (double) (-9999);
      doubleArray4[2] = (-2670.606);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 1.0;
      doubleArray5[1] = (double) (-9999);
      doubleArray5[2] = 6.283185307179586;
      doubleArray5[3] = (double) 1L;
      doubleArray5[4] = (double) 1L;
      doubleArray5[5] = (double) 1L;
      doubleArray5[6] = (-2670.606);
      doubleArray5[7] = (-2670.606);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (-907.13);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = 9999.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      
      doubleArray8[0] = 2206.113855341016;
      doubleArray8[1] = (double) 1L;
      doubleArray8[2] = (-2670.606);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[7];
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      
      doubleArray9[0] = (double) 1212;
      doubleArray9[1] = (double) 9999;
      doubleArray9[2] = (double) 1L;
      doubleArray9[3] = 1.0;
      doubleArray9[4] = (double) (-9999);
      doubleArray9[5] = 1.0;
      doubleArray9[6] = 2206.113855341016;
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) oHLCDataItemArray0, (Comparable[]) oHLCDataItemArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(xYIntervalSeriesCollection0, arrayList0, true);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      JDBCCategoryDataset jDBCCategoryDataset1 = (JDBCCategoryDataset)jDBCCategoryDataset0.clone();
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertNotNull(jDBCCategoryDataset1);
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range1);
      assertTrue(jDBCCategoryDataset0.equals((Object)jDBCCategoryDataset1));
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, false);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range2);
      assertTrue(jDBCCategoryDataset0.equals((Object)jDBCCategoryDataset1));
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Range range3 = DatasetUtilities.iterateToFindDomainBounds(xYIntervalSeriesCollection0, vector0, false);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNull(range3);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals(10.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(10.0, xYDataItem0.getYValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 1024.451249936964, 1024.451249936964, 12, xYDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Vector<Short> vector0 = new Vector<Short>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(0.0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.validateObject();
      CategoryDatasetSelectionState categoryDatasetSelectionState0 = defaultKeyedValues2DDataset0.getSelectionState();
      assertNotNull(categoryDatasetSelectionState0);
      assertSame(defaultKeyedValues2DDataset0, categoryDatasetSelectionState0);
      assertSame(categoryDatasetSelectionState0, defaultKeyedValues2DDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, 1964);
      assertNotNull(pieDataset0);
      assertSame(defaultKeyedValues2DDataset0, categoryDatasetSelectionState0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      timeTableXYDataset0.setGroup(datasetGroup0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("NOID", datasetGroup0.getID());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(number0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(0.0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      simpleHistogramDataset0.addBin((SimpleHistogramBin) null);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) simpleHistogramDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 814, year0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(813, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(813, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertTrue(boolean0);
      
      Year year1 = (Year)year0.next();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals(2015, year1.getYear());
      assertEquals("2015", year1.toString());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-9999);
      doubleArray0[2] = (double) 1;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {2.0, (-9999.0), 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("R|KF@", "R|KF@", doubleArray1);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, doubleArray1.length);
      
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("R|KF@", "R|KF@", doubleArray1);
      assertNotNull(defaultCategoryDataset1);
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(1, doubleArray1.length);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset1, (Comparable) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1.7976931348623157E308, 1333.3728127810673);
      assertEquals(1.7976931348623157E308, powerFunction2D0.getA(), 0.01);
      assertEquals(1333.3728127810673, powerFunction2D0.getB(), 0.01);
      assertNotNull(powerFunction2D0);
      
      Quarter quarter0 = new Quarter();
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, Double.NEGATIVE_INFINITY, 1333.3728127810673, 181, quarter0);
      assertEquals(1.7976931348623157E308, powerFunction2D0.getA(), 0.01);
      assertEquals(1333.3728127810673, powerFunction2D0.getB(), 0.01);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertEquals(1.7976931348623157E308, powerFunction2D0.getA(), 0.01);
      assertEquals(1333.3728127810673, powerFunction2D0.getB(), 0.01);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNull(range0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      Year year1 = (Year)year0.next();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2015, year1.getYear());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals("2015", year1.toString());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Vector<String> vector0 = new Vector<String>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, true);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNull(range0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertNull(double0);
      
      Date[] dateArray0 = new Date[4];
      MockDate mockDate0 = new MockDate((-9999));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate((-1634), 814, 2878, 2771, 1431655765, 2);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      dateArray0[1] = (Date) mockDate1;
      MockDate mockDate2 = new MockDate((-895L));
      assertNotNull(mockDate2);
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertFalse(mockDate2.equals((Object)mockDate0));
      
      dateArray0[2] = (Date) mockDate2;
      MockDate mockDate3 = new MockDate(0L);
      assertNotNull(mockDate3);
      assertFalse(mockDate3.equals((Object)mockDate2));
      assertFalse(mockDate3.equals((Object)mockDate1));
      assertFalse(mockDate3.equals((Object)mockDate0));
      
      dateArray0[3] = (Date) mockDate3;
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0L;
      doubleArray0[1] = (double) 2771;
      doubleArray0[2] = 779.65193973;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparableArray0[2], dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 2771.0, 779.65193973}, doubleArray0, 0.01);
      assertEquals(9, comparableArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, dateArray0.length);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.72627135460005E13, range1.getCentralValue(), 0.01);
      assertEquals(3.4525427111999E13, range1.getLength(), 0.01);
      assertEquals((-9999.0), range1.getLowerBound(), 0.01);
      assertEquals(3.4525427102E13, range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertArrayEquals(new double[] {0.0, 2771.0, 779.65193973}, doubleArray0, 0.01);
      assertEquals(9, comparableArray0.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, dateArray0.length);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      defaultIntervalCategoryDataset0.setGroup(datasetGroup0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("NOID", datasetGroup0.getID());
      assertEquals(11, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-769.6269589345678);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-769.6269589345678), 6.283185307179586, 1072, (-769.6269589345678));
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      
      Range range1 = xYSeriesCollection0.getRangeBounds(false);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-769.6269589345678), range1.getUpperBound(), 0.01);
      assertEquals((-769.6269589345678), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-769.6269589345678), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(range1.equals((Object)range0));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(range1, range0);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(6.283185307179565, range2.getUpperBound(), 0.01);
      assertEquals(775.9101442417474, range2.getLength(), 0.01);
      assertEquals((-769.6269589345678), range2.getLowerBound(), 0.01);
      assertEquals((-381.67188681369413), range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 8);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, double0, 0.01);
      
      Double double1 = (Double)DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals((-770.1269589345678), (double)double1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Millisecond millisecond0 = new Millisecond();
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(millisecond0);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      CategoryDatasetSelectionState categoryDatasetSelectionState0 = defaultKeyedValues2DDataset0.getSelectionState();
      assertNotNull(categoryDatasetSelectionState0);
      assertSame(defaultKeyedValues2DDataset0, categoryDatasetSelectionState0);
      assertSame(categoryDatasetSelectionState0, defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setSelectionState(categoryDatasetSelectionState0);
      assertSame(defaultKeyedValues2DDataset0, categoryDatasetSelectionState0);
      assertSame(categoryDatasetSelectionState0, defaultKeyedValues2DDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, 0);
      assertNotNull(pieDataset0);
      assertSame(defaultKeyedValues2DDataset0, categoryDatasetSelectionState0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      timeTableXYDataset0.setGroup(datasetGroup0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("NOID", datasetGroup0.getID());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) simpleHistogramDataset0, false);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(range0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(number0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(range1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2, year0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      Year year1 = (Year)year0.next();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals("2015", year1.toString());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(2015, year1.getYear());
      assertEquals(2015L, year1.getSerialIndex());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      double[][] doubleArray0 = new double[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, doubleArray0.length);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "Qh&z@qwk.UVSi", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      timeSeriesCollection0.validateObject();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(number0);
      
      System.setCurrentTimeMillis(0L);
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range3);
      
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[16];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (double) 0L;
      doubleArray0[2] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 0L;
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number1);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (-1744));
      assertNotNull(pieDataset0);
      
      Number number2 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number2);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) defaultIntervalXYDataset0, false);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(range4);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      assertFalse(stack0.contains(0.0));
      
      Spliterator<Double> spliterator0 = stack0.spliterator();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(spliterator0);
      assertFalse(stack0.contains(0.0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(0.0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      CategoryDatasetSelectionState categoryDatasetSelectionState0 = defaultKeyedValues2DDataset0.getSelectionState();
      assertNotNull(categoryDatasetSelectionState0);
      assertSame(defaultKeyedValues2DDataset0, categoryDatasetSelectionState0);
      assertSame(categoryDatasetSelectionState0, defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.setSelectionState(categoryDatasetSelectionState0);
      assertSame(defaultKeyedValues2DDataset0, categoryDatasetSelectionState0);
      assertSame(categoryDatasetSelectionState0, defaultKeyedValues2DDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, 1964);
      assertNotNull(pieDataset0);
      assertSame(defaultKeyedValues2DDataset0, categoryDatasetSelectionState0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
      assertSame(defaultKeyedValues2DDataset0, categoryDatasetSelectionState0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      timeTableXYDataset0.setGroup(datasetGroup0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("NOID", datasetGroup0.getID());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(range0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(number1);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      int int0 = (-484);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-484));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2, year0);
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      Year year1 = (Year)year0.next();
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2015, year1.getYear());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals("2015", year1.toString());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      double[][] doubleArray0 = new double[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertNull(number0);
      assertEquals(0, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 9999);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultPieDataset0);
      assertEquals(0, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertNull(number1);
      assertEquals(0, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, false);
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertFalse(year0.equals((Object)year1));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotSame(year0, year1);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, range0, false);
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNull(range1);
      assertFalse(year0.equals((Object)year1));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotSame(year0, year1);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(xYIntervalSeriesCollection0, arrayList0, true);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range0);
      
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[10];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(9, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(10, doubleArray1.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      jDBCCategoryDataset0.setValue(1171.631666572431, (Comparable) 0.0, (Comparable) 0.0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(1171.631666572431, range1.getUpperBound(), 0.01);
      assertEquals(1171.631666572431, range1.getLength(), 0.01);
      assertEquals(585.8158332862155, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, true);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(1171.631666572431, range2.getLowerBound(), 0.01);
      assertEquals(1171.631666572431, range2.getUpperBound(), 0.01);
      assertEquals(1171.631666572431, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range1);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[2] = (-257.77);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1320.6139907343122;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 0.0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultTableXYDataset0, false);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertNotNull(intervalXYDelegate0);
      
      categoryDataset0.removeChangeListener(intervalXYDelegate0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertFalse(intervalXYDelegate0.isAutoWidth());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int0 = ((DefaultCategoryDataset) categoryDataset0).getColumnCount();
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertNull(range2);
      assertEquals(1, doubleArray0.length);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack0, range0, false);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNull(range3);
      
      Stack<DefaultOHLCDataset> stack1 = new Stack<DefaultOHLCDataset>();
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertNotNull(stack1);
      
      Range range4 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack0, range0, true);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNull(range4);
      
      Range range5 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNull(range5);
      assertEquals(1, doubleArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      LinkedList<IntervalXYDelegate> linkedList0 = new LinkedList<IntervalXYDelegate>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(intervalXYDelegate0));
      
      Range range6 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      assertEquals(0, linkedList0.size());
      assertNull(range6);
      assertFalse(linkedList0.contains(intervalXYDelegate0));
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      Year year1 = (Year)year0.next();
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2015, year1.getYear());
      assertEquals("2015", year1.toString());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      Number[][] numberArray0 = new Number[1][5];
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("I}gx.' ybF", "I}gx.' ybF", numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      assertFalse(vector0.contains("I}gx.' ybF"));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, true);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNull(range0);
      assertEquals(1, numberArray0.length);
      assertFalse(vector0.contains("I}gx.' ybF"));
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertNull(double0);
      assertEquals(1, numberArray0.length);
      
      Date[] dateArray0 = new Date[4];
      MockDate mockDate0 = new MockDate((-9999));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate((-1634), 814, 2878, 2777, 1431655765, 2);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      Object[][][] objectArray0 = new Object[3][5][8];
      objectArray0[0] = (Object[][]) numberArray0;
      objectArray0[1] = (Object[][]) numberArray0;
      objectArray0[2] = (Object[][]) numberArray0;
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertEquals(3, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      assertEquals(3, objectArray0.length);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, (List) vector0, true);
      assertEquals(3, defaultWindDataset0.getSeriesCount());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNull(range1);
      assertEquals(3, objectArray0.length);
      assertFalse(vector0.contains("I}gx.' ybF"));
      
      Range range2 = Range.expandToInclude((Range) null, (-1634));
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1634.0), range2.getLowerBound(), 0.01);
      assertEquals((-1634.0), range2.getUpperBound(), 0.01);
      assertEquals((-1634.0), range2.getCentralValue(), 0.01);
      assertNotNull(range2);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultWindDataset0, (List) vector0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      int int0 = (-810);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (-810));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, true);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      XYTaskDataset xYTaskDataset1 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset1.isTransposed());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset1);
      assertTrue(xYTaskDataset1.equals((Object)xYTaskDataset0));
      
      XYTaskDataset xYTaskDataset2 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset2.isTransposed());
      assertEquals(0.8, xYTaskDataset2.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset2);
      assertTrue(xYTaskDataset2.equals((Object)xYTaskDataset1));
      assertTrue(xYTaskDataset2.equals((Object)xYTaskDataset0));
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0, (List) vector0, true);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNull(range1);
      assertTrue(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertTrue(xYTaskDataset0.equals((Object)xYTaskDataset2));
      assertNotSame(xYTaskDataset0, xYTaskDataset2);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0.0, 622.37076553, 1, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      Integer integer0 = new Integer((-500));
      assertNotNull(integer0);
      assertEquals((-500), (int)integer0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      jDBCCategoryDataset0.setValue(759.35, (Comparable) integer0, (Comparable) integer0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(379.675, range0.getCentralValue(), 0.01);
      assertEquals(759.35, range0.getUpperBound(), 0.01);
      assertEquals(759.35, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Year year0 = new Year();
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2, year0);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[5] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      Year year1 = (Year)year0.next();
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(2015, year1.getYear());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals("2015", year1.toString());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 9999;
      doubleArray0[3] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (-9999);
      doubleArray0[6] = 606.7474981739091;
      doubleArray0[7] = (double) 483;
      doubleArray0[8] = (double) (-9999);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {9999.0, 0.0, 2.0, 1.0, 1.0, (-9999.0), 606.7474981739091, 483.0, (-9999.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[][] doubleArray1 = new double[0][6];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(">tR'X<P4lU/sHBH", ">tR'X<P4lU/sHBH", doubleArray1);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      Year year1 = (Year)year0.next();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2015, year1.getYear());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals("2015", year1.toString());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      Number[][] numberArray0 = new Number[1][5];
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("I}gx.' ybF", "I}gx.' ybF", numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, numberArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-9999);
      doubleArray0[1] = (double) 814;
      doubleArray0[2] = (double) 9999;
      doubleArray0[3] = (double) (-9999);
      doubleArray0[4] = (double) (-9999);
      doubleArray0[5] = (double) (-9999);
      doubleArray0[6] = (double) 814;
      doubleArray0[7] = (double) 9999;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-9999.0), 814.0, 9999.0, (-9999.0), (-9999.0), (-9999.0), 814.0, 9999.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray1.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(number0);
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset1 = new JDBCCategoryDataset(connection1);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertNotNull(jDBCCategoryDataset1);
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = jDBCCategoryDataset1.equals(object0);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      assertFalse(boolean0);
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset1, 9999);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertNotNull(defaultPieDataset0);
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(number1);
      assertTrue(jDBCCategoryDataset0.equals((Object)jDBCCategoryDataset1));
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2, year0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      Year year1 = (Year)year0.next();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals(2015, year1.getYear());
      assertEquals("2015", year1.toString());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      boolean boolean0 = keyToGroupMap0.equals(timeTableXYDataset0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(boolean0);
      
      Number[][] numberArray0 = new Number[3][6];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) (-9999);
      numberArray1[1] = (Number) 2;
      numberArray1[2] = (Number) 9999;
      numberArray1[3] = (Number) 2;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[6];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) (-9999);
      numberArray2[1] = (Number) (-9999);
      numberArray2[2] = (Number) 2;
      numberArray2[3] = (Number) 2;
      numberArray2[4] = (Number) (-9999);
      numberArray1[0] = (Number) 2;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[6];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) (-9999);
      numberArray3[1] = (Number) (-9999);
      numberArray3[2] = (Number) (-9999);
      numberArray3[3] = (Number) (-9999);
      numberArray3[4] = (Number) 2;
      numberArray3[5] = (Number) 2;
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, numberArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(29999.0, range0.getLength(), 0.01);
      assertEquals((-19998.0), range0.getLowerBound(), 0.01);
      assertEquals(10001.0, range0.getUpperBound(), 0.01);
      assertEquals((-4998.5), range0.getCentralValue(), 0.01);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(range0);
      assertEquals(3, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      ArrayList<Byte> arrayList0 = new ArrayList<Byte>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      UnaryOperator<Byte> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      byte byte0 = (byte)124;
      Byte byte1 = new Byte((byte)124);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)124, (byte)byte1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(byte1);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      assertTrue(byte1.equals((Object)byte0));
      
      boolean boolean0 = arrayList0.add(byte1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(byte1));
      
      boolean boolean1 = true;
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(range0);
      assertTrue(arrayList0.contains(byte1));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = Double.POSITIVE_INFINITY;
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.POSITIVE_INFINITY);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) arrayList0, range1, true);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertNull(range2);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(arrayList0.contains(byte1));
      
      Date[] dateArray0 = new Date[3];
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      try { 
        mockSimpleDateFormat0.parse("JDBCPieDataset: swallowing exception.");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"JDBCPieDataset: swallowing exception.\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, numberArray0.length);
      
      double[][] doubleArray0 = new double[0][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, doubleArray0.length);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1083, "");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1083,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1083, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1083,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1083, simpleTimeZone0.getRawOffset());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, true);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1083,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1083, simpleTimeZone0.getRawOffset());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = Range.expandToInclude((Range) null, 1083);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1083.0, range1.getLowerBound(), 0.01);
      assertEquals(1083.0, range1.getUpperBound(), 0.01);
      assertEquals(1083.0, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1083, "");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1083,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1083, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1083,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1083, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, false);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1083,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1083, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      Range range2 = Range.expandToInclude(range0, 1083);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1083.0, range2.getUpperBound(), 0.01);
      assertEquals(541.5, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1083.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range0));
      assertEquals(11, doubleArray0.length);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, range2, true);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1083,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1083, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(1083.0, range2.getUpperBound(), 0.01);
      assertEquals(541.5, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1083.0, range2.getLength(), 0.01);
      assertNull(range3);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range2.equals((Object)range0));
      assertEquals(11, doubleArray0.length);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2, year0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      Year year1 = (Year)year0.next();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2015, year1.getYear());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals("2015", year1.toString());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 9999;
      doubleArray0[3] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (-9999);
      doubleArray0[6] = 606.7474981739091;
      doubleArray0[7] = (double) 483;
      doubleArray0[8] = (double) (-9999);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {9999.0, 0.0, 2.0, 1.0, 1.0, (-9999.0), 606.7474981739091, 483.0, (-9999.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[][] doubleArray1 = new double[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertNull(number0);
      assertEquals(0, doubleArray1.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 9999);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultPieDataset0);
      assertEquals(0, doubleArray1.length);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertNull(number1);
      assertEquals(0, doubleArray1.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, false);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertFalse(year0.equals((Object)year1));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotSame(year0, year1);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) (-9999.0));
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, doubleArray1.length);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(1091, "", 1091, 4, 1091, 4132, 1091, 4132, 1091, 770, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 1091
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Year year0 = new Year();
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2, year0);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      Year year1 = (Year)year0.next();
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2015, year1.getYear());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals("2015", year1.toString());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 9999;
      doubleArray0[3] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (-9999);
      doubleArray0[6] = 606.7474981739091;
      doubleArray0[7] = (double) 483;
      doubleArray0[8] = (double) (-9999);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {9999.0, 0.0, 2.0, 1.0, 1.0, (-9999.0), 606.7474981739091, 483.0, (-9999.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2, year0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      Year year1 = (Year)year0.next();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2015", year1.toString());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2015, year1.getYear());
      assertEquals(2015L, year1.getSerialIndex());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 9999;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (-9999);
      doubleArray0[6] = 606.7474981739091;
      doubleArray0[7] = (double) 483;
      doubleArray0[8] = (double) (-9999);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {9999.0, 0.0, 2.0, 1.0, 1.0, (-9999.0), 606.7474981739091, 483.0, (-9999.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[][] doubleArray1 = new double[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNull(number0);
      assertEquals(0, doubleArray1.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 9999);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultPieDataset0);
      assertEquals(0, doubleArray1.length);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNull(number1);
      assertEquals(0, doubleArray1.length);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) (-9999.0), (-2333.700365886396));
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, doubleArray1.length);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNull(range0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Minute minute0 = new Minute(23, hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(23, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertNotNull(minute0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((double) 0, (double) 0, (Comparable) minute0, (Comparable) hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(23, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      assertNotNull(datasetChangeInfo0);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(datasetChangeInfo0, defaultTableXYDataset0, datasetChangeInfo0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(datasetChangeEvent0);
      
      xYTaskDataset0.datasetChanged(datasetChangeEvent0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) minute0, 0.6709415282211312, 1063);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(23, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertNotNull(pieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) hour0, (KeyedValues) defaultPieDataset0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(categoryDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(defaultPieDataset0, pieDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(11, doubleArray0.length);
      assertNotSame(range1, range0);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) minute0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(23, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotSame(pieDataset1, pieDataset0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      timeSeriesCollection0.validateObject();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 0.0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.time.TimeSeries", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      assertFalse(stack0.contains(timeSeriesCollection0));
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range3);
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, (Range) null, true);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNull(range4);
      assertFalse(stack0.contains(timeSeriesCollection0));
      
      Range range5 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNull(range5);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-769.6269589345678);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-769.6269589345678), 6.283185307179586, 1072, (-769.6269589345678));
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      
      Range range1 = xYSeriesCollection0.getRangeBounds(false);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-769.6269589345678), range1.getLowerBound(), 0.01);
      assertEquals((-769.6269589345678), range1.getUpperBound(), 0.01);
      assertEquals((-769.6269589345678), range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(range1.equals((Object)range0));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(range1, range0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, true);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-770.1269589345678), range3.getLowerBound(), 0.01);
      assertEquals((-381.67188681369413), range3.getCentralValue(), 0.01);
      assertEquals(776.9101442417474, range3.getLength(), 0.01);
      assertEquals(6.783185307179565, range3.getUpperBound(), 0.01);
      assertNotNull(range3);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      int int0 = 2;
      int int1 = 814;
      Year year0 = new Year();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 814, year0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(813, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(813, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertTrue(boolean0);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      Year year1 = (Year)year0.next();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2015, year1.getYear());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals("2015", year1.toString());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (-2.147483648E9));
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Minute minute0 = new Minute(1050, hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(26, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertNotNull(minute0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      defaultStatisticalCategoryDataset0.add(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (Comparable) minute0, (Comparable) hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(26, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      Number[][] numberArray0 = new Number[3][8];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) integer0;
      numberArray1[1] = (Number) integer0;
      numberArray1[2] = (Number) 0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) 23;
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      numberArray2[3] = (Number) bigInteger0;
      numberArray2[4] = (Number) 0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "VDvl`q{~?", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, numberArray0.length);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      assertFalse(vector0.contains("VDvl`q{~?"));
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) numberArray2[1]);
      assertNotNull(predicate0);
      assertFalse(numberArray2.equals((Object)numberArray1));
      assertFalse(numberArray2.equals((Object)numberArray3));
      assertEquals(5, numberArray2.length);
      assertNotSame(numberArray2, numberArray1);
      assertNotSame(numberArray2, numberArray3);
      
      boolean boolean0 = vector0.removeIf(predicate0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(numberArray2.equals((Object)numberArray1));
      assertFalse(numberArray2.equals((Object)numberArray3));
      assertFalse(boolean0);
      assertEquals(5, numberArray2.length);
      assertNotSame(numberArray2, numberArray1);
      assertNotSame(numberArray2, numberArray3);
      assertFalse(vector0.contains("VDvl`q{~?"));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNull(range1);
      assertFalse(vector0.contains("VDvl`q{~?"));
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[15];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1171.631666572431;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[2] = 6.283185307179586;
      doubleArray2[3] = 1171.631666572431;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[1] = 6.283185307179586;
      doubleArray4[2] = 6.283185307179586;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-769.6269589345678);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-769.6269589345678));
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(number0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) simpleHistogramDataset0, (List) vector0, true);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(range1);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3237, 1068);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1068, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(3237, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, 1068);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1068, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(3237, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(pieDataset0);
      
      String[] stringArray0 = new String[0];
      Number[][] numberArray0 = new Number[9][1];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = null;
      numberArray1[1] = (Number) (-769.6269589345678);
      numberArray1[2] = null;
      numberArray1[3] = (Number) (-769.6269589345678);
      numberArray1[4] = null;
      numberArray1[5] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) (-769.6269589345678);
      numberArray2[1] = null;
      numberArray2[2] = (Number) (-769.6269589345678);
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = null;
      numberArray3[1] = null;
      numberArray3[2] = (Number) (-769.6269589345678);
      numberArray3[3] = null;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[9];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray4[0] = (Number) (-769.6269589345678);
      numberArray4[1] = null;
      numberArray4[2] = null;
      numberArray4[3] = null;
      numberArray4[4] = null;
      numberArray4[5] = null;
      numberArray4[6] = null;
      numberArray4[7] = null;
      numberArray4[8] = (Number) (-769.6269589345678);
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[5];
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray3));
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(number1);
      
      numberArray5[0] = null;
      numberArray5[1] = (Number) (-769.6269589345678);
      numberArray5[2] = null;
      numberArray5[3] = (Number) (-769.6269589345678);
      numberArray5[4] = (Number) (-769.6269589345678);
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[8];
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray2));
      assertFalse(numberArray6.equals((Object)numberArray1));
      
      numberArray6[0] = null;
      numberArray6[1] = null;
      numberArray6[2] = null;
      numberArray6[3] = null;
      numberArray6[4] = (Number) (-769.6269589345678);
      numberArray6[5] = (Number) (-769.6269589345678);
      numberArray6[6] = (Number) (-769.6269589345678);
      numberArray6[7] = (Number) (-769.6269589345678);
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[3];
      assertFalse(numberArray7.equals((Object)numberArray3));
      assertFalse(numberArray7.equals((Object)numberArray5));
      assertFalse(numberArray7.equals((Object)numberArray2));
      assertFalse(numberArray7.equals((Object)numberArray4));
      assertFalse(numberArray7.equals((Object)numberArray6));
      assertFalse(numberArray7.equals((Object)numberArray1));
      
      Short short0 = new Short((short) (-3408));
      assertNotNull(short0);
      assertEquals((short) (-3408), (short)short0);
      
      numberArray7[0] = (Number) short0;
      numberArray7[1] = null;
      numberArray7[2] = (Number) (-769.6269589345678);
      numberArray0[6] = numberArray7;
      Number[] numberArray8 = new Number[3];
      assertFalse(numberArray8.equals((Object)numberArray6));
      assertFalse(numberArray8.equals((Object)numberArray2));
      assertFalse(numberArray8.equals((Object)numberArray5));
      assertFalse(numberArray8.equals((Object)numberArray1));
      assertFalse(numberArray8.equals((Object)numberArray3));
      assertFalse(numberArray8.equals((Object)numberArray7));
      assertFalse(numberArray8.equals((Object)numberArray4));
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      numberArray8[0] = (Number) long0;
      numberArray8[1] = (Number) short0;
      numberArray8[2] = null;
      numberArray0[7] = numberArray8;
      Number[] numberArray9 = new Number[0];
      assertFalse(numberArray9.equals((Object)numberArray4));
      assertFalse(numberArray9.equals((Object)numberArray8));
      assertFalse(numberArray9.equals((Object)numberArray5));
      assertFalse(numberArray9.equals((Object)numberArray3));
      assertFalse(numberArray9.equals((Object)numberArray1));
      assertFalse(numberArray9.equals((Object)numberArray6));
      assertFalse(numberArray9.equals((Object)numberArray7));
      assertFalse(numberArray9.equals((Object)numberArray2));
      
      numberArray0[8] = numberArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
      try {
        defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2, year0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      Year year1 = (Year)year0.next();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2015", year1.toString());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(2015, year1.getYear());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 9999;
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, false);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range0);
      assertFalse(year0.equals((Object)year1));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotSame(year0, year1);
      
      Range range1 = Range.expandToInclude((Range) null, 9999.0);
      assertEquals(9999.0, range1.getLowerBound(), 0.01);
      assertEquals(9999.0, range1.getUpperBound(), 0.01);
      assertEquals(9999.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(xYIntervalSeriesCollection0, arrayList0, true);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[15];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1171.631666572431;
      doubleArray0[0] = doubleArray1;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(14, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertEquals(15, doubleArray1.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(15, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(15, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Year year0 = new Year();
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2, year0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection1 = new DynamicTimeSeriesCollection(0, 335, year0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(0, dynamicTimeSeriesCollection1.getSeriesCount());
      assertEquals(334, dynamicTimeSeriesCollection1.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection1.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection1.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection1);
      assertFalse(dynamicTimeSeriesCollection1.equals((Object)dynamicTimeSeriesCollection0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertFalse(dynamicTimeSeriesCollection0.equals((Object)dynamicTimeSeriesCollection1));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertTrue(boolean0);
      assertNotSame(dynamicTimeSeriesCollection0, dynamicTimeSeriesCollection1);
      
      Year year1 = (Year)year0.next();
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals("2015", year1.toString());
      assertEquals(2015, year1.getYear());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("I}gx.' ybF", "I}gx.' ybF", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 814, year0);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(813, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(813, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertTrue(boolean0);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      Year year1 = (Year)year0.next();
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2015, year1.getYear());
      assertEquals("2015", year1.toString());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) (-9999);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      numberArray0[0] = numberArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("I}gx.' ybF", "I}gx.' ybF", numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      assertFalse(vector0.contains("I}gx.' ybF"));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, true);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNull(range0);
      assertEquals(1, numberArray0.length);
      assertFalse(vector0.contains("I}gx.' ybF"));
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertNotNull(double0);
      assertEquals((-9999.0), (double)double0, 0.01);
      assertEquals(1, numberArray0.length);
      
      Date[] dateArray0 = new Date[4];
      MockDate mockDate0 = new MockDate((-9999));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate((-1634), 814, 2878, 2777, 1431655765, 2);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      dateArray0[1] = (Date) mockDate1;
      MockDate mockDate2 = new MockDate((-895L));
      assertNotNull(mockDate2);
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertFalse(mockDate2.equals((Object)mockDate0));
      
      dateArray0[2] = (Date) mockDate2;
      MockDate mockDate3 = new MockDate(0L);
      assertNotNull(mockDate3);
      assertFalse(mockDate3.equals((Object)mockDate1));
      assertFalse(mockDate3.equals((Object)mockDate2));
      assertFalse(mockDate3.equals((Object)mockDate0));
      
      dateArray0[3] = (Date) mockDate3;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 2777;
      doubleArray0[2] = 779.65193973;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(comparableArray0[2], dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 2777.0, 779.65193973}, doubleArray0, 0.01);
      assertEquals(4, dateArray0.length);
      assertEquals(9, comparableArray0.length);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1009.6), (-1009.6));
      assertEquals((-1009.6), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1009.6), lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      double[][] doubleArray3 = new double[4][8];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray1;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[1] = (double) (-1254);
      doubleArray4[2] = (-1011.9);
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = (-1.0);
      doubleArray4[5] = (double) 0;
      doubleArray4[6] = (double) (-1254);
      doubleArray3[2] = doubleArray4;
      doubleArray3[3] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("You are trying to add data where the time period class ", "|SZ1h$A", doubleArray3);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray3.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("You are trying to add data where the time period class ", "-IGI&4g", doubleArray3);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(4, doubleArray3.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertFalse(boolean0);
      assertEquals(4, doubleArray3.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset1);
      assertEquals((-3521.9), range0.getLowerBound(), 0.01);
      assertEquals((-1760.95), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(3521.9, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(4, doubleArray3.length);
      assertNotSame(categoryDataset1, categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (-257.77);
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      XYDataset xYDataset0 = null;
      ListIterator<DefaultMultiValueCategoryDataset> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertNull(range1);
      
      boolean boolean0 = true;
      XYDataset xYDataset0 = null;
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) vector0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(8, doubleArray0.length);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range1 = Range.expandToInclude(range0, 6.283185307179586);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(6.283185307179586, range1.getLength(), 0.01);
      assertEquals(6.283185307179586, range1.getUpperBound(), 0.01);
      assertEquals(3.141592653589793, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertEquals(8, doubleArray0.length);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(defaultMultiValueCategoryDataset0));
      
      boolean boolean0 = arrayList0.add(defaultMultiValueCategoryDataset0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(defaultMultiValueCategoryDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) arrayList0, range0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, linkedList0.size());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, (Number[][]) null, (Number[][]) null);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-257.77);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      int int0 = 1050;
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Minute minute0 = new Minute(2183, hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals((-121), minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertNotNull(minute0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(457.21, (-257.77), (Comparable) hour0, (Comparable) (-257.77));
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      assertNotNull(datasetChangeInfo0);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(xYTaskDataset0, defaultStatisticalCategoryDataset0, datasetChangeInfo0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(datasetChangeEvent0);
      
      xYTaskDataset0.datasetChanged(datasetChangeEvent0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      TimeSeries timeSeries0 = new TimeSeries((-257.77));
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(number1);
      assertFalse(number1.equals((Object)number0));
      assertEquals(714.98, number1);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Second second0 = null;
      try {
        second0 = new Second(1050, 0, 59, 1050, 609, 609);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (-2.147483648E9));
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NEGATIVE_INFINITY);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertNotNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("]hLQ)|Z_?Eaw", (String) null, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      Number[][] numberArray0 = new Number[1][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(boolean0);
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(range1);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number[][] numberArray0 = new Number[2][5];
      Number[] numberArray1 = new Number[0];
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      assertEquals(5, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(2, numberArray0.length);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Requires 'start' < 'end'.", "|SZ1h$A", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Requires 'start' < 'end'.", ">tR'X<P4lU/sHBH", doubleArray0);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(11, doubleArray0.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset1);
      assertEquals(5, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertFalse(boolean0);
      assertEquals(2, numberArray0.length);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("!`Qo,X`fs61\"&8}xl(`");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection((TimeSeries) null, timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertNotNull(timeSeriesCollection1);
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      
      timeSeriesCollection1.validateObject();
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection1, false);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertNull(range0);
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNull(number0);
      
      System.setCurrentTimeMillis(0L);
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYDataset0, true);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNull(range2);
      
      DefaultXYDataset defaultXYDataset1 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      assertNotNull(defaultXYDataset1);
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultXYDataset1);
      assertEquals(0, defaultXYDataset1.getSeriesCount());
      assertNull(number1);
      assertTrue(defaultXYDataset1.equals((Object)defaultXYDataset0));
      assertNotSame(defaultXYDataset1, defaultXYDataset0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[2] = (-257.77);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1320.6139907343122;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 0.0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      int int0 = ((DefaultCategoryDataset) categoryDataset0).getColumnCount();
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertNull(range2);
      assertEquals(1, doubleArray0.length);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack0, range0, false);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNull(range3);
      
      Range range4 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, false);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range4);
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      boolean boolean0 = keyToGroupMap0.equals(timeTableXYDataset0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(boolean0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertEquals(11, doubleArray0.length);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (-2.147483648E9));
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Minute minute0 = new Minute();
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertNotNull(minute0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      defaultStatisticalCategoryDataset0.add(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (Comparable) minute0, (Comparable) hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      assertNotNull(datasetChangeInfo0);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(datasetChangeInfo0, xYTaskDataset0, datasetChangeInfo0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(datasetChangeEvent0);
      
      xYTaskDataset0.datasetChanged(datasetChangeEvent0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number1);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) hour0, (-2.147483648E9), 0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(pieDataset0);
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) minute0, (KeyedValues) pieDataset0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertNotNull(categoryDataset0);
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      
      Range range1 = Range.expandToInclude((Range) null, (-98.164191));
      assertEquals((-98.164191), range1.getLowerBound(), 0.01);
      assertEquals((-98.164191), range1.getUpperBound(), 0.01);
      assertEquals((-98.164191), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(minute0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      Range range2 = defaultBoxAndWhiskerXYDataset0.getRangeBounds(false);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertNull(range2);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYTaskDataset0, (List) null, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-769.6269589345678);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-769.6269589345678));
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(number0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-2864.0));
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals((-2864.0), range1.getLowerBound(), 0.01);
      assertEquals((-2864.0), range1.getUpperBound(), 0.01);
      assertEquals((-2864.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("r=>I\"c-gI>", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertEquals(11, doubleArray0.length);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("r=>I\"c-gI>");
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Range range4 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNull(range4);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, numberArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-484));
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(pieDataset0);
      assertEquals(0, numberArray0.length);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-484));
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, double0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNull(range0);
      assertEquals(0, numberArray0.length);
      
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Hour hour1 = (Hour)hour0.next();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertNotNull(hour1);
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) hour1, (KeyedValues) pieDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertNotNull(defaultCategoryDataset0);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, numberArray0.length);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1009.6), (-1009.6));
      assertEquals((-1009.6), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1009.6), lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      String string0 = hour0.toString();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(string0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("[20,14/2/2014]", string0);
      
      timeTableXYDataset0.add((TimePeriod) hour0, (Number) 23, "[20,14/2/2014]", false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Hour hour1 = (Hour)hour0.next();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertNotNull(hour1);
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      
      Range range0 = timeTableXYDataset0.getDomainBounds(false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) hour1, (KeyedValues) defaultKeyedValues0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultCategoryDataset0);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset(true);
      assertEquals(0.5, defaultTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset1.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset1.isAutoWidth());
      assertEquals(0, defaultTableXYDataset1.getItemCount());
      assertTrue(defaultTableXYDataset1.isAutoPrune());
      assertEquals(0, defaultTableXYDataset1.getSeriesCount());
      assertNotNull(defaultTableXYDataset1);
      assertFalse(defaultTableXYDataset1.equals((Object)defaultTableXYDataset0));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-1257.555847));
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals((-1257.555847), range1.getLowerBound(), 0.01);
      assertEquals((-1257.555847), range1.getUpperBound(), 0.01);
      assertEquals((-1257.555847), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertFalse(defaultTableXYDataset0.equals((Object)defaultTableXYDataset1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(defaultTableXYDataset0, defaultTableXYDataset1);
      assertNotSame(range1, range0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-1208);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (double) (-1208);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (double) (-1254);
      doubleArray1[5] = (-1257.555847);
      doubleArray1[6] = (double) (-1208);
      doubleArray1[7] = (-1.0);
      doubleArray1[8] = (-1.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1208.0), (-1.0), (-1208.0), (-1.0), (-1254.0), (-1257.555847), (-1208.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1120.742), (-1.0), 1066, (-1208.0));
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Year year0 = new Year();
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2, year0);
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      Year year1 = (Year)year0.next();
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals("2015", year1.toString());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2015, year1.getYear());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 9999;
      doubleArray0[3] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (-9999);
      doubleArray0[6] = 606.7474981739091;
      doubleArray0[7] = (double) 483;
      doubleArray0[8] = (double) (-9999);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {9999.0, 0.0, 2.0, 1.0, 1.0, (-9999.0), 606.7474981739091, 483.0, (-9999.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[][] doubleArray1 = new double[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertNull(number0);
      assertEquals(0, doubleArray1.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 9999);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultPieDataset0);
      assertEquals(0, doubleArray1.length);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertNull(number1);
      assertEquals(0, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertNull(range1);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number[][] numberArray0 = new Number[2][5];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(2, numberArray0.length);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Requires 'start' < 'end'.", "|SZ1h$A", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(11, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Requires 'start' < 'end'.", ">tR'X<P4lU/sHBH", doubleArray0);
      assertNotNull(categoryDataset1);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(11, doubleArray0.length);
      assertNotSame(categoryDataset1, categoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset1);
      assertEquals(2, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getRowCount());
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertTrue(boolean0);
      assertEquals(2, numberArray0.length);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2, year0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      Year year1 = (Year)year0.next();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2015", year1.toString());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2015, year1.getYear());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 9999;
      doubleArray0[3] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (-9999);
      doubleArray0[6] = 606.7474981739091;
      doubleArray0[7] = (double) 483;
      doubleArray0[8] = (double) (-9999);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {9999.0, 0.0, 2.0, 1.0, 1.0, (-9999.0), 606.7474981739091, 483.0, (-9999.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[][] doubleArray1 = new double[0][6];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(">tR'X<P4lU/sHBH", ">tR'X<P4lU/sHBH", doubleArray1);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1009.6), (-1009.6));
      assertEquals((-1009.6), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1009.6), lineFunction2D0.getIntercept(), 0.01);
      assertNotNull(lineFunction2D0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = polynomialFunction2D0.getCoefficients();
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      
      double double0 = (-1.0);
      int int0 = (-1208);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      int int1 = (-1254);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Year year0 = new Year();
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 814, year0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(813, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(813, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertTrue(boolean0);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      Year year1 = (Year)year0.next();
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2015", year1.toString());
      assertEquals(2015, year1.getYear());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 9999;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (-9999);
      doubleArray0[6] = 606.7474981739091;
      doubleArray0[7] = (double) 483;
      doubleArray0[8] = (double) (-9999);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {9999.0, 0.0, 2.0, 1.0, 1.0, (-9999.0), 606.7474981739091, 483.0, (-9999.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate(23, 273, 273);
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertEquals("Sun Jun 30 00:00:00 GMT 1946", mockDate0.toString());
      assertEquals((-741830400000L), simpleTimePeriod0.getStartMillis());
      assertEquals((-741830400000L), simpleTimePeriod0.getEndMillis());
      assertNotNull(simpleTimePeriod0);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(1);
      assertTrue(xYIntervalSeries0.getNotify());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertTrue(xYIntervalSeries0.getAutoSort());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertNull(xYIntervalSeries0.getDescription());
      assertNotNull(xYIntervalSeries0);
      
      xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(xYIntervalSeries0.getNotify());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertTrue(xYIntervalSeries0.getAutoSort());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertNull(xYIntervalSeries0.getDescription());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, comparableArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-754.03859304);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(double0);
      assertEquals((-754.03859304), (double)double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 814, year0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(813, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(813, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertTrue(boolean0);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      Year year1 = (Year)year0.next();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals("2015", year1.toString());
      assertEquals(2015, year1.getYear());
      assertEquals(2015L, year1.getSerialIndex());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 9999;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (-9999);
      doubleArray0[6] = 606.7474981739091;
      doubleArray0[7] = (double) 483;
      doubleArray0[8] = (double) (-9999);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {9999.0, 0.0, 2.0, 1.0, 1.0, (-9999.0), 606.7474981739091, 483.0, (-9999.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[][] doubleArray1 = new double[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(number0);
      assertEquals(0, doubleArray1.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 9999);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultPieDataset0);
      assertEquals(0, doubleArray1.length);
      
      Number number1 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(number1);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset(true);
      assertEquals(0, defaultTableXYDataset1.getSeriesCount());
      assertEquals(0, defaultTableXYDataset1.getItemCount());
      assertTrue(defaultTableXYDataset1.isAutoPrune());
      assertFalse(defaultTableXYDataset1.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset1.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset1);
      assertFalse(defaultTableXYDataset1.equals((Object)defaultTableXYDataset0));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-1257.555847));
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals((-1257.555847), range1.getLowerBound(), 0.01);
      assertEquals((-1257.555847), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1257.555847), range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertFalse(defaultTableXYDataset0.equals((Object)defaultTableXYDataset1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(defaultTableXYDataset0, defaultTableXYDataset1);
      assertNotSame(range1, range0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "Invalid bounds; ", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertEquals(11, doubleArray0.length);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      
      Range range4 = Range.expandToInclude(range1, (-5137.6068));
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals((-1257.555847), range1.getLowerBound(), 0.01);
      assertEquals((-1257.555847), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1257.555847), range1.getUpperBound(), 0.01);
      assertEquals((-5137.6068), range4.getLowerBound(), 0.01);
      assertEquals(3880.0509529999995, range4.getLength(), 0.01);
      assertEquals((-1257.555847), range4.getUpperBound(), 0.01);
      assertEquals((-3197.5813234999996), range4.getCentralValue(), 0.01);
      assertNotNull(range4);
      assertFalse(defaultTableXYDataset0.equals((Object)defaultTableXYDataset1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range1));
      assertNotSame(defaultTableXYDataset0, defaultTableXYDataset1);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      
      Range range5 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack0, range1, true);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals((-1257.555847), range1.getLowerBound(), 0.01);
      assertEquals((-1257.555847), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1257.555847), range1.getUpperBound(), 0.01);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNull(range5);
      assertFalse(defaultTableXYDataset0.equals((Object)defaultTableXYDataset1));
      assertFalse(range1.equals((Object)range4));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range3));
      assertNotSame(defaultTableXYDataset0, defaultTableXYDataset1);
      assertNotSame(range1, range4);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      
      Range range6 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getLength(), 0.01);
      assertNotNull(range6);
      assertTrue(range6.equals((Object)range3));
      assertTrue(range6.equals((Object)range0));
      assertFalse(range6.equals((Object)range4));
      assertFalse(range6.equals((Object)range1));
      assertEquals(11, doubleArray0.length);
      assertNotSame(range6, range4);
      assertNotSame(range6, range0);
      assertNotSame(range6, range1);
      assertNotSame(range6, range3);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(814, 9999, year0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(9998, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(9998, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertTrue(boolean0);
      
      Year year1 = (Year)year0.next();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2015, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals("2015", year1.toString());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      Number[][] numberArray0 = new Number[0][7];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("I}gx.' ybF", "", numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, numberArray0.length);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      assertFalse(vector0.contains(""));
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(predicate0);
      
      boolean boolean1 = vector0.removeElement(predicate0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(vector0.contains(""));
      
      boolean boolean2 = vector0.removeIf(predicate0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertFalse(vector0.contains(""));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, false);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNull(range0);
      assertEquals(0, numberArray0.length);
      assertFalse(vector0.contains(""));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, false);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNull(range1);
      assertEquals(0, numberArray0.length);
      assertFalse(vector0.contains(""));
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-5314.0));
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-5314.0), range1.getUpperBound(), 0.01);
      assertEquals((-5314.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-5314.0), range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(11, doubleArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotNull(range2);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertEquals(11, doubleArray0.length);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset(false);
      assertEquals(0, defaultTableXYDataset1.getItemCount());
      assertEquals(0.5, defaultTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset1.isAutoWidth());
      assertFalse(defaultTableXYDataset1.isAutoPrune());
      assertEquals(0, defaultTableXYDataset1.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset1.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset1);
      assertTrue(defaultTableXYDataset1.equals((Object)defaultTableXYDataset0));
      
      Range range0 = new Range((-5314.0), (-5314.0));
      assertEquals((-5314.0), range0.getLowerBound(), 0.01);
      assertEquals((-5314.0), range0.getUpperBound(), 0.01);
      assertEquals((-5314.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-929.0806690870143);
      doubleArray0[1] = (-929.0806690870143);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-929.0806690870143), (-929.0806690870143)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-929.0806690870143), 3605.71384541, 29, "");
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-3350928.112698921), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(3605.7138454100004, xYSeries0.getMaxX(), 0.01);
      assertEquals((-929.0806690870143), xYSeries0.getMinX(), 0.01);
      assertEquals(862261.8090020871, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(29, xYSeries0.getItemCount());
      assertNotNull(xYSeries0);
      assertArrayEquals(new double[] {(-929.0806690870143), (-929.0806690870143)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-769.6269589345678);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-769.6269589345678), 6.283185307179586, 1072, (-769.6269589345678));
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(xYSeriesCollection0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertNotNull(double0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals((-769.6269589345678), (double)double0, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-927.3063893512145), 3726.89556794926, 2, (-769.6269589345678));
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals((-927.3063893512145), xYSeries0.getMinX(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals((-769.6269589345678), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-769.6269589345678), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(3726.89556794926, xYSeries0.getMaxX(), 0.01);
      assertNotNull(xYSeries0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset1.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset1);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(11, doubleArray0.length);
      
      Date[] dateArray0 = new Date[4];
      int int0 = 1050;
      int int1 = 366;
      MockDate mockDate0 = new MockDate(3451, 1050, 366, 1072, (-869));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate((-17), 1, (-17), (-17), 661, 1);
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      dateArray0[1] = (Date) mockDate1;
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      dateArray0[2] = date0;
      String string0 = "";
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      assertNotNull(mockSimpleDateFormat0);
      
      try { 
        mockSimpleDateFormat0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 814, year0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(813, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(813, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertTrue(boolean0);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      Year year1 = (Year)year0.next();
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2015L, year1.getSerialIndex());
      assertEquals(2015, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals("2015", year1.toString());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 9999;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (-9999);
      doubleArray0[6] = 606.7474981739091;
      doubleArray0[7] = (double) 483;
      doubleArray0[8] = (double) (-9999);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {9999.0, 0.0, 2.0, 1.0, 1.0, (-9999.0), 606.7474981739091, 483.0, (-9999.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) (-9999.0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      numberArray1[1] = (Number) integer0;
      numberArray0[0] = numberArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("I}gx.' ybF", "I}gx.' ybF", numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      assertFalse(vector0.contains("I}gx.' ybF"));
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) dynamicTimeSeriesCollection0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(813, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertNotNull(predicate0);
      assertFalse(year0.equals((Object)year1));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotSame(year0, year1);
      
      boolean boolean1 = vector0.removeIf(predicate0);
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(813, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(year0.equals((Object)year1));
      assertFalse(boolean1 == boolean0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertFalse(boolean1);
      assertNotSame(year0, year1);
      assertFalse(vector0.contains("I}gx.' ybF"));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, true);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNull(range0);
      assertEquals(1, numberArray0.length);
      assertFalse(vector0.contains("I}gx.' ybF"));
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (-2.147483648E9));
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Minute minute0 = new Minute(1050, hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(26, minute0.getMinute());
      assertNotNull(minute0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      defaultStatisticalCategoryDataset0.add(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (Comparable) minute0, (Comparable) hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(26, minute0.getMinute());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      assertNotNull(datasetChangeInfo0);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(datasetChangeInfo0, xYTaskDataset0, datasetChangeInfo0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(datasetChangeEvent0);
      
      xYTaskDataset0.datasetChanged(datasetChangeEvent0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 2773);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2773, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-769.6269589345678);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-769.6269589345678)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      Vector<Short> vector0 = new Vector<Short>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, true);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNull(range1);
      assertEquals(11, doubleArray0.length);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-769.6269589345678));
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(number0);
      
      MockDate mockDate0 = new MockDate((-934), (-934), 1356);
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertEquals("Tue Nov 16 00:00:00 GMT 891", mockDate0.toString());
      assertEquals((-34021987200000L), simpleTimePeriod0.getEndMillis());
      assertEquals((-34021987200000L), simpleTimePeriod0.getStartMillis());
      assertNotNull(simpleTimePeriod0);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      // Undeclared exception!
      try { 
        xYIntervalSeriesCollection0.getItemCount((-934));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYIntervalSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-257.77);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1301.1361386478;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 0.0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "r=>I\"c-gI>", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertNull(range2);
      assertEquals(1, doubleArray0.length);
      
      Range range3 = Range.expandToInclude((Range) null, 1.7976931348623157E308);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1.7976931348623157E308, range3.getLowerBound(), 0.01);
      assertEquals(1.7976931348623157E308, range3.getUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, range3.getCentralValue(), 0.01);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range0));
      assertNotSame(range3, range0);
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack0, range0, false);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNull(range4);
      assertFalse(range0.equals((Object)range3));
      assertNotSame(range0, range3);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 1.0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Object object1 = defaultKeyedValues2DDataset0.clone();
      assertNotNull(object1);
      assertTrue(object1.equals((Object)defaultKeyedValues2DDataset0));
      assertNotSame(defaultKeyedValues2DDataset0, object1);
      assertNotSame(object1, defaultKeyedValues2DDataset0);
      
      double[][] doubleArray1 = new double[7][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.8;
      doubleArray2[5] = Double.POSITIVE_INFINITY;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 1.0;
      doubleArray2[8] = 0.0;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      defaultKeyedValues2DDataset0.clear();
      assertTrue(defaultKeyedValues2DDataset0.equals((Object)object1));
      assertNotSame(defaultKeyedValues2DDataset0, object1);
      
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(7, doubleArray1.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertNull(range1);
      assertTrue(defaultKeyedValues2DDataset0.equals((Object)object1));
      assertNotSame(defaultKeyedValues2DDataset0, object1);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Integer integer0 = new Integer((-505));
      assertNotNull(integer0);
      assertEquals((-505), (int)integer0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      String string0 = hour0.toString();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(string0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("[20,14/2/2014]", string0);
      
      timeTableXYDataset0.add((TimePeriod) hour0, (Number) 0, "[20,14/2/2014]", false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Hour hour1 = (Hour)hour0.next();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertNotNull(hour1);
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      
      Range range0 = timeTableXYDataset0.getDomainBounds(false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xIntervalSeriesCollection0, false);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("1970", year0.toString());
      assertEquals(1L, year0.getFirstMillisecond());
      assertEquals(1L, year0.getLastMillisecond());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1970, year0.getYear());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      Year year1 = (Year)year0.previous();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("1970", year0.toString());
      assertEquals(1L, year0.getFirstMillisecond());
      assertEquals(1L, year0.getLastMillisecond());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1970, year0.getYear());
      assertEquals(1969L, year1.getSerialIndex());
      assertEquals("1969", year1.toString());
      assertEquals(1969, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      assertNotNull(datasetChangeInfo0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(timeTableXYDataset0, xYTaskDataset0, datasetChangeInfo0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(datasetChangeEvent0);
      
      XYTaskDataset xYTaskDataset1 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset1.isTransposed());
      assertNotNull(xYTaskDataset1);
      assertTrue(xYTaskDataset1.equals((Object)xYTaskDataset0));
      
      xYTaskDataset1.datasetChanged(datasetChangeEvent0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset1.isTransposed());
      assertTrue(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertTrue(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYTaskDataset1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset1.isTransposed());
      assertNull(number0);
      assertTrue(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1L, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) mockDate0, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1301.1361386478;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "VC@A", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      assertFalse(vector0.contains(0.0));
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) vector0, false);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNull(range0);
      assertEquals(1, doubleArray0.length);
      assertFalse(vector0.contains(0.0));
      
      MockDate mockDate0 = new MockDate(1, 1, 1);
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertEquals("Fri Feb 01 00:00:00 GMT 1901", mockDate0.toString());
      assertEquals((-2174774400000L), simpleTimePeriod0.getEndMillis());
      assertEquals((-2174774400000L), simpleTimePeriod0.getStartMillis());
      assertNotNull(simpleTimePeriod0);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries(mockDate0);
      assertEquals("Fri Feb 01 00:00:00 GMT 1901", mockDate0.toString());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertTrue(xYIntervalSeries0.getAutoSort());
      assertNull(xYIntervalSeries0.getDescription());
      assertTrue(xYIntervalSeries0.getNotify());
      assertNotNull(xYIntervalSeries0);
      
      xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries0);
      assertEquals("Fri Feb 01 00:00:00 GMT 1901", mockDate0.toString());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals(Integer.MAX_VALUE, xYIntervalSeries0.getMaximumItemCount());
      assertTrue(xYIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertTrue(xYIntervalSeries0.getAutoSort());
      assertNull(xYIntervalSeries0.getDescription());
      assertTrue(xYIntervalSeries0.getNotify());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) jDBCPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) defaultKeyedValuesDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (-2.147483648E9));
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Minute minute0 = new Minute(1050, hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(26, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertNotNull(minute0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      defaultStatisticalCategoryDataset0.add(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (Comparable) minute0, (Comparable) hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(26, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      assertNotNull(datasetChangeInfo0);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(datasetChangeInfo0, xYTaskDataset0, datasetChangeInfo0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(datasetChangeEvent0);
      
      xYTaskDataset0.datasetChanged(datasetChangeEvent0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number1);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) hour0, (-2.147483648E9), 0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(pieDataset0);
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) minute0, (KeyedValues) pieDataset0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(26, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertNotNull(categoryDataset0);
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(26, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertNotNull(range1);
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(defaultMultiValueCategoryDataset0, true);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset(false);
      assertEquals(0, defaultTableXYDataset1.getItemCount());
      assertFalse(defaultTableXYDataset1.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset1.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset1.isAutoPrune());
      assertEquals(0, defaultTableXYDataset1.getSeriesCount());
      assertNotNull(defaultTableXYDataset1);
      assertTrue(defaultTableXYDataset1.equals((Object)defaultTableXYDataset0));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset1, (-5314.0));
      assertEquals(0, defaultTableXYDataset1.getItemCount());
      assertFalse(defaultTableXYDataset1.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset1.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset1.isAutoPrune());
      assertEquals(0, defaultTableXYDataset1.getSeriesCount());
      assertEquals((-5314.0), range1.getLowerBound(), 0.01);
      assertEquals((-5314.0), range1.getUpperBound(), 0.01);
      assertEquals((-5314.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertTrue(defaultTableXYDataset1.equals((Object)defaultTableXYDataset0));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(defaultTableXYDataset1, defaultTableXYDataset0);
      assertNotSame(range1, range0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "", (KeyedValues) jDBCPieDataset0);
      assertNotNull(categoryDataset0);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNull(range2);
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection1);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0, (-1.0));
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals((-1.0), range3.getLowerBound(), 0.01);
      assertEquals((-1.0), range3.getUpperBound(), 0.01);
      assertEquals((-1.0), range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Integer integer0 = new Integer((-505));
      assertNotNull(integer0);
      assertEquals((-505), (int)integer0);
      
      Hour hour0 = new Hour();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      String string0 = hour0.toString();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotNull(string0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("[20,14/2/2014]", string0);
      
      timeTableXYDataset0.add((TimePeriod) hour0, (Number) 0, "[20,14/2/2014]", true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Hour hour1 = (Hour)hour0.next();
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertNotNull(hour1);
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) hour1);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(defaultPieDataset0);
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getFirstMillisecond());
      assertEquals(1392409281320L, hour1.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(hour1.equals((Object)hour0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(hour0, hour1);
      assertNotSame(hour1, hour0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 593, 1069);
      assertEquals(1069, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(593, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Integer integer0 = new Integer((-505));
      assertNotNull(integer0);
      assertEquals((-505), (int)integer0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("2%Z(:];=Rs3", "2%Z(:];=Rs3", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset(false);
      assertEquals(0, defaultTableXYDataset1.getItemCount());
      assertFalse(defaultTableXYDataset1.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset1.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset1.isAutoPrune());
      assertEquals(0, defaultTableXYDataset1.getSeriesCount());
      assertNotNull(defaultTableXYDataset1);
      assertTrue(defaultTableXYDataset1.equals((Object)defaultTableXYDataset0));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset1, (-5314.0));
      assertEquals(0, defaultTableXYDataset1.getItemCount());
      assertFalse(defaultTableXYDataset1.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset1.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset1.isAutoPrune());
      assertEquals(0, defaultTableXYDataset1.getSeriesCount());
      assertEquals((-5314.0), range1.getCentralValue(), 0.01);
      assertEquals((-5314.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-5314.0), range1.getUpperBound(), 0.01);
      assertNotNull(range1);
      assertTrue(defaultTableXYDataset1.equals((Object)defaultTableXYDataset0));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(defaultTableXYDataset1, defaultTableXYDataset0);
      assertNotSame(range1, range0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "W5P", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Range range2 = DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(range2);
      assertTrue(defaultTableXYDataset0.equals((Object)defaultTableXYDataset1));
      assertNotSame(defaultTableXYDataset0, defaultTableXYDataset1);
      
      Range range3 = Range.expandToInclude(range0, (-929.0806690870143));
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-464.54033454350713), range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals((-929.0806690870143), range3.getLowerBound(), 0.01);
      assertEquals(929.0806690870143, range3.getLength(), 0.01);
      assertNotNull(range3);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertEquals(11, doubleArray0.length);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset1, (List) stack0, range3, true);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0, defaultTableXYDataset1.getItemCount());
      assertFalse(defaultTableXYDataset1.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset1.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset1.isAutoPrune());
      assertEquals(0, defaultTableXYDataset1.getSeriesCount());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals((-464.54033454350713), range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals((-929.0806690870143), range3.getLowerBound(), 0.01);
      assertEquals(929.0806690870143, range3.getLength(), 0.01);
      assertNull(range4);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range3));
      assertTrue(defaultTableXYDataset1.equals((Object)defaultTableXYDataset0));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertEquals(11, doubleArray0.length);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(defaultTableXYDataset1, defaultTableXYDataset0);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = null;
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-257.77);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1301.1361386478;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "VC@A", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      assertFalse(vector0.contains("VC@A"));
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      boolean boolean0 = vector0.add((Object) yIntervalSeriesCollection0);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      assertFalse(vector0.contains("VC@A"));
      
      vector0.setSize(793);
      assertEquals(793, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(793, vector0.capacity());
      assertFalse(vector0.contains(0.0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) vector0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.YIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      timeSeriesCollection0.validateObject();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(number0);
      
      System.setCurrentTimeMillis(0L);
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range3);
      
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[16];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (double) 0L;
      doubleArray0[2] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 0L;
      doubleArray2[2] = (double) 0L;
      doubleArray2[3] = (double) 0L;
      doubleArray2[4] = (double) 0L;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[21];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 0L;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-1969.16019679);
      doubleArray3[4] = (double) 0L;
      doubleArray3[5] = (double) 0L;
      doubleArray3[6] = (double) 0L;
      doubleArray3[7] = 0.0;
      doubleArray3[8] = 0.0;
      doubleArray0[2] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Unknown data", "Unknown data", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Range range4 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertNotNull(range4);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1073741824, 0);
      assertNotNull(mockGregorianCalendar0);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[3] = (-2400.91917363927);
      doubleArray2[3] = (double) 814;
      doubleArray2[5] = (double) 2;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.resources.DataPackageResources", (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(2, 2);
      assertEquals(2.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(2.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 2.0, 2695.76, 2, 2.0);
      assertEquals(2.0, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(2.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertNotNull(xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1301.1361386478;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {1301.1361386478}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1301.1361386478}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1301.1361386478}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-769.6269589345678), 6.283185307179586, 1072, 1301.1361386478);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(xYSeriesCollection0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {1301.1361386478}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertNotNull(double0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {1301.1361386478}, doubleArray1, 0.01);
      assertEquals(1301.1361386478, (double)double0, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 1072);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      int int0 = 2;
      Year year0 = new Year();
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 814, year0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(813, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(813, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertTrue(boolean0);
      
      int int1 = 1073741824;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1073741824, 0);
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = year0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(0L, long0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(0, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNull(number0);
      assertEquals(0, oHLCDataItemArray0.length);
      
      String string0 = "?Yi~q]%VxFm`MO4k";
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset((String) null, "tet;LA7z0Vd", "", "?Yi~q]%VxFm`MO4k");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1L, year0.getFirstMillisecond());
      assertEquals(1L, year0.getLastMillisecond());
      assertEquals(1970, year0.getYear());
      assertEquals("1970", year0.toString());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Year year1 = (Year)year0.previous();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1L, year0.getFirstMillisecond());
      assertEquals(1L, year0.getLastMillisecond());
      assertEquals(1970, year0.getYear());
      assertEquals("1970", year0.toString());
      assertEquals("1969", year1.toString());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1969L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1969, year1.getYear());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1.0, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 6.283185307179586, (-2670.606), 2206.113855341016, (-907.13), 2206.113855341016);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      Year year2 = new Year(1896);
      assertEquals(1896L, year2.getSerialIndex());
      assertEquals(1392409281320L, year2.getFirstMillisecond());
      assertEquals(1392409281320L, year2.getLastMillisecond());
      assertEquals(1896, year2.getYear());
      assertEquals("1896", year2.toString());
      assertNotNull(year2);
      assertFalse(year2.equals((Object)year0));
      assertFalse(year2.equals((Object)year1));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 9999, (-9999));
      assertEquals((-9999), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(9999, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year();
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1.0, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 6.9695986567776185, (-2670.606), (-9999), (-907.13), (-9999));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      Comparable<DefaultTableXYDataset>[] comparableArray0 = (Comparable<DefaultTableXYDataset>[]) Array.newInstance(Comparable.class, 3);
      Minute minute0 = new Minute();
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertNotNull(minute0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Second second0 = new Second(493, minute0);
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals((-19), second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNotNull(second0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Second second1 = (Second)second0.previous();
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals((-19), second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals((-20), second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertNotNull(second1);
      assertFalse(second1.equals((Object)second0));
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      
      comparableArray0[0] = (Comparable<DefaultTableXYDataset>) second1;
      comparableArray0[1] = (Comparable<DefaultTableXYDataset>) oHLCDataItem0;
      comparableArray0[2] = (Comparable<DefaultTableXYDataset>) year0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1L, year0.getLastMillisecond());
      assertEquals(1970, year0.getYear());
      assertEquals(1L, year0.getFirstMillisecond());
      assertEquals("1970", year0.toString());
      assertEquals(1970L, year0.getSerialIndex());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Year year1 = (Year)year0.previous();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1L, year0.getLastMillisecond());
      assertEquals(1970, year0.getYear());
      assertEquals(1L, year0.getFirstMillisecond());
      assertEquals("1970", year0.toString());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1969L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1969, year1.getYear());
      assertEquals("1969", year1.toString());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(year1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1L, year0.getLastMillisecond());
      assertEquals(1970, year0.getYear());
      assertEquals(1L, year0.getFirstMillisecond());
      assertEquals("1970", year0.toString());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1969L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1969, year1.getYear());
      assertEquals("1969", year1.toString());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertNotNull(keyToGroupMap1);
      assertFalse(keyToGroupMap1.equals((Object)keyToGroupMap0));
      
      boolean boolean0 = keyToGroupMap1.equals(yIntervalSeriesCollection0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertFalse(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertFalse(boolean0);
      assertNotSame(keyToGroupMap1, keyToGroupMap0);
      
      Comparable<TimeSeriesCollection>[] comparableArray0 = (Comparable<TimeSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1L, year0.getLastMillisecond());
      assertEquals("1970", year0.toString());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1970, year0.getYear());
      assertEquals(1L, year0.getFirstMillisecond());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1.0, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      long long0 = MockDate.UTC((-9999), 1212, (-9999), (-9999), (-9999), (-2212));
      assertEquals((-315465632152000L), long0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 6.283185307179586, (-2670.606), 2206.113855341016, (-907.13), 2206.113855341016);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year0, oHLCDataItemArray0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1L, year0.getLastMillisecond());
      assertEquals("1970", year0.toString());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1970, year0.getYear());
      assertEquals(1L, year0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1L, year0.getLastMillisecond());
      assertEquals("1970", year0.toString());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1970, year0.getYear());
      assertEquals(1L, year0.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(number0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1.0, number0);
      assertEquals(2, oHLCDataItemArray0.length);
      
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1L;
      doubleArray1[1] = (-2670.606);
      doubleArray1[2] = (double) (-9999);
      doubleArray1[3] = (-907.13);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 9999;
      doubleArray2[1] = (double) (-315465632152000L);
      doubleArray2[2] = (double) 1L;
      doubleArray2[3] = (double) 1212;
      doubleArray2[4] = (double) (-2212);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-2670.606);
      doubleArray3[1] = 9999.0;
      doubleArray3[2] = (double) 9999;
      doubleArray3[3] = 2206.113855341016;
      doubleArray3[4] = (double) 1L;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 1.0;
      doubleArray4[1] = (double) (-9999);
      doubleArray4[2] = (-2670.606);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 1.0;
      doubleArray5[2] = 6.283185307179586;
      doubleArray5[3] = (double) 1L;
      doubleArray5[4] = (double) 1L;
      doubleArray5[5] = (double) 1L;
      doubleArray5[6] = (-2670.606);
      doubleArray5[7] = (-2670.606);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (-907.13);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = 9999.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = 2206.113855341016;
      doubleArray8[1] = (double) 1L;
      doubleArray8[2] = (-2670.606);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[7];
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      
      doubleArray9[0] = (double) 1212;
      doubleArray9[2] = (double) 1L;
      doubleArray9[3] = 1.0;
      doubleArray9[4] = (double) (-9999);
      doubleArray9[5] = 1.0;
      doubleArray9[6] = 2206.113855341016;
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) oHLCDataItemArray0, (Comparable[]) oHLCDataItemArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, numberArray0.length);
      
      Week week0 = new Week();
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNull(range0);
      assertEquals(0, numberArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      assertNotNull(datasetChangeInfo0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(object0, defaultIntervalCategoryDataset0, datasetChangeInfo0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(datasetChangeEvent0);
      assertEquals(0, numberArray0.length);
      
      xYTaskDataset0.datasetChanged(datasetChangeEvent0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, numberArray0.length);
      
      Object[][][] objectArray0 = new Object[6][4][7];
      objectArray0[0] = (Object[][]) numberArray0;
      objectArray0[1] = (Object[][]) numberArray0;
      objectArray0[2] = (Object[][]) numberArray0;
      objectArray0[3] = (Object[][]) numberArray0;
      objectArray0[4] = (Object[][]) numberArray0;
      objectArray0[5] = (Object[][]) numberArray0;
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      timeSeriesCollection0.validateObject();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range1);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(number0);
      
      System.setCurrentTimeMillis(0L);
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, true);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range3);
      
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = (double) 0L;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 0L;
      doubleArray2[2] = (double) 0L;
      doubleArray2[3] = (double) 0L;
      doubleArray2[4] = (double) 0L;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 0L;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-1969.16019679);
      doubleArray3[4] = (double) 0L;
      doubleArray3[5] = (double) 0L;
      doubleArray3[6] = (double) 0L;
      doubleArray3[7] = 0.0;
      doubleArray3[8] = 0.0;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Unknown data", "Unknown data", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Range range4 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals((-1969.16019679), range4.getLowerBound(), 0.01);
      assertEquals((-984.580098395), range4.getCentralValue(), 0.01);
      assertEquals(1969.16019679, range4.getLength(), 0.01);
      assertNotNull(range4);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, (-9999));
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-9999), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) fixedMillisecond0, (KeyedValues) categoryToPieDataset0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-9999), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[8][6];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = number0;
      numberArray2[1] = number0;
      numberArray2[2] = number0;
      numberArray2[3] = number0;
      numberArray2[4] = number0;
      numberArray2[5] = number0;
      numberArray2[6] = number0;
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(300, (int)integer1);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, numberArray0.length);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      assertEquals(8, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(xYIntervalSeriesCollection0, arrayList0, true);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(range0);
      
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1171.631666572431;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 6.283185307179586;
      doubleArray2[3] = 1171.631666572431;
      doubleArray2[4] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 6.283185307179586;
      doubleArray4[2] = 6.283185307179586;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 6.283185307179586;
      doubleArray4[6] = 6.283185307179586;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray3);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray3.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1072, 1072);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1072, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1072, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, (-806));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1072, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1072, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1072, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1072, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0.0, double0, 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 980);
      assertNotNull(mockGregorianCalendar0);
      
      Year year0 = new Year(980);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(980L, year0.getSerialIndex());
      assertEquals(980, year0.getYear());
      assertEquals("980", year0.toString());
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      long long0 = year0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=980,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(980L, year0.getSerialIndex());
      assertEquals(980, year0.getYear());
      assertEquals("980", year0.toString());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(0L, long0);
      
      Year year1 = new Year((-522));
      assertEquals((-522), year1.getYear());
      assertEquals((-522L), year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals("-522", year1.toString());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 1, 2);
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, (-9999));
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-9999), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) fixedMillisecond0, (KeyedValues) categoryToPieDataset0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-9999), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[8][6];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = number0;
      numberArray2[1] = number0;
      numberArray2[2] = number0;
      numberArray2[3] = number0;
      numberArray2[4] = number0;
      numberArray2[5] = number0;
      numberArray2[6] = number0;
      numberArray2[4] = number0;
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      numberArray2[8] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = number0;
      numberArray3[1] = number0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[1];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = number0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[8];
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray3));
      
      numberArray5[0] = (Number) integer0;
      numberArray5[1] = number0;
      numberArray5[2] = number0;
      numberArray5[3] = (Number) integer0;
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(300, (int)integer1);
      
      numberArray5[4] = (Number) integer1;
      numberArray5[5] = (Number) integer0;
      numberArray5[6] = number0;
      numberArray5[7] = number0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[4];
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray2));
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray1));
      
      numberArray6[1] = number0;
      numberArray6[2] = (Number) integer1;
      numberArray6[3] = (Number) integer0;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[1];
      assertFalse(numberArray7.equals((Object)numberArray6));
      assertFalse(numberArray7.equals((Object)numberArray2));
      assertFalse(numberArray7.equals((Object)numberArray5));
      assertFalse(numberArray7.equals((Object)numberArray3));
      assertFalse(numberArray7.equals((Object)numberArray1));
      assertFalse(numberArray7.equals((Object)numberArray4));
      
      numberArray0[6] = numberArray7;
      Number[] numberArray8 = new Number[0];
      assertFalse(numberArray8.equals((Object)numberArray5));
      assertFalse(numberArray8.equals((Object)numberArray1));
      assertFalse(numberArray8.equals((Object)numberArray3));
      assertFalse(numberArray8.equals((Object)numberArray7));
      assertFalse(numberArray8.equals((Object)numberArray6));
      assertFalse(numberArray8.equals((Object)numberArray4));
      assertFalse(numberArray8.equals((Object)numberArray2));
      
      numberArray0[7] = numberArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, numberArray0.length);
      
      Week week0 = new Week();
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(week0);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      boolean boolean0 = keyToGroupMap0.equals(yIntervalSeriesCollection0);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(boolean0);
      
      Comparable<DefaultOHLCDataset>[] comparableArray0 = (Comparable<DefaultOHLCDataset>[]) Array.newInstance(Comparable.class, 5);
      comparableArray0[0] = (Comparable<DefaultOHLCDataset>) week0;
      comparableArray0[1] = (Comparable<DefaultOHLCDataset>) week0;
      comparableArray0[2] = (Comparable<DefaultOHLCDataset>) week0;
      comparableArray0[3] = (Comparable<DefaultOHLCDataset>) week0;
      comparableArray0[4] = (Comparable<DefaultOHLCDataset>) week0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1L, year0.getLastMillisecond());
      assertEquals(1L, year0.getFirstMillisecond());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1970, year0.getYear());
      assertEquals("1970", year0.toString());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      Year year1 = (Year)year0.previous();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1L, year0.getLastMillisecond());
      assertEquals(1L, year0.getFirstMillisecond());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1970, year0.getYear());
      assertEquals("1970", year0.toString());
      assertEquals(1969, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals("1969", year1.toString());
      assertEquals(1969L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1.0, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 6.283185307179586, (-2670.606), 2206.113855341016, (-907.13), 2206.113855341016);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year1, oHLCDataItemArray0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1L, year0.getLastMillisecond());
      assertEquals(1L, year0.getFirstMillisecond());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1970, year0.getYear());
      assertEquals("1970", year0.toString());
      assertEquals(1969, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals("1969", year1.toString());
      assertEquals(1969L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1L, year0.getLastMillisecond());
      assertEquals(1L, year0.getFirstMillisecond());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1970, year0.getYear());
      assertEquals("1970", year0.toString());
      assertEquals(1969, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals("1969", year1.toString());
      assertEquals(1969L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(double0);
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(1.0, (double)double0, 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      String string0 = "";
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset("ZcJv{?5", "", "", "?Yi~q]%VxFm`MO4k");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("1970", year0.toString());
      assertEquals(1970, year0.getYear());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1L, year0.getFirstMillisecond());
      assertEquals(1L, year0.getLastMillisecond());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      Year year1 = (Year)year0.previous();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("1970", year0.toString());
      assertEquals(1970, year0.getYear());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1L, year0.getFirstMillisecond());
      assertEquals(1L, year0.getLastMillisecond());
      assertEquals(1969L, year1.getSerialIndex());
      assertEquals("1969", year1.toString());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1969, year1.getYear());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 9999, (-9999), (-9999), 1.0, 9999);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 6.283185307179586, (-9999), 2206.113855341016, (-907.13), 2206.113855341016);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertNotNull(oHLCDataItem1);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(year1, oHLCDataItemArray0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("1970", year0.toString());
      assertEquals(1970, year0.getYear());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1L, year0.getFirstMillisecond());
      assertEquals(1L, year0.getLastMillisecond());
      assertEquals(1969L, year1.getSerialIndex());
      assertEquals("1969", year1.toString());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1969, year1.getYear());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(2, oHLCDataItemArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(defaultOHLCDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("1970", year0.toString());
      assertEquals(1970, year0.getYear());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1L, year0.getFirstMillisecond());
      assertEquals(1L, year0.getLastMillisecond());
      assertEquals(1969L, year1.getSerialIndex());
      assertEquals("1969", year1.toString());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1969, year1.getYear());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(double0);
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1.0, (double)double0, 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 85.569860666231;
      doubleArray0[1] = (double) 9999;
      doubleArray0[2] = (-907.13);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {85.569860666231, 9999.0, (-907.13)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {85.569860666231, 9999.0, (-907.13)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {85.569860666231, 9999.0, (-907.13)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-33.520983), 457.21, 6, 9999.0);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(xYSeriesCollection0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {85.569860666231, 9999.0, (-907.13)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      Double double1 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {85.569860666231, 9999.0, (-907.13)}, doubleArray0, 0.01);
      assertEquals((-1.850556195467723E8), (double)double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-257.77);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-257.77), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-257.77), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-257.77), 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray2);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(3, polynomialFunction2D1.getOrder());
      assertNotNull(polynomialFunction2D1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertArrayEquals(new double[] {(-257.77), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-257.77), 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      double[] doubleArray3 = polynomialFunction2D1.getCoefficients();
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(3, polynomialFunction2D1.getOrder());
      assertNotNull(doubleArray3);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertTrue(polynomialFunction2D0.equals((Object)polynomialFunction2D1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-257.77), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-257.77), 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-257.77), 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray3.length);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(polynomialFunction2D0, polynomialFunction2D1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(polynomialFunction2D1, polynomialFunction2D0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(number0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D1, 1975.19783449, (-1.0), (-5364), (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (-505));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(pieDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      Number[][] numberArray0 = new Number[1][7];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) integer0;
      numberArray1[1] = (Number) integer0;
      numberArray1[2] = (Number) integer0;
      numberArray1[3] = (Number) integer0;
      numberArray1[4] = (Number) integer0;
      numberArray1[5] = (Number) integer0;
      numberArray1[6] = (Number) integer0;
      numberArray1[7] = (Number) integer0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = null;
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-257.77);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1301.1361386478;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "VC@A", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      assertFalse(vector0.contains("VC@A"));
      
      vector0.setSize(793);
      assertEquals(793, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(793, vector0.size());
      assertFalse(vector0.contains(0.0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) vector0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Year year0 = new Year();
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 814, year0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(813, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(813, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertTrue(boolean0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1073741824, 0);
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = year0.getLastMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(0L, long0);
      
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[3] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      Year year1 = new Year(1);
      assertEquals("1", year1.toString());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1L, year1.getSerialIndex());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      comparableArray0[4] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 1090, 1090);
      assertEquals(1090, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1090, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(slidingCategoryDataset0);
      assertEquals(1090, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1090, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-257.77);
      doubleArray0[1] = 0.0;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      assertNotNull(datasetChangeInfo0);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(datasetChangeInfo0, taskSeriesCollection0, datasetChangeInfo0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(datasetChangeEvent0);
      
      xYTaskDataset0.datasetChanged(datasetChangeEvent0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Hour hour0 = new Hour();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      String string0 = hour0.toString();
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertNotNull(string0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("[20,14/2/2014]", string0);
      
      timeTableXYDataset0.add((TimePeriod) hour0, (Number) 0, "[20,14/2/2014]", false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[20,14/2/2014]";
      stringArray0[1] = "[20,14/2/2014]";
      Number[][] numberArray0 = new Number[2][8];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) 23;
      numberArray1[1] = (Number) 0;
      numberArray1[2] = (Number) 0;
      numberArray1[3] = (Number) 0;
      Float float0 = new Float((-263.29F));
      assertNotNull(float0);
      assertEquals((-263.29F), (float)float0, 0.01F);
      
      numberArray1[4] = (Number) float0;
      numberArray1[5] = (Number) 0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 23;
      numberArray2[1] = (Number) 0;
      numberArray2[2] = (Number) 0;
      numberArray2[3] = (Number) float0;
      numberArray2[4] = (Number) 23;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (-2.147483648E9));
      assertNull(range0);
      
      Object[][] objectArray0 = new Object[4][0];
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) defaultStatisticalCategoryDataset0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray1[1] = object0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[2];
      assertFalse(objectArray2.equals((Object)objectArray1));
      
      objectArray2[0] = (Object) defaultStatisticalCategoryDataset0;
      objectArray2[1] = object0;
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[1];
      assertFalse(objectArray3.equals((Object)objectArray1));
      assertFalse(objectArray3.equals((Object)objectArray2));
      
      objectArray3[0] = (Object) null;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-929.0806690870143));
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-929.0806690870143), range1.getLowerBound(), 0.01);
      assertEquals((-929.0806690870143), range1.getUpperBound(), 0.01);
      assertEquals((-929.0806690870143), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Object object1 = defaultKeyedValues2DDataset0.clone();
      assertNotNull(object1);
      assertTrue(object1.equals((Object)defaultKeyedValues2DDataset0));
      assertNotSame(defaultKeyedValues2DDataset0, object1);
      assertNotSame(object1, defaultKeyedValues2DDataset0);
      
      double[][] doubleArray0 = new double[0][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "W5P", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNull(range2);
      assertEquals(0, doubleArray0.length);
      
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Range range3 = DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range3);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-257.77);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1301.1361386478;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "VC@A", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      assertFalse(vector0.contains(0.0));
      
      LinkedList<XYDatasetTableModel> linkedList0 = new LinkedList<XYDatasetTableModel>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((XYDatasetTableModel) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = vector0.addAll(0, (Collection<?>) linkedList0);
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(vector0.contains(0.0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (-2.147483648E9));
      assertNull(range0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) defaultStatisticalCategoryDataset0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2.147483648E9);
      doubleArray0[1] = (-2.147483648E9);
      doubleArray0[2] = (-2.147483648E9);
      doubleArray0[3] = (-2.147483648E9);
      doubleArray0[4] = (-2.147483648E9);
      doubleArray0[5] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-2.147483648E9), (-2.147483648E9), (-2.147483648E9), (-2.147483648E9), (-2.147483648E9), (-2.147483648E9)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2.147483648E9), (-2.147483648E9), (-2.147483648E9), (-2.147483648E9), (-2.147483648E9), (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.147483648E9), (-2.147483648E9), (-2.147483648E9), (-2.147483648E9), (-2.147483648E9), (-2.147483648E9)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = (-1208);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      int int1 = 523;
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 2614.76557, 2504.81940206, 523, (-2.147483648E9));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      boolean boolean0 = keyToGroupMap0.equals(xIntervalSeriesCollection0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(range1);
      
      Number[][] numberArray0 = new Number[3][3];
      Number[] numberArray1 = new Number[2];
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[1] = (Number) integer0;
      numberArray2[3] = (Number) integer0;
      numberArray0[1] = numberArray2;
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, 440.112207, (-3854.0), 53, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, (-10009));
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-10009), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) fixedMillisecond0, (KeyedValues) categoryToPieDataset0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-10009), categoryToPieDataset0.getExtractIndex());
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[8][6];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) double0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) double0;
      numberArray2[1] = (Number) double0;
      numberArray2[2] = (Number) double0;
      numberArray2[3] = (Number) double0;
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, (-9999), 0.0, 1, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(11, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(11, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(11, doubleArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(defaultTableXYDataset0);
      
      DatasetChangeInfo datasetChangeInfo0 = new DatasetChangeInfo();
      assertNotNull(datasetChangeInfo0);
      
      DatasetChangeEvent datasetChangeEvent0 = new DatasetChangeEvent(taskSeriesCollection0, defaultTableXYDataset0, datasetChangeInfo0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertNotNull(datasetChangeEvent0);
      
      xYTaskDataset0.datasetChanged(datasetChangeEvent0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[][] doubleArray3 = new double[3][2];
      doubleArray3[0] = doubleArray0;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-754.03859304);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-2400.91917363927);
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray3[1] = doubleArray4;
      doubleArray3[2] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray3, doubleArray3);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray3.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(number0);
      assertEquals((-2400.91917363927), number0);
      assertEquals(3, doubleArray3.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2400.91917363927), 1.0, 0, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertNotNull(fixedMillisecond0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, (-9999));
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-9999), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) fixedMillisecond0, (KeyedValues) categoryToPieDataset0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-9999), categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[8][6];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = number0;
      numberArray2[1] = number0;
      numberArray2[2] = number0;
      numberArray2[3] = number0;
      numberArray2[4] = number0;
      numberArray2[5] = number0;
      numberArray2[6] = number0;
      numberArray2[7] = number0;
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      numberArray2[8] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = number0;
      numberArray3[1] = number0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[1];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = number0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[8];
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray2));
      
      numberArray5[0] = (Number) integer0;
      numberArray5[1] = number0;
      numberArray5[2] = number0;
      numberArray5[3] = (Number) integer0;
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(300, (int)integer1);
      
      numberArray5[4] = (Number) integer1;
      numberArray5[5] = (Number) integer0;
      numberArray5[6] = number0;
      numberArray5[7] = number0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[4];
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray1));
      assertFalse(numberArray6.equals((Object)numberArray2));
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray5));
      
      numberArray6[1] = number0;
      numberArray6[2] = (Number) integer1;
      numberArray6[3] = (Number) integer0;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[0];
      assertFalse(numberArray7.equals((Object)numberArray4));
      assertFalse(numberArray7.equals((Object)numberArray3));
      assertFalse(numberArray7.equals((Object)numberArray5));
      assertFalse(numberArray7.equals((Object)numberArray1));
      assertFalse(numberArray7.equals((Object)numberArray2));
      assertFalse(numberArray7.equals((Object)numberArray6));
      
      numberArray0[6] = numberArray7;
      Number[] numberArray8 = new Number[0];
      assertFalse(numberArray8.equals((Object)numberArray6));
      assertFalse(numberArray8.equals((Object)numberArray2));
      assertFalse(numberArray8.equals((Object)numberArray7));
      assertFalse(numberArray8.equals((Object)numberArray3));
      assertFalse(numberArray8.equals((Object)numberArray4));
      assertFalse(numberArray8.equals((Object)numberArray5));
      assertFalse(numberArray8.equals((Object)numberArray1));
      
      numberArray0[7] = numberArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1517.8700954915);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-2711.42230606865);
      doubleArray1[3] = 691.148945;
      doubleArray1[4] = (-95.93723);
      doubleArray1[5] = (-770.1269589345678);
      doubleArray1[6] = (-1211.6351567429008);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-1.0);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("*uY/N!UM^Dmh-kWB&I7", "*uY/N!UM^Dmh-kWB&I7", doubleArray0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[7];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2627), 1044, (-199), 2, (-1018));
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (-593.811121), 2926.72, 1171.631666572431, (-1.0), (-770.1269589345678));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 2229.3838, (-95.93723), (-95.93723), Double.POSITIVE_INFINITY, 695.1949445551201);
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, 2926.72, 504.6, (-3224.02163668), 1.5, (-335.2367671078));
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, (-1211.6351567429008), (-1517.8700954915), (-3224.02163668), Double.POSITIVE_INFINITY, 2693.205383992981);
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(date0, (-2711.42230606865), (-1018), (-95.93723), 1432.3477719426, (-2627));
      oHLCDataItemArray0[4] = oHLCDataItem4;
      MockDate mockDate0 = new MockDate(2, 1049, 2, 1180, 1047, 14);
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(mockDate0, 1496.0, (-2711.42230606865), 691.148945, 3329.270342033, (-2711.42230606865));
      oHLCDataItemArray0[5] = oHLCDataItem5;
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(mockDate0, (-1.0), (-638.648), (-2627), (-770.1269589345678), (-335.2367671078));
      oHLCDataItemArray0[6] = oHLCDataItem6;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(691.148945, oHLCDataItemArray0);
      defaultOHLCDataset0.getSelectionState();
      defaultWindDataset0.setSelectionState((XYDatasetSelectionState) null);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      double[][] doubleArray0 = new double[11][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      
      Object object0 = new Object();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset(true);
      Stack<TimeSeriesCollection> stack0 = new Stack<TimeSeriesCollection>();
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.iterateXYRangeBounds(defaultXYDataset0);
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Duplicate items in 'columnKeys'.", "Requires 'start' < 'end'.", doubleArray0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      keyToGroupMap0.equals(xIntervalSeriesCollection0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      assertNull(range0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      Number[][] numberArray0 = new Number[3][3];
      Number[] numberArray1 = new Number[2];
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      numberArray2[1] = (Number) integer0;
      numberArray2[3] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[6];
      numberArray1[0] = (Number) integer0;
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      numberArray3[5] = (Number) integer0;
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals((-30000.0), number0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = 2377.5252;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = (-1573.825301034819);
      doubleArray1[5] = 61.820267;
      doubleArray1[6] = (-4321.3);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-4321.3);
      doubleArray2[1] = 1876.94051;
      doubleArray2[2] = 2377.5252;
      doubleArray2[3] = (-4321.3);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[1] = 61.820267;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = 2377.5252;
      doubleArray4[2] = 1876.94051;
      doubleArray4[3] = (-1573.825301034819);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-505));
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-505));
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      Hour hour0 = new Hour();
      RegularTimePeriod regularTimePeriod0 = hour0.next();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) regularTimePeriod0, (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.clone();
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (-2.147483648E9));
      Object[][] objectArray0 = new Object[4][0];
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) defaultStatisticalCategoryDataset0;
      Object object0 = new Object();
      objectArray1[1] = object0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[2];
      objectArray2[0] = (Object) defaultStatisticalCategoryDataset0;
      objectArray2[1] = object0;
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[1];
      objectArray3[0] = (Object) null;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-927.3063893512145));
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.clone();
      double[][] doubleArray0 = new double[0][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "W5P", doubleArray0);
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Year year0 = new Year();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 814, year0);
      DatasetUtilities.isEmptyOrNull((XYDataset) dynamicTimeSeriesCollection0);
      CategoryDataset categoryDataset0 = null;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 814;
      dynamicTimeSeriesCollection0.clone();
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 9999;
      doubleArray0[6] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 9999, (-927.3063893512145), 3114, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2400.91917363927), 1.0, 0, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null);
      timeSeriesCollection0.validateObject();
      DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, false);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      Comparable<DefaultHighLowDataset> comparable0 = null;
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      // Undeclared exception!
      try { 
        Date.from((Instant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      keyToGroupMap0.equals(xIntervalSeriesCollection0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      String[] stringArray0 = null;
      Number[][] numberArray0 = new Number[3][3];
      Number[] numberArray1 = new Number[2];
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      numberArray1[0] = (Number) integer0;
      Integer integer1 = new Integer(53);
      numberArray1[1] = (Number) integer1;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      numberArray2[0] = (Number) integer1;
      Integer integer2 = new Integer(53);
      numberArray2[1] = (Number) integer2;
      numberArray2[2] = (Number) integer1;
      numberArray2[3] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[6];
      numberArray3[0] = (Number) integer0;
      numberArray3[1] = (Number) integer2;
      numberArray3[2] = (Number) integer1;
      numberArray3[3] = (Number) integer1;
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      // Undeclared exception!
      try { 
        matrixSeriesCollection0.getX(2, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Week week0 = new Week();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(week0);
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      keyToGroupMap0.equals(yIntervalSeriesCollection0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      DatasetUtilities.iterateXYRangeBounds(jDBCXYDataset0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset1);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (-2.147483648E9));
      Object[][][] objectArray0 = new Object[8][3][7];
      Object[][] objectArray1 = new Object[4][0];
      Object[] objectArray2 = new Object[2];
      objectArray2[0] = (Object) defaultStatisticalCategoryDataset0;
      Object object0 = new Object();
      objectArray2[1] = object0;
      objectArray1[0] = objectArray2;
      Object[] objectArray3 = new Object[2];
      objectArray3[0] = (Object) defaultStatisticalCategoryDataset0;
      objectArray3[1] = object0;
      objectArray1[1] = objectArray3;
      Object[] objectArray4 = new Object[1];
      objectArray4[0] = (Object) null;
      objectArray1[2] = objectArray4;
      Object[] objectArray5 = new Object[2];
      objectArray5[0] = (Object) null;
      objectArray5[1] = object0;
      objectArray1[3] = objectArray5;
      objectArray0[0] = objectArray1;
      Object[][] objectArray6 = new Object[7][1];
      objectArray6[0] = objectArray5;
      objectArray6[1] = objectArray5;
      Object[] objectArray7 = new Object[4];
      objectArray7[0] = (Object) defaultStatisticalCategoryDataset0;
      objectArray7[1] = object0;
      objectArray7[2] = (Object) null;
      Object object1 = new Object();
      objectArray7[3] = object1;
      objectArray6[2] = objectArray7;
      objectArray6[3] = objectArray2;
      objectArray6[4] = objectArray4;
      objectArray6[5] = objectArray2;
      objectArray6[6] = objectArray3;
      objectArray0[1] = objectArray6;
      Object[][] objectArray8 = new Object[9][1];
      objectArray8[0] = objectArray7;
      objectArray8[1] = objectArray7;
      objectArray8[2] = objectArray7;
      objectArray8[3] = objectArray5;
      objectArray8[4] = objectArray3;
      objectArray8[5] = objectArray2;
      objectArray8[6] = objectArray7;
      objectArray8[7] = objectArray7;
      objectArray8[8] = objectArray5;
      objectArray0[2] = objectArray8;
      Object[][] objectArray9 = new Object[9][0];
      objectArray9[0] = objectArray7;
      objectArray9[1] = objectArray7;
      Object[] objectArray10 = new Object[2];
      objectArray10[0] = object0;
      objectArray10[1] = (Object) defaultStatisticalCategoryDataset0;
      objectArray9[2] = objectArray10;
      objectArray9[3] = objectArray7;
      objectArray9[4] = objectArray3;
      objectArray9[5] = objectArray4;
      objectArray9[6] = objectArray5;
      objectArray9[7] = objectArray3;
      objectArray9[8] = objectArray4;
      objectArray0[3] = objectArray9;
      Object[][] objectArray11 = new Object[9][3];
      objectArray11[0] = objectArray3;
      Object[] objectArray12 = new Object[1];
      objectArray12[0] = (Object) defaultStatisticalCategoryDataset0;
      objectArray11[1] = objectArray12;
      objectArray11[2] = objectArray7;
      objectArray11[3] = objectArray10;
      objectArray11[4] = objectArray10;
      objectArray11[5] = objectArray3;
      objectArray11[6] = objectArray7;
      objectArray11[7] = objectArray2;
      objectArray11[8] = objectArray4;
      objectArray0[4] = objectArray11;
      Object[][] objectArray13 = new Object[6][0];
      objectArray13[0] = objectArray10;
      objectArray13[1] = objectArray4;
      objectArray13[2] = objectArray2;
      objectArray13[3] = objectArray5;
      objectArray13[4] = objectArray5;
      objectArray13[5] = objectArray10;
      objectArray0[5] = objectArray13;
      Object[][] objectArray14 = new Object[4][4];
      objectArray14[0] = objectArray3;
      objectArray14[1] = objectArray12;
      objectArray14[2] = objectArray10;
      objectArray14[3] = objectArray4;
      objectArray0[6] = objectArray14;
      Object[][] objectArray15 = new Object[7][5];
      Object[] objectArray16 = new Object[2];
      Object object2 = new Object();
      objectArray16[0] = object2;
      objectArray16[1] = object1;
      objectArray15[0] = objectArray16;
      objectArray15[1] = objectArray10;
      objectArray15[2] = objectArray7;
      objectArray15[3] = objectArray7;
      objectArray15[4] = objectArray7;
      objectArray15[5] = objectArray5;
      Object[] objectArray17 = new Object[9];
      objectArray17[0] = (Object) null;
      objectArray17[1] = object1;
      objectArray17[2] = (Object) defaultStatisticalCategoryDataset0;
      objectArray17[3] = object0;
      objectArray17[4] = object2;
      objectArray17[5] = object0;
      objectArray17[6] = object1;
      objectArray17[7] = (Object) defaultStatisticalCategoryDataset0;
      objectArray17[8] = object1;
      objectArray15[6] = objectArray17;
      objectArray0[7] = objectArray15;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Number
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 526.57327114546;
      doubleArray1[1] = 2377.5252;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = (-1573.825301034819);
      doubleArray1[5] = 61.820267;
      doubleArray1[6] = (-4321.3);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-4321.3);
      doubleArray2[1] = 1876.94051;
      doubleArray2[2] = 2377.5252;
      doubleArray2[3] = (-4321.3);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 526.57327114546;
      doubleArray3[1] = 61.820267;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = 2377.5252;
      doubleArray4[2] = 1876.94051;
      doubleArray4[3] = (-1573.825301034819);
      doubleArray4[4] = 526.57327114546;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(2939.552271294, 2939.552271294);
      Day.parseDay("{*fcD#&;T>J=hOe<WQ");
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 2939.552271294, 2939.552271294, (-1086), (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-3415.1715982);
      doubleArray0[0] = (-3415.1715982);
      double double1 = 0.5;
      doubleArray0[1] = 0.5;
      doubleArray0[2] = 3118.47256102226;
      doubleArray0[3] = (-1517.8700954915);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      int int0 = 3977;
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-1517.8700954915), 0.5, 3977, (-3415.1715982));
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, (-9999));
      DatasetUtilities.createCategoryDataset((Comparable) fixedMillisecond0, (KeyedValues) categoryToPieDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      Number[][] numberArray0 = new Number[8][6];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[9];
      numberArray2[0] = number0;
      numberArray2[1] = number0;
      numberArray2[2] = number0;
      numberArray2[3] = number0;
      numberArray2[4] = number0;
      numberArray2[5] = number0;
      numberArray2[6] = number0;
      numberArray2[7] = number0;
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      numberArray2[8] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      numberArray3[0] = number0;
      numberArray3[1] = number0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[1];
      numberArray4[0] = number0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[8];
      numberArray5[0] = (Number) integer0;
      numberArray5[1] = number0;
      numberArray5[2] = number0;
      numberArray5[3] = (Number) integer0;
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      numberArray5[4] = (Number) integer1;
      numberArray5[5] = (Number) integer0;
      numberArray5[6] = number0;
      numberArray5[7] = number0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[4];
      numberArray6[0] = (Number) integer1;
      numberArray6[1] = number0;
      numberArray6[2] = (Number) integer1;
      numberArray6[3] = (Number) integer0;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[0];
      numberArray0[6] = numberArray7;
      Number[] numberArray8 = new Number[0];
      numberArray0[7] = numberArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = null;
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-257.77);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1301.1361386478;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "VC@A", doubleArray0);
      Vector<Object> vector0 = new Vector<Object>();
      DatasetUtilities.findRangeBounds(categoryDataset0, (List) vector0, true);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(0.0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) simpleHistogramDataset0);
      Comparable<TimeTableXYDataset>[] comparableArray0 = (Comparable<TimeTableXYDataset>[]) Array.newInstance(Comparable.class, 6);
      int int0 = 1;
      MockDate mockDate0 = new MockDate(1, 1, 1);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      comparableArray0[0] = (Comparable<TimeTableXYDataset>) simpleTimePeriod0;
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      // Undeclared exception!
      try { 
        xYIntervalSeriesCollection0.getSeries(1233);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYIntervalSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      DatasetUtilities.iterateToFindDomainBounds(xYIntervalSeriesCollection0, arrayList0, true);
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1269.9216164;
      doubleArray1[2] = 1171.631666572431;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1269.9216164;
      doubleArray2[2] = 6.283185307179586;
      doubleArray2[3] = 1171.631666572431;
      doubleArray2[4] = 1269.9216164;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 6.283185307179586;
      doubleArray4[2] = 6.283185307179586;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 6.283185307179586;
      doubleArray4[6] = 6.283185307179586;
      doubleArray4[7] = 0.0;
      doubleArray4[8] = 1269.9216164;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 6.283185307179586;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (-844.3708118607028);
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 1269.9216164;
      doubleArray6[6] = 3403.7511243572567;
      doubleArray6[7] = 0.0;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Year year0 = new Year();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 814, year0);
      DatasetUtilities.isEmptyOrNull((XYDataset) dynamicTimeSeriesCollection0);
      Comparable<DefaultBoxAndWhiskerXYDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerXYDataset>[]) Array.newInstance(Comparable.class, 9);
      comparableArray0[0] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[1] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[2] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[3] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      comparableArray0[4] = (Comparable<DefaultBoxAndWhiskerXYDataset>) year0;
      // Undeclared exception!
      try { 
        SerialDate.createInstance((-663), 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1009.6), (-1009.6));
      Week week0 = new Week(193, 0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (Number) 1);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, (-1009.6), (-1009.6), 0, timeSeriesDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      int int0 = 925;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, 925);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      double[][] doubleArray0 = new double[9][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 808.9522487610415;
      doubleArray1[1] = 3726.89556794926;
      doubleArray1[2] = 354.0;
      doubleArray1[3] = (-659.927844271);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 808.9522487610415;
      doubleArray2[1] = (-659.927844271);
      doubleArray2[2] = 808.9522487610415;
      doubleArray2[3] = 3726.89556794926;
      doubleArray2[4] = 3726.89556794926;
      doubleArray2[5] = 354.0;
      doubleArray2[6] = 808.9522487610415;
      doubleArray2[7] = 354.0;
      doubleArray2[8] = 354.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 354.0;
      doubleArray3[1] = 808.9522487610415;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 354.0;
      doubleArray4[1] = 808.9522487610415;
      doubleArray4[2] = (-659.927844271);
      doubleArray4[3] = 354.0;
      doubleArray4[4] = 3726.89556794926;
      doubleArray4[5] = 808.9522487610415;
      doubleArray4[6] = (-659.927844271);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 354.0;
      doubleArray5[1] = (-659.927844271);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 808.9522487610415;
      doubleArray6[1] = 3726.89556794926;
      doubleArray6[2] = 3726.89556794926;
      doubleArray6[3] = 3726.89556794926;
      doubleArray6[4] = 3726.89556794926;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = 354.0;
      doubleArray7[1] = 0.5;
      doubleArray7[2] = 3726.89556794926;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[1];
      doubleArray9[0] = (-659.927844271);
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("N5kn!%lAfZEI8", "", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(12500.54239238978, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) xIntervalSeriesCollection0);
      String string0 = "";
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("", "", "", "");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }
}
