/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:08:27 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.text.DateFormatSymbols;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoField;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.stream.Stream;
import javax.swing.JApplet;
import javax.swing.JLayeredPane;
import javax.swing.plaf.synth.SynthPanelUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.SortOrder;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.DomainOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.DatasetChangeListener;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeries;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.SeriesChangeInfo;
import org.jfree.data.general.SeriesChangeType;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeSeriesTableModel;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Byte> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte0);
      assertNotNull(byte0);
      
      Date[] dateArray0 = new Date[1];
      Instant instant0 = MockInstant.ofEpochMilli((byte)77);
      assertNotNull(instant0);
      
      Instant instant1 = MockInstant.minusSeconds(instant0, (byte)77);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertFalse(instant1.equals((Object)instant0));
      assertNotNull(instant1);
      
      Date date0 = Date.from(instant1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotNull(date0);
      assertEquals("Wed Dec 31 23:58:43 GMT 1969", date0.toString());
      
      dateArray0[0] = date0;
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 1162.6491813599;
      doubleArray0[2] = (double) (byte)77;
      doubleArray0[3] = (double) (byte)77;
      doubleArray0[4] = 0.570281124497992;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte)77;
      doubleArray1[1] = 0.570281124497992;
      doubleArray1[2] = 1162.6491813599;
      doubleArray1[3] = (double) (byte)77;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(byte0, dateArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 1162.6491813599, 77.0, 77.0, 0.570281124497992}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {77.0, 0.570281124497992, 1162.6491813599, 77.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (77.0) <= upper (0.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte) (-5));
      assertEquals((byte) (-5), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte) (-5)));
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      
      MockDate mockDate1 = new MockDate(1815, (byte) (-5), 976, (byte) (-5), 1815);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      boolean boolean1 = mockDate0.before(mockDate1);
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate1, mockDate0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Sat Apr 03 01:15:00 GMT 3717", mockDate1.toString());
      
      Month month1 = (Month)month0.next();
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(month1.equals((Object)month0));
      assertNotNull(month1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24171L, month1.getSerialIndex());
      assertEquals(2014, month1.getYearValue());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(3, month1.getMonth());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(month1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(month0.equals((Object)month1));
      assertFalse(month1.equals((Object)month0));
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24171L, month1.getSerialIndex());
      assertEquals(2014, month1.getYearValue());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(3, month1.getMonth());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(139.53935, 139.53935, "a|3");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-1.0), (-1.0), "Duplicate items in 'rowKeys'.");
      assertEquals(140.53935, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(140.53935, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 48;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 48, 48);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(48, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(48, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-933.9514635896295);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Double double0 = new Double((-933.9514635896295));
      assertEquals((-933.9514635896295), (double)double0, 0.01);
      assertNotNull(double0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(1, doubleArray0.length);
      
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      Locale locale0 = new Locale("jGaFBG-*^r'3}kt3_", "jGaFBG-*^r'3}kt3_");
      assertNotNull(locale0);
      assertEquals("JGAFBG-*^R'3}KT3_", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jgafbg-*^r'3}kt3_", locale0.getLanguage());
      assertEquals("jgafbg-*^r'3}kt3__JGAFBG-*^R'3}KT3_", locale0.toString());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("JGAFBG-*^R'3}KT3_", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jgafbg-*^r'3}kt3_", locale0.getLanguage());
      assertEquals("jgafbg-*^r'3}kt3__JGAFBG-*^R'3}KT3_", locale0.toString());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, hour0, timeZone0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals("JGAFBG-*^R'3}KT3_", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jgafbg-*^r'3}kt3_", locale0.getLanguage());
      assertEquals("jgafbg-*^r'3}kt3__JGAFBG-*^R'3}KT3_", locale0.toString());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals((-933.9514635896295), range0.getCentralValue(), 0.01);
      assertEquals((-933.9514635896295), range0.getUpperBound(), 0.01);
      assertEquals((-933.9514635896295), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) null, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byte0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(linkedList0, byte0, byte0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byte0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, false);
      assertNotNull(range0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(linkedList0.contains(byte0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("I\"57\"* bBZDjm4a>W", 8, 8);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(64, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8, matrixSeries0.getRowCount());
      assertEquals(8, matrixSeries0.getColumnsCount());
      
      double[][] doubleArray0 = new double[5][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = (double) 8;
      doubleArray2[2] = (double) 8;
      doubleArray2[3] = (double) 8;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 8;
      doubleArray4[1] = (double) 8;
      doubleArray4[2] = 1.0;
      doubleArray4[3] = (double) 8;
      doubleArray4[4] = 1.0;
      doubleArray4[5] = (double) 8;
      doubleArray4[6] = 1.0;
      doubleArray4[7] = (double) 8;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (double) 8;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("I\"57\"* bBZDjm4a>W", "I\"57\"* bBZDjm4a>W", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(5, doubleArray0.length);
      assertEquals(7.0, range0.getLength(), 0.01);
      assertEquals(8.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(4.5, range0.getCentralValue(), 0.01);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) yIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      ArrayList<DefaultStatisticalCategoryDataset> arrayList0 = new ArrayList<DefaultStatisticalCategoryDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0, (List) arrayList0, range0, true);
      assertNull(range1);
      assertEquals(5, doubleArray0.length);
      assertEquals(7.0, range0.getLength(), 0.01);
      assertEquals(8.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(4.5, range0.getCentralValue(), 0.01);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("I\"57\"* bBZDjm4a>W", 8, 8);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8, matrixSeries0.getRowCount());
      assertEquals(8, matrixSeries0.getColumnsCount());
      assertEquals(64, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      
      boolean boolean0 = matrixSeries0.isEmpty();
      assertFalse(boolean0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8, matrixSeries0.getRowCount());
      assertEquals(8, matrixSeries0.getColumnsCount());
      assertEquals(64, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8, matrixSeries0.getRowCount());
      assertEquals(8, matrixSeries0.getColumnsCount());
      assertEquals(64, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(7.0, number0);
      assertNotNull(number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(8, matrixSeries0.getRowCount());
      assertEquals(8, matrixSeries0.getColumnsCount());
      assertEquals(64, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, Double.NEGATIVE_INFINITY, 2.0, 8, "I\"57\"* bBZDjm4a>W");
      assertNotNull(xYSeries0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(8, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-1167.511586), (-796.92), "eX<)-/| )s72aqf=b/G");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains((-1167.511586)));
      
      Double double0 = new Double(279.0787);
      assertEquals(279.0787, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = vector0.add(double0);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals("[279.0787]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(279.0787));
      assertFalse(vector0.contains((-796.92)));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, vector0, true);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(10, vector0.capacity());
      assertEquals("[279.0787]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-1168.011586), range0.getLowerBound(), 0.01);
      assertEquals((-1167.511586), range0.getCentralValue(), 0.01);
      assertEquals((-1167.011586), range0.getUpperBound(), 0.01);
      assertTrue(vector0.contains(279.0787));
      assertFalse(vector0.contains((-796.92)));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1167.511586), range1.getCentralValue(), 0.01);
      assertEquals((-1167.011586), range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-1168.011586), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte) (-40));
      assertEquals((byte) (-40), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byte0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(linkedList0, byte0, byte0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byte0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, false);
      assertNotNull(range0);
      assertEquals(1, linkedList0.size());
      assertEquals((-40.0), range0.getLowerBound(), 0.01);
      assertEquals((-40.0), range0.getCentralValue(), 0.01);
      assertEquals((-40.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(linkedList0.contains(byte0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, false);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(1, linkedList0.size());
      assertEquals((-40.0), range1.getLowerBound(), 0.01);
      assertEquals((-40.0), range1.getCentralValue(), 0.01);
      assertEquals((-40.0), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(linkedList0.contains(byte0));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 30, 30);
      assertNotNull(matrixSeries0);
      assertEquals(900, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(30, matrixSeries0.getColumnsCount());
      assertEquals(30, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(900, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(30, matrixSeries0.getColumnsCount());
      assertEquals(30, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(900, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(30, matrixSeries0.getColumnsCount());
      assertEquals(30, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(29.0, range0.getLength(), 0.01);
      assertEquals(14.5, range0.getCentralValue(), 0.01);
      assertEquals(29.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-933.9514635896295), (-933.9514635896295), "Null 'rowData' argument.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains((-933.9514635896295)));
      
      Double double0 = new Double((-933.9514635896295));
      assertEquals((-933.9514635896295), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = vector0.add(double0);
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals("[-933.9514635896295]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(double0));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, vector0, true);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(vector0.isEmpty());
      assertEquals("[-933.9514635896295]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals((-934.4514635896295), range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-933.9514635896295), range0.getCentralValue(), 0.01);
      assertEquals((-933.4514635896295), range0.getUpperBound(), 0.01);
      assertTrue(vector0.contains(double0));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-933.9514635896295), range1.getLowerBound(), 0.01);
      assertEquals((-933.9514635896295), range1.getCentralValue(), 0.01);
      assertEquals((-933.9514635896295), range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      double[] doubleArray0 = new double[1];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, "'=s}|AhW-S,XN[8Z^");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 0, 2366);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(2366, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingCategoryDataset0, tableOrder0, 0);
      assertNotNull(categoryToPieDataset0);
      assertEquals(2366, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        categoryToPieDataset0.getItemCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)67);
      assertEquals((byte)67, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byte0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(linkedList0, byte0, millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byte0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      assertNotNull(range0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(67.0, range0.getLowerBound(), 0.01);
      assertEquals(67.0, range0.getCentralValue(), 0.01);
      assertEquals(67.0, range0.getUpperBound(), 0.01);
      assertTrue(linkedList0.contains(byte0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 1871.0);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1871.0, range0.getLowerBound(), 0.01);
      assertEquals(1871.0, range0.getCentralValue(), 0.01);
      assertEquals(1871.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(1871.0));
      
      Double double0 = new Double(1871.0);
      assertEquals(1871.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = vector0.add(double0);
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals("[1871.0]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains(double0));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNull(range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Double double1 = new Double(1871.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(1871.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      boolean boolean1 = vector0.add(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(vector0.isEmpty());
      assertEquals("[1871.0, 1871.0]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertTrue(vector0.contains(double0));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, false);
      assertNull(range2);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1871.0, range0.getLowerBound(), 0.01);
      assertEquals(1871.0, range0.getCentralValue(), 0.01);
      assertEquals(1871.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(vector0.isEmpty());
      assertEquals("[1871.0, 1871.0]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertTrue(vector0.contains(double0));
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
      assertFalse(number0.equals((Object)double1));
      assertFalse(number0.equals((Object)double0));
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(139.53935, 139.53935, "a|3");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(139.53935));
      
      Double double0 = new Double((-2.147483648E9));
      assertEquals((-2.147483648E9), (double)double0, 0.01);
      assertNotNull(double0);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(140.03935, range0.getUpperBound(), 0.01);
      assertEquals(139.03935, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(139.53935, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(140.03935, range0.getUpperBound(), 0.01);
      assertEquals(139.03935, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(139.53935, range0.getCentralValue(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      int int0 = (-1384);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1384), 29);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(29, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1384), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(slidingGanttCategoryDataset0, true);
      assertNull(range2);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(29, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1384), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      String string0 = "\\s}_av3u[PZZF+N*7";
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset("Range(double, double): require lower (", "Range(double, double): require lower (", "Range(double, double): require lower (", "s}_av3u[PZZF+N*7");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(139.53935, 139.53935, "a|3");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(139.53935));
      
      Double double0 = new Double((-2.147483648E9));
      assertEquals((-2.147483648E9), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals("[-2.147483648E9]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(double0));
      assertFalse(stack0.contains(139.53935));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(139.53935, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(139.53935, range0.getCentralValue(), 0.01);
      assertEquals(139.53935, range0.getUpperBound(), 0.01);
      
      boolean boolean1 = stack0.add(double0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, stack0.size());
      assertEquals("[-2.147483648E9, -2.147483648E9]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(double0));
      assertFalse(stack0.contains(139.53935));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-2863.017749), (-2656.0), "a_pH#Z*lqzN");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 3812.75428);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(2484.75428, range0.getCentralValue(), 0.01);
      assertEquals(1156.75428, range0.getLowerBound(), 0.01);
      assertEquals(2656.0, range0.getLength(), 0.01);
      assertEquals(3812.75428, range0.getUpperBound(), 0.01);
      
      Double double0 = new Double(2296.8);
      assertEquals(2296.8, (double)double0, 0.01);
      assertNotNull(double0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-2863.017749), range1.getCentralValue(), 0.01);
      assertEquals((-2862.517749), range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-2863.517749), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Byte byte0 = new Byte((byte)110);
      assertEquals((byte)110, (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((byte)110));
      
      Byte byte1 = new Byte((byte)110);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)110, (byte)byte1);
      assertNotNull(byte1);
      
      boolean boolean0 = linkedList0.add(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte)110));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(linkedList0, byte0, byte0);
      assertTrue(byte0.equals((Object)byte1));
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte)110));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      assertNotNull(range0);
      assertEquals(1, linkedList0.size());
      assertEquals(110.0, range0.getCentralValue(), 0.01);
      assertEquals(110.0, range0.getUpperBound(), 0.01);
      assertEquals(110.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(linkedList0.contains((byte)110));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2275.740173846);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 1051.199;
      doubleArray1[3] = 1708.0655;
      doubleArray1[4] = 1747.51384;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertNotNull(defaultIntervalCategoryDataset1);
      assertEquals(0, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(byte0));
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byte0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(linkedList0, byte0, byte0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byte0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      assertNotNull(range0);
      assertEquals(1, linkedList0.size());
      assertEquals((-117.0), range0.getLowerBound(), 0.01);
      assertEquals((-117.0), range0.getUpperBound(), 0.01);
      assertEquals((-117.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(linkedList0.contains(byte0));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.NaN, 1913.48);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(Double.NaN, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1913.48, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 0.0, 1913.48, 100, double0);
      assertNotNull(xYSeries0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(Double.NaN, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(1913.48, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(1913.48, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(100, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      String string0 = "Null 'rowData' argument.";
      categoryTableXYDataset0.add((-1358.404980494), 1747.513835466026, "Null 'rowData' argument.");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1358.404980494));
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-1358.404980494), range0.getLowerBound(), 0.01);
      assertEquals(1747.513835466026, range0.getLength(), 0.01);
      assertEquals(389.10885497202594, range0.getUpperBound(), 0.01);
      assertEquals((-484.64806276098705), range0.getCentralValue(), 0.01);
      
      Double double0 = new Double((-1358.404980494));
      assertEquals((-1358.404980494), (double)double0, 0.01);
      assertNotNull(double0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(873.756917733013, range1.getCentralValue(), 0.01);
      assertEquals(1747.513835466026, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1747.513835466026, range1.getLength(), 0.01);
      
      Comparable<YIntervalSeriesCollection>[] comparableArray0 = (Comparable<YIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 4);
      DateFormatSymbols dateFormatSymbols0 = SerialDate.DATE_FORMAT_SYMBOLS;
      assertNotNull(dateFormatSymbols0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("8]sE?h1F.", dateFormatSymbols0);
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("8]sE?h1F.", mockSimpleDateFormat0.toPattern());
      assertEquals("8]sE?h1F.", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("8]sE?h1F.", mockSimpleDateFormat0.toPattern());
      assertEquals("8]sE?h1F.", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      int int0 = 1691;
      // Undeclared exception!
      try { 
        timeTableXYDataset0.getTimePeriod(1691);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1691, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[][] doubleArray0 = new double[12][0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(12, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(12, defaultIntervalCategoryDataset0.getSeriesCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(289.55, 289.55, "sb <Y-!q:'pI`<hf&");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 289.55);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(289.55, range0.getLowerBound(), 0.01);
      assertEquals(579.1, range0.getUpperBound(), 0.01);
      assertEquals(434.32500000000005, range0.getCentralValue(), 0.01);
      assertEquals(289.55, range0.getLength(), 0.01);
      
      Double double0 = new Double((-12.71266472624651));
      assertEquals((-12.71266472624651), (double)double0, 0.01);
      assertNotNull(double0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      categoryTableXYDataset0.setGroup(datasetGroup0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals("NOID", datasetGroup0.getID());
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(289.55));
      
      boolean boolean0 = vector0.add(double0);
      assertTrue(boolean0);
      assertEquals("[-12.71266472624651]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(289.55));
      assertTrue(vector0.contains(double0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (-175.6015608);
      doubleArray2[6] = (double) 1;
      doubleArray2[7] = (double) 1;
      doubleArray2[8] = (double) 1;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("\u0005K/TE", "\u0005K/TE", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1);
      assertNotNull(pieDataset0);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(175.6015608, range0.getLength(), 0.01);
      assertEquals((-82.8007804), range0.getCentralValue(), 0.01);
      assertEquals(5.0, range0.getUpperBound(), 0.01);
      assertEquals((-170.6015608), range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(2, doubleArray0.length);
      assertEquals((-175.6015608), range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals((-87.3007804), range1.getCentralValue(), 0.01);
      assertEquals(176.6015608, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Byte> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte0);
      assertNotNull(byte0);
      
      Date[] dateArray0 = new Date[1];
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      Instant instant1 = MockInstant.minusSeconds(instant0, (byte)77);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertFalse(instant1.equals((Object)instant0));
      assertNotNull(instant1);
      
      Date date0 = Date.from(instant1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:20:04 GMT 2014", date0.toString());
      
      dateArray0[0] = date0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)77;
      doubleArray0[1] = 1162.6491813599;
      doubleArray0[2] = (double) (byte)77;
      doubleArray0[3] = (double) (byte)77;
      doubleArray0[4] = 0.570281124497992;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte)77;
      doubleArray1[1] = 0.570281124497992;
      doubleArray1[2] = 1162.6491813599;
      doubleArray1[3] = (double) (byte)77;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(byte0, dateArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {77.0, 1162.6491813599, 77.0, 77.0, 0.570281124497992}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {77.0, 0.570281124497992, 1162.6491813599, 77.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(range0);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {77.0, 1162.6491813599, 77.0, 77.0, 0.570281124497992}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {77.0, 0.570281124497992, 1162.6491813599, 77.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(77.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(77.0, range0.getCentralValue(), 0.01);
      assertEquals(77.0, range0.getUpperBound(), 0.01);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(polynomialFunction2D0);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {77.0, 0.570281124497992, 1162.6491813599, 77.0}, doubleArray1, 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {77.0, 0.570281124497992, 1162.6491813599, 77.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {77.0, 0.570281124497992, 1162.6491813599, 77.0}, doubleArray1, 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(1162.6491813599));
      
      boolean boolean0 = stack0.add((Double) 77.0);
      assertTrue(boolean0);
      assertEquals("[77.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.contains(1162.6491813599));
      assertTrue(stack0.contains(77.0));
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, true);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(range1, range0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(range1);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {77.0, 1162.6491813599, 77.0, 77.0, 0.570281124497992}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {77.0, 0.570281124497992, 1162.6491813599, 77.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("[77.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240920432E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240920432E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240920432E12, range1.getUpperBound(), 0.01);
      assertFalse(stack0.contains(1162.6491813599));
      assertTrue(stack0.contains(77.0));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(77.0, number0);
      assertNotNull(number0);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {77.0, 1162.6491813599, 77.0, 77.0, 0.570281124497992}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {77.0, 0.570281124497992, 1162.6491813599, 77.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) stack0, true);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(range2);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {77.0, 1162.6491813599, 77.0, 77.0, 0.570281124497992}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {77.0, 0.570281124497992, 1162.6491813599, 77.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals("[77.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(1.39240920432E12, range2.getLowerBound(), 0.01);
      assertEquals(1.39240920432E12, range2.getCentralValue(), 0.01);
      assertEquals(1.39240920432E12, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(stack0.contains(1162.6491813599));
      assertTrue(stack0.contains(number0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Byte> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)85);
      assertEquals((byte)85, (byte)byte0);
      assertNotNull(byte0);
      
      Date[] dateArray0 = new Date[13];
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte)85));
      
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = (double) (byte)85;
      doubleArray0[4] = 0.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(byte0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(13, dateArray0.length);
      assertEquals(19, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertEquals(13, dateArray0.length);
      assertEquals(19, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(85.0, range0.getLength(), 0.01);
      assertEquals(85.0, range0.getUpperBound(), 0.01);
      assertEquals(42.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(19, doubleArray0.length);
      assertEquals(18, polynomialFunction2D0.getOrder());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(13, dateArray0.length);
      assertEquals(19, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(85.0, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultHighLowDataset0, (List) linkedList0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[3];
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      numberArray1[0] = (Number) bigInteger0;
      Short short0 = new Short((short)992);
      assertEquals((short)992, (short)short0);
      assertNotNull(short0);
      
      numberArray1[1] = (Number) short0;
      Byte byte0 = Byte.valueOf((byte) (-60));
      assertEquals((byte) (-60), (byte)byte0);
      assertNotNull(byte0);
      
      numberArray1[2] = (Number) byte0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", "d|rzy\"vo>OXx0R", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals((-60.0), number0);
      assertNotNull(number0);
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(1, numberArray0.length);
      assertEquals((-60.0), range0.getLowerBound(), 0.01);
      assertEquals(466.0, range0.getCentralValue(), 0.01);
      assertEquals(1052.0, range0.getLength(), 0.01);
      assertEquals(992.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYDataset0, false);
      assertNull(range0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Double double0 = new Double((-330.8862158743));
      assertEquals((-330.8862158743), (double)double0, 0.01);
      assertNotNull(double0);
      
      categoryTableXYDataset0.add((Number) double0, (Number) double0, "s}_av3u[PZZF+N*9", false);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double1 = categoryTableXYDataset0.getDomainLowerBound(false);
      assertEquals((-330.8862158743), double1, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(330.8862158743, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals((-330.8862158743), range1.getLowerBound(), 0.01);
      assertEquals((-165.44310793715), range1.getCentralValue(), 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Number[][] numberArray0 = new Number[8][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(8, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      int int0 = 1763;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1763);
      assertNotNull(categoryToPieDataset0);
      assertEquals(8, numberArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1763, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1763, Size: 8
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-932.669), 946.2909, "Null 'xRange' argument");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(946.2909));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(946.2909, number0);
      assertNotNull(number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Double double0 = new Double(946.2909);
      assertEquals((double)double0, (double)number0, 0.01);
      assertEquals(946.2909, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-370.046706152107));
      assertNotEquals((double)double1, (double)number0, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-370.046706152107), (double)double1, 0.01);
      assertNotNull(double1);
      
      boolean boolean0 = vector0.add(double1);
      assertNotEquals((double)double1, (double)number0, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[-370.046706152107]", vector0.toString());
      assertTrue(vector0.contains((-370.046706152107)));
      assertFalse(vector0.contains((-932.669)));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(946.2909, range0.getCentralValue(), 0.01);
      assertEquals(946.2909, range0.getUpperBound(), 0.01);
      assertEquals(946.2909, range0.getLowerBound(), 0.01);
      
      Double double2 = new Double((-932.669));
      assertNotEquals((double)double2, (double)number0, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-932.669), (double)double2, 0.01);
      assertNotNull(double2);
      
      boolean boolean1 = vector0.add(double2);
      assertNotEquals((double)double2, (double)number0, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("[-370.046706152107, -932.669]", vector0.toString());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains(double2));
      assertFalse(vector0.contains(double0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals("[-370.046706152107, -932.669]", vector0.toString());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(946.2909, range0.getCentralValue(), 0.01);
      assertEquals(946.2909, range0.getUpperBound(), 0.01);
      assertEquals(946.2909, range0.getLowerBound(), 0.01);
      assertTrue(vector0.contains(double2));
      assertFalse(vector0.contains(double0));
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
      assertFalse(number1.equals((Object)double1));
      assertFalse(number1.equals((Object)double2));
      assertFalse(number1.equals((Object)double0));
      assertFalse(number1.equals((Object)number0));
      assertEquals((-933.169), number1);
      assertNotNull(number1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((double) 179, (double) 179, "Null 'rowData' argument.");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Double double0 = new Double(179);
      assertEquals(179.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = vector0.add(double0);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals("[179.0]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(double0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(10, vector0.capacity());
      assertEquals("[179.0]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertTrue(vector0.contains(double0));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      double[] doubleArray0 = new double[2];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction2D0.getOrder());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((double) 999, 1022.1759243511676, "'=s}|AhW-S,XN[8Z^");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Comparable<DefaultIntervalXYDataset>[] comparableArray0 = (Comparable<DefaultIntervalXYDataset>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<DefaultIntervalXYDataset>) millisecond0;
      Comparable<TimeSeriesTableModel>[] comparableArray1 = (Comparable<TimeSeriesTableModel>[]) Array.newInstance(Comparable.class, 5);
      comparableArray1[0] = (Comparable<TimeSeriesTableModel>) millisecond0;
      comparableArray1[1] = (Comparable<TimeSeriesTableModel>) millisecond0;
      comparableArray1[2] = (Comparable<TimeSeriesTableModel>) millisecond0;
      comparableArray1[3] = (Comparable<TimeSeriesTableModel>) millisecond0;
      MockDate mockDate0 = new MockDate(0);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 999, 999, (-2270.0), (-2270.0), 1599.23127);
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      comparableArray1[4] = (Comparable<TimeSeriesTableModel>) oHLCDataItem0;
      double[][] doubleArray1 = new double[5][7];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 999;
      doubleArray2[1] = (-2.147483648E9);
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1599.23127;
      doubleArray3[1] = 1599.23127;
      doubleArray3[2] = 1599.23127;
      long long0 = mockDate0.getTime();
      assertEquals(0L, long0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      doubleArray3[3] = (-2.147483648E9);
      doubleArray1[3] = doubleArray3;
      doubleArray1[4] = doubleArray0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'columnKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Byte> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      byte byte0 = (byte)85;
      Byte byte1 = new Byte((byte)85);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)85, (byte)byte1);
      assertNotNull(byte1);
      
      Date[] dateArray0 = new Date[13];
      boolean boolean0 = linkedList0.add(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byte1));
      
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = (double) (byte)85;
      doubleArray0[4] = 0.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(byte1, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(defaultHighLowDataset0);
      assertEquals(13, dateArray0.length);
      assertEquals(19, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(range0);
      assertEquals(13, dateArray0.length);
      assertEquals(19, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(42.5, range0.getCentralValue(), 0.01);
      assertEquals(85.0, range0.getUpperBound(), 0.01);
      assertEquals(85.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(19, doubleArray0.length);
      assertEquals(18, polynomialFunction2D0.getOrder());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(13, dateArray0.length);
      assertEquals(19, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      double[] doubleArray0 = new double[2];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction2D0.getOrder());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((double) 999, 1022.1759243511676, "'=s}|AhW-S,XN[8Z^");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(1022.1759243511676, double0, 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      ArrayList<Second> arrayList0 = new ArrayList<Second>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, arrayList0, true);
      assertNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 1;
      MatrixSeries matrixSeries0 = new MatrixSeries(":e5Q/'E", 1, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertTrue(number1.equals((Object)number0));
      assertEquals(0.0, number1);
      assertNotNull(number1);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Function2D function2D0 = null;
      double double0 = (-3780.821095870783);
      int int1 = 442;
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      MockDate mockDate0 = new MockDate(1630L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 1022.1759243511676, (-3780.821095870783), 0.0, Double.POSITIVE_INFINITY);
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      MockDate mockDate1 = new MockDate(442, (-998), 1, (-648), 2790);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate1, 2195.663760175392, Double.NEGATIVE_INFINITY, (-4303.62543537), 1.0, 0.5);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Wed Oct 06 22:30:00 GMT 2258", mockDate1.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-907.90950493878), 0.0, 1, 1.0, 0.0);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotNull(oHLCDataItem2);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(":e5Q/'E", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getXDate(2796, (-648));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -648
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-3780.821095870783));
      assertNotNull(range0);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-3780.821095870783), range0.getLowerBound(), 0.01);
      assertEquals((-3780.821095870783), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-3780.821095870783), range0.getUpperBound(), 0.01);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(true));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = linkedList0.add((Object) defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(true));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(3011.80820658, 0.0, "xEH#F}3 N4b?}");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(0.0));
      
      Double double0 = new Double((-758.096));
      assertEquals((-758.096), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(853.6282549726551);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(853.6282549726551, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(853.6282549726551);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(853.6282549726551, (double)double2, 0.01);
      assertNotNull(double2);
      
      boolean boolean0 = vector0.add(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[853.6282549726551]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertFalse(vector0.contains((-758.096)));
      assertTrue(vector0.contains(double1));
      
      boolean boolean1 = vector0.add(double1);
      assertEquals((double)double1, (double)double2, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[853.6282549726551, 853.6282549726551]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertFalse(vector0.contains((-758.096)));
      assertTrue(vector0.contains(double1));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, vector0, true);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[853.6282549726551, 853.6282549726551]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(3011.80820658, range0.getCentralValue(), 0.01);
      assertEquals(3012.30820658, range0.getUpperBound(), 0.01);
      assertEquals(3011.30820658, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(vector0.contains((-758.096)));
      assertTrue(vector0.contains(double1));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertFalse(number0.equals((Object)double2));
      assertFalse(number0.equals((Object)double0));
      assertFalse(number0.equals((Object)double1));
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.5);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.5, range1.getCentralValue(), 0.01);
      assertEquals(0.5, range1.getLowerBound(), 0.01);
      assertEquals(0.5, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(3011.80820658, 6.283185307179586, "Null 'rowData' argument.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(3011.80820658));
      
      Double double0 = new Double(2280.1315979);
      assertEquals(2280.1315979, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(6.283185307179586);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(6.283185307179586, (double)double1, 0.01);
      assertNotNull(double1);
      
      boolean boolean0 = vector0.add(double0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[2280.1315979]", vector0.toString());
      assertTrue(vector0.contains(double0));
      assertFalse(vector0.contains(6.283185307179586));
      
      boolean boolean1 = vector0.add(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("[2280.1315979, 6.283185307179586]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains(double0));
      assertFalse(vector0.contains(3011.80820658));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, vector0, false);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals("[2280.1315979, 6.283185307179586]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(3011.80820658, range0.getLowerBound(), 0.01);
      assertEquals(3011.80820658, range0.getCentralValue(), 0.01);
      assertEquals(3011.80820658, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(vector0.contains(double0));
      assertFalse(vector0.contains(3011.80820658));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertTrue(number0.equals((Object)double1));
      assertFalse(number0.equals((Object)double0));
      assertEquals(6.283185307179586, number0);
      assertNotNull(number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(categoryTableXYDataset0, (-1510.0));
      assertNotNull(xYBarDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1510.0), xYBarDataset0.getBarWidth(), 0.01);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(xYBarDataset0);
      assertFalse(number1.equals((Object)double0));
      assertFalse(number1.equals((Object)number0));
      assertFalse(number1.equals((Object)double1));
      assertEquals(3766.80820658, number1);
      assertNotNull(number1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1510.0), xYBarDataset0.getBarWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Byte> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      Date[] dateArray0 = new Date[13];
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte)91));
      
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = (double) (byte)91;
      doubleArray0[4] = 0.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(byte0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(13, dateArray0.length);
      assertEquals(19, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertEquals(13, dateArray0.length);
      assertEquals(19, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(45.5, range0.getCentralValue(), 0.01);
      assertEquals(91.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(91.0, range0.getLength(), 0.01);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(19, doubleArray0.length);
      assertEquals(18, polynomialFunction2D0.getOrder());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(13, dateArray0.length);
      assertEquals(19, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(0.0, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 999;
      doubleArray1[1] = (double) 999;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 999;
      doubleArray1[5] = (double) 999;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 999;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (-2090.0895496997614);
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 999;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 999;
      doubleArray3[3] = (double) 0;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(0.0, 0.0, "Null 'rowData' argument.");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(0.0));
      
      Double double0 = new Double(3576.8536645288973);
      assertEquals(3576.8536645288973, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = vector0.add(double0);
      assertTrue(boolean0);
      assertEquals("[3576.8536645288973]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(0.0));
      assertTrue(vector0.contains(double0));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, vector0, false);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals("[3576.8536645288973]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(vector0.contains(0.0));
      assertTrue(vector0.contains(double0));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertFalse(number0.equals((Object)double0));
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) jDBCPieDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 182;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((double) 182, (double) 182, "Null 'rowData' argument.");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(182.0, number0);
      assertNotNull(number0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("Null 'rowData' argument.", (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(182));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 164.0);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(255.0, range0.getCentralValue(), 0.01);
      assertEquals(346.0, range0.getUpperBound(), 0.01);
      assertEquals(164.0, range0.getLowerBound(), 0.01);
      assertEquals(182.0, range0.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries(":5Q/'E", 1, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Double double1 = (Double)DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      int int0 = matrixSeriesCollection0.indexOf(double0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals((-1), int0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) ":5Q/'E", 999.0);
      assertNotNull(defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNull(number0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Number[][] numberArray0 = new Number[7][9];
      Number[] numberArray1 = new Number[3];
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray1[1] = null;
      numberArray1[2] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = null;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[5];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) integer0;
      numberArray3[1] = null;
      numberArray3[2] = null;
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(400, (int)integer1);
      assertNotNull(integer1);
      
      numberArray3[3] = (Number) integer1;
      numberArray3[4] = null;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[0];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[8];
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray3));
      
      numberArray5[0] = (Number) integer1;
      numberArray5[1] = (Number) integer1;
      numberArray5[2] = (Number) integer0;
      numberArray5[3] = (Number) integer0;
      numberArray5[4] = null;
      numberArray5[5] = (Number) integer0;
      numberArray5[6] = (Number) integer1;
      Integer integer2 = JLayeredPane.MODAL_LAYER;
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(200, (int)integer2);
      assertNotNull(integer2);
      
      numberArray5[7] = (Number) integer2;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[9];
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray2));
      assertFalse(numberArray6.equals((Object)numberArray1));
      
      numberArray6[0] = (Number) integer0;
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      numberArray6[1] = (Number) bigInteger0;
      numberArray6[2] = (Number) integer1;
      numberArray6[3] = null;
      numberArray6[4] = (Number) integer0;
      numberArray6[5] = (Number) integer0;
      numberArray6[6] = (Number) integer2;
      numberArray6[7] = (Number) integer0;
      numberArray6[8] = (Number) integer1;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[9];
      assertFalse(numberArray7.equals((Object)numberArray2));
      assertFalse(numberArray7.equals((Object)numberArray3));
      assertFalse(numberArray7.equals((Object)numberArray6));
      assertFalse(numberArray7.equals((Object)numberArray1));
      assertFalse(numberArray7.equals((Object)numberArray4));
      assertFalse(numberArray7.equals((Object)numberArray5));
      
      numberArray7[0] = (Number) bigInteger0;
      numberArray7[1] = (Number) bigInteger0;
      numberArray7[2] = (Number) bigInteger0;
      numberArray7[3] = (Number) integer2;
      numberArray7[4] = (Number) integer2;
      numberArray7[5] = (Number) integer0;
      numberArray7[6] = (Number) integer0;
      numberArray7[7] = (Number) integer2;
      numberArray7[8] = (Number) integer0;
      numberArray0[6] = numberArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Comparable[]) null, (Comparable[]) null, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, numberArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((double) 182, (double) 182, "Null 'rowData' argument.");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(182.0, number0);
      assertNotNull(number0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("Null 'rowData' argument.", (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(182));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 164.0);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(182.0, range0.getLength(), 0.01);
      assertEquals(346.0, range0.getUpperBound(), 0.01);
      assertEquals(255.0, range0.getCentralValue(), 0.01);
      assertEquals(164.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
      assertNull(range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(182.0, range0.getLength(), 0.01);
      assertEquals(346.0, range0.getUpperBound(), 0.01);
      assertEquals(255.0, range0.getCentralValue(), 0.01);
      assertEquals(164.0, range0.getLowerBound(), 0.01);
      assertFalse(arrayList0.contains(182));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((double) 164, (double) 164, "Null 'rowData' argument.");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Double double0 = new Double((-370.234));
      assertEquals((-370.234), (double)double0, 0.01);
      assertNotNull(double0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte)0));
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      LinkedList<JDBCXYDataset> linkedList1 = new LinkedList<JDBCXYDataset>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList1, true);
      assertNull(range0);
      assertEquals(0, linkedList1.size());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertFalse(number0.equals((Object)double0));
      assertEquals(164.0, number0);
      assertNotNull(number0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-933.9514635896295);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Double double0 = new Double((-933.9514635896295));
      assertEquals((-933.9514635896295), (double)double0, 0.01);
      assertNotNull(double0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) hour0, (-4325.17311), 0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, doubleArray0.length);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      assertFalse(number0.equals((Object)double0));
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, numberArray0.length);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double((-802.0210163833289));
      assertEquals((-802.0210163833289), (double)double0, 0.01);
      assertNotNull(double0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(4, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      assertEquals(4, numberArray0.length);
      
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) hour0, (double) 23, 23);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(4, numberArray0.length);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      assertFalse(number0.equals((Object)double0));
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertNull(range0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Byte> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte0);
      assertNotNull(byte0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("iR!&8Y3", (byte)90, (byte)90);
      assertNotNull(matrixSeries0);
      assertEquals(8100, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(90, matrixSeries0.getRowCount());
      assertEquals(90, matrixSeries0.getColumnsCount());
      
      boolean boolean0 = matrixSeries0.isEmpty();
      assertFalse(boolean0);
      assertEquals(8100, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(90, matrixSeries0.getRowCount());
      assertEquals(90, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(8100, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(90, matrixSeries0.getRowCount());
      assertEquals(90, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      matrixSeriesCollection0.addSeries(matrixSeries0);
      assertEquals(8100, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(90, matrixSeries0.getRowCount());
      assertEquals(90, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((double) 164, (double) 164, "Null 'rowData' argument.");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Double double0 = new Double((-370.234));
      assertEquals((-370.234), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = vector0.add(double0);
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals("[-370.234]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(double0));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, vector0, true);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(vector0.isEmpty());
      assertEquals("[-370.234]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(164.0, range0.getCentralValue(), 0.01);
      assertEquals(163.5, range0.getLowerBound(), 0.01);
      assertEquals(164.5, range0.getUpperBound(), 0.01);
      assertTrue(vector0.contains(double0));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertFalse(number0.equals((Object)double0));
      assertEquals(164.0, number0);
      assertNotNull(number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(164.0, range1.getCentralValue(), 0.01);
      assertEquals(164.0, range1.getUpperBound(), 0.01);
      assertEquals(164.0, range1.getLowerBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-370.234);
      doubleArray1[1] = (-3513.40527312);
      doubleArray1[2] = 685.859942;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-370.234);
      doubleArray2[1] = (-370.234);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 685.859942;
      doubleArray3[1] = (-370.234);
      doubleArray3[2] = (-370.234);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 685.859942;
      doubleArray4[1] = 685.859942;
      doubleArray4[2] = 685.859942;
      doubleArray4[3] = (-370.234);
      doubleArray4[4] = (-370.234);
      doubleArray4[5] = (-370.234);
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Byte) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = xYSeriesCollection0.getDomainBounds(true);
      assertNull(range0);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) linkedList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Byte> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      Date[] dateArray0 = new Date[1];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)91;
      doubleArray0[3] = (double) (byte)91;
      doubleArray0[4] = 91.0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(byte0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {91.0, 0.0, 0.0, 91.0, 91.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {91.0, 0.0, 0.0, 91.0, 91.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(91.0, range0.getLowerBound(), 0.01);
      assertEquals(91.0, range0.getCentralValue(), 0.01);
      assertEquals(91.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {91.0, 0.0, 0.0, 91.0, 91.0}, doubleArray0, 0.01);
      assertEquals(4, polynomialFunction2D0.getOrder());
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {91.0, 0.0, 0.0, 91.0, 91.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {91.0, 0.0, 0.0, 91.0, 91.0}, doubleArray1, 0.01);
      assertEquals(4, polynomialFunction2D0.getOrder());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(91.0, number0);
      assertNotNull(number0);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {91.0, 0.0, 0.0, 91.0, 91.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(91.0, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, range0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNull(range1);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {91.0, 0.0, 0.0, 91.0, 91.0}, doubleArray0, 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(91.0, range0.getLowerBound(), 0.01);
      assertEquals(91.0, range0.getCentralValue(), 0.01);
      assertEquals(91.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(linkedList0.contains((byte)91));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      assertNull(range0);
      
      MockDate mockDate0 = new MockDate((-5987L));
      assertNotNull(mockDate0);
      
      Second second0 = new Second(mockDate0);
      assertNotNull(second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals("Wed Dec 31 23:59:54 GMT 1969", mockDate0.toString());
      assertEquals((-4988L), second0.getLastMillisecond());
      assertEquals(54, second0.getSecond());
      assertEquals((-5987L), second0.getFirstMillisecond());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-5987L), 1108.548002828708, 1108.548002828708, 1078.420990683448, 1.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Wed Dec 31 23:59:54 GMT 1969", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      MockDate mockDate1 = new MockDate(59, 61, 0);
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate1, 1.0, 1108.548002828708, (-1029.760399), 2576.9881212739, (-84.0416989205));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Jan 31 00:00:00 GMT 1964", mockDate1.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate1, (-1440.294007117391), 1428.6, (-1440.294007117391), 59, (-832.439));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem2);
      assertEquals("Fri Jan 31 00:00:00 GMT 1964", mockDate1.toString());
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1440.294007117391), 2296.61227577, 3750.0542962415, 999.0, 1844.72305528405);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertNotNull(oHLCDataItem3);
      assertEquals("Wed Dec 31 23:59:54 GMT 1969", mockDate0.toString());
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 1552.721066009546, (-5987L), (-253.711), 4417.132288419648, (-84.0416989205));
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertNotNull(oHLCDataItem4);
      assertEquals("Wed Dec 31 23:59:54 GMT 1969", mockDate0.toString());
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, oHLCDataItemArray0);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotNull(defaultOHLCDataset0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Wed Dec 31 23:59:54 GMT 1969", mockDate0.toString());
      assertEquals((-4988L), second0.getLastMillisecond());
      assertEquals(54, second0.getSecond());
      assertEquals((-5987L), second0.getFirstMillisecond());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(mockDate0, mockDate1);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertNotNull(range1);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.86796794013E11, range1.getLength(), 0.01);
      assertEquals((-5987.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.867968E11), range1.getLowerBound(), 0.01);
      assertEquals((-9.33984029935E10), range1.getCentralValue(), 0.01);
      assertEquals("Wed Dec 31 23:59:54 GMT 1969", mockDate0.toString());
      assertEquals((-4988L), second0.getLastMillisecond());
      assertEquals(54, second0.getSecond());
      assertEquals((-5987L), second0.getFirstMillisecond());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Double double0 = new Double(3319.1294486564766);
      assertEquals(3319.1294486564766, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[3319.1294486564766]", stack0.toString());
      assertTrue(stack0.contains(double0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 3319.1294486564766);
      assertNull(range0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, (Range) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-911.469232556);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "1wCvzoKh", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Double double0 = new Double((-911.469232556));
      assertEquals((-911.469232556), (double)double0, 0.01);
      assertNotNull(double0);
      
      Comparable<XYSeriesCollection>[] comparableArray0 = (Comparable<XYSeriesCollection>[]) Array.newInstance(Comparable.class, 1);
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year(mockDate0);
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("1970", year0.toString());
      assertEquals(0L, year0.getFirstMillisecond());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(0L, year0.getLastMillisecond());
      assertEquals(1970, year0.getYear());
      
      Week week0 = new Week(0, year0);
      assertNotNull(week0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("1970", year0.toString());
      assertEquals(0L, year0.getFirstMillisecond());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(0L, year0.getLastMillisecond());
      assertEquals(1970, year0.getYear());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(104410L, week0.getSerialIndex());
      assertEquals(1970, week0.getYearValue());
      assertEquals(0, week0.getWeek());
      
      Week week1 = (Week)week0.next();
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertFalse(week1.equals((Object)week0));
      assertNotNull(week1);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("1970", year0.toString());
      assertEquals(0L, year0.getFirstMillisecond());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(0L, year0.getLastMillisecond());
      assertEquals(1970, year0.getYear());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(104410L, week0.getSerialIndex());
      assertEquals(1970, week0.getYearValue());
      assertEquals(0, week0.getWeek());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(1970, week1.getYearValue());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(104411L, week1.getSerialIndex());
      assertEquals(1, week1.getWeek());
      
      comparableArray0[0] = (Comparable<XYSeriesCollection>) week1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, comparableArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = null;
      Number[][] numberArray0 = new Number[11][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(11, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
      assertEquals(11, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 11);
      assertNotNull(categoryToPieDataset0);
      assertEquals(11, numberArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(11, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) null, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Size: 11
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-75));
      assertEquals((byte) (-75), (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(byte0));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(Double.POSITIVE_INFINITY, (double) (byte) (-75), "Null 'rowData' argument.");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (byte) (-75));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte) (-85));
      assertEquals((byte) (-85), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte) (-85)));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":5Q/'E3";
      Number[][] numberArray0 = new Number[1][4];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) byte0;
      numberArray1[1] = (Number) byte0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, (byte) (-85));
      assertNotNull(categoryToPieDataset0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-85), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Duplicate iemsin 'roweys'.", "Duplicate iemsin 'roweys'.", "Duplicate iemsin 'roweys'.");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Duplicate iemsin 'roweys'.", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Duplicate iemsin 'roweys'.", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      
      boolean boolean0 = timeSeries0.equals("Duplicate iemsin 'roweys'.");
      assertFalse(boolean0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Duplicate iemsin 'roweys'.", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Duplicate iemsin 'roweys'.", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      
      SerialDate serialDate0 = SerialDate.createInstance(87);
      assertNotNull(serialDate0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(27, serialDate0.getDayOfMonth());
      assertEquals(87, serialDate0.toSerial());
      assertEquals(3, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.getDayOfWeek());
      
      SerialDate serialDate1 = SerialDate.addMonths(87, serialDate0);
      assertNotSame(serialDate0, serialDate1);
      assertNotSame(serialDate1, serialDate0);
      assertFalse(serialDate1.equals((Object)serialDate0));
      assertNotNull(serialDate1);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(27, serialDate0.getDayOfMonth());
      assertEquals(87, serialDate0.toSerial());
      assertEquals(3, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(6, serialDate1.getMonth());
      assertNull(serialDate1.getDescription());
      assertEquals(5, serialDate1.getDayOfWeek());
      assertEquals(1907, serialDate1.getYYYY());
      assertEquals(27, serialDate1.getDayOfMonth());
      assertEquals(2735, serialDate1.toSerial());
      
      Date date0 = serialDate1.toDate();
      assertNotSame(serialDate0, serialDate1);
      assertNotSame(serialDate1, serialDate0);
      assertFalse(serialDate0.equals((Object)serialDate1));
      assertFalse(serialDate1.equals((Object)serialDate0));
      assertNotNull(date0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(27, serialDate0.getDayOfMonth());
      assertEquals(87, serialDate0.toSerial());
      assertEquals(3, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(6, serialDate1.getMonth());
      assertNull(serialDate1.getDescription());
      assertEquals(5, serialDate1.getDayOfWeek());
      assertEquals(1907, serialDate1.getYYYY());
      assertEquals(27, serialDate1.getDayOfMonth());
      assertEquals(2735, serialDate1.toSerial());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      int int0 = serialDate0.getDayOfWeek();
      assertNotSame(serialDate0, serialDate1);
      assertFalse(serialDate0.equals((Object)serialDate1));
      assertEquals(3, int0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(27, serialDate0.getDayOfMonth());
      assertEquals(87, serialDate0.toSerial());
      assertEquals(3, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.getDayOfWeek());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Month month0 = new Month(date0, timeZone0);
      assertFalse(serialDate0.equals((Object)serialDate1));
      assertFalse(serialDate1.equals((Object)serialDate0));
      assertNotNull(month0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(27, serialDate0.getDayOfMonth());
      assertEquals(87, serialDate0.toSerial());
      assertEquals(3, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(6, serialDate1.getMonth());
      assertNull(serialDate1.getDescription());
      assertEquals(5, serialDate1.getDayOfWeek());
      assertEquals(1907, serialDate1.getYYYY());
      assertEquals(27, serialDate1.getDayOfMonth());
      assertEquals(2735, serialDate1.toSerial());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) month0);
      assertNotSame(serialDate0, serialDate1);
      assertNotSame(serialDate1, serialDate0);
      assertFalse(serialDate0.equals((Object)serialDate1));
      assertFalse(serialDate1.equals((Object)serialDate0));
      assertNull(timeSeriesDataItem0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Duplicate iemsin 'roweys'.", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Duplicate iemsin 'roweys'.", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1900, serialDate0.getYYYY());
      assertEquals(27, serialDate0.getDayOfMonth());
      assertEquals(87, serialDate0.toSerial());
      assertEquals(3, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(3, serialDate0.getDayOfWeek());
      assertEquals(6, serialDate1.getMonth());
      assertNull(serialDate1.getDescription());
      assertEquals(5, serialDate1.getDayOfWeek());
      assertEquals(1907, serialDate1.getYYYY());
      assertEquals(27, serialDate1.getDayOfMonth());
      assertEquals(2735, serialDate1.toSerial());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      
      TimeZone timeZone1 = TimeZone.getTimeZone("Duplicate iemsin 'roweys'.");
      assertNotSame(timeZone1, timeZone0);
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeZone1);
      assertEquals("GMT", timeZone1.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone1);
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertNotNull(timeSeriesCollection0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Duplicate iemsin 'roweys'.", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Duplicate iemsin 'roweys'.", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("GMT", timeZone1.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 3174.6526;
      doubleArray0[2] = 1826.6283;
      doubleArray0[3] = 478.94;
      doubleArray0[4] = (-2614.12228478);
      doubleArray0[5] = (-443.15043357351647);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 3174.6526, 1826.6283, 478.94, (-2614.12228478), (-443.15043357351647)}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-2614.12228478), 999.5, 988, 1826.6283);
      assertNotNull(xYSeries0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 3174.6526, 1826.6283, 478.94, (-2614.12228478), (-443.15043357351647)}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(999.5, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((-2614.12228478), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(5.397584914451956E19, xYSeries0.getMaxY(), 0.01);
      assertEquals((-4.446520827220297E17), xYSeries0.getMinY(), 0.01);
      assertEquals(988, xYSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Duplicate iemsin 'roweys'.";
      stringArray0[1] = "Duplicate iemsin 'roweys'.";
      stringArray0[2] = "Duplicate iemsin 'roweys'.";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 182);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((double) 182, (double) 182, "Null 'rowData' argument.");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 182);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 182, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 999;
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, 680.6800831363477, 999, 0.0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(999.0, range0.getLowerBound(), 0.01);
      assertEquals(999.0, range0.getCentralValue(), 0.01);
      assertEquals(999.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      double[][] doubleArray1 = new double[4][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray1.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      defaultIntervalCategoryDataset0.addChangeListener(xYDatasetTableModel0);
      assertEquals(4, doubleArray1.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-159), 999);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(4, doubleArray1.length);
      assertEquals((-159), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(999, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-911.469232556);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "1wCvzoKh", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Double double0 = new Double((-911.469232556));
      assertEquals((-911.469232556), (double)double0, 0.01);
      assertNotNull(double0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) hour0, (-4325.17311), 0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(1, doubleArray0.length);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotNull(defaultCategoryDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset1 = new DefaultCategoryDataset();
      assertTrue(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertFalse(defaultCategoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(defaultCategoryDataset1);
      
      // Undeclared exception!
      try { 
        defaultCategoryDataset1.getValue((Comparable) "", (Comparable) month0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Row key () not recognised.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      dateArray0[2] = date0;
      dateArray0[3] = date0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1162.6491813599;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(instant0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(4, dateArray0.length);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1162.6491813599}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[][] doubleArray0 = new double[5][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (byte) (-75);
      doubleArray1[1] = (double) (byte) (-75);
      doubleArray1[2] = (double) (byte) (-75);
      doubleArray1[3] = (double) (byte) (-75);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (byte) (-75);
      doubleArray2[1] = (double) (byte) (-75);
      doubleArray2[2] = (double) (byte) (-75);
      doubleArray2[3] = (double) (byte) (-75);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (byte) (-75);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) (byte) (-75);
      doubleArray4[1] = (double) (byte) (-75);
      doubleArray4[2] = (double) (byte) (-75);
      doubleArray4[3] = (double) (byte) (-75);
      doubleArray4[4] = (-3514.532666617658);
      doubleArray4[5] = (double) (byte) (-75);
      doubleArray4[6] = (double) (byte) (-75);
      doubleArray4[7] = (double) (byte) (-75);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (-3514.532666617658);
      doubleArray5[1] = (double) (byte) (-75);
      doubleArray5[2] = (double) (byte) (-75);
      doubleArray5[3] = (-3514.532666617658);
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli((-2999L));
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Wed Dec 31 23:59:57 GMT 1969", date0.toString());
      
      Date[] dateArray0 = new Date[6];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      dateArray0[2] = date0;
      dateArray0[3] = date0;
      dateArray0[4] = date0;
      dateArray0[5] = date0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1162.6491813599;
      doubleArray0[1] = 0.570281124497992;
      doubleArray0[2] = (double) (byte) (-75);
      doubleArray0[3] = (double) (-2999L);
      doubleArray0[4] = 1162.6491813599;
      doubleArray0[5] = (double) (byte) (-75);
      doubleArray0[6] = 1162.6491813599;
      doubleArray0[7] = 1162.6491813599;
      doubleArray0[8] = 0.570281124497992;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(instant0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(6, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1162.6491813599, 0.570281124497992, (-75.0), (-2999.0), 1162.6491813599, (-75.0), 1162.6491813599, 1162.6491813599, 0.570281124497992}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
      assertNotNull(range0);
      assertEquals(6, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1162.6491813599, 0.570281124497992, (-75.0), (-2999.0), 1162.6491813599, (-75.0), 1162.6491813599, 1162.6491813599, 0.570281124497992}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1162.6491813599, range0.getUpperBound(), 0.01);
      assertEquals((-2999.0), range0.getLowerBound(), 0.01);
      assertEquals((-918.17540932005), range0.getCentralValue(), 0.01);
      assertEquals(4161.6491813599005, range0.getLength(), 0.01);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1162.6491813599, 0.570281124497992, (-75.0), (-2999.0), 1162.6491813599, (-75.0), 1162.6491813599, 1162.6491813599, 0.570281124497992}, doubleArray0, 0.01);
      assertEquals(8, polynomialFunction2D0.getOrder());
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1162.6491813599, 0.570281124497992, (-75.0), (-2999.0), 1162.6491813599, (-75.0), 1162.6491813599, 1162.6491813599, 0.570281124497992}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1162.6491813599, 0.570281124497992, (-75.0), (-2999.0), 1162.6491813599, (-75.0), 1162.6491813599, 1162.6491813599, 0.570281124497992}, doubleArray0, 0.01);
      assertEquals(8, polynomialFunction2D0.getOrder());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(0.570281124497992));
      
      boolean boolean0 = stack0.add((Double) 1162.6491813599);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[1162.6491813599]", stack0.toString());
      assertTrue(stack0.contains(1162.6491813599));
      assertFalse(stack0.contains(0.570281124497992));
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, true);
      assertNotSame(range1, range0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(range1);
      assertEquals(6, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1162.6491813599, 0.570281124497992, (-75.0), (-2999.0), 1162.6491813599, (-75.0), 1162.6491813599, 1162.6491813599, 0.570281124497992}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[1162.6491813599]", stack0.toString());
      assertEquals((-2999.0), range1.getLowerBound(), 0.01);
      assertEquals((-2999.0), range1.getCentralValue(), 0.01);
      assertEquals((-2999.0), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(stack0.contains(1162.6491813599));
      assertFalse(stack0.contains(0.570281124497992));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals((-2999.0), number0);
      assertNotNull(number0);
      assertEquals(6, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1162.6491813599, 0.570281124497992, (-75.0), (-2999.0), 1162.6491813599, (-75.0), 1162.6491813599, 1162.6491813599, 0.570281124497992}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(number1.equals((Object)number0));
      assertEquals(1162.6491813599, number1);
      assertNotNull(number1);
      assertEquals(6, dateArray0.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1162.6491813599, 0.570281124497992, (-75.0), (-2999.0), 1162.6491813599, (-75.0), 1162.6491813599, 1162.6491813599, 0.570281124497992}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 999, 1021.4600917432973, 999, 0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate(999, 0, 0, 0, 999, 999);
      assertNotNull(mockDate0);
      
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(0, doubleArray0.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("Wed Dec 31 16:55:39 GMT 2898", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray0);
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertNotNull(polynomialFunction2D1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D1.getOrder());
      
      PolynomialFunction2D polynomialFunction2D2 = new PolynomialFunction2D(doubleArray0);
      assertTrue(polynomialFunction2D2.equals((Object)polynomialFunction2D0));
      assertTrue(polynomialFunction2D2.equals((Object)polynomialFunction2D1));
      assertNotNull(polynomialFunction2D2);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D2.getOrder());
      
      double[] doubleArray1 = polynomialFunction2D2.getCoefficients();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(polynomialFunction2D2, polynomialFunction2D1);
      assertNotSame(polynomialFunction2D2, polynomialFunction2D0);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(polynomialFunction2D2.equals((Object)polynomialFunction2D0));
      assertTrue(polynomialFunction2D2.equals((Object)polynomialFunction2D1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals((-1), polynomialFunction2D2.getOrder());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(1021.4600917432973));
      
      boolean boolean0 = stack0.add((Double) null);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.contains(1021.4600917432973));
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, false);
      assertNotSame(range1, range0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(range1);
      assertEquals(0, doubleArray0.length);
      assertEquals(3, dateArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2.9316444939E13, range1.getCentralValue(), 0.01);
      assertEquals(2.9316444939E13, range1.getUpperBound(), 0.01);
      assertEquals(2.9316444939E13, range1.getLowerBound(), 0.01);
      assertEquals("Wed Dec 31 16:55:39 GMT 2898", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.contains(1021.4600917432973));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = 1.5;
      doubleArray1[2] = (-1831.572316);
      doubleArray1[3] = 213.0;
      doubleArray1[4] = (-911.469232556);
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, ":5Q/'E", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Double double0 = new Double((-1831.572316));
      assertEquals((-1831.572316), (double)double0, 0.01);
      assertNotNull(double0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) hour0, (double) 0, 984);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, doubleArray0.length);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotNull(defaultCategoryDataset0);
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, false);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNull(range0);
      assertEquals(0, linkedList0.size());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ":5Q/'E3", 608, 0, 608, Integer.MAX_VALUE, 23, 0, Integer.MAX_VALUE, 10, 1);
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=:5Q/'E3,offset=0,dstSavings=1,useDaylight=false,startYear=0,startMode=0,startMonth=608,startDay=0,startDayOfWeek=608,startTime=2147483647,startTimeMode=0,endMode=0,endMonth=23,endDay=0,endDayOfWeek=2147483647,endTime=10,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(":5Q/'E3", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Number[][] numberArray0 = new Number[13][9];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(13, numberArray0.length);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      defaultCategoryDataset0.setValue(1.0, (Comparable) fixedMillisecond0, (Comparable) fixedMillisecond0);
      assertEquals(13, numberArray0.length);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(13, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(13, numberArray0.length);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      
      Instant instant0 = MockInstant.ofEpochMilli(1362L);
      assertNotNull(instant0);
      
      Instant instant1 = MockInstant.minusSeconds(instant0, (-1576L));
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertFalse(instant1.equals((Object)instant0));
      assertNotNull(instant1);
      
      Date date0 = Date.from(instant0);
      assertNotSame(instant0, instant1);
      assertFalse(instant0.equals((Object)instant1));
      assertNotNull(date0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", date0.toString());
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = date0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1162.6491813599;
      doubleArray0[1] = (double) (-1576L);
      doubleArray0[2] = 0.570281124497992;
      doubleArray0[3] = 1162.6491813599;
      doubleArray0[4] = 1162.6491813599;
      doubleArray0[5] = 1162.6491813599;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(month0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1162.6491813599, (-1576.0), 0.570281124497992, 1162.6491813599, 1162.6491813599, 1162.6491813599}, doubleArray0, 0.01);
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotNull(range0);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1162.6491813599, (-1576.0), 0.570281124497992, 1162.6491813599, 1162.6491813599, 1162.6491813599}, doubleArray0, 0.01);
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1162.6491813599, range0.getLowerBound(), 0.01);
      assertEquals(1162.6491813599, range0.getCentralValue(), 0.01);
      assertEquals(1162.6491813599, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1162.6491813599, (-1576.0), 0.570281124497992, 1162.6491813599, 1162.6491813599, 1162.6491813599}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1162.6491813599, (-1576.0), 0.570281124497992, 1162.6491813599, 1162.6491813599, 1162.6491813599}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1162.6491813599, (-1576.0), 0.570281124497992, 1162.6491813599, 1162.6491813599, 1162.6491813599}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(1162.6491813599));
      
      Stack<Double> stack1 = new Stack<Double>();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.contains(1162.6491813599));
      
      Double double0 = new Double(1162.6491813599);
      assertEquals(1162.6491813599, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = stack1.add(double0);
      assertNotSame(stack1, stack0);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean0);
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertEquals("[1162.6491813599]", stack1.toString());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.contains(0.570281124497992));
      assertTrue(stack1.contains(1162.6491813599));
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack1, true);
      assertNotSame(stack1, stack0);
      assertNotSame(range1, range0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(range1.equals((Object)range0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(range1);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1162.6491813599, (-1576.0), 0.570281124497992, 1162.6491813599, 1162.6491813599, 1162.6491813599}, doubleArray0, 0.01);
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertEquals("[1162.6491813599]", stack1.toString());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1362.0, range1.getLowerBound(), 0.01);
      assertEquals(1362.0, range1.getUpperBound(), 0.01);
      assertEquals(1362.0, range1.getCentralValue(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertFalse(stack1.contains(0.570281124497992));
      assertTrue(stack1.contains(1162.6491813599));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(number0.equals((Object)double0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1162.6491813599, number0);
      assertNotNull(number0);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1162.6491813599, (-1576.0), 0.570281124497992, 1162.6491813599, 1162.6491813599, 1162.6491813599}, doubleArray0, 0.01);
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultHighLowDataset0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1162.6491813599, (-1576.0), 0.570281124497992, 1162.6491813599, 1162.6491813599, 1162.6491813599}, doubleArray0, 0.01);
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertEquals(1, dateArray0.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1162.6491813599, (-1576.0), 0.570281124497992, 1162.6491813599, 1162.6491813599, 1162.6491813599}, doubleArray0, 0.01);
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1162.6491813599, range2.getCentralValue(), 0.01);
      assertEquals(1162.6491813599, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(1162.6491813599, range2.getLowerBound(), 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Byte> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte0);
      assertNotNull(byte0);
      
      Date[] dateArray0 = new Date[1];
      Instant instant0 = MockInstant.ofEpochMilli((byte)77);
      assertNotNull(instant0);
      
      Instant instant1 = MockInstant.minusSeconds(instant0, (byte)77);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertFalse(instant1.equals((Object)instant0));
      assertNotNull(instant1);
      
      Date date0 = Date.from(instant1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotNull(date0);
      assertEquals("Wed Dec 31 23:58:43 GMT 1969", date0.toString());
      
      dateArray0[0] = date0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)77;
      doubleArray0[1] = 1162.6491813599;
      doubleArray0[2] = (double) (byte)77;
      doubleArray0[3] = (double) (byte)77;
      doubleArray0[4] = 0.570281124497992;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte)77;
      doubleArray1[1] = 0.570281124497992;
      doubleArray1[2] = 1162.6491813599;
      doubleArray1[3] = (double) (byte)77;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(byte0, dateArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {77.0, 1162.6491813599, 77.0, 77.0, 0.570281124497992}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {77.0, 0.570281124497992, 1162.6491813599, 77.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(range0);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {77.0, 1162.6491813599, 77.0, 77.0, 0.570281124497992}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {77.0, 0.570281124497992, 1162.6491813599, 77.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(77.0, range0.getCentralValue(), 0.01);
      assertEquals(77.0, range0.getUpperBound(), 0.01);
      assertEquals(77.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(polynomialFunction2D0);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {77.0, 0.570281124497992, 1162.6491813599, 77.0}, doubleArray1, 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {77.0, 0.570281124497992, 1162.6491813599, 77.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {77.0, 0.570281124497992, 1162.6491813599, 77.0}, doubleArray1, 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(0.570281124497992));
      
      boolean boolean0 = stack0.add((Double) 77.0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[77.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains(0.570281124497992));
      assertTrue(stack0.contains(77.0));
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(range1, range0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotNull(range1);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {77.0, 1162.6491813599, 77.0, 77.0, 0.570281124497992}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {77.0, 0.570281124497992, 1162.6491813599, 77.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[77.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals((-76923.0), range1.getCentralValue(), 0.01);
      assertEquals((-76923.0), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-76923.0), range1.getLowerBound(), 0.01);
      assertFalse(stack0.contains(0.570281124497992));
      assertTrue(stack0.contains(77.0));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals(77.0, number0);
      assertNotNull(number0);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {77.0, 1162.6491813599, 77.0, 77.0, 0.570281124497992}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {77.0, 0.570281124497992, 1162.6491813599, 77.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, (List) stack0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotNull(range2);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {77.0, 1162.6491813599, 77.0, 77.0, 0.570281124497992}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {77.0, 0.570281124497992, 1162.6491813599, 77.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[77.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals((-76923.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-76923.0), range2.getCentralValue(), 0.01);
      assertEquals((-76923.0), range2.getUpperBound(), 0.01);
      assertFalse(stack0.contains(1162.6491813599));
      assertTrue(stack0.contains(number0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "Duplicate iemsin 'roweys'.";
      TimeSeries timeSeries0 = new TimeSeries("Duplicate iemsin 'roweys'.", "Duplicate iemsin 'roweys'.", "Duplicate iemsin 'roweys'.");
      assertNotNull(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Duplicate iemsin 'roweys'.", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Duplicate iemsin 'roweys'.", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Duplicate iemsin 'roweys'.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) "Duplicate iemsin 'roweys'.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("The number of column keys does not match the number of columns in the data array.", 1, 1);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) double0, (KeyedValues) jDBCPieDataset0);
      assertNotNull(defaultCategoryDataset0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, false);
      assertNull(range0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertNotNull(range1);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      
      Range range2 = DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      assertNull(range2);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-2266.4922), (-246.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-2266.4922), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-246.0), lineFunction2D0.getSlope(), 0.01);
      
      XYDataItem xYDataItem0 = new XYDataItem((-843.879178278), Double.POSITIVE_INFINITY);
      assertNotNull(xYDataItem0);
      assertEquals((-843.879178278), xYDataItem0.getXValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, xYDataItem0.getYValue(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-2266.4922), 1240.6646, 508, xYDataItem0);
      assertNotNull(xYSeriesCollection0);
      assertEquals((-2266.4922), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-246.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-843.879178278), xYDataItem0.getXValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, xYDataItem0.getYValue(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) xYSeriesCollection0);
      assertEquals(555290.589, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals((-2266.4922), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-246.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-843.879178278), xYDataItem0.getXValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, xYDataItem0.getYValue(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals((-2266.4922), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-246.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-843.879178278), xYDataItem0.getXValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, xYDataItem0.getYValue(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals((-2266.9922), range0.getLowerBound(), 0.01);
      assertEquals(3508.1568, range0.getLength(), 0.01);
      assertEquals(1241.1646, range0.getUpperBound(), 0.01);
      assertEquals((-512.9138), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[1] = 1.5;
      doubleArray1[2] = (-1831.572316);
      doubleArray1[3] = 213.0;
      doubleArray1[4] = (-911.469232556);
      doubleArray1[5] = 158.0;
      doubleArray1[6] = 1.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, ":5Q/'E", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(213.0, number0);
      assertNotNull(number0);
      assertEquals(1, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(908L, 908L);
      assertNotNull(simpleTimePeriod0);
      assertEquals(908L, simpleTimePeriod0.getEndMillis());
      assertEquals(908L, simpleTimePeriod0.getStartMillis());
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) (-911.469232556), 1.0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertEquals(1, doubleArray0.length);
      
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) hour0, (double) 0, 984);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset2, pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset1, pieDataset2);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset2.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset2);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, doubleArray0.length);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("Duplicate iemsin 'roweys'.", "Duplicate iemsin 'roweys'.", "Duplicate iemsin 'roweys'.");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Duplicate iemsin 'roweys'.", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Duplicate iemsin 'roweys'.", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      boolean boolean0 = timeSeries0.equals("Duplicate iemsin 'roweys'.");
      assertFalse(boolean0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Duplicate iemsin 'roweys'.", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Duplicate iemsin 'roweys'.", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Duplicate iemsin 'roweys'.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Duplicate iemsin 'roweys'.", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Duplicate iemsin 'roweys'.", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 564.923349947;
      doubleArray1[1] = 0.8;
      doubleArray1[2] = 251.651;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.8;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'yData' argument.", "Null 'rowKeys' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(564.923349947, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.0), (-1789.8893750819));
      assertNotNull(powerFunction2D0);
      assertEquals((-1789.8893750819), powerFunction2D0.getB(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, (-2011.1281), 251.651, (-1), "Null 'rowKeys' argument.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, (-1564));
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-1565), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0, false);
      assertNull(range0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-1565), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) dynamicTimeSeriesCollection0, false);
      assertNull(range1);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-1565), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2309, 1073741824, 2309, 1073741824, 2309, (-2035));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-82.612481), (-2035), (-844.5345963219125), 3377.536, (-774.141083));
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jul 16 05:55:05 GMT 89605192", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-4906.64060018), 1.0, 3377.536, (-1449.729242031), (-1260.83));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Thu Jul 16 05:55:05 GMT 89605192", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem1, oHLCDataItemArray0);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals("Thu Jul 16 05:55:05 GMT 89605192", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-844.5345963219125) <= upper (-2035.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" 1_yTe+cQ.YACHYu", " 1_yTe+cQ.YACHYu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(6, doubleArray0.length);
      
      int int0 = 0;
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertNotNull(defaultPieDataset0);
      assertEquals(6, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, (-1858));
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1858), "KW51T;Xz2?'GqzVz");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=KW51T;Xz2?'GqzVz,offset=-1858,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("KW51T;Xz2?'GqzVz", simpleTimeZone0.getID());
      assertEquals((-1858), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      Quarter quarter0 = new Quarter(mockDate0, simpleTimeZone0);
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Fri Dec 29 17:02:00 GMT 1899", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=KW51T;Xz2?'GqzVz,offset=-1858,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("KW51T;Xz2?'GqzVz", simpleTimeZone0.getID());
      assertEquals((-1858), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1899, quarter0.getYearValue());
      assertEquals(7600L, quarter0.getSerialIndex());
      assertEquals(4, quarter0.getQuarter());
      assertEquals((-2209186680000L), quarter0.getFirstMillisecond());
      assertEquals((-2209186680000L), quarter0.getLastMillisecond());
      
      defaultPieDataset0.insertValue(0, (Comparable) quarter0, number0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(6, doubleArray0.length);
      assertEquals("Fri Dec 29 17:02:00 GMT 1899", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=KW51T;Xz2?'GqzVz,offset=-1858,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("KW51T;Xz2?'GqzVz", simpleTimeZone0.getID());
      assertEquals((-1858), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1899, quarter0.getYearValue());
      assertEquals(7600L, quarter0.getSerialIndex());
      assertEquals(4, quarter0.getQuarter());
      assertEquals((-2209186680000L), quarter0.getFirstMillisecond());
      assertEquals((-2209186680000L), quarter0.getLastMillisecond());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Second second0 = millisecond0.getSecond();
      assertNotNull(second0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) histogramDataset0, true);
      assertNull(range0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction2D0.getOrder());
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1, polynomialFunction2D0.getOrder());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Double double0 = new Double(680.6800831363477);
      assertEquals(680.6800831363477, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[680.6800831363477]", stack0.toString());
      assertTrue(stack0.contains(680.6800831363477));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = Double.NEGATIVE_INFINITY;
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertNotNull(lineFunction2D0);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getSlope(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      
      double double1 = (-3803.0);
      double double2 = Double.POSITIVE_INFINITY;
      int int0 = 16;
      int int1 = timeTableXYDataset0.getSeriesCount();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Instant instant0 = MockInstant.ofEpochSecond((long) 16, (long) 16);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Thu Jan 01 00:00:16 GMT 1970", date0.toString());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      Week week0 = new Week(date0, timeZone0, locale0);
      assertNotNull(week0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals("Thu Jan 01 00:00:16 GMT 1970", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(15999L, week0.getLastMillisecond());
      assertEquals(1970, week0.getYearValue());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1, week0.getWeek());
      assertEquals(16000L, week0.getFirstMillisecond());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-3803.0), Double.POSITIVE_INFINITY, 16, week0);
      assertNotNull(xYSeries0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getSlope(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      assertEquals("Thu Jan 01 00:00:16 GMT 1970", date0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(15999L, week0.getLastMillisecond());
      assertEquals(1970, week0.getYearValue());
      assertEquals(104411L, week0.getSerialIndex());
      assertEquals(1, week0.getWeek());
      assertEquals(16000L, week0.getFirstMillisecond());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(16, xYSeries0.getItemCount());
      assertEquals(Double.POSITIVE_INFINITY, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, xYSeries0.getMinY(), 0.01);
      
      String string0 = "";
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset((Connection) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte) (-85));
      assertEquals((byte) (-85), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byte0));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = Range.shift(range0, (-320.745343374992), true);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-320.745343374992), range1.getLowerBound(), 0.01);
      assertEquals((-320.745343374992), range1.getCentralValue(), 0.01);
      assertEquals((-320.745343374992), range1.getUpperBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Hour hour0 = new Hour(mockDate0);
      assertNotNull(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hour0, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      defaultOHLCDataset0.addChangeListener((DatasetChangeListener) null);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      defaultOHLCDataset0.validateObject();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Byte) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
      assertNull(range0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("9Z/", locale0);
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("9Z/", mockSimpleDateFormat0.toPattern());
      assertEquals("9Z/", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (-1481.9), 1.7976931348623157E308, (-1481.9), 806.93466922, 222.974);
      assertNotNull(oHLCDataItem0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("9Z/", mockSimpleDateFormat0.toPattern());
      assertEquals("9Z/", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 3182.505, 806.93466922, 3182.505, 2.0, 3182.505);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 222.974, Double.POSITIVE_INFINITY, 2698.5390402045, 1.7976931348623157E308, (-1481.9));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1481.9), 1616.6748, 2853.94, 2015.152937995729, Double.NaN);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertNotNull(oHLCDataItem3);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, (-2.147483648E9), (-4980.0), Double.POSITIVE_INFINITY, 3182.505, (-1.0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem4);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(date0, 2.0, (-1481.9), 222.974, 1.7976931348623157E308, Double.NEGATIVE_INFINITY);
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem5);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("9Z/", mockSimpleDateFormat0.toPattern());
      assertEquals("9Z/", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[5] = oHLCDataItem5;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range1);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals((-1481.9), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries(" 1_yTe+cQYACHYu", " 1_yTe+cQYACHYu", " 1_yTe+cQYACHYu");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(" 1_yTe+cQYACHYu", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(" 1_yTe+cQYACHYu", timeSeries0.getDomainDescription());
      
      TimeZone timeZone0 = TimeZone.getTimeZone(" 1_yTe+cQYACHYu");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      List list0 = timeSeries0.getItems();
      assertNotNull(list0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(" 1_yTe+cQYACHYu", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(" 1_yTe+cQYACHYu", timeSeries0.getDomainDescription());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(" 1_yTe+cQYACHYu", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(" 1_yTe+cQYACHYu", timeSeries0.getDomainDescription());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = " 1_yTe+cQYACHYu";
      stringArray0[1] = " 1_yTe+cQYACHYu";
      stringArray0[2] = " 1_yTe+cQYACHYu";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 32, 32);
      assertNotNull(matrixSeries0);
      assertEquals(32, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1024, matrixSeries0.getItemCount());
      assertEquals(32, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(32, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1024, matrixSeries0.getItemCount());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(32, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1024, matrixSeries0.getItemCount());
      assertEquals(32, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(31.0, range0.getLength(), 0.01);
      assertEquals(15.5, range0.getCentralValue(), 0.01);
      assertEquals(31.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 32;
      doubleArray1[1] = (double) 32;
      doubleArray1[2] = (double) 32;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 32;
      doubleArray2[1] = (double) 32;
      doubleArray2[2] = (double) 32;
      doubleArray2[3] = (double) 32;
      doubleArray2[4] = (double) 32;
      doubleArray2[5] = (double) 32;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 32;
      doubleArray3[1] = (double) 32;
      doubleArray3[2] = (double) 32;
      doubleArray3[3] = (double) 32;
      doubleArray3[4] = (double) 32;
      doubleArray3[5] = (double) 32;
      doubleArray3[6] = (double) 32;
      doubleArray3[7] = (double) 32;
      doubleArray3[8] = (double) 32;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(32.0, number0);
      assertNotNull(number0);
      assertEquals(3, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(3, doubleArray0.length);
      assertEquals(32.0, range1.getLowerBound(), 0.01);
      assertEquals(32.0, range1.getCentralValue(), 0.01);
      assertEquals(32.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      numberArray0[3] = (Number) 999;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      Class<Object> class0 = Object.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertNotNull(class1);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertEquals("class org.jfree.data.time.Millisecond", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 999;
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, 680.6800831363477, 999, 0.0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(999.0, range0.getCentralValue(), 0.01);
      assertEquals(999.0, range0.getLowerBound(), 0.01);
      assertEquals(999.0, range0.getUpperBound(), 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(680.6800831363477));
      
      boolean boolean0 = stack0.add((Double) 0.0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[0.0]", stack0.toString());
      assertFalse(stack0.contains((-1.0)));
      assertTrue(stack0.contains(0.0));
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, stack0, true);
      assertNotSame(range1, range0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(range1.equals((Object)range0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotNull(range1);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[0.0]", stack0.toString());
      assertEquals(340.34004156817383, range1.getCentralValue(), 0.01);
      assertEquals((-0.5), range1.getLowerBound(), 0.01);
      assertEquals(681.6800831363477, range1.getLength(), 0.01);
      assertEquals(681.1800831363477, range1.getUpperBound(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(stack0.contains((-1.0)));
      assertTrue(stack0.contains(0.0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotNull(range2);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(999.0, range2.getLowerBound(), 0.01);
      assertEquals(999.0, range2.getUpperBound(), 0.01);
      assertEquals(999.0, range2.getCentralValue(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNull(range3);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[0.0]", stack0.toString());
      assertFalse(stack0.contains((-1.0)));
      assertTrue(stack0.contains(0.0));
      
      Range range4 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertTrue(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotNull(range4);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(681.6800831363477, range4.getLength(), 0.01);
      assertEquals(681.1800831363477, range4.getUpperBound(), 0.01);
      assertEquals(340.34004156817383, range4.getCentralValue(), 0.01);
      assertEquals((-0.5), range4.getLowerBound(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range5 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range0);
      assertNotSame(range5, range1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range1));
      assertNotNull(range5);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(999.0, range5.getLowerBound(), 0.01);
      assertEquals(999.0, range5.getCentralValue(), 0.01);
      assertEquals(999.0, range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 999);
      assertNotNull(defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 999, 1021.4600917432973, 999, integer0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate(0, 0, 999, 999, 0);
      assertNotNull(mockDate0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(998.5, range0.getLowerBound(), 0.01);
      assertEquals(1010.2300458716486, range0.getCentralValue(), 0.01);
      assertEquals(1021.9600917432973, range0.getUpperBound(), 0.01);
      assertEquals(23.460091743297312, range0.getLength(), 0.01);
      
      double[][] doubleArray1 = new double[8][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 999;
      doubleArray2[4] = (double) 999;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, doubleArray1.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(8, doubleArray1.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Byte) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-709), (-1120), (-685));
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-709,MONTH=-1120,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-685,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1556.0272521, (-440.97587173956754), Double.NEGATIVE_INFINITY, (-440.97587173956754), (-124.86908));
      assertNotNull(oHLCDataItem0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-709,MONTH=-1120,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-685,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-2646.35), (-1370.5946), 0.0, (-2612.8409345), 517.37941527);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem1);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-709,MONTH=-1120,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-685,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, 517.37941527, (-2612.8409345), 1.5, Double.NEGATIVE_INFINITY, (-1120));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertNotNull(oHLCDataItem2);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-709,MONTH=-1120,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-685,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, 680.6800831363477, 680.6800831363477, (-709), (-1370.5946), Double.NEGATIVE_INFINITY);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertNotNull(oHLCDataItem3);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-709,MONTH=-1120,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-685,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(Double.NEGATIVE_INFINITY, number0);
      assertNotNull(number0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "Unknown 'category' key.";
      int int0 = 1776;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1776, 1776);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(1776, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1776, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingGanttCategoryDataset0, (Comparable) "Unknown 'category' key.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      jDBCCategoryDataset0.addValue(Double.NaN, (Comparable) ":5Q/'E", (Comparable) ":5Q/'E");
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(":5Q/'E");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, 0);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertEquals(0.0, double0, 0.01);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(boolean0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(0.0, 404.525837054);
      assertNotNull(lineFunction2D0);
      assertEquals(404.525837054, lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, Double.NaN, (-528.0262778579666), 37, ":5Q/'E");
      assertNotNull(xYSeriesCollection0);
      assertEquals(404.525837054, lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNull(range0);
      assertEquals(404.525837054, lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" 1_yTe+cQ.YACHYu", " 1_yTe+cQ.YACHYu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(6, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 6);
      assertNotNull(categoryToPieDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(6, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries(" 1_yTe+cQ.YACHYu", 7, 7);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(49, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(7, matrixSeries0.getRowCount());
      assertEquals(7, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(49, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(7, matrixSeries0.getRowCount());
      assertEquals(7, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (double) 7;
      doubleArray1[2] = (double) 7;
      doubleArray1[3] = (double) 7;
      doubleArray1[4] = (double) 7;
      doubleArray1[5] = (double) 7;
      doubleArray1[6] = (double) 7;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 7;
      doubleArray2[1] = (double) 7;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = (double) 7;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 999, 1021.4600917432973, 999, integer0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      MockDate mockDate0 = new MockDate(0, 0, 999, 999, 0);
      assertNotNull(mockDate0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(998.5, range0.getLowerBound(), 0.01);
      assertEquals(1010.2300458716486, range0.getCentralValue(), 0.01);
      assertEquals(1021.9600917432973, range0.getUpperBound(), 0.01);
      assertEquals(23.460091743297312, range0.getLength(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range0));
      assertNotNull(range2);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1021.9600917432973, range2.getUpperBound(), 0.01);
      assertEquals(23.460091743297312, range2.getLength(), 0.01);
      assertEquals(1010.2300458716486, range2.getCentralValue(), 0.01);
      assertEquals(998.5, range2.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 0);
      Number[][] numberArray0 = new Number[6][5];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) 0;
      numberArray1[1] = (Number) 0;
      numberArray1[2] = (Number) 999;
      numberArray1[3] = (Number) 0;
      numberArray1[4] = (Number) 0;
      numberArray1[5] = (Number) 0;
      numberArray1[6] = (Number) 0;
      numberArray1[7] = (Number) 0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 0;
      numberArray2[1] = (Number) 0;
      numberArray2[2] = (Number) 0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[1];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) 999;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[9];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[0] = (Number) 999;
      numberArray4[1] = (Number) 0;
      numberArray4[2] = (Number) 999;
      numberArray4[3] = (Number) 0;
      numberArray4[4] = (Number) 0;
      numberArray4[5] = (Number) 0;
      numberArray4[6] = (Number) 0;
      numberArray4[7] = (Number) 0;
      Float float0 = new Float(Double.POSITIVE_INFINITY);
      assertEquals(Float.POSITIVE_INFINITY, (float)float0, 0.01F);
      assertNotNull(float0);
      
      numberArray4[8] = (Number) float0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[1];
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray2));
      
      numberArray5[0] = (Number) 999;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[5];
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray1));
      assertFalse(numberArray6.equals((Object)numberArray2));
      assertFalse(numberArray6.equals((Object)numberArray3));
      
      double[][] doubleArray0 = new double[0][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) float0);
      assertNotNull(pieDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) millisecond0, (double) 0, 999);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertEquals(0.0, double0, 0.01);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      numberArray6[0] = (Number) 0.0;
      numberArray6[1] = (Number) float0;
      numberArray6[2] = (Number) float0;
      Date[] dateArray0 = new Date[5];
      MockDate mockDate0 = new MockDate(963, 963, (-18), (-116), 4250, 963);
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      MockDate mockDate1 = new MockDate();
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      dateArray0[1] = (Date) mockDate1;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(91);
      assertNotNull(spreadsheetDate0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(91, spreadsheetDate0.toSerial());
      assertEquals(3, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(31, spreadsheetDate0.getDayOfMonth());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      
      Date date0 = spreadsheetDate0.toDate();
      assertNotNull(date0);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(91, spreadsheetDate0.toSerial());
      assertEquals(3, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(31, spreadsheetDate0.getDayOfMonth());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      dateArray0[2] = date0;
      MockDate mockDate2 = new MockDate(9999, 2636, 1, 1, 3, 963);
      assertFalse(mockDate2.equals((Object)mockDate0));
      assertFalse(mockDate2.equals((Object)mockDate1));
      assertNotNull(mockDate2);
      
      dateArray0[3] = (Date) mockDate2;
      int int0 = 3;
      MockDate mockDate3 = new MockDate(3, 995, 91, 999, (-6012));
      assertFalse(mockDate3.equals((Object)mockDate2));
      assertFalse(mockDate3.equals((Object)mockDate0));
      assertFalse(mockDate3.equals((Object)mockDate1));
      assertNotNull(mockDate3);
      
      dateArray0[4] = (Date) mockDate3;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 687.6443;
      doubleArray1[1] = (double) 6;
      doubleArray1[2] = (double) 2636;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 995;
      doubleArray1[5] = (double) 3;
      doubleArray1[6] = (double) (-1);
      doubleArray1[7] = (double) 1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = 2876.2723211;
      doubleArray2[3] = (double) 5;
      doubleArray2[4] = (double) (-6012);
      doubleArray2[5] = (double) 3;
      doubleArray2[6] = (double) 2;
      doubleArray2[7] = (double) 91;
      doubleArray2[8] = (double) 3;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 963;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(millisecond0, dateArray0, doubleArray1, doubleArray2, doubleArray1, doubleArray3, doubleArray3);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(defaultHighLowDataset0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(9, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertEquals(5, dateArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 2876.2723211, 5.0, (-6012.0), 3.0, 2.0, 91.0, 3.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {687.6443, 6.0, 2636.0, 2.0, 995.0, 3.0, (-1.0), 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 963.0}, doubleArray3, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      // Undeclared exception!
      try { 
        defaultHighLowDataset0.getY(7, 4250);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4250
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" 1_yTe+cQ.YACHYu", " 1_yTe+cQ.YACHYu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(6, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-1));
      assertNotNull(categoryToPieDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1), categoryToPieDataset0.getExtractIndex());
      
      CategoryToPieDataset categoryToPieDataset1 = (CategoryToPieDataset)categoryToPieDataset0.clone();
      assertNotSame(categoryToPieDataset0, categoryToPieDataset1);
      assertNotSame(categoryToPieDataset1, categoryToPieDataset0);
      assertNotNull(categoryToPieDataset1);
      assertEquals(6, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-1), categoryToPieDataset0.getExtractIndex());
      assertEquals((-1), categoryToPieDataset1.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" 1_yTe+cQ.YACHYu", " 1_yTe+cQ.YACHYu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(6, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertNotNull(defaultPieDataset0);
      assertEquals(6, doubleArray0.length);
      
      Locale locale0 = Locale.forLanguageTag(" 1_yTe+cQ.YACHYu");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      Year year0 = new Year(date0);
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(1582, year0.getYear());
      assertEquals(1582L, year0.getSerialIndex());
      assertEquals((-12219292800000L), year0.getLastMillisecond());
      assertEquals("1582", year0.toString());
      assertEquals((-12219292800000L), year0.getFirstMillisecond());
      
      defaultPieDataset0.insertValue(0, (Comparable) year0, (Number) 9999);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(6, doubleArray0.length);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(1582, year0.getYear());
      assertEquals(1582L, year0.getSerialIndex());
      assertEquals((-12219292800000L), year0.getLastMillisecond());
      assertEquals("1582", year0.toString());
      assertEquals((-12219292800000L), year0.getFirstMillisecond());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      DomainOrder domainOrder0 = xIntervalSeriesCollection0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xIntervalSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Number[][] numberArray0 = new Number[3][5];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = null;
      numberArray1[1] = null;
      numberArray1[2] = null;
      numberArray1[3] = null;
      numberArray1[4] = null;
      numberArray1[5] = null;
      numberArray1[6] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = null;
      numberArray2[1] = null;
      Byte byte0 = new Byte((byte) (-85));
      assertEquals((byte) (-85), (byte)byte0);
      assertNotNull(byte0);
      
      numberArray2[2] = (Number) byte0;
      numberArray2[3] = null;
      numberArray2[4] = null;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[8];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = null;
      numberArray3[1] = null;
      numberArray3[2] = (Number) byte0;
      numberArray3[3] = (Number) byte0;
      numberArray3[4] = (Number) byte0;
      numberArray3[5] = null;
      numberArray3[6] = null;
      numberArray3[7] = null;
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, numberArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      jDBCCategoryDataset0.addValue(Double.NaN, (Comparable) ":5Q/'E", (Comparable) ":5Q/'E");
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = Double.NaN;
      doubleArray1[7] = Double.NaN;
      doubleArray1[8] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = Double.NaN;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-4726.516723227911);
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-279.0094812567374);
      doubleArray1[4] = 541.44;
      doubleArray1[5] = 2100.4356;
      doubleArray1[6] = 816.525244;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = 969.36294392;
      doubleArray2[2] = 2100.4356;
      doubleArray2[3] = (-4726.516723227911);
      doubleArray2[4] = 2100.4356;
      doubleArray2[5] = Double.NaN;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = 885.9884;
      doubleArray3[2] = (-279.0094812567374);
      doubleArray3[3] = (-279.0094812567374);
      doubleArray3[4] = (-4726.516723227911);
      doubleArray3[5] = Double.NaN;
      doubleArray3[6] = 969.36294392;
      doubleArray3[7] = 816.525244;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", ":(t[~G(GB|", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals((-4726.516723227911), range0.getLowerBound(), 0.01);
      assertEquals(2100.4356, range0.getUpperBound(), 0.01);
      assertEquals((-1313.0405616139556), range0.getCentralValue(), 0.01);
      assertEquals(6826.952323227911, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Double double0 = new Double((-2519.51161371425));
      assertEquals((-2519.51161371425), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-2519.51161371425));
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2519.51161371425), (double)double1, 0.01);
      assertNotNull(double1);
      
      boolean boolean0 = vector0.add(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[-2519.51161371425]", vector0.toString());
      assertTrue(vector0.contains((-2519.51161371425)));
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(59, 0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      
      Range range0 = new Range(0, 1);
      assertNotNull(range0);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList0, true);
      assertNull(range3);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Byte byte0 = new Byte((byte)58);
      assertEquals((byte)58, (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((byte)58));
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte)58));
      
      Byte byte1 = new Byte((byte)2);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte1);
      assertNotNull(byte1);
      
      boolean boolean1 = linkedList0.add(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains((byte)2));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      assertNull(range0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains((byte)2));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      assertNull(range1);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains((byte)2));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      numberArray0[3] = (Number) 999;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (double) 999;
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 999.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, 680.6800831363477, 999, 0.0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 999.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(680.6800831363477, 0);
      assertNotNull(lineFunction2D0);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(680.6800831363477, lineFunction2D0.getIntercept(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 999.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(3.1506097881278845E11, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.5753048940639423E11, range0.getCentralValue(), 0.01);
      assertEquals(3.1506097881278845E11, range0.getUpperBound(), 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 999.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 999.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(0.0));
      
      boolean boolean0 = stack0.add((Double) 0.0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertFalse(stack0.contains((-1.0)));
      assertTrue(stack0.contains(0.0));
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, stack0, true);
      assertNotSame(range1, range0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(range1);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 999.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(681.6800831363477, range1.getLength(), 0.01);
      assertEquals(681.1800831363477, range1.getUpperBound(), 0.01);
      assertEquals((-0.5), range1.getLowerBound(), 0.01);
      assertEquals(340.34004156817383, range1.getCentralValue(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertFalse(stack0.contains((-1.0)));
      assertTrue(stack0.contains(0.0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(range2);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 999.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1.5753048940639423E11, range2.getCentralValue(), 0.01);
      assertEquals(3.1506097881278845E11, range2.getUpperBound(), 0.01);
      assertEquals(3.1506097881278845E11, range2.getLength(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNull(range3);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertFalse(stack0.contains((-1.0)));
      assertTrue(stack0.contains(0.0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      numberArray0[3] = (Number) 999;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 999;
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, 680.6800831363477, 999, 0.0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(680.6800831363477, 0);
      assertNotNull(lineFunction2D0);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(680.6800831363477, lineFunction2D0.getIntercept(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(999.0, range0.getCentralValue(), 0.01);
      assertEquals(999.0, range0.getUpperBound(), 0.01);
      assertEquals(999.0, range0.getLowerBound(), 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(680.6800831363477));
      
      boolean boolean0 = stack0.add((Double) 0.0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(680.6800831363477));
      assertTrue(stack0.contains(0.0));
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, stack0, true);
      assertNotSame(range1, range0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(range1);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-0.5), range1.getLowerBound(), 0.01);
      assertEquals(681.6800831363477, range1.getLength(), 0.01);
      assertEquals(340.34004156817383, range1.getCentralValue(), 0.01);
      assertEquals(681.1800831363477, range1.getUpperBound(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(680.6800831363477));
      assertTrue(stack0.contains(0.0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(range2);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(999.0, range2.getCentralValue(), 0.01);
      assertEquals(999.0, range2.getUpperBound(), 0.01);
      assertEquals(999.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, false);
      assertNull(range3);
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(680.6800831363477));
      assertTrue(stack0.contains(0.0));
      
      Range range4 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(range4);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(999.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(999.0, range4.getCentralValue(), 0.01);
      assertEquals(999.0, range4.getUpperBound(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range5 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range2);
      assertNotSame(range5, range4);
      assertNotSame(range5, range1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(range5.equals((Object)range0));
      assertFalse(range5.equals((Object)range2));
      assertFalse(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range1));
      assertNotNull(range5);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(340.34004156817383, range5.getCentralValue(), 0.01);
      assertEquals(681.1800831363477, range5.getUpperBound(), 0.01);
      assertEquals(681.6800831363477, range5.getLength(), 0.01);
      assertEquals((-0.5), range5.getLowerBound(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Byte byte0 = new Byte((byte) (-42));
      assertEquals((byte) (-42), (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(byte0));
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byte0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(defaultStatisticalCategoryDataset1);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset1);
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertNull(number0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(byte0, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Byte byte0 = new Byte((byte) (-6));
      assertEquals((byte) (-6), (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(byte0));
      
      Byte byte1 = new Byte((byte)28);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)28, (byte)byte1);
      assertNotNull(byte1);
      
      boolean boolean0 = linkedList0.add(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(byte0));
      assertTrue(linkedList0.contains(byte1));
      
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (byte)28;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (double) (byte) (-98);
      doubleArray1[3] = (double) (byte) (-98);
      doubleArray1[4] = (double) (byte) (-6);
      doubleArray1[5] = (double) (byte)28;
      doubleArray1[6] = (double) (byte) (-6);
      doubleArray1[7] = 25.56574098158;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(28.0, range0.getUpperBound(), 0.01);
      assertEquals((-98.0), range0.getLowerBound(), 0.01);
      assertEquals(126.0, range0.getLength(), 0.01);
      assertEquals((-35.0), range0.getCentralValue(), 0.01);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) yIntervalSeriesCollection0, (List) linkedList0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.YIntervalSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries(":5Q/'E", 1, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Integer integer0 = Integer.valueOf(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(200, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(2, (int)integer2);
      assertNotNull(integer2);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      assertFalse(boolean0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertTrue(number1.equals((Object)number0));
      assertEquals(0.0, number1);
      assertNotNull(number1);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 999, 1021.4600917432973, 999, integer0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (-289));
      assertNotNull(defaultPieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      numberArray0[3] = (Number) 999;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 999;
      Millisecond millisecond2 = (Millisecond)millisecond1.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond0, millisecond2);
      assertNotSame(millisecond1, millisecond2);
      assertNotSame(millisecond1, millisecond0);
      assertNotSame(millisecond2, millisecond0);
      assertNotSame(millisecond2, millisecond1);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertFalse(millisecond2.equals((Object)millisecond0));
      assertFalse(millisecond2.equals((Object)millisecond1));
      assertNotNull(millisecond2);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond2.getLastMillisecond());
      assertEquals(1392409281320L, millisecond2.getFirstMillisecond());
      assertEquals(322L, millisecond2.getMillisecond());
      
      doubleArray0[2] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, 680.6800831363477, 999, 0.0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(680.6800831363477, 0);
      assertNotNull(lineFunction2D0);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(680.6800831363477, lineFunction2D0.getIntercept(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(999.0, range0.getUpperBound(), 0.01);
      assertEquals(999.0, range0.getLowerBound(), 0.01);
      assertEquals(999.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains((-1.0)));
      
      boolean boolean0 = stack0.add((Double) 0.0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains((-1.0)));
      assertTrue(stack0.contains(0.0));
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, stack0, true);
      assertNotSame(range1, range0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(range1);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(681.1800831363477, range1.getUpperBound(), 0.01);
      assertEquals(340.34004156817383, range1.getCentralValue(), 0.01);
      assertEquals((-0.5), range1.getLowerBound(), 0.01);
      assertEquals(681.6800831363477, range1.getLength(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(stack0.contains((-1.0)));
      assertTrue(stack0.contains(0.0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(range2);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(999.0, range2.getCentralValue(), 0.01);
      assertEquals(999.0, range2.getUpperBound(), 0.01);
      assertEquals(999.0, range2.getLowerBound(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNull(range3);
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains((-1.0)));
      assertTrue(stack0.contains(0.0));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      numberArray0[3] = (Number) 999;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 999;
      doubleArray0[2] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, 680.6800831363477, 999, 0.0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(680.6800831363477, 0);
      assertNotNull(lineFunction2D0);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(680.6800831363477, lineFunction2D0.getIntercept(), 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(681.6800831363477, range0.getLength(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(681.1800831363477, range0.getUpperBound(), 0.01);
      assertEquals(340.34004156817383, range0.getCentralValue(), 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "qax1Uu(xO!";
      stringArray0[1] = "";
      stringArray0[2] = "[}";
      Object[][][] objectArray0 = new Object[1][2][3];
      Object[][] objectArray1 = new Object[3][6];
      objectArray1[0] = (Object[]) stringArray0;
      objectArray1[1] = (Object[]) stringArray0;
      objectArray1[2] = (Object[]) numberArray0;
      objectArray0[0] = objectArray1;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(stringArray0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data array.
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1363.96);
      doubleArray1[1] = (-140.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-140.0);
      doubleArray2[1] = (-140.0);
      doubleArray2[2] = (-140.0);
      doubleArray2[3] = (-1363.96);
      doubleArray2[4] = (-2622.00739);
      doubleArray2[5] = (-1363.96);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-140.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-2622.00739);
      doubleArray4[1] = (-140.0);
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("!", "!", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(4, doubleArray0.length);
      assertEquals(2482.00739, range0.getLength(), 0.01);
      assertEquals((-2622.00739), range0.getLowerBound(), 0.01);
      assertEquals((-1381.003695), range0.getCentralValue(), 0.01);
      assertEquals((-140.0), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("[ReJnQ6f)=o/ |)L&");
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      TimeSeries timeSeries0 = new TimeSeries("[ReJnQ6f)=o/ |)L&", "", "");
      assertNotNull(timeSeries0);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, zoneInfo0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Object[][][] objectArray0 = new Object[3][4][9];
      Object[][] objectArray1 = new Object[9][2];
      objectArray1[0] = (Object[]) numberArray0;
      objectArray1[1] = (Object[]) numberArray0;
      objectArray1[2] = (Object[]) numberArray0;
      objectArray1[3] = (Object[]) numberArray0;
      objectArray1[4] = (Object[]) numberArray0;
      objectArray1[5] = (Object[]) numberArray0;
      objectArray1[6] = (Object[]) numberArray0;
      objectArray1[7] = (Object[]) numberArray0;
      objectArray1[8] = (Object[]) numberArray0;
      objectArray0[0] = objectArray1;
      Object[][] objectArray2 = new Object[0][6];
      assertFalse(objectArray2.equals((Object)objectArray1));
      
      objectArray0[1] = objectArray2;
      Object[][] objectArray3 = new Object[6][1];
      assertFalse(objectArray3.equals((Object)objectArray2));
      assertFalse(objectArray3.equals((Object)objectArray1));
      
      objectArray3[0] = (Object[]) numberArray0;
      objectArray3[1] = (Object[]) numberArray0;
      objectArray3[2] = (Object[]) numberArray0;
      objectArray3[3] = (Object[]) numberArray0;
      objectArray3[4] = (Object[]) numberArray0;
      objectArray3[5] = (Object[]) numberArray0;
      objectArray0[2] = objectArray3;
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertNotNull(defaultWindDataset0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, defaultWindDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultWindDataset0);
      assertNull(number0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, defaultWindDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0, true);
      assertNotNull(range0);
      assertEquals(3, objectArray0.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(999.0, range0.getLowerBound(), 0.01);
      assertEquals(999.0, range0.getCentralValue(), 0.01);
      assertEquals(999.0, range0.getUpperBound(), 0.01);
      assertEquals(3, defaultWindDataset0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertNull(number1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[][] doubleArray0 = new double[5][5];
      Byte byte0 = new Byte((byte) (-98));
      assertEquals((byte) (-98), (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((byte) (-98)));
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte) (-98)));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) linkedList0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertNotNull(timeSeries0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      timeSeriesCollection0.fireSelectionEvent();
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 999;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 999;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 6.283185307179586;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 999.0, 0.0, 999.0, 0.0, 6.283185307179586}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-1754.9), (-391.151016265431), 967, 0.0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 999.0, 0.0, 999.0, 0.0, 6.283185307179586}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      MockDate mockDate0 = (MockDate)millisecond0.getStart();
      assertNotNull(mockDate0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 999.0, 0.0, 999.0, 0.0, 6.283185307179586}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals((-390.65101626543105), range0.getUpperBound(), 0.01);
      assertEquals((-1073.0255081327155), range0.getCentralValue(), 0.01);
      assertEquals(1364.748983734569, range0.getLength(), 0.01);
      assertEquals((-1755.4), range0.getLowerBound(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      TaskSeries taskSeries0 = new TaskSeries("");
      assertNotNull(taskSeries0);
      assertTrue(taskSeries0.getNotify());
      assertEquals(0, taskSeries0.getItemCount());
      assertNull(taskSeries0.getDescription());
      
      taskSeriesCollection0.remove(taskSeries0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(taskSeries0.getNotify());
      assertEquals(0, taskSeries0.getItemCount());
      assertNull(taskSeries0.getDescription());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, false);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 3591);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" 1_yTe+cQ.YACHYu", " 1_yTe+cQ.YACHYu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotNull(defaultCategoryDataset0);
      
      defaultCategoryDataset0.addValue((-128.9723), (Comparable) " 1_yTe+cQ.YACHYu", (Comparable) " 1_yTe+cQ.YACHYu");
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(6, doubleArray0.length);
      
      double[][] doubleArray1 = new double[1][9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-128.9723);
      doubleArray2[1] = (-128.9723);
      boolean boolean0 = defaultCategoryDataset0.equals(" 1_yTe+cQ.YACHYu");
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertFalse(boolean0);
      
      doubleArray2[2] = 736.9881604;
      doubleArray2[3] = (-128.9723);
      doubleArray1[0] = doubleArray2;
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset(" 1_yTe+cQ.YACHYu", " 1_yTe+cQ.YACHYu", doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotSame(categoryDataset1, defaultCategoryDataset0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertFalse(categoryDataset1.equals((Object)defaultCategoryDataset0));
      assertNotNull(categoryDataset1);
      assertEquals(1, doubleArray1.length);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertNotSame(defaultCategoryDataset0, categoryDataset1);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset1));
      assertFalse(number1.equals((Object)number0));
      assertEquals((-128.9723), number1);
      assertNotNull(number1);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(categoryDataset1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotSame(categoryDataset1, defaultCategoryDataset0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertFalse(categoryDataset1.equals((Object)defaultCategoryDataset0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, doubleArray1.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, false);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertNotSame(defaultCategoryDataset0, categoryDataset1);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset1));
      assertNotNull(range0);
      assertEquals((-128.9723), range0.getCentralValue(), 0.01);
      assertEquals((-128.9723), range0.getUpperBound(), 0.01);
      assertEquals((-128.9723), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Xp7t'2R~m7/+tGj}.", "permitted.  Try using the addOrUpdate() method.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertNotNull(defaultIntervalCategoryDataset1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getCategoryCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getCategoryCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertTrue(number1.equals((Object)number0));
      assertEquals(0.0, number1);
      assertNotNull(number1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" 1_yTe+cQ.YACHYu", " 1_yTe+cQ.YACHYu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Stream<DynamicTimeSeriesCollection> stream0 = linkedList0.parallelStream();
      assertNotNull(stream0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) linkedList0, range0, true);
      assertNull(range1);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      numberArray0[3] = (Number) 999;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 999;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, 680.6800831363477, 999, 0.0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      MockDate mockDate0 = (MockDate)millisecond0.getStart();
      assertNotSame(millisecond0, millisecond1);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotNull(mockDate0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Class<DefaultHighLowDataset> class0 = DefaultHighLowDataset.class;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT-18:00", zoneInfo0.getID());
      
      RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance(class0, mockDate0, zoneInfo0);
      assertNotSame(millisecond0, millisecond1);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNull(regularTimePeriod0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals("GMT-18:00", zoneInfo0.getID());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(680.6800831363477, 0);
      assertNotNull(lineFunction2D0);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(680.6800831363477, lineFunction2D0.getIntercept(), 0.01);
      
      Number[][] numberArray1 = new Number[0][2];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("P;G!SQpUSvJ.=\"!", "P;G!SQpUSvJ.=\"!", numberArray1);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, numberArray1.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(0, numberArray1.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(999.0, range0.getCentralValue(), 0.01);
      assertEquals(999.0, range0.getUpperBound(), 0.01);
      assertEquals(999.0, range0.getLowerBound(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Vector<Short> vector0 = new Vector<Short>(1739, 1739);
      assertNotNull(vector0);
      assertEquals(1739, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(400, (int)integer1);
      assertNotNull(integer1);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultWindDataset0);
      assertNull(range0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultWindDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      numberArray0[3] = (Number) 999;
      Comparable<Byte>[] comparableArray0 = (Comparable<Byte>[]) Array.newInstance(Comparable.class, 3);
      comparableArray0[0] = (Comparable<Byte>) millisecond0;
      comparableArray0[1] = (Comparable<Byte>) millisecond0;
      comparableArray0[2] = (Comparable<Byte>) millisecond1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, comparableArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      int int0 = defaultIntervalCategoryDataset0.indexOf(millisecond1);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertEquals((-1), int0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(3, comparableArray0.length);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      long long0 = millisecond0.getSerialIndex();
      assertEquals(3601570881320L, long0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertNotNull(timeSeries0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      timeSeriesCollection0.fireSelectionEvent();
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 0);
      assertNull(timeSeriesDataItem0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 3601570881320L;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (double) 3601570881320L;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (double) 999;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 3601570881320L;
      doubleArray3[4] = (double) 999;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 999;
      doubleArray4[2] = (double) 3601570881320L;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 999, 1021.4600917432973, 999, integer0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      MockDate mockDate0 = (MockDate)millisecond0.getStart();
      assertNotSame(millisecond0, millisecond1);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotNull(mockDate0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1021.9600917432973, range0.getUpperBound(), 0.01);
      assertEquals(23.460091743297312, range0.getLength(), 0.01);
      assertEquals(998.5, range0.getLowerBound(), 0.01);
      assertEquals(1010.2300458716486, range0.getCentralValue(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(999));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, range0, true);
      assertNull(range1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1021.9600917432973, range0.getUpperBound(), 0.01);
      assertEquals(23.460091743297312, range0.getLength(), 0.01);
      assertEquals(998.5, range0.getLowerBound(), 0.01);
      assertEquals(1010.2300458716486, range0.getCentralValue(), 0.01);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(999));
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(range2, range0);
      assertTrue(range2.equals((Object)range0));
      assertNotNull(range2);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1021.9600917432973, range2.getUpperBound(), 0.01);
      assertEquals(1010.2300458716486, range2.getCentralValue(), 0.01);
      assertEquals(998.5, range2.getLowerBound(), 0.01);
      assertEquals(23.460091743297312, range2.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      
      int int0 = defaultIntervalCategoryDataset0.indexOf((Comparable) null);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" 1_yTe+cQ.YACHYu", " 1_yTe+cQ.YACHYu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1896);
      assertNotNull(categoryToPieDataset0);
      assertEquals(9, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1896, categoryToPieDataset0.getExtractIndex());
      
      Second second0 = Second.parseSecond("164'rR[EK1o{z&(q");
      assertNull(second0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) null, Double.POSITIVE_INFINITY, 80);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1896, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      
      int int0 = defaultIntervalCategoryDataset0.indexOf((Comparable) null);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Double double0 = new Double((-596.94977718575));
      assertEquals((-596.94977718575), (double)double0, 0.01);
      assertNotNull(double0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains((-596.94977718575)));
      
      Double double1 = new Double((-2590.17850251));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2590.17850251), (double)double1, 0.01);
      assertNotNull(double1);
      
      boolean boolean0 = stack0.add(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[-2590.17850251]", stack0.toString());
      assertFalse(stack0.contains((-596.94977718575)));
      assertTrue(stack0.contains((-2590.17850251)));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, stack0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" 1_yTe+cQ.YACHYu", " 1_yTe+cQ.YACHYu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(9, doubleArray0.length);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("esN5&;");
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertNotNull(defaultPieDataset0);
      assertEquals(9, doubleArray0.length);
      
      double double1 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "esN5&;", 0.0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset1);
      assertEquals(9, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) double0, 1789.57, 1788);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertNotNull(defaultPieDataset2);
      assertEquals(9, doubleArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultTableXYDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries(":5Q/'E", 1, 1);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Vector<Short> vector0 = new Vector<Short>(1780, 1964);
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(1780, vector0.capacity());
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number1);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, 1290);
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) ":5Q/'E", 0.0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      
      Number number2 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertFalse(number2.equals((Object)double0));
      assertFalse(number2.equals((Object)number0));
      assertEquals(Double.NaN, number2);
      assertNotNull(number2);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" 1_yTe+cQ.YACHYu", " 1_yTe+cQ.YACHYu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(defaultTableXYDataset0));
      
      boolean boolean0 = stack0.add(defaultTableXYDataset0);
      assertTrue(boolean0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(defaultTableXYDataset0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range1 = defaultMultiValueCategoryDataset0.getRangeBounds(true);
      assertNotNull(range1);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      
      ArrayList<DefaultHighLowDataset> arrayList0 = new ArrayList<DefaultHighLowDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, stack0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte0);
      assertNotNull(byte0);
      
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) byte0;
      numberArray1[1] = (Number) byte0;
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      
      int int0 = defaultIntervalCategoryDataset0.indexOf((Comparable) null);
      assertEquals((-1), int0);
      assertEquals(1, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(1, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-70.0), range0.getLowerBound(), 0.01);
      assertEquals((-70.0), range0.getCentralValue(), 0.01);
      assertEquals((-70.0), range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (double) (byte) (-70));
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(1, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals((-70.0), range1.getUpperBound(), 0.01);
      assertEquals((-105.0), range1.getCentralValue(), 0.01);
      assertEquals((-140.0), range1.getLowerBound(), 0.01);
      assertEquals(70.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Object object0 = defaultCategoryDataset0.clone();
      assertNotSame(defaultCategoryDataset0, object0);
      assertNotSame(object0, defaultCategoryDataset0);
      assertTrue(object0.equals((Object)defaultCategoryDataset0));
      assertNotNull(object0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertNull(range0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset0, object0);
      assertTrue(defaultCategoryDataset0.equals((Object)object0));
      assertNull(range1);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 6.283185307179586);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" 1_yTe+cQ.YACHYu", " 1_yTe+cQ.YACHYu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(6, doubleArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries("esN5&;", " 1_yTe+cQ.YACHYu", " 1_yTe+cQ.YACHYu");
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(" 1_yTe+cQ.YACHYu", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(" 1_yTe+cQ.YACHYu", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("esN5&;");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(" 1_yTe+cQ.YACHYu");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      LinkedList<TimeSeriesTableModel> linkedList0 = new LinkedList<TimeSeriesTableModel>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel();
      assertNotNull(timeSeriesTableModel0);
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      
      boolean boolean0 = linkedList0.add(timeSeriesTableModel0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertTrue(linkedList0.contains(timeSeriesTableModel0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) linkedList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesTableModel cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 999;
      doubleArray1[5] = (double) 999;
      doubleArray1[6] = (double) 999;
      doubleArray1[7] = (-3884.4137);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 999;
      doubleArray3[3] = (-3884.4137);
      doubleArray3[4] = (double) 999;
      doubleArray3[5] = (double) 999;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" 1_yTe+cQ.YACHYu", " 1_yTe+cQ.YACHYu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(1998.0, number0);
      assertNotNull(number0);
      assertEquals(3, doubleArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries(0.0, "W@4", " 1_yTe+cQ.YACHYu");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(" 1_yTe+cQ.YACHYu", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("{XFJ0t^BbK{NwY^");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(999.0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-3884.4137), range0.getLowerBound(), 0.01);
      assertEquals(1998.0, range0.getUpperBound(), 0.01);
      assertEquals((-943.20685), range0.getCentralValue(), 0.01);
      assertEquals(5882.4137, range0.getLength(), 0.01);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      
      int int0 = defaultIntervalCategoryDataset0.indexOf((Comparable) null);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      Date date0 = second0.getEnd();
      assertNotNull(date0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:22 GMT 2014", date0.toString());
      
      PieDataset pieDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) date0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1121.4);
      doubleArray1[1] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1121.4);
      doubleArray2[1] = 1.0;
      doubleArray2[2] = (-1121.4);
      doubleArray2[3] = (-1121.4);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1121.4);
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" 1_yTe+cQYACHYu", " 1_yTe+cQYACHYu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(2.0, number0);
      assertNotNull(number0);
      assertEquals(3, doubleArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Stream<DynamicTimeSeriesCollection> stream0 = linkedList0.parallelStream();
      assertNotNull(stream0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1121.4), range0.getLowerBound(), 0.01);
      assertEquals((-560.2), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1122.4, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, range0, false);
      assertNull(range1);
      assertEquals(3, doubleArray0.length);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, linkedList0.size());
      assertEquals((-1121.4), range0.getLowerBound(), 0.01);
      assertEquals((-560.2), range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1122.4, range0.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0, false);
      assertNull(range2);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range3 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotSame(range3, range0);
      assertTrue(range3.equals((Object)range0));
      assertNotNull(range3);
      assertEquals(3, doubleArray0.length);
      assertEquals(1122.4, range3.getLength(), 0.01);
      assertEquals((-1121.4), range3.getLowerBound(), 0.01);
      assertEquals((-560.2), range3.getCentralValue(), 0.01);
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      
      Range range4 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-1121.4));
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertNotNull(range4);
      assertEquals(3, doubleArray0.length);
      assertEquals((-2802.5), range4.getCentralValue(), 0.01);
      assertEquals((-1119.4), range4.getUpperBound(), 0.01);
      assertEquals((-4485.6), range4.getLowerBound(), 0.01);
      assertEquals(3366.2000000000003, range4.getLength(), 0.01);
      
      Range range5 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, false);
      assertNull(range5);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, linkedList0.size());
      
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 1034);
      assertEquals(0.0, double0, 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries(":5Q/'E", 1, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Vector<Short> vector0 = new Vector<Short>(1780, 1964);
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(1780, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number1);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      boolean boolean0 = stack0.add(defaultTableXYDataset0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(stack0.contains(defaultTableXYDataset0));
      
      Range range1 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) stack0, range1, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertNotNull(timeSeries0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      timeSeriesCollection0.fireSelectionEvent();
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, 821.671);
      assertNull(timeSeriesDataItem0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(821.671, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(821.671, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertEquals(821.671, number0);
      assertNotNull(number0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(821.671, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(821.671, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertNotNull(range0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(821.671, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(821.671, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" 1_yTe+cQ.YACHYu", " 1_yTe+cQ.YACHYu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(9, doubleArray0.length);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("esN5&;");
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertNotNull(defaultPieDataset0);
      assertEquals(9, doubleArray0.length);
      
      double double1 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) double0, 0.0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset1);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" 1_yTe+cQYACHYu", " 1_yTe+cQYACHYu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(2, doubleArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Stream<DynamicTimeSeriesCollection> stream0 = linkedList0.parallelStream();
      assertNotNull(stream0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, range0, true);
      assertNull(range1);
      assertEquals(2, doubleArray0.length);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0, false);
      assertNull(range2);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Range range3 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotSame(range3, range0);
      assertTrue(range3.equals((Object)range0));
      assertNotNull(range3);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      
      Range range4 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 1090.19);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      assertNotNull(range4);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(1090.19, range4.getCentralValue(), 0.01);
      assertEquals(1090.19, range4.getUpperBound(), 0.01);
      assertEquals(1090.19, range4.getLowerBound(), 0.01);
      
      Range range5 = DatasetUtilities.findDomainBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, false);
      assertNull(range5);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate(968, 984, 986, 1, 968);
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Tue Sep 12 17:08:00 GMT 2952", mockDate0.toString());
      assertEquals(31011008880000L, month0.getLastMillisecond());
      assertEquals(35433L, month0.getSerialIndex());
      assertEquals(9, month0.getMonth());
      assertEquals(31011008880000L, month0.getFirstMillisecond());
      assertEquals(2952, month0.getYearValue());
      
      defaultStatisticalCategoryDataset0.add((double) 1, (double) 1, (Comparable) mockDate0, (Comparable) month0);
      assertEquals("Tue Sep 12 17:08:00 GMT 2952", mockDate0.toString());
      assertEquals(31011008880000L, month0.getLastMillisecond());
      assertEquals(35433L, month0.getSerialIndex());
      assertEquals(9, month0.getMonth());
      assertEquals(31011008880000L, month0.getFirstMillisecond());
      assertEquals(2952, month0.getYearValue());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertNotNull(timeSeries0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      long long0 = millisecond0.getMiddleMillisecond();
      assertEquals(1392409281320L, long0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      Class<YIntervalSeriesCollection> class0 = YIntervalSeriesCollection.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertNotNull(class1);
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertEquals("class org.jfree.data.time.Millisecond", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      timeSeriesCollection0.fireSelectionEvent();
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, 821.671);
      assertNull(timeSeriesDataItem0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(821.671, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(821.671, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertEquals(821.671, number0);
      assertNotNull(number0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(821.671, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(821.671, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NEGATIVE_INFINITY);
      assertNotNull(range0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      Byte byte0 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(byte0));
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byte0));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertTrue(number1.equals((Object)number0));
      assertEquals(0.0, number1);
      assertNotNull(number1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      
      Number[][] numberArray0 = new Number[1][9];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("w~VQXkZrCU8x;W", "w~VQXkZrCU8x;W", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(6, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("\"R/6w&/6m?c9rw`", "org.jfree.data.xy.YIntervalDataItem", doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      assertEquals(6, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) vectorSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), (-1.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) vectorSeriesCollection0, true);
      assertNull(range2);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(vectorSeriesCollection0);
      assertNull(number1);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Double double0 = new Double((-1.0));
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains((-1.0)));
      
      Double double1 = new Double(1.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)number0, 0.01);
      assertEquals(1.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      boolean boolean0 = stack0.add(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)number0, 0.01);
      assertTrue(boolean0);
      assertEquals("[1.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains((-1.0)));
      assertTrue(stack0.contains(double1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(vectorSeriesCollection0, stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.VectorSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, false);
      assertNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, linkedList0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, false);
      assertNull(range1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((byte) (-70)));
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte) (-70)));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, false);
      assertNull(range0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Number[][] numberArray0 = new Number[4][0];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) byte0;
      numberArray1[1] = (Number) byte0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) byte0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[5];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) byte0;
      numberArray3[1] = (Number) byte0;
      numberArray3[2] = (Number) byte0;
      numberArray3[3] = (Number) byte0;
      numberArray3[4] = (Number) byte0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[8];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[0] = (Number) byte0;
      numberArray4[1] = (Number) byte0;
      numberArray4[2] = (Number) byte0;
      numberArray4[3] = (Number) byte0;
      numberArray4[4] = (Number) byte0;
      numberArray4[5] = (Number) byte0;
      numberArray4[6] = (Number) byte0;
      numberArray4[7] = (Number) byte0;
      numberArray0[3] = numberArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Requires 'samples' > 1", (String) null, numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, numberArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, Double.NEGATIVE_INFINITY);
      assertNotNull(range1);
      assertEquals(4, numberArray0.length);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 1;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("n'", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertEquals(1.0, number0);
      assertNotNull(number0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("w~VQXkZrCU8x;W", "w~VQXkZrCU8x;W", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(6, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("\"R/6w&/6m?c9rw`", "org.jfree.data.xy.YIntervalDataItem", doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      assertEquals(6, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xIntervalSeriesCollection0, (List) vector0, range0, true);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertNull(range1);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 296.6868);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(296.6868, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(296.6868, range2.getCentralValue(), 0.01);
      assertEquals(296.6868, range2.getUpperBound(), 0.01);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertTrue(number1.equals((Object)number0));
      assertEquals(0.0, number1);
      assertNotNull(number1);
      assertEquals(6, doubleArray0.length);
      
      Number number2 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertTrue(number2.equals((Object)number0));
      assertTrue(number2.equals((Object)number1));
      assertEquals(0.0, number2);
      assertNotNull(number2);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertNotNull(timeSeries0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      timeSeriesCollection0.fireSelectionEvent();
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 999;
      doubleArray1[1] = (double) 999;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 999;
      doubleArray1[4] = (double) 999;
      doubleArray1[5] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 999;
      doubleArray2[1] = (double) 0;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      Number[][] numberArray0 = new Number[6][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      
      List list0 = defaultIntervalCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(6, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      assertNull(range0);
      assertEquals(6, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertNotNull(timeSeries0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      timeSeriesCollection0.fireSelectionEvent();
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, 821.671);
      assertNull(timeSeriesDataItem0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(821.671, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(821.671, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertEquals(821.671, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(821.671, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(821.671, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, (Range) null, false);
      assertNull(range1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(821.671, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(821.671, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, linkedList0.size());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) double0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(821.671, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(821.671, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) defaultPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(timeTableXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      timeTableXYDataset0.addChangeListener(xYDatasetTableModel0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DomainOrder domainOrder0 = timeTableXYDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 1);
      assertEquals(0.0, double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = 3272.21173;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = 3272.21173;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 1800.0;
      doubleArray4[1] = (double) 1;
      doubleArray4[2] = 3272.21173;
      doubleArray4[3] = 3272.21173;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 0.0;
      doubleArray4[7] = 2371.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 1800.0;
      doubleArray5[1] = (double) 1;
      doubleArray5[2] = 2371.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = 3272.21173;
      doubleArray6[1] = 2371.0;
      doubleArray6[2] = 2885.58123;
      doubleArray6[3] = 2797.0;
      doubleArray6[4] = 1.5;
      doubleArray6[5] = 3272.21173;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = 0.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[9];
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      
      doubleArray9[0] = 2797.0;
      doubleArray9[1] = 1.5;
      doubleArray9[2] = 1800.0;
      doubleArray9[3] = 2371.0;
      doubleArray9[4] = 1.5;
      doubleArray9[5] = 2371.0;
      doubleArray9[6] = 1.5;
      doubleArray9[7] = 3272.21173;
      doubleArray9[8] = 2797.0;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "'";
      stringArray0[2] = "Null 'rowKeys' argument.";
      stringArray0[3] = "7<z0b*]$fx";
      stringArray0[4] = "Cannot parse string.";
      stringArray0[5] = "";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(6, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-22));
      assertEquals((byte) (-22), (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((byte) (-22)));
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte) (-22)));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-4));
      assertEquals((byte) (-4), (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((byte) (-4)));
      
      List list0 = defaultStatisticalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Byte byte1 = new Byte((byte) (-12));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-12), (byte)byte1);
      assertNotNull(byte1);
      
      boolean boolean0 = linkedList0.add(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte) (-12)));
      assertFalse(linkedList0.contains((byte) (-4)));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      assertNull(range0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte) (-12)));
      assertFalse(linkedList0.contains((byte) (-4)));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, false);
      assertNull(range1);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte) (-12)));
      assertFalse(linkedList0.contains((byte) (-4)));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      XYDataset xYDataset0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      numberArray0[3] = (Number) 999;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 999, 1021.4600917432973, 999, integer0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = (MockDate)millisecond0.getStart();
      assertNotSame(millisecond0, millisecond1);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotNull(mockDate0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1010.2300458716486, range0.getCentralValue(), 0.01);
      assertEquals(1021.9600917432973, range0.getUpperBound(), 0.01);
      assertEquals(23.460091743297312, range0.getLength(), 0.01);
      assertEquals(998.5, range0.getLowerBound(), 0.01);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-3125.545), 680.6800831363477);
      assertNotNull(lineFunction2D0);
      assertEquals(680.6800831363477, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-3125.545), lineFunction2D0.getIntercept(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      
      MatrixSeries matrixSeries0 = null;
      try {
        matrixSeries0 = new MatrixSeries("", 0, 999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      
      String string0 = month0.toString();
      assertEquals("February 2014", string0);
      assertNotNull(string0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      
      defaultStatisticalCategoryDataset0.add((double) 1, (double) 1, (Comparable) mockDate0, (Comparable) month0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (-79));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 1.5;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 1409.2697235866156;
      doubleArray2[4] = 3465.6;
      doubleArray2[5] = 1409.2697235866156;
      doubleArray2[6] = (-1789.8893750819);
      doubleArray2[7] = 708.74644763033;
      doubleArray1[4] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" 1_yTe+cQ.YACHYu", "0", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(3465.6, number0);
      assertNotNull(number0);
      assertEquals(5, doubleArray1.length);
      
      TimeSeries timeSeries0 = new TimeSeries("esN5&;", "C6IEcjK;g.ZC>wAo6G", "CwwLB3");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("C6IEcjK;g.ZC>wAo6G", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("CwwLB3", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("#l#{Y.GRmP|!");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("C6IEcjK;g.ZC>wAo6G", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("CwwLB3", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number1);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("C6IEcjK;g.ZC>wAo6G", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("CwwLB3", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(5, doubleArray1.length);
      assertEquals(5255.4893750819, range0.getLength(), 0.01);
      assertEquals((-1789.8893750819), range0.getLowerBound(), 0.01);
      assertEquals(837.85531245905, range0.getCentralValue(), 0.01);
      assertEquals(3465.6, range0.getUpperBound(), 0.01);
      
      Number number2 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertFalse(number2.equals((Object)number0));
      assertEquals((-1789.8893750819), number2);
      assertNotNull(number2);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = 937.905578;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      
      int int0 = defaultIntervalCategoryDataset0.indexOf(937.905578);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      
      int int1 = defaultIntervalCategoryDataset0.getColumnIndex(Double.NEGATIVE_INFINITY);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 937.905578);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(937.905578, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(937.905578, range1.getCentralValue(), 0.01);
      assertEquals(937.905578, range1.getUpperBound(), 0.01);
      
      Range range2 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertNotNull(range2);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      
      ArrayList<DefaultHighLowDataset> arrayList0 = new ArrayList<DefaultHighLowDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
      assertNull(range3);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      numberArray0[2] = (Number) 999;
      numberArray0[4] = (Number) 0;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, 680.6800831363477, 999, 0.0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(680.6800831363477, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(340.34004156817383, range0.getCentralValue(), 0.01);
      assertEquals(680.6800831363477, range0.getUpperBound(), 0.01);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(680.6800831363477, (-1.0));
      assertNotNull(lineFunction2D0);
      assertEquals(680.6800831363477, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertEquals((-0.5), (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Double double1 = new Double((-1.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(double0));
      
      boolean boolean0 = stack0.add((Double) 0.0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[0.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(0.0));
      assertFalse(stack0.contains(double0));
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, stack0, true);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[0.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(681.1800831363477, range2.getUpperBound(), 0.01);
      assertEquals(340.34004156817383, range2.getCentralValue(), 0.01);
      assertEquals(681.6800831363477, range2.getLength(), 0.01);
      assertEquals((-0.5), range2.getLowerBound(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertTrue(stack0.contains(0.0));
      assertFalse(stack0.contains(double0));
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertNotNull(range3);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(681.6800831363477, range3.getLength(), 0.01);
      assertEquals((-0.5), range3.getLowerBound(), 0.01);
      assertEquals(681.1800831363477, range3.getUpperBound(), 0.01);
      assertEquals(340.34004156817383, range3.getCentralValue(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, (-1068.2295566026164));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" 1_yTe+cQ.YACHYu", " 1_yTe+cQ.YACHYu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(6, doubleArray0.length);
      
      int int0 = 2;
      LineFunction2D lineFunction2D0 = new LineFunction2D(2, (-10.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-10.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(2.0, lineFunction2D0.getIntercept(), 0.01);
      
      XYDataset xYDataset0 = null;
      Double double0 = new Double(48.0);
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertEquals(48.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(48.0));
      
      boolean boolean0 = stack0.add(double0);
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[48.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(48.0));
      assertFalse(stack0.contains(number0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" 1_yTe+cQ.YACHYu", " 1_yTe+cQ.YACHYu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(9, doubleArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries("esN5&;", " 1_yTe+cQ.YACHYu", " 1_yTe+cQ.YACHYu");
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(" 1_yTe+cQ.YACHYu", timeSeries0.getDomainDescription());
      assertEquals(" 1_yTe+cQ.YACHYu", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("esN5&;");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(" 1_yTe+cQ.YACHYu", timeSeries0.getDomainDescription());
      assertEquals(" 1_yTe+cQ.YACHYu", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number1);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(" 1_yTe+cQ.YACHYu", timeSeries0.getDomainDescription());
      assertEquals(" 1_yTe+cQ.YACHYu", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertNotNull(defaultPieDataset0);
      assertEquals(9, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset1);
      assertEquals(9, doubleArray0.length);
      
      defaultPieDataset0.setSelectionState(defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(9, doubleArray0.length);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2347, 995);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(994, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2347;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 995;
      dynamicTimeSeriesCollection0.appendData(floatArray0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2347.0F, 2.0F, 0.0F, 995.0F}, floatArray0, 0.01F);
      assertEquals(994, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertNotNull(range0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(994, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((String) null, "a-:{", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Comparable<XYBarDataset>[] comparableArray0 = (Comparable<XYBarDataset>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[3] = (double) 968;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) fixedMillisecond0, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (-2264));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      numberArray0[2] = (Number) 999;
      numberArray0[3] = (Number) 999;
      numberArray0[4] = (Number) 0;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 999;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, 680.6800831363477, 999, 0.0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      MockDate mockDate0 = (MockDate)millisecond0.getStart();
      assertNotSame(millisecond0, millisecond1);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotNull(mockDate0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(680.6800831363477, range0.getLength(), 0.01);
      assertEquals(340.34004156817383, range0.getCentralValue(), 0.01);
      assertEquals(680.6800831363477, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(680.6800831363477, (-1.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals(680.6800831363477, lineFunction2D0.getIntercept(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(999.0, range1.getLowerBound(), 0.01);
      assertEquals(999.0, range1.getCentralValue(), 0.01);
      assertEquals(999.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertEquals((-0.5), (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Double double1 = new Double((-1.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains((-1.0)));
      
      boolean boolean0 = stack0.add((Double) 0.0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[0.0]", stack0.toString());
      assertFalse(stack0.contains((-1.0)));
      assertTrue(stack0.contains(0.0));
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, stack0, true);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[0.0]", stack0.toString());
      assertEquals((-0.5), range2.getLowerBound(), 0.01);
      assertEquals(681.1800831363477, range2.getUpperBound(), 0.01);
      assertEquals(340.34004156817383, range2.getCentralValue(), 0.01);
      assertEquals(681.6800831363477, range2.getLength(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertFalse(stack0.contains((-1.0)));
      assertTrue(stack0.contains(0.0));
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertTrue(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertNotNull(range3);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-0.5), range3.getLowerBound(), 0.01);
      assertEquals(681.6800831363477, range3.getLength(), 0.01);
      assertEquals(340.34004156817383, range3.getCentralValue(), 0.01);
      assertEquals(681.1800831363477, range3.getUpperBound(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range1));
      assertNotNull(range4);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(999.0, range4.getLowerBound(), 0.01);
      assertEquals(999.0, range4.getCentralValue(), 0.01);
      assertEquals(999.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      TableXYDataset tableXYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2198.3018510886;
      doubleArray1[1] = (-1502.0111101309008);
      doubleArray1[2] = (-1482.3111778434);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {2198.3018510886, (-1502.0111101309008), (-1482.3111778434)}, doubleArray1, 0.01);
      assertEquals(2, polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2301.7), 1.0, 45, (-1482.3111778434));
      assertNotNull(xYSeriesCollection0);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {2198.3018510886, (-1502.0111101309008), (-1482.3111778434)}, doubleArray1, 0.01);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {2198.3018510886, (-1502.0111101309008), (-1482.3111778434)}, doubleArray1, 0.01);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-2301.7), range0.getLowerBound(), 0.01);
      assertEquals((-1150.35), range0.getCentralValue(), 0.01);
      assertEquals(2302.7, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1482.3111778434), 630.5);
      assertNotNull(lineFunction2D0);
      assertEquals((-1482.3111778434), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(630.5, lineFunction2D0.getSlope(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {2198.3018510886, (-1502.0111101309008), (-1482.3111778434)}, doubleArray1, 0.01);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-7.849562710807584E9), range1.getLowerBound(), 0.01);
      assertEquals((-786.0204368857007), range1.getUpperBound(), 0.01);
      assertEquals(7.849561924787147E9, range1.getLength(), 0.01);
      assertEquals((-3.9247817484140105E9), range1.getCentralValue(), 0.01);
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertEquals((-2302.2), (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {2198.3018510886, (-1502.0111101309008), (-1482.3111778434)}, doubleArray1, 0.01);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Double double1 = new Double(3136.43215329);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(3136.43215329, (double)double1, 0.01);
      assertNotNull(double1);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(2198.3018510886));
      
      boolean boolean0 = stack0.add(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[3136.43215329]", stack0.toString());
      assertTrue(stack0.contains(3136.43215329));
      assertFalse(stack0.contains(2198.3018510886));
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(45));
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, arrayList0, false);
      assertNull(range2);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {2198.3018510886, (-1502.0111101309008), (-1482.3111778434)}, doubleArray1, 0.01);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(45));
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertNotNull(range3);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {2198.3018510886, (-1502.0111101309008), (-1482.3111778434)}, doubleArray1, 0.01);
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertEquals((-2301.7), range3.getLowerBound(), 0.01);
      assertEquals(2302.7, range3.getLength(), 0.01);
      assertEquals((-1150.35), range3.getCentralValue(), 0.01);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertTrue(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertNotNull(range4);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {2198.3018510886, (-1502.0111101309008), (-1482.3111778434)}, doubleArray1, 0.01);
      assertEquals((-786.0204368857007), range4.getUpperBound(), 0.01);
      assertEquals(7.849561924787147E9, range4.getLength(), 0.01);
      assertEquals((-3.9247817484140105E9), range4.getCentralValue(), 0.01);
      assertEquals((-7.849562710807584E9), range4.getLowerBound(), 0.01);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" 1_yTe+cQ.YACHYu", " 1_yTe+cQ.YACHYu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(6, doubleArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries("esN5&;", " 1_yTe+cQ.YACHYu", " 1_yTe+cQ.YACHYu");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(" 1_yTe+cQ.YACHYu", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(" 1_yTe+cQ.YACHYu", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("esN5&;");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(" 1_yTe+cQ.YACHYu", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(" 1_yTe+cQ.YACHYu", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number1);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(" 1_yTe+cQ.YACHYu", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(" 1_yTe+cQ.YACHYu", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(6, doubleArray0.length);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[1] = (Number) 999;
      numberArray0[2] = (Number) 999;
      numberArray0[4] = (Number) 0;
      Number[][] numberArray1 = new Number[1][9];
      numberArray1[0] = numberArray0;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray1);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, numberArray1.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 0);
      assertNotNull(defaultPieDataset0);
      assertEquals(1, numberArray1.length);
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.DESCENDING", sortOrder0.toString());
      
      int int0 = defaultCategoryDataset0.getColumnCount();
      assertEquals(6, int0);
      assertEquals(1, numberArray1.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertFalse(boolean0);
      assertEquals(1, numberArray1.length);
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(1, numberArray1.length);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer0.equals((Object)int0));
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 229);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(228, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate(984, 968, (-1382), (-1382), 968);
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Mon Sep 22 02:08:00 GMT 2960", mockDate0.toString());
      assertEquals(9, month0.getMonth());
      assertEquals(2960, month0.getYearValue());
      assertEquals(31264279680000L, month0.getFirstMillisecond());
      assertEquals(35529L, month0.getSerialIndex());
      assertEquals(31264279680000L, month0.getLastMillisecond());
      
      defaultStatisticalCategoryDataset0.add((-2157.677558555298), 567.9492098316, (Comparable) mockDate0, (Comparable) month0);
      assertEquals("Mon Sep 22 02:08:00 GMT 2960", mockDate0.toString());
      assertEquals(9, month0.getMonth());
      assertEquals(2960, month0.getYearValue());
      assertEquals(31264279680000L, month0.getFirstMillisecond());
      assertEquals(35529L, month0.getSerialIndex());
      assertEquals(31264279680000L, month0.getLastMillisecond());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, (-1382));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-1382), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) month0, 232.9883912, 981);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" 1_yTe+cQ.YACHYu", " 1_yTe+cQ.YACHYu", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(6, doubleArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries("esN5&;", " 1_yTe+cQ.YACHYu", " 1_yTe+cQ.YACHYu");
      assertNotNull(timeSeries0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(" 1_yTe+cQ.YACHYu", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(" 1_yTe+cQ.YACHYu", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("esN5&;");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(" 1_yTe+cQ.YACHYu", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(" 1_yTe+cQ.YACHYu", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number1);
      assertTrue(timeSeries0.getNotify());
      assertEquals(" 1_yTe+cQ.YACHYu", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(" 1_yTe+cQ.YACHYu", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      Number number2 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertTrue(number2.equals((Object)number0));
      assertEquals(0.0, number2);
      assertNotNull(number2);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      
      int int0 = defaultIntervalCategoryDataset0.indexOf((Comparable) null);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, Double.NEGATIVE_INFINITY);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Byte byte0 = new Byte((byte) (-10));
      assertEquals((byte) (-10), (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(byte0));
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byte0));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-397), (byte) (-10));
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-397), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-10), slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-17.374);
      doubleArray0[1] = 5239.984670138553;
      doubleArray0[2] = 3095.95489;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-17.374), 5239.984670138553, 3095.95489}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction2D0.getOrder());
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-829.081571077133), 505.377, 1216, 5239.984670138553);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate(984, 968, (-1382), 986, 968);
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Mon Dec 29 18:08:00 GMT 2960", mockDate0.toString());
      assertEquals(31272804480000L, month0.getFirstMillisecond());
      assertEquals(2960, month0.getYearValue());
      assertEquals(31272804480000L, month0.getLastMillisecond());
      assertEquals(35532L, month0.getSerialIndex());
      assertEquals(12, month0.getMonth());
      
      defaultStatisticalCategoryDataset0.add((-2157.677558555298), 567.9492098316, (Comparable) mockDate0, (Comparable) month0);
      assertEquals("Mon Dec 29 18:08:00 GMT 2960", mockDate0.toString());
      assertEquals(31272804480000L, month0.getFirstMillisecond());
      assertEquals(2960, month0.getYearValue());
      assertEquals(31272804480000L, month0.getLastMillisecond());
      assertEquals(35532L, month0.getSerialIndex());
      assertEquals(12, month0.getMonth());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(2157.677558555298, range0.getLength(), 0.01);
      assertEquals((-1078.838779277649), range0.getCentralValue(), 0.01);
      assertEquals((-2157.677558555298), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(month0);
      assertNotNull(timePeriodValues0);
      assertEquals("Mon Dec 29 18:08:00 GMT 2960", mockDate0.toString());
      assertEquals(31272804480000L, month0.getFirstMillisecond());
      assertEquals(2960, month0.getYearValue());
      assertEquals(31272804480000L, month0.getLastMillisecond());
      assertEquals(35532L, month0.getSerialIndex());
      assertEquals(12, month0.getMonth());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals("Mon Dec 29 18:08:00 GMT 2960", mockDate0.toString());
      assertEquals(31272804480000L, month0.getFirstMillisecond());
      assertEquals(2960, month0.getYearValue());
      assertEquals(31272804480000L, month0.getLastMillisecond());
      assertEquals(35532L, month0.getSerialIndex());
      assertEquals(12, month0.getMonth());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNull(range1);
      assertEquals("Mon Dec 29 18:08:00 GMT 2960", mockDate0.toString());
      assertEquals(31272804480000L, month0.getFirstMillisecond());
      assertEquals(2960, month0.getYearValue());
      assertEquals(31272804480000L, month0.getLastMillisecond());
      assertEquals(35532L, month0.getSerialIndex());
      assertEquals(12, month0.getMonth());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, false);
      assertNull(range2);
      assertEquals("Mon Dec 29 18:08:00 GMT 2960", mockDate0.toString());
      assertEquals(31272804480000L, month0.getFirstMillisecond());
      assertEquals(2960, month0.getYearValue());
      assertEquals(31272804480000L, month0.getLastMillisecond());
      assertEquals(35532L, month0.getSerialIndex());
      assertEquals(12, month0.getMonth());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries(":5Q/'E", 1, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Vector<Short> vector0 = new Vector<Short>(1800, (-482));
      assertNotNull(vector0);
      assertEquals(1800, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number1);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = 937.905578;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      
      int int0 = defaultIntervalCategoryDataset0.indexOf(937.905578);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 937.905578);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(937.905578, range1.getLowerBound(), 0.01);
      assertEquals(937.905578, range1.getCentralValue(), 0.01);
      assertEquals(937.905578, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = 937.905578;
      doubleArray1[2] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 1800;
      doubleArray0[1] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Byte byte0 = new Byte((byte)72);
      assertEquals((byte)72, (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(byte0));
      
      Byte byte1 = new Byte((byte)72);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)72, (byte)byte1);
      assertNotNull(byte1);
      
      boolean boolean0 = linkedList0.add(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byte0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Byte byte0 = new Byte((byte) (-10));
      assertEquals((byte) (-10), (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((byte) (-10)));
      
      Byte byte1 = new Byte((byte) (-63));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-63), (byte)byte1);
      assertNotNull(byte1);
      
      boolean boolean0 = linkedList0.add(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains((byte) (-10)));
      assertTrue(linkedList0.contains(byte1));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = timeSeriesCollection0.getDomainBounds(true);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) jDBCXYDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      assertNull(range1);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains((byte) (-10)));
      assertTrue(linkedList0.contains(byte1));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1800, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1800, matrixSeries0.getItemCount());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(1, doubleArray1.length);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      matrixSeries0.removeChangeListener(vectorSeriesCollection0);
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      TimeSeries timeSeries0 = new TimeSeries("", "", "esN5&;");
      assertNotNull(timeSeries0);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("esN5&;", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("esN5&;", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number1);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("esN5&;", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(1, doubleArray1.length);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(1, doubleArray1.length);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray1.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(1, doubleArray1.length);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1800, matrixSeries0.getItemCount());
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotNull(range2);
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0, 3195.815);
      assertNotNull(powerFunction2D0);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(3195.815, powerFunction2D0.getB(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 0.0, 2885.58123, (-437), "esN5&;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1800, 1);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "'['rr", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(2, doubleArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries("esN5&;", "Null 'rowKeys' argument.", "R3y#9T");
      assertNotNull(timeSeries0);
      assertEquals("R3y#9T", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Null 'rowKeys' argument.", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals("R3y#9T", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Null 'rowKeys' argument.", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number1);
      assertEquals("R3y#9T", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Null 'rowKeys' argument.", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotNull(defaultCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertEquals(0.0, double0, 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertNotSame(range1, range0);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[1] = (Number) 999;
      numberArray0[2] = (Number) 999;
      numberArray0[3] = (Number) 999;
      numberArray0[4] = (Number) 0;
      String string0 = null;
      Number[][] numberArray1 = new Number[1][9];
      numberArray1[0] = numberArray0;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray1);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, numberArray1.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 0);
      assertNotNull(defaultPieDataset0);
      assertEquals(1, numberArray1.length);
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.DESCENDING", sortOrder0.toString());
      
      int int0 = defaultCategoryDataset0.getColumnCount();
      assertEquals(6, int0);
      assertEquals(1, numberArray1.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertFalse(boolean0);
      assertEquals(1, numberArray1.length);
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(1, numberArray1.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, numberArray1.length);
      
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      MockDate mockDate0 = new MockDate(984, 984, (-1351), (-2442), 984);
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Fri Jan 08 22:24:00 GMT 2962", mockDate0.toString());
      assertEquals(35545L, month0.getSerialIndex());
      assertEquals(31305219840000L, month0.getFirstMillisecond());
      assertEquals(2962, month0.getYearValue());
      assertEquals(31305219840000L, month0.getLastMillisecond());
      assertEquals(1, month0.getMonth());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 984, 979);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(984, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(979, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      LinkedList<DefaultIntervalXYDataset> linkedList0 = new LinkedList<DefaultIntervalXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) linkedList0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 999;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 999;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("}\"&9%", "", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(3, doubleArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries(999.0, "Requires 'start' < 'end'.", "}\"&9%");
      assertNotNull(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("}\"&9%", timeSeries0.getRangeDescription());
      assertEquals("Requires 'start' < 'end'.", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("}\"&9%", timeSeries0.getRangeDescription());
      assertEquals("Requires 'start' < 'end'.", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("}\"&9%", timeSeries0.getRangeDescription());
      assertEquals("Requires 'start' < 'end'.", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Byte byte0 = new Byte((byte) (-10));
      assertEquals((byte) (-10), (byte)byte0);
      assertNotNull(byte0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (int) (byte) (-10));
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      GanttCategoryDataset ganttCategoryDataset0 = null;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 986, 984);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(984, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(986, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 3808, 1792);
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertNotNull(slidingGanttCategoryDataset1);
      assertEquals(984, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(986, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3808, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(1792, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      double[] doubleArray0 = new double[15];
      doubleArray0[1] = (double) 968;
      doubleArray0[2] = (double) (-2202);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-278), (-2396));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-2396), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-278), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, (-2202), 208);
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertNotNull(slidingGanttCategoryDataset1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-2396), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-278), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(208, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertEquals((-2202), slidingGanttCategoryDataset1.getFirstCategoryIndex());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, false);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-2396), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-278), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset1, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Byte byte0 = new Byte((byte) (-10));
      assertEquals((byte) (-10), (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((byte) (-10)));
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte) (-10)));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = timeSeriesCollection0.getDomainBounds(false);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) jDBCXYDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte) (-10)));
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2323.0382060345983;
      doubleArray1[1] = (-2.147483648E9);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("(`0qo6ngf`da", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(2323.0382060345983, number0);
      assertNotNull(number0);
      assertEquals(1, doubleArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries(2323.0382060345983, "(`0qo6ngf`da", "");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("(`0qo6ngf`da", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Null 'columnKeys' argument.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("(`0qo6ngf`da", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number1);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("(`0qo6ngf`da", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals((-2.147483648E9), range0.getLowerBound(), 0.01);
      assertEquals(2323.0382060345983, range0.getUpperBound(), 0.01);
      assertEquals(2.147485971038206E9, range0.getLength(), 0.01);
      assertEquals((-1.073740662480897E9), range0.getCentralValue(), 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(1, doubleArray0.length);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(2323.0382060345983, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Byte byte0 = new Byte((byte) (-10));
      assertEquals((byte) (-10), (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(byte0));
      
      boolean boolean0 = linkedList0.add((Byte) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(byte0));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = timeSeriesCollection0.getDomainBounds(false);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) jDBCXYDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      MockDate mockDate0 = new MockDate(984, 984, (-1351), (-2442), (-2442));
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Wed Jan 06 13:18:00 GMT 2962", mockDate0.toString());
      assertEquals(31305014280000L, month0.getLastMillisecond());
      assertEquals(2962, month0.getYearValue());
      assertEquals(35545L, month0.getSerialIndex());
      assertEquals(31305014280000L, month0.getFirstMillisecond());
      assertEquals(1, month0.getMonth());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(month0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals("Wed Jan 06 13:18:00 GMT 2962", mockDate0.toString());
      assertEquals(31305014280000L, month0.getLastMillisecond());
      assertEquals(2962, month0.getYearValue());
      assertEquals(35545L, month0.getSerialIndex());
      assertEquals(31305014280000L, month0.getFirstMillisecond());
      assertEquals(1, month0.getMonth());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      simpleHistogramDataset0.removeAllBins();
      assertEquals("Wed Jan 06 13:18:00 GMT 2962", mockDate0.toString());
      assertEquals(31305014280000L, month0.getLastMillisecond());
      assertEquals(2962, month0.getYearValue());
      assertEquals(35545L, month0.getSerialIndex());
      assertEquals(31305014280000L, month0.getFirstMillisecond());
      assertEquals(1, month0.getMonth());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNull(range0);
      assertEquals("Wed Jan 06 13:18:00 GMT 2962", mockDate0.toString());
      assertEquals(31305014280000L, month0.getLastMillisecond());
      assertEquals(2962, month0.getYearValue());
      assertEquals(35545L, month0.getSerialIndex());
      assertEquals(31305014280000L, month0.getFirstMillisecond());
      assertEquals(1, month0.getMonth());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
      assertNull(range1);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[15];
      doubleArray1[1] = (double) 968;
      doubleArray1[2] = (double) (-2202);
      doubleArray0[1] = doubleArray1;
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)57);
      assertEquals((byte)57, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte)57));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = timeSeriesCollection0.getDomainBounds(true);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      assertNull(range1);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte)57));
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = Byte.valueOf((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte)6));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, false);
      assertNull(range0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte)6));
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      mockDate0.setTime(4473L);
      assertEquals("Thu Jan 01 00:00:04 GMT 1970", mockDate0.toString());
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Thu Jan 01 00:00:04 GMT 1970", mockDate0.toString());
      assertEquals(4473L, month0.getLastMillisecond());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(1, month0.getMonth());
      assertEquals(4473L, month0.getFirstMillisecond());
      assertEquals(1970, month0.getYearValue());
      
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      assertNotNull(timeSeries0);
      assertEquals("Thu Jan 01 00:00:04 GMT 1970", mockDate0.toString());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (double) (byte)4);
      assertNull(timeSeriesDataItem0);
      assertEquals("Thu Jan 01 00:00:04 GMT 1970", mockDate0.toString());
      assertEquals(4473L, month0.getLastMillisecond());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(1, month0.getMonth());
      assertEquals(4473L, month0.getFirstMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(4.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(4.0, timeSeries0.getMaxY(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, true);
      assertNull(range1);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains((byte)4));
      assertTrue(linkedList0.contains((byte)6));
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate(984, 968, (-1351), (-2442), 968);
      assertNotNull(mockDate0);
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      
      Range range2 = Range.expandToInclude(range1, (-1545.6021));
      assertNotSame(range1, range0);
      assertSame(range1, range2);
      assertNotSame(range2, range0);
      assertSame(range2, range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) linkedList0, range0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "P6jNfXN\"3MX&*^<;";
      int int0 = 1800;
      int int1 = 1;
      MatrixSeries matrixSeries0 = new MatrixSeries("P6jNfXN\"3MX&*^<;", 1800, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1800, matrixSeries0.getItemCount());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1800, matrixSeries0.getItemCount());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number[] numberArray0 = new Number[8];
      Integer integer0 = Integer.valueOf(1);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      numberArray0[6] = (Number) integer0;
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(200, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(400, (int)integer2);
      assertNotNull(integer2);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(1800, matrixSeries0.getItemCount());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1800, matrixSeries0.getItemCount());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(899.5, range0.getCentralValue(), 0.01);
      assertEquals(1799.0, range0.getUpperBound(), 0.01);
      assertEquals(1799.0, range0.getLength(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      assertFalse(boolean0);
      assertEquals(1800, matrixSeries0.getItemCount());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("P6jNfXN\"3MX&*^<;", "P6jNfXN\"3MX&*^<;", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      numberArray0[2] = (Number) 999;
      numberArray0[3] = (Number) 999;
      numberArray0[4] = (Number) 0;
      Number[] numberArray1 = new Number[2];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      String string0 = null;
      Number[][] numberArray2 = new Number[1][9];
      numberArray2[0] = numberArray0;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray2);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, numberArray2.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 0);
      assertNotNull(defaultPieDataset0);
      assertEquals(1, numberArray2.length);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertFalse(boolean0);
      assertEquals(1, numberArray2.length);
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(1, numberArray2.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, numberArray2.length);
      
      TimeSeries timeSeries0 = null;
      try {
        timeSeries0 = new TimeSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      double[][] doubleArray0 = new double[3][2];
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      defaultKeyedValuesDataset0.sortByValues(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.clear();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 6);
      comparableArray0[0] = (Comparable<Double>) millisecond0;
      comparableArray0[1] = (Comparable<Double>) millisecond1;
      comparableArray0[2] = (Comparable<Double>) millisecond0;
      comparableArray0[3] = (Comparable<Double>) millisecond0;
      comparableArray0[4] = (Comparable<Double>) millisecond0;
      comparableArray0[5] = (Comparable<Double>) millisecond1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-1382), (-3064), 1799, (-1382), 1776);
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Sat Jun 08 15:36:00 GMT 267", mockDate0.toString());
      assertEquals(3210L, month0.getSerialIndex());
      assertEquals(267, month0.getYearValue());
      assertEquals((-53727783840000L), month0.getFirstMillisecond());
      assertEquals((-53727783840000L), month0.getLastMillisecond());
      assertEquals(6, month0.getMonth());
      
      long long0 = mockDate0.getTime();
      assertEquals((-53727783840000L), long0);
      assertEquals("Sat Jun 08 15:36:00 GMT 267", mockDate0.toString());
      
      defaultStatisticalCategoryDataset0.add((-1.0), (-1.0), (Comparable) month0, (Comparable) month0);
      assertEquals("Sat Jun 08 15:36:00 GMT 267", mockDate0.toString());
      assertEquals(3210L, month0.getSerialIndex());
      assertEquals(267, month0.getYearValue());
      assertEquals((-53727783840000L), month0.getFirstMillisecond());
      assertEquals((-53727783840000L), month0.getLastMillisecond());
      assertEquals(6, month0.getMonth());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-0.5), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNull(range1);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = (DefaultIntervalCategoryDataset)defaultIntervalCategoryDataset0.clone();
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertNotNull(defaultIntervalCategoryDataset1);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset1.getColumnCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      DefaultIntervalXYDataset defaultIntervalXYDataset1 = new DefaultIntervalXYDataset();
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      assertNotNull(defaultIntervalXYDataset1);
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      
      SeriesChangeType seriesChangeType0 = SeriesChangeType.UPDATE;
      assertNotNull(seriesChangeType0);
      assertEquals("SeriesChangeType.UPDATE", seriesChangeType0.toString());
      
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, (-864), 2122);
      assertNotNull(seriesChangeInfo0);
      assertEquals("SeriesChangeType.UPDATE", seriesChangeType0.toString());
      assertEquals((-864), seriesChangeInfo0.getIndex1());
      assertEquals(2122, seriesChangeInfo0.getIndex2());
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultIntervalXYDataset1, seriesChangeInfo0);
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      assertNotNull(seriesChangeEvent0);
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertEquals("SeriesChangeType.UPDATE", seriesChangeType0.toString());
      assertEquals((-864), seriesChangeInfo0.getIndex1());
      assertEquals(2122, seriesChangeInfo0.getIndex2());
      
      defaultIntervalXYDataset0.seriesChanged(seriesChangeEvent0);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset1);
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset0);
      assertTrue(defaultIntervalXYDataset0.equals((Object)defaultIntervalXYDataset1));
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertEquals("SeriesChangeType.UPDATE", seriesChangeType0.toString());
      assertEquals((-864), seriesChangeInfo0.getIndex1());
      assertEquals(2122, seriesChangeInfo0.getIndex2());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, true);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset1);
      assertTrue(defaultIntervalXYDataset0.equals((Object)defaultIntervalXYDataset1));
      assertNull(range1);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset1, (-1856));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      numberArray0[2] = (Number) 999;
      numberArray0[3] = (Number) 999;
      numberArray0[4] = (Number) 0;
      Number[][] numberArray1 = new Number[1][9];
      numberArray1[0] = numberArray0;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray1);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, numberArray1.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 1499);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1499, Size: 6
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 999;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 999;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 999;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 999;
      doubleArray2[6] = (double) 999;
      doubleArray2[7] = (double) 999;
      doubleArray2[8] = (double) 999;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("}\"&9%", "}\"&9%", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(999.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(3, doubleArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries(0.0, "}\"&9%", (String) null);
      assertNotNull(timeSeries0);
      assertEquals("}\"&9%", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      Double double1 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(3, doubleArray0.length);
      
      LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(499.5, range0.getCentralValue(), 0.01);
      assertEquals(999.0, range0.getUpperBound(), 0.01);
      assertEquals(999.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) linkedList0, range0, false);
      assertNull(range1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(499.5, range0.getCentralValue(), 0.01);
      assertEquals(999.0, range0.getUpperBound(), 0.01);
      assertEquals(999.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" 1_yTe+cQYACHYu", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(6, doubleArray0.length);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      List list0 = jDBCCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List list1 = jDBCCategoryDataset0.getColumnKeys();
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (byte) (-10);
      doubleArray3[1] = (double) (byte) (-10);
      doubleArray3[2] = (double) (byte) (-10);
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("^RKIl@5m", "H/p9fia8|H}2--", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(3, doubleArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries("^RKIl@5m", "#[x+QA|[`", "");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("#[x+QA|[`", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("#[x+QA|[`", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number1);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("#[x+QA|[`", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals((-10.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-10.0), range0.getLowerBound(), 0.01);
      assertEquals((-10.0), range0.getCentralValue(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (int) (byte) (-10));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 999;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 999;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 999;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 999;
      doubleArray2[6] = (double) 999;
      doubleArray2[7] = (double) 999;
      doubleArray2[8] = (double) 999;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("}\"&9%", "}\"&9%", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(999.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(3, doubleArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries(0.0, "}\"&9%", (String) null);
      assertNotNull(timeSeries0);
      assertEquals("}\"&9%", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals("}\"&9%", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(999.0, range0.getLength(), 0.01);
      assertEquals(499.5, range0.getCentralValue(), 0.01);
      assertEquals(999.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(1.5, (-1593.62959413), "EW>PGwdt.aS)M2]T");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-4325.17311), 1722.0, "Null 'rowData' argument.");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(4326.67311, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset1 = (CategoryTableXYDataset)categoryTableXYDataset0.clone();
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertNotNull(categoryTableXYDataset1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(4326.67311, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(4326.67311, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-4325.17311));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(4326.67311, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-2603.1731099999997), range0.getUpperBound(), 0.01);
      assertEquals((-5918.802704129999), range0.getLowerBound(), 0.01);
      assertEquals(3315.6295941299995, range0.getLength(), 0.01);
      assertEquals((-4260.9879070649995), range0.getCentralValue(), 0.01);
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertEquals(2164.836555, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(4326.67311, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(range1, range0);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(4326.67311, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1593.62959413), range1.getLowerBound(), 0.01);
      assertEquals(64.185202935, range1.getCentralValue(), 0.01);
      assertEquals(3315.62959413, range1.getLength(), 0.01);
      assertEquals(1722.0, range1.getUpperBound(), 0.01);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      assertFalse(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(4326.67311, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(4326.67311, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(8653.34622, range2.getLength(), 0.01);
      assertEquals((-6488.509665), range2.getLowerBound(), 0.01);
      assertEquals((-2161.836555), range2.getCentralValue(), 0.01);
      assertEquals(2164.836555, range2.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer1);
      assertNotNull(integer1);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultWindDataset0);
      assertNull(number0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultWindDataset0);
      assertNull(range0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultWindDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultWindDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultWindDataset0, (List) null, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries(":5Q/'E", 1, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      SynthPanelUI synthPanelUI0 = new SynthPanelUI();
      assertNotNull(synthPanelUI0);
      
      matrixSeries0.removePropertyChangeListener(synthPanelUI0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      
      Vector<Short> vector0 = new Vector<Short>(1, 1900);
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(1, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      assertFalse(boolean0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertFalse(number1.equals((Object)number0));
      assertEquals(Double.NaN, number1);
      assertNotNull(number1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 999;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 999;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 999;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 999;
      doubleArray2[6] = (double) 999;
      doubleArray2[7] = (double) 999;
      doubleArray2[8] = (double) 999;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("}\"&9%", "}\"&9%", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(999.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(3, doubleArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries(0.0, "}\"&9%", (String) null);
      assertNotNull(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("}\"&9%", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("}\"&9%", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("}\"&9%", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(999.0, range0.getUpperBound(), 0.01);
      assertEquals(499.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(999.0, range0.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) 999.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Object object0 = defaultStatisticalCategoryDataset0.clone();
      assertNotSame(defaultStatisticalCategoryDataset0, object0);
      assertNotSame(object0, defaultStatisticalCategoryDataset0);
      assertTrue(object0.equals((Object)defaultStatisticalCategoryDataset0));
      assertNotNull(object0);
      
      MockDate mockDate0 = new MockDate(984, 968, (-1351), (-2442), 968);
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Mon Sep 08 22:08:00 GMT 2960", mockDate0.toString());
      assertEquals(9, month0.getMonth());
      assertEquals(2960, month0.getYearValue());
      assertEquals(31263142080000L, month0.getLastMillisecond());
      assertEquals(35529L, month0.getSerialIndex());
      assertEquals(31263142080000L, month0.getFirstMillisecond());
      
      defaultStatisticalCategoryDataset0.add((-2157.677558555298), 567.9492098316, (Comparable) mockDate0, (Comparable) month0);
      assertNotSame(defaultStatisticalCategoryDataset0, object0);
      assertFalse(defaultStatisticalCategoryDataset0.equals((Object)object0));
      assertEquals("Mon Sep 08 22:08:00 GMT 2960", mockDate0.toString());
      assertEquals(9, month0.getMonth());
      assertEquals(2960, month0.getYearValue());
      assertEquals(31263142080000L, month0.getLastMillisecond());
      assertEquals(35529L, month0.getSerialIndex());
      assertEquals(31263142080000L, month0.getFirstMillisecond());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = new Range((-1351), 984);
      assertNotNull(range0);
      assertEquals(2335.0, range0.getLength(), 0.01);
      assertEquals((-1351.0), range0.getLowerBound(), 0.01);
      assertEquals(984.0, range0.getUpperBound(), 0.01);
      assertEquals((-183.5), range0.getCentralValue(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 999;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 999;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 999;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 999;
      doubleArray2[6] = (double) 999;
      doubleArray2[7] = (double) 999;
      doubleArray2[8] = (double) 999;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("}\"&9%", "}\"&9%", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(999.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(3, doubleArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries(0.0, "}\"&9%", (String) null);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals("}\"&9%", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals("}\"&9%", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals("}\"&9%", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(499.5, range0.getCentralValue(), 0.01);
      assertEquals(999.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(999.0, range0.getLength(), 0.01);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 0);
      assertNotNull(defaultPieDataset0);
      assertEquals(3, doubleArray0.length);
      
      double double1 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals(999.0, double1, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      double[][] doubleArray0 = new double[6][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 147.344324;
      doubleArray1[1] = 1526.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 147.344324;
      doubleArray2[1] = 1526.0;
      doubleArray2[2] = 147.344324;
      doubleArray2[3] = 1526.0;
      doubleArray2[4] = 1526.0;
      doubleArray2[5] = 1526.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-734.0914);
      doubleArray3[1] = 1526.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-734.0914);
      doubleArray5[1] = 1526.0;
      doubleArray5[2] = 147.344324;
      doubleArray5[3] = (-734.0914);
      doubleArray5[4] = 147.344324;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = 1526.0;
      doubleArray6[1] = 1526.0;
      doubleArray6[2] = 1526.0;
      doubleArray6[3] = 1526.0;
      doubleArray6[4] = (-734.0914);
      doubleArray6[5] = 1526.0;
      doubleArray6[6] = 2496.0462382;
      doubleArray6[7] = 1526.0;
      doubleArray6[8] = 1526.0;
      doubleArray0[5] = doubleArray6;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "/1dQ$1", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertEquals(3080.9085999999998, range0.getCentralValue(), 0.01);
      assertEquals(7630.0, range0.getUpperBound(), 0.01);
      assertEquals(9098.1828, range0.getLength(), 0.01);
      assertEquals((-1468.1828), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = timeSeriesCollection0.getDomainBounds(true);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1496, 7);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1496, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(7, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      List list0 = slidingGanttCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1496, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(7, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1496, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(7, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      Byte byte0 = new Byte((byte) (-10));
      assertEquals((byte) (-10), (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(byte0));
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byte0));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = timeSeriesCollection0.getDomainBounds(false);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) jDBCXYDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(996, 2000, fixedMillisecond0, timeZone0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1999, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1999, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 2000;
      doubleArray2[1] = (double) 2000;
      doubleArray2[2] = (double) 2000;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = (double) 2;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 1;
      doubleArray2[7] = (double) 0;
      doubleArray2[8] = (-313.332269);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 1;
      doubleArray4[1] = (double) 2;
      doubleArray4[2] = (double) 2000;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 1.0;
      doubleArray5[1] = (double) 0;
      doubleArray5[2] = 1.0;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("l</x)qnMXbymFN6pzaA", (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1843.8338655, range0.getCentralValue(), 0.01);
      assertEquals(4314.332269, range0.getLength(), 0.01);
      assertEquals((-313.332269), range0.getLowerBound(), 0.01);
      assertEquals(4001.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      numberArray0[2] = (Number) 999;
      numberArray0[3] = (Number) 999;
      numberArray0[4] = (Number) 0;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 999;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, 680.6800831363477, 999, 0.0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(340.34004156817383, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(680.6800831363477, range0.getUpperBound(), 0.01);
      assertEquals(680.6800831363477, range0.getLength(), 0.01);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), (-1.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(999.0, range1.getCentralValue(), 0.01);
      assertEquals(999.0, range1.getLowerBound(), 0.01);
      assertEquals(999.0, range1.getUpperBound(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertEquals((-0.5), (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Double double1 = new Double((-1.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains((-1.0)));
      
      boolean boolean0 = stack0.add((Double) 0.0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertTrue(stack0.contains(0.0));
      assertFalse(stack0.contains((-1.0)));
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, stack0, true);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertEquals(681.1800831363477, range2.getUpperBound(), 0.01);
      assertEquals((-0.5), range2.getLowerBound(), 0.01);
      assertEquals(340.34004156817383, range2.getCentralValue(), 0.01);
      assertEquals(681.6800831363477, range2.getLength(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertTrue(stack0.contains(0.0));
      assertFalse(stack0.contains((-1.0)));
      
      // Undeclared exception!
      try { 
        Year.parseYear((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.Year", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      MockDate mockDate0 = new MockDate((-2442), 732, 968, (-5), 732);
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Sat Aug 25 07:12:00 GMT 480", mockDate0.toString());
      assertEquals(8, month0.getMonth());
      assertEquals(480, month0.getYearValue());
      assertEquals((-77263001280000L), month0.getLastMillisecond());
      assertEquals((-77263001280000L), month0.getFirstMillisecond());
      assertEquals(5768L, month0.getSerialIndex());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(mockDate0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals("Sat Aug 25 07:12:00 GMT 480", mockDate0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNull(range0);
      assertEquals("Sat Aug 25 07:12:00 GMT 480", mockDate0.toString());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.NaN);
      assertNull(range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries(":5Q/'E", 1800, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1800, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1800, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Vector<Short> vector0 = new Vector<Short>(213, 206);
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(213, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Number[] numberArray0 = new Number[8];
      Integer integer0 = Integer.valueOf((-3000));
      assertEquals((-3000), (int)integer0);
      assertNotNull(integer0);
      
      numberArray0[0] = (Number) integer0;
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(200, (int)integer1);
      assertNotNull(integer1);
      
      numberArray0[1] = (Number) integer1;
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(400, (int)integer2);
      assertNotNull(integer2);
      
      numberArray0[2] = (Number) integer2;
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, false);
      assertNull(range0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(213, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = Byte.valueOf((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, (double) (-2442));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      double[][] doubleArray0 = new double[5][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-431.806104963586);
      doubleArray1[1] = 576.866;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 576.866;
      doubleArray2[1] = (-431.806104963586);
      doubleArray2[2] = 576.866;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-112.8307614672);
      doubleArray4[1] = (-431.806104963586);
      doubleArray4[2] = 576.866;
      doubleArray4[3] = 576.866;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = timeSeriesCollection0.getDomainBounds(false);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (-966.2147231994);
      doubleArray1[3] = (double) 999;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-966.2147231994);
      doubleArray2[1] = (double) 999;
      doubleArray2[2] = (double) 999;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Requires 'start' < 'end'.", "Requires 'start' < 'end'.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(999.0, number0);
      assertNotNull(number0);
      assertEquals(2, doubleArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries(999.0, "l (/V8-lzU>kdJ", " ;ShJy");
      assertNotNull(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(" ;ShJy", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("l (/V8-lzU>kdJ", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      
      TimeSeries timeSeries1 = new TimeSeries(millisecond0, "a(gb`Bq/:ehKPl2UNN", "l (/V8-lzU>kdJ");
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotNull(timeSeries1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals("a(gb`Bq/:ehKPl2UNN", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertNull(timeSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("l (/V8-lzU>kdJ", timeSeries1.getRangeDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries1, (TimeZone) null);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertNotNull(timeSeriesCollection1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals("a(gb`Bq/:ehKPl2UNN", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertNull(timeSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("l (/V8-lzU>kdJ", timeSeries1.getRangeDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertNull(number1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals("a(gb`Bq/:ehKPl2UNN", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertNull(timeSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("l (/V8-lzU>kdJ", timeSeries1.getRangeDescription());
      assertTrue(timeSeries1.getNotify());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection1.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(2, doubleArray0.length);
      assertEquals(16.392638400299973, range1.getCentralValue(), 0.01);
      assertEquals(1965.2147231994, range1.getLength(), 0.01);
      assertEquals((-966.2147231994), range1.getLowerBound(), 0.01);
      assertEquals(999.0, range1.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      numberArray0[2] = (Number) 999;
      numberArray0[3] = (Number) 999;
      numberArray0[4] = (Number) 0;
      Number[] numberArray1 = new Number[2];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[1] = (Number) 999;
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 999;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      
      List list0 = defaultIntervalCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, list0.size());
      assertFalse(list0.isEmpty());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (double) 0);
      assertNotNull(range0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Vector<Double> vector0 = new Vector<Double>(0);
      assertNotNull(vector0);
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Double double0 = new Double((-1774.9546));
      assertEquals((-1774.9546), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = vector0.add(double0);
      assertTrue(boolean0);
      assertEquals("[-1774.9546]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(1, vector0.capacity());
      assertTrue(vector0.contains(double0));
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 344);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      double[][] doubleArray0 = new double[7][8];
      Vector<Short> vector0 = new Vector<Short>(1355, 354);
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1355, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Integer integer0 = Integer.valueOf(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(200, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(400, (int)integer2);
      assertNotNull(integer2);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(histogramDataset0);
      assertNull(number0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) histogramDataset0);
      assertNull(range0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) histogramDataset0);
      assertTrue(boolean0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = timeSeriesCollection0.getDomainBounds(false);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertNotNull(taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      
      MockDate mockDate0 = new MockDate((-915L));
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(12, month0.getMonth());
      assertEquals(23640L, month0.getSerialIndex());
      assertEquals(1969, month0.getYearValue());
      assertEquals((-915L), month0.getFirstMillisecond());
      assertEquals((-915L), month0.getLastMillisecond());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) jDBCXYDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertNull(range2);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      Integer integer0 = new Integer(999);
      assertEquals(999, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 999;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, 680.6800831363477, 999, 0.0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate(3017L);
      assertNotNull(mockDate0);
      
      mockDate0.setTime(1768L);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1, month0.getMonth());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(1768L, month0.getLastMillisecond());
      assertEquals(1768L, month0.getFirstMillisecond());
      assertEquals(1970, month0.getYearValue());
      
      TimeSeries timeSeries0 = new TimeSeries(999.0, "J", "J");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("J", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("J", timeSeries0.getRangeDescription());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, 1526.0);
      assertNull(timeSeriesDataItem0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1, month0.getMonth());
      assertEquals(23641L, month0.getSerialIndex());
      assertEquals(1768L, month0.getLastMillisecond());
      assertEquals(1768L, month0.getFirstMillisecond());
      assertEquals(1970, month0.getYearValue());
      assertEquals(1526.0, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1526.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("J", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("J", timeSeries0.getRangeDescription());
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      assertEquals(999.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Double double1 = (Double)DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-0.5), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Vector<Short> vector0 = new Vector<Short>(1756, 1756);
      assertNotNull(vector0);
      assertEquals(1756, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(400, (int)integer1);
      assertNotNull(integer1);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultWindDataset0);
      assertNull(number0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultWindDataset0);
      assertNull(range0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultWindDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(jDBCXYDataset0);
      assertNull(number1);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      numberArray0[2] = (Number) 999;
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 999;
      doubleArray1[2] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 999;
      doubleArray2[1] = (double) 999;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 999;
      doubleArray3[2] = (double) 999;
      doubleArray3[3] = (double) 999;
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (double) 999;
      doubleArray3[6] = (double) 999;
      doubleArray3[7] = (-3997.226);
      doubleArray3[8] = (double) 0;
      doubleArray0[2] = doubleArray3;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("_8\"9np", "cb4b4", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2497.5, range0.getCentralValue(), 0.01);
      assertEquals(4995.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(4995.0, range0.getLength(), 0.01);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(3, doubleArray0.length);
      assertEquals(2497.5, range0.getCentralValue(), 0.01);
      assertEquals(4995.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(4995.0, range0.getLength(), 0.01);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries(":5Q/'E", 1, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Vector<Short> vector0 = new Vector<Short>(1, 1900);
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, vector0.capacity());
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number1);
      
      Number number2 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertFalse(number2.equals((Object)number0));
      assertEquals(Double.NaN, number2);
      assertNotNull(number2);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = timeSeriesCollection0.getDomainBounds(false);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 756, 999);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(756, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(999, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(756, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(999, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) linkedList0, true);
      assertNull(range1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(756, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(999, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      List list0 = jDBCCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List list1 = jDBCCategoryDataset0.getColumnKeys();
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Vector<Short> vector0 = new Vector<Short>(1756, 1772);
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(1756, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Integer integer0 = Integer.valueOf(206);
      assertEquals(206, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(200, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(400, (int)integer2);
      assertNotNull(integer2);
      
      XYSeries xYSeries0 = new XYSeries(integer1);
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(xYSeries0);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      
      XYSeries xYSeries1 = xYSeries0.createCopy(3632, (-506));
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeries1);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      
      List list2 = xYSeries1.getItems();
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertNotNull(list2);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeriesCollection0);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNull(range0);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, 1756);
      assertNotNull(pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNull(range1);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate(984, 968, (-1351), (-2442), 968);
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Mon Sep 08 22:08:00 GMT 2960", mockDate0.toString());
      assertEquals(35529L, month0.getSerialIndex());
      assertEquals(2960, month0.getYearValue());
      assertEquals(31263142080000L, month0.getFirstMillisecond());
      assertEquals(31263142080000L, month0.getLastMillisecond());
      assertEquals(9, month0.getMonth());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(month0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals("Mon Sep 08 22:08:00 GMT 2960", mockDate0.toString());
      assertEquals(35529L, month0.getSerialIndex());
      assertEquals(2960, month0.getYearValue());
      assertEquals(31263142080000L, month0.getFirstMillisecond());
      assertEquals(31263142080000L, month0.getLastMillisecond());
      assertEquals(9, month0.getMonth());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0);
      assertNull(range0);
      assertEquals("Mon Sep 08 22:08:00 GMT 2960", mockDate0.toString());
      assertEquals(35529L, month0.getSerialIndex());
      assertEquals(2960, month0.getYearValue());
      assertEquals(31263142080000L, month0.getFirstMillisecond());
      assertEquals(31263142080000L, month0.getLastMillisecond());
      assertEquals(9, month0.getMonth());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) simpleHistogramDataset0);
      assertTrue(boolean0);
      assertEquals("Mon Sep 08 22:08:00 GMT 2960", mockDate0.toString());
      assertEquals(35529L, month0.getSerialIndex());
      assertEquals(2960, month0.getYearValue());
      assertEquals(31263142080000L, month0.getFirstMillisecond());
      assertEquals(31263142080000L, month0.getLastMillisecond());
      assertEquals(9, month0.getMonth());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(simpleHistogramDataset0);
      assertNull(number0);
      assertEquals("Mon Sep 08 22:08:00 GMT 2960", mockDate0.toString());
      assertEquals(35529L, month0.getSerialIndex());
      assertEquals(2960, month0.getYearValue());
      assertEquals(31263142080000L, month0.getFirstMillisecond());
      assertEquals(31263142080000L, month0.getLastMillisecond());
      assertEquals(9, month0.getMonth());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      XYDataset xYDataset0 = null;
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-297));
      assertNotNull(pieDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      XYSeries xYSeries0 = new XYSeries(integer0);
      assertNotNull(xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      XYSeries xYSeries1 = xYSeries0.createCopy(978, (-3538));
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeries1);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      
      List list0 = xYSeries1.getItems();
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(list0);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNull(range0);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(boolean0);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(xYSeriesCollection0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(number1.equals((Object)number0));
      assertEquals(Double.NaN, number1);
      assertNotNull(number1);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      List list0 = jDBCCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List list1 = jDBCCategoryDataset0.getColumnKeys();
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Vector<Short> vector0 = new Vector<Short>(1756, 1772);
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1756, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Integer integer0 = Integer.valueOf(206);
      assertEquals(206, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(200, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(400, (int)integer2);
      assertNotNull(integer2);
      
      XYSeries xYSeries0 = new XYSeries(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      
      XYSeries xYSeries1 = xYSeries0.createCopy(3632, (-506));
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeries1);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      
      List list2 = xYSeries1.getItems();
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertNotNull(list2);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeriesCollection0);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNull(range0);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(boolean0);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(xYSeriesCollection0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(number1.equals((Object)number0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertEquals(Double.NaN, number1);
      assertNotNull(number1);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(xYSeries1.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries(":5Q/'E", 1800, 1);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1800, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Vector<Short> vector0 = new Vector<Short>(213, 206);
      assertNotNull(vector0);
      assertEquals(213, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Number[] numberArray0 = new Number[8];
      Integer integer0 = Integer.valueOf((-3000));
      assertEquals((-3000), (int)integer0);
      assertNotNull(integer0);
      
      numberArray0[0] = (Number) integer0;
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(200, (int)integer1);
      assertNotNull(integer1);
      
      numberArray0[1] = (Number) integer1;
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(400, (int)integer2);
      assertNotNull(integer2);
      
      numberArray0[2] = (Number) integer2;
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1799.0, range0.getLength(), 0.01);
      assertEquals(899.5, range0.getCentralValue(), 0.01);
      assertEquals(1799.0, range0.getUpperBound(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      assertFalse(boolean0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((-3000), 213);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals((-3000.0), normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(213.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-2222.263), (-296.194462), 206, double0);
      assertNotNull(xYSeries0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals((-3000.0), normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(213.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-296.19446199999993), xYSeries0.getMaxX(), 0.01);
      assertEquals(1.9158586536460483E-38, xYSeries0.getMinY(), 0.01);
      assertEquals(206, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2.384789537389427E-6, xYSeries0.getMaxY(), 0.01);
      assertEquals((-2222.263), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = jDBCCategoryDataset0.equals(object0);
      assertFalse(boolean0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      List list0 = jDBCCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List list1 = jDBCCategoryDataset0.getColumnKeys();
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Vector<Short> vector0 = new Vector<Short>(365, (-1755));
      assertNotNull(vector0);
      assertEquals(365, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Integer integer0 = Integer.valueOf(206);
      assertEquals(206, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(200, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(400, (int)integer2);
      assertNotNull(integer2);
      
      XYSeries xYSeries0 = new XYSeries(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertNotNull(xYSeries0);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      XYSeries xYSeries1 = xYSeries0.createCopy(957, (-1755));
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeries1);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(0, xYSeries1.getItemCount());
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertTrue(xYSeries1.getNotify());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeriesCollection0);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(0, xYSeries1.getItemCount());
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(0, xYSeries1.getItemCount());
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNull(range0);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(0, xYSeries1.getItemCount());
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(boolean1 == boolean0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(boolean1);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(0, xYSeries1.getItemCount());
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNull(range1);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertEquals(0, xYSeries1.getItemCount());
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      numberArray0[2] = (Number) 999;
      numberArray0[3] = (Number) 999;
      numberArray0[4] = (Number) 0;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 999;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, 680.6800831363477, 999, 0.0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(680.6800831363477, range0.getUpperBound(), 0.01);
      assertEquals(340.34004156817383, range0.getCentralValue(), 0.01);
      assertEquals(680.6800831363477, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), (-1.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(999.0, range1.getLowerBound(), 0.01);
      assertEquals(999.0, range1.getCentralValue(), 0.01);
      assertEquals(999.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertEquals((-0.5), (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Double double1 = new Double((-1.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(double1));
      
      boolean boolean0 = stack0.add((Double) 0.0);
      assertTrue(boolean0);
      assertEquals("[0.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains(double1));
      assertTrue(stack0.contains(0.0));
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(xYSeriesCollection0, stack0, true);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("[0.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(340.34004156817383, range2.getCentralValue(), 0.01);
      assertEquals(681.1800831363477, range2.getUpperBound(), 0.01);
      assertEquals(681.6800831363477, range2.getLength(), 0.01);
      assertEquals((-0.5), range2.getLowerBound(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(stack0.contains(double1));
      assertTrue(stack0.contains(0.0));
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertNotNull(range3);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(681.6800831363477, range3.getLength(), 0.01);
      assertEquals(681.1800831363477, range3.getUpperBound(), 0.01);
      assertEquals(340.34004156817383, range3.getCentralValue(), 0.01);
      assertEquals((-0.5), range3.getLowerBound(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      assertNotNull(range4);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(999.0, range4.getLowerBound(), 0.01);
      assertEquals(999.0, range4.getCentralValue(), 0.01);
      assertEquals(999.0, range4.getUpperBound(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 0.0;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("cb4b4", "\u0005CAkbw", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(7, doubleArray1.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(7, doubleArray1.length);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(7, doubleArray1.length);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-2202), 968, (-1351), (-2442), 968);
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Sun Sep 08 22:08:00 GMT 227", mockDate0.toString());
      assertEquals(9, month0.getMonth());
      assertEquals(227, month0.getYearValue());
      assertEquals((-69277686720000L), month0.getLastMillisecond());
      assertEquals((-69277686720000L), month0.getFirstMillisecond());
      assertEquals(2733L, month0.getSerialIndex());
      
      defaultStatisticalCategoryDataset0.add((-2157.6775586), (-297.0), (Comparable) mockDate0, (Comparable) month0);
      assertEquals("Sun Sep 08 22:08:00 GMT 227", mockDate0.toString());
      assertEquals(9, month0.getMonth());
      assertEquals(227, month0.getYearValue());
      assertEquals((-69277686720000L), month0.getLastMillisecond());
      assertEquals((-69277686720000L), month0.getFirstMillisecond());
      assertEquals(2733L, month0.getSerialIndex());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-2157.6775586), range0.getLowerBound(), 0.01);
      assertEquals((-1078.8387793), range0.getCentralValue(), 0.01);
      assertEquals(2157.6775586, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(2157.6775586, range1.getLength(), 0.01);
      assertEquals((-1078.8387793), range1.getCentralValue(), 0.01);
      assertEquals((-2157.6775586), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = timeSeriesCollection0.getDomainBounds(true);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 999, 999);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(999, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(999, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(999, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(999, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, true);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(999, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(999, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
      assertNull(range2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      numberArray0[2] = (Number) 999;
      numberArray0[3] = (Number) 999;
      numberArray0[4] = (Number) 0;
      Number[] numberArray1 = new Number[2];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[1] = (Number) 999;
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 999;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (double) 0);
      assertNotNull(range0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      assertNotNull(dateFormatSymbols0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      assertNotNull(mockSimpleDateFormat0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockSimpleDateFormat0.getTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", zoneInfo0.getID());
      
      int int0 = zoneInfo0.getOffset((long) 0);
      assertEquals(0, int0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", zoneInfo0.getID());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(zoneInfo0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(""));
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, vector0, true);
      assertNull(range1);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(""));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1774, (-2662), millisecond0, zoneInfo0);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-2663), dynamicTimeSeriesCollection0.getNewestIndex());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, false);
      assertNull(range2);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1, (-1));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Vector<CategoryTableXYDataset> vector0 = new Vector<CategoryTableXYDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector0, true);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, (List) vector0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      List list0 = jDBCCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List list1 = jDBCCategoryDataset0.getColumnKeys();
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Vector<Short> vector0 = new Vector<Short>(365, (-1755));
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(365, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Integer integer0 = Integer.valueOf(206);
      assertEquals(206, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(200, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(400, (int)integer2);
      assertNotNull(integer2);
      
      XYSeries xYSeries0 = new XYSeries(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertNotNull(xYSeries0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      
      XYSeries xYSeries1 = xYSeries0.createCopy(957, (-1755));
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeries1);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeriesCollection0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNull(range0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(boolean0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries1.getMaxY(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(Double.NaN, xYSeries1.getMinX(), 0.01);
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(Double.NaN, xYSeries1.getMinY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries(":5Q/'E", 1800, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1800, matrixSeries0.getItemCount());
      
      matrixSeries0.setKey(":5Q/'E");
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1800, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      Byte byte0 = new Byte((byte) (-10));
      assertEquals((byte) (-10), (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(byte0));
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byte0));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = Range.combine((Range) null, (Range) null);
      assertNull(range1);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, false);
      assertNull(range2);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      numberArray0[2] = (Number) 999;
      numberArray0[3] = (Number) 999;
      numberArray0[4] = (Number) 0;
      Number[] numberArray1 = new Number[2];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[1] = (Number) 999;
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 999;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (double) 0);
      assertNotNull(range0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Vector<Double> vector0 = new Vector<Double>(0);
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      
      Double double0 = new Double((-1774.9546));
      assertEquals((-1774.9546), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = vector0.add(double0);
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[-1774.9546]", vector0.toString());
      assertEquals(1, vector0.capacity());
      assertTrue(vector0.contains(double0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (-1).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries(":5Q/'E", 1800, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1800, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1800, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1800, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Vector<Short> vector0 = new Vector<Short>(213, 206);
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(213, vector0.capacity());
      
      Number[] numberArray0 = new Number[8];
      Integer integer0 = Integer.valueOf((-3000));
      assertEquals((-3000), (int)integer0);
      assertNotNull(integer0);
      
      numberArray0[0] = (Number) integer0;
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(200, (int)integer1);
      assertNotNull(integer1);
      
      numberArray0[1] = (Number) integer1;
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(400, (int)integer2);
      assertNotNull(integer2);
      
      matrixSeries0.removeChangeListener(matrixSeriesCollection0);
      assertEquals(1800, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      numberArray0[2] = (Number) integer2;
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(1800, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1800, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1799.0, range0.getLength(), 0.01);
      assertEquals(899.5, range0.getCentralValue(), 0.01);
      assertEquals(1799.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      boolean boolean0 = matrixSeries0.isEmpty();
      assertFalse(boolean0);
      assertEquals(1800, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1800, matrixSeries0.getItemCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1800, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      numberArray0[2] = (Number) 999;
      numberArray0[3] = (Number) 999;
      numberArray0[4] = (Number) 0;
      Number[] numberArray1 = new Number[2];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[1] = (Number) 999;
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 999;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(13, (-430));
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-431), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0, true);
      assertNull(range0);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals((-431), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries(":5Q/'E", 1800, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Vector<Short> vector0 = new Vector<Short>(213, 206);
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(213, vector0.capacity());
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertEquals(1799.0, number0);
      assertNotNull(number0);
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DatasetGroup datasetGroup0 = defaultBoxAndWhiskerCategoryDataset0.getGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      timeTableXYDataset0.setGroup(datasetGroup0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("NOID", datasetGroup0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Vector<Double> vector0 = new Vector<Double>(1);
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(1, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      assertNull(number0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number1);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = Byte.valueOf((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byte0));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = timeSeriesCollection0.getDomainBounds(false);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1, (byte)81);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(81, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 1, (byte)6);
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertNotNull(slidingGanttCategoryDataset1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(81, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(6, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, true);
      assertNull(range1);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains((byte)81));
      assertTrue(linkedList0.contains(byte0));
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, true);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertNull(range2);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(81, slidingGanttCategoryDataset0.getMaximumCategoryCount());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Byte byte0 = new Byte((byte) (-10));
      assertEquals((byte) (-10), (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(byte0));
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byte0));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = timeSeriesCollection0.getDomainBounds(false);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Function2D function2D0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 19, (-1121.63207971674), (byte) (-10), byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      assertNotNull(timeSeries0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) 0);
      assertNull(timeSeriesDataItem0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, 1.5, 999, 0, millisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 999;
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, 680.6800831363477, 999, 0.0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      OHLCDataItem[] oHLCDataItemArray0 = null;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(millisecond0, (OHLCDataItem[]) null);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotNull(defaultOHLCDataset0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 60);
      assertNotNull(pieDataset0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 60;
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1793, 1793, 1914);
      assertNotNull(mockDate0);
      
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      assertNotNull(serialDate0);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals("Fri Aug 27 00:00:00 GMT 3847", mockDate0.toString());
      assertEquals(711367, serialDate0.toSerial());
      assertEquals(3847, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(27, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(8, serialDate0.getMonth());
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      SerialDate serialDate1 = SerialDate.addMonths((-2003), serialDate0);
      assertNotSame(serialDate0, serialDate1);
      assertNotSame(serialDate1, serialDate0);
      assertFalse(serialDate1.equals((Object)serialDate0));
      assertNotNull(serialDate1);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals("Fri Aug 27 00:00:00 GMT 3847", mockDate0.toString());
      assertEquals(711367, serialDate0.toSerial());
      assertEquals(3847, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(27, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(8, serialDate0.getMonth());
      assertEquals(3680, serialDate1.getYYYY());
      assertEquals(650404, serialDate1.toSerial());
      assertEquals(6, serialDate1.getDayOfWeek());
      assertNull(serialDate1.getDescription());
      assertEquals(27, serialDate1.getDayOfMonth());
      assertEquals(9, serialDate1.getMonth());
      
      SerialDate serialDate2 = serialDate0.getEndOfCurrentMonth(serialDate1);
      assertNotSame(serialDate0, serialDate1);
      assertNotSame(serialDate0, serialDate2);
      assertNotSame(serialDate1, serialDate0);
      assertNotSame(serialDate1, serialDate2);
      assertNotSame(serialDate2, serialDate1);
      assertNotSame(serialDate2, serialDate0);
      assertFalse(serialDate0.equals((Object)serialDate1));
      assertFalse(serialDate1.equals((Object)serialDate0));
      assertFalse(serialDate2.equals((Object)serialDate1));
      assertFalse(serialDate2.equals((Object)serialDate0));
      assertNotNull(serialDate2);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals("Fri Aug 27 00:00:00 GMT 3847", mockDate0.toString());
      assertEquals(711367, serialDate0.toSerial());
      assertEquals(3847, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(27, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(8, serialDate0.getMonth());
      assertEquals(3680, serialDate1.getYYYY());
      assertEquals(650404, serialDate1.toSerial());
      assertEquals(6, serialDate1.getDayOfWeek());
      assertNull(serialDate1.getDescription());
      assertEquals(27, serialDate1.getDayOfMonth());
      assertEquals(9, serialDate1.getMonth());
      assertEquals(30, serialDate2.getDayOfMonth());
      assertNull(serialDate2.getDescription());
      assertEquals(650407, serialDate2.toSerial());
      assertEquals(2, serialDate2.getDayOfWeek());
      assertEquals(9, serialDate2.getMonth());
      assertEquals(3680, serialDate2.getYYYY());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) serialDate0, (KeyedValues) defaultKeyedValues0);
      assertNotSame(serialDate0, serialDate1);
      assertNotSame(serialDate0, serialDate2);
      assertFalse(serialDate0.equals((Object)serialDate1));
      assertFalse(serialDate0.equals((Object)serialDate2));
      assertNotNull(categoryDataset0);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals("Fri Aug 27 00:00:00 GMT 3847", mockDate0.toString());
      assertEquals(711367, serialDate0.toSerial());
      assertEquals(3847, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(27, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(8, serialDate0.getMonth());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotSame(serialDate0, serialDate1);
      assertNotSame(serialDate0, serialDate2);
      assertFalse(serialDate0.equals((Object)serialDate1));
      assertFalse(serialDate0.equals((Object)serialDate2));
      assertNull(number0);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals("Fri Aug 27 00:00:00 GMT 3847", mockDate0.toString());
      assertEquals(711367, serialDate0.toSerial());
      assertEquals(3847, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(27, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(8, serialDate0.getMonth());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Object object0 = mockDate0.clone();
      assertNotSame(mockDate0, object0);
      assertNotSame(object0, mockDate0);
      assertTrue(object0.equals((Object)mockDate0));
      assertNotNull(object0);
      assertEquals("Fri Aug 27 00:00:00 GMT 3847", mockDate0.toString());
      assertEquals("Fri Aug 27 00:00:00 GMT 3847", object0.toString());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 1585);
      assertNotSame(mockDate0, object0);
      assertNotSame(serialDate0, serialDate1);
      assertNotSame(serialDate0, serialDate2);
      assertTrue(mockDate0.equals((Object)object0));
      assertFalse(serialDate0.equals((Object)serialDate1));
      assertFalse(serialDate0.equals((Object)serialDate2));
      assertNotNull(pieDataset0);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals("Fri Aug 27 00:00:00 GMT 3847", mockDate0.toString());
      assertEquals(711367, serialDate0.toSerial());
      assertEquals(3847, serialDate0.getYYYY());
      assertEquals(6, serialDate0.getDayOfWeek());
      assertEquals(27, serialDate0.getDayOfMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(8, serialDate0.getMonth());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 1900;
      doubleArray0[2] = (double) (-1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {7.0, 1900.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction2D0.getOrder());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 3, 3303.616334, 45, (-1.0));
      assertNotNull(xYSeries0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {7.0, 1900.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals((-4637002.847671599), xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(901712.7693138883, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(3303.616334, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(45, xYSeries0.getItemCount());
      assertEquals(3.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 1793, 361.97233, 4, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = Byte.valueOf((byte)81);
      assertEquals((byte)81, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte)81));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = timeSeriesCollection0.getDomainBounds(false);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1, 1);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, false);
      assertNull(range1);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte)81));
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, false);
      assertNull(range2);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1691L);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("+");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      Year year0 = new Year(mockDate0, timeZone0, locale0);
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1970, year0.getYear());
      assertEquals(1691L, year0.getFirstMillisecond());
      assertEquals("1970", year0.toString());
      assertEquals(1691L, year0.getLastMillisecond());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("+"));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) hashSet0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertNotNull(list0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(hashSet0.contains("+"));
      assertFalse(list0.contains("+"));
      
      Stack<Locale.LanguageRange> stack1 = new Stack<Locale.LanguageRange>();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("+"));
      
      String string0 = Locale.lookupTag(stack1, arrayList0);
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertNull(string0);
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("+"));
      
      Year year1 = (Year)year0.previous();
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertFalse(year1.equals((Object)year0));
      assertNotNull(year1);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1970, year0.getYear());
      assertEquals(1691L, year0.getFirstMillisecond());
      assertEquals("1970", year0.toString());
      assertEquals(1691L, year0.getLastMillisecond());
      assertEquals("1969", year1.toString());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1969L, year1.getSerialIndex());
      assertEquals(1969, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(locale_FilteringMode0);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertNull(range0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1545.6021), 1767.870643);
      assertNotNull(lineFunction2D0);
      assertEquals((-1545.6021), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1767.870643, lineFunction2D0.getSlope(), 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1691L;
      doubleArray0[1] = (double) 9999;
      doubleArray0[2] = (-1545.6021);
      doubleArray0[3] = (double) 9999;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1691.0, 9999.0, (-1545.6021), 9999.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-9999), 1691.0, 19, 9999.0);
      assertNotNull(xYSeries0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1691.0, 9999.0, (-1545.6021), 9999.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1691.0, xYSeries0.getMaxX(), 0.01);
      assertEquals((-9999.0), xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(4.834458561779049E13, xYSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-9.996155229237814E15), xYSeries0.getMinY(), 0.01);
      assertEquals(19, xYSeries0.getItemCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertNull(range1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      XYSeries xYSeries1 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1545.6021), 0.0, 14, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeries1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1691.0, 9999.0, (-1545.6021), 9999.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries1.getNotify());
      assertEquals(1691.0, xYSeries1.getMaxY(), 0.01);
      assertEquals((-3.692268534054856E13), xYSeries1.getMinY(), 0.01);
      assertEquals((-1545.6021), xYSeries1.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(14, xYSeries1.getItemCount());
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(0.0, xYSeries1.getMaxX(), 0.01);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertNull(range2);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertNull(range3);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      numberArray0[2] = (Number) 999;
      numberArray0[3] = (Number) 999;
      numberArray0[4] = (Number) 0;
      Number[] numberArray1 = new Number[2];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[1] = (Number) 999;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 999;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, 680.6800831363477, 999, 0.0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(680.6800831363477, range0.getUpperBound(), 0.01);
      assertEquals(340.34004156817383, range0.getCentralValue(), 0.01);
      assertEquals(680.6800831363477, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1.0), (-1.0));
      assertNotNull(lineFunction2D0);
      assertEquals((-1.0), lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1.0), lineFunction2D0.getSlope(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(999.0, range1.getLowerBound(), 0.01);
      assertEquals(999.0, range1.getCentralValue(), 0.01);
      assertEquals(999.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      assertEquals((-0.5), (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset("SLs1qKnN9", "SLs1qKnN9", "Could not find separator.", "SLs1qKnN9");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries(":5Q/'E", 1800, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1800, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1800, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Vector<Short> vector0 = new Vector<Short>(213, 206);
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(213, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Number[] numberArray0 = new Number[8];
      Integer integer0 = Integer.valueOf((-3000));
      assertEquals((-3000), (int)integer0);
      assertNotNull(integer0);
      
      numberArray0[0] = (Number) integer0;
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(200, (int)integer1);
      assertNotNull(integer1);
      
      numberArray0[1] = (Number) integer1;
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(400, (int)integer2);
      assertNotNull(integer2);
      
      numberArray0[2] = (Number) integer2;
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(1800, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      assertFalse(boolean0);
      assertEquals(1800, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertNotNull(taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection1, 213, (-531));
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(213, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-531), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, (-3000), 1800);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertNotNull(slidingGanttCategoryDataset1);
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(213, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-531), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1800, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertEquals((-3000), slidingGanttCategoryDataset1.getFirstCategoryIndex());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertNull(range0);
      assertEquals(0, vector0.size());
      assertEquals(213, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      JDBCXYDataset jDBCXYDataset1 = (JDBCXYDataset)jDBCXYDataset0.clone();
      assertNotSame(jDBCXYDataset0, jDBCXYDataset1);
      assertNotSame(jDBCXYDataset1, jDBCXYDataset0);
      assertFalse(jDBCXYDataset1.equals((Object)jDBCXYDataset0));
      assertNotNull(jDBCXYDataset1);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset1.getItemCount());
      assertFalse(jDBCXYDataset1.isTimeSeries());
      assertEquals(0, jDBCXYDataset1.getSeriesCount());
      
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      assertNotSame(jDBCXYDataset0, jDBCXYDataset1);
      assertFalse(jDBCXYDataset0.equals((Object)jDBCXYDataset1));
      assertNotNull(range0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1674.3116611;
      doubleArray0[1] = (-1410.1028752);
      int int0 = jDBCXYDataset0.indexOf(1674.3116611);
      assertNotSame(jDBCXYDataset0, jDBCXYDataset1);
      assertFalse(jDBCXYDataset0.equals((Object)jDBCXYDataset1));
      assertEquals((-1), int0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      doubleArray0[2] = 280.83205877661;
      doubleArray0[3] = (-335.50635095240085);
      doubleArray0[4] = (-1466.72463449);
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1674.3116611, (-1410.1028752), 280.83205877661, (-335.50635095240085), (-1466.72463449), Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1674.3116611, 280.83205877661, 19, 1674.3116611);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1691L);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("+");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      Year year0 = new Year(mockDate0, timeZone0, locale0);
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1691L, year0.getFirstMillisecond());
      assertEquals("1970", year0.toString());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1970, year0.getYear());
      assertEquals(1691L, year0.getLastMillisecond());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains("+"));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) hashSet0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertNotNull(list0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(hashSet0.contains("+"));
      assertFalse(list0.contains("+"));
      
      Stack<Locale.LanguageRange> stack1 = new Stack<Locale.LanguageRange>();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("+"));
      
      String string0 = Locale.lookupTag(stack1, arrayList0);
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertNull(string0);
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("+"));
      
      Year year1 = (Year)year0.previous();
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertFalse(year1.equals((Object)year0));
      assertNotNull(year1);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(1691L, year0.getFirstMillisecond());
      assertEquals("1970", year0.toString());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1970, year0.getYear());
      assertEquals(1691L, year0.getLastMillisecond());
      assertEquals("1969", year1.toString());
      assertEquals(1969L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1969, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(locale_FilteringMode0);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertNull(range0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1545.6021), 1767.870643);
      assertNotNull(lineFunction2D0);
      assertEquals((-1545.6021), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1767.870643, lineFunction2D0.getSlope(), 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 9999;
      doubleArray0[2] = (-1545.6021);
      doubleArray0[3] = (double) 9999;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 9999.0, (-1545.6021), 9999.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-9999), 0.0, 19, 9999.0);
      assertNotNull(xYSeries0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 9999.0, (-1545.6021), 9999.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals((-9.996155229239504E15), xYSeries0.getMinY(), 0.01);
      assertEquals(19, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-9999.0), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertNull(range1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      XYSeries xYSeries1 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1545.6021), 0.0, 14, locale_FilteringMode1);
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertNotNull(xYSeries1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 9999.0, (-1545.6021), 9999.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertTrue(xYSeries1.getNotify());
      assertEquals((-3.692268534223956E13), xYSeries1.getMinY(), 0.01);
      assertNull(xYSeries1.getDescription());
      assertTrue(xYSeries1.getAutoSort());
      assertEquals((-1545.6021), xYSeries1.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries1.getMaxX(), 0.01);
      assertEquals(14, xYSeries1.getItemCount());
      assertEquals(0.0, xYSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 1);
      assertEquals(0.0, double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) (byte) (-10);
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) (byte) (-10);
      doubleArray3[4] = (-1954.58121);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-1954.58121);
      doubleArray4[1] = (-1954.58121);
      doubleArray4[2] = (double) (byte) (-10);
      doubleArray4[3] = (-1954.58121);
      doubleArray4[4] = (-1954.58121);
      doubleArray4[5] = (double) 0;
      doubleArray4[6] = (double) 0;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-10.0));
      assertNull(range0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Vector<Double> vector0 = new Vector<Double>(1);
      assertNotNull(vector0);
      assertEquals(1, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains((-1954.58121)));
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(jDBCXYDataset0, arrayList0, false);
      assertNull(range1);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1691L);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("+");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      Year year0 = new Year(mockDate0, timeZone0, locale0);
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1970, year0.getYear());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1691L, year0.getFirstMillisecond());
      assertEquals(1691L, year0.getLastMillisecond());
      assertEquals("1970", year0.toString());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("+"));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) hashSet0, locale_FilteringMode0);
      assertNotNull(list0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(hashSet0.contains("+"));
      assertFalse(list0.contains("+"));
      
      Stack<Locale.LanguageRange> stack1 = new Stack<Locale.LanguageRange>();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("+"));
      
      String string0 = Locale.lookupTag(stack1, arrayList0);
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertNull(string0);
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("+"));
      
      Year year1 = (Year)year0.previous();
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertFalse(year1.equals((Object)year0));
      assertNotNull(year1);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1970, year0.getYear());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1691L, year0.getFirstMillisecond());
      assertEquals(1691L, year0.getLastMillisecond());
      assertEquals("1970", year0.toString());
      assertEquals("1969", year1.toString());
      assertEquals(1969, year1.getYear());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1969L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1545.6021), 1767.870643);
      assertNotNull(lineFunction2D0);
      assertEquals(1767.870643, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1545.6021), lineFunction2D0.getIntercept(), 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1606.4256;
      doubleArray0[1] = (double) 9999;
      doubleArray0[2] = (-1545.6021);
      doubleArray0[3] = 1606.4256;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1606.4256, 9999.0, (-1545.6021), 1606.4256}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-9999), 1606.4256, 19, 1606.4256);
      assertNotNull(xYSeries0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1606.4256, 9999.0, (-1545.6021), 1606.4256}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1606.4255999999987, xYSeries0.getMaxX(), 0.01);
      assertEquals(19, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(6.655540397388667E12, xYSeries0.getMaxY(), 0.01);
      assertEquals((-1.6060983497890598E15), xYSeries0.getMinY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals((-9999.0), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1545.6021), 0.0, 9999, locale_FilteringMode0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-2202), 968, (-1351), (-2442), 968);
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Sun Sep 08 22:08:00 GMT 227", mockDate0.toString());
      assertEquals(2733L, month0.getSerialIndex());
      assertEquals(9, month0.getMonth());
      assertEquals(227, month0.getYearValue());
      assertEquals((-69277686720000L), month0.getFirstMillisecond());
      assertEquals((-69277686720000L), month0.getLastMillisecond());
      
      defaultStatisticalCategoryDataset0.add(0.0, (double) (-2202), (Comparable) mockDate0, (Comparable) mockDate0);
      assertEquals("Sun Sep 08 22:08:00 GMT 227", mockDate0.toString());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate((-2202), 968, (-1351), (-2442), 968);
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Sun Sep 08 22:08:00 GMT 227", mockDate0.toString());
      assertEquals((-69277686720000L), month0.getLastMillisecond());
      assertEquals(9, month0.getMonth());
      assertEquals(227, month0.getYearValue());
      assertEquals((-69277686720000L), month0.getFirstMillisecond());
      assertEquals(2733L, month0.getSerialIndex());
      
      defaultStatisticalCategoryDataset0.add((-2157.677558555298), 567.9492098316, (Comparable) mockDate0, (Comparable) month0);
      assertEquals("Sun Sep 08 22:08:00 GMT 227", mockDate0.toString());
      assertEquals((-69277686720000L), month0.getLastMillisecond());
      assertEquals(9, month0.getMonth());
      assertEquals(227, month0.getYearValue());
      assertEquals((-69277686720000L), month0.getFirstMillisecond());
      assertEquals(2733L, month0.getSerialIndex());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-1078.838779277649), range0.getCentralValue(), 0.01);
      assertEquals((-2157.677558555298), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(2157.677558555298, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertNotNull(lineFunction2D0);
      assertEquals(Double.POSITIVE_INFINITY, lineFunction2D0.getSlope(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      
      TimeZone timeZone0 = null;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries("qfL.", "qfL.", "");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("qfL.", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      
      List list0 = timeSeries0.getItems();
      assertNotNull(list0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("qfL.", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      Number[] numberArray0 = new Number[6];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      Number[][] numberArray1 = new Number[1][6];
      numberArray1[0] = numberArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray1, numberArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, numberArray1.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 0.0;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowKeys' argument.", "", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(7, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(7, doubleArray1.length);
      
      TimeSeries timeSeries0 = new TimeSeries(0.0, "-,F=+zU(yc,Ry]j", "");
      assertNotNull(timeSeries0);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("-,F=+zU(yc,Ry]j", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("-,F=+zU(yc,Ry]j", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number1);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("-,F=+zU(yc,Ry]j", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(7, doubleArray1.length);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = timeSeriesCollection0.getDomainBounds(false);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      boolean boolean0 = defaultXYDataset0.hasListener(timeSeriesCollection0);
      assertFalse(boolean0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultXYDataset0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(0.0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) stack0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Byte byte0 = new Byte((byte) (-10));
      assertEquals((byte) (-10), (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(byte0));
      
      Byte[] byteArray0 = new Byte[9];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      byteArray0[6] = byte0;
      byteArray0[7] = byte0;
      byteArray0[8] = byte0;
      Byte[] byteArray1 = linkedList0.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(byte0));
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byte0));
      
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (byte) (-10);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (byte) (-10);
      doubleArray2[1] = 0.5;
      doubleArray2[2] = (double) (byte) (-10);
      doubleArray2[4] = (double) (byte) (-10);
      doubleArray2[5] = (double) (byte) (-10);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.5;
      doubleArray3[1] = 0.5;
      doubleArray3[2] = 0.5;
      doubleArray3[4] = 0.5;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.xy.YIntervalSeriesCollection", "Duplicate items in 'columnKeys'.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(1.0, number0);
      assertNotNull(number0);
      assertEquals(3, doubleArray0.length);
      
      Number[][] numberArray0 = new Number[6][3];
      numberArray0[0] = (Number[]) byteArray1;
      numberArray0[1] = (Number[]) byteArray1;
      numberArray0[2] = (Number[]) byteArray1;
      numberArray0[3] = (Number[]) byteArray0;
      numberArray0[4] = (Number[]) byteArray0;
      numberArray0[5] = (Number[]) byteArray1;
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("[7~-nUR", "EB_*h1|", numberArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      assertEquals(6, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      numberArray0[2] = (Number) 999;
      numberArray0[3] = (Number) 999;
      numberArray0[4] = (Number) 0;
      Number[] numberArray1 = new Number[2];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      numberArray1[1] = (Number) 999;
      Number[][] numberArray2 = new Number[1][9];
      numberArray2[0] = numberArray0;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray2);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, numberArray2.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 0);
      assertNotNull(defaultPieDataset0);
      assertEquals(1, numberArray2.length);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.sortByValues(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      defaultKeyedValuesDataset0.clear();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertFalse(boolean0);
      assertEquals(1, numberArray2.length);
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(1, numberArray2.length);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[4] = 0.0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      
      int int0 = defaultIntervalCategoryDataset0.indexOf(0.0);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-208.2));
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-208.2), range1.getCentralValue(), 0.01);
      assertEquals((-208.2), range1.getUpperBound(), 0.01);
      assertEquals((-208.2), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      boolean boolean0 = keyToGroupMap0.equals(defaultStatisticalCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      KeyToGroupMap keyToGroupMap1 = (KeyToGroupMap)keyToGroupMap0.clone();
      assertNotSame(keyToGroupMap0, keyToGroupMap1);
      assertNotSame(keyToGroupMap1, keyToGroupMap0);
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertNotNull(keyToGroupMap1);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, keyToGroupMap1.getGroupCount());
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertNull(range0);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, false);
      assertNull(range1);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Byte byte0 = new Byte((byte) (-10));
      assertEquals((byte) (-10), (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(byte0));
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byte0));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = timeSeriesCollection0.getDomainBounds(false);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (byte) (-10), 1);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-10), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-10), slidingGanttCategoryDataset0.getFirstCategoryIndex());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1691L);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("+");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      Year year0 = new Year(mockDate0, timeZone0, locale0);
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1691L, year0.getLastMillisecond());
      assertEquals(1970, year0.getYear());
      assertEquals("1970", year0.toString());
      assertEquals(1691L, year0.getFirstMillisecond());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("+"));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) hashSet0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertNotNull(list0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(hashSet0.contains("+"));
      assertFalse(list0.contains("+"));
      
      Stack<Locale.LanguageRange> stack1 = new Stack<Locale.LanguageRange>();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("+"));
      
      String string0 = Locale.lookupTag(stack1, arrayList0);
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertNull(string0);
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("+"));
      
      Year year1 = (Year)year0.previous();
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertFalse(year1.equals((Object)year0));
      assertNotNull(year1);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1691L, year0.getLastMillisecond());
      assertEquals(1970, year0.getYear());
      assertEquals("1970", year0.toString());
      assertEquals(1691L, year0.getFirstMillisecond());
      assertEquals("1969", year1.toString());
      assertEquals(1969L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1969, year1.getYear());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(locale_FilteringMode0);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertNull(range0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1545.6021), 1767.870643);
      assertNotNull(lineFunction2D0);
      assertEquals(1767.870643, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1545.6021), lineFunction2D0.getIntercept(), 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1606.4256;
      doubleArray0[1] = (double) 9999;
      doubleArray0[2] = (-1545.6021);
      doubleArray0[3] = 1606.4256;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1606.4256, 9999.0, (-1545.6021), 1606.4256}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-9999), 1606.4256, 19, 1606.4256);
      assertNotNull(xYSeries0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1606.4256, 9999.0, (-1545.6021), 1606.4256}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals((-9999.0), xYSeries0.getMinX(), 0.01);
      assertEquals(19, xYSeries0.getItemCount());
      assertEquals(6.655540397388667E12, xYSeries0.getMaxY(), 0.01);
      assertEquals((-1.6060983497890598E15), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1606.4255999999987, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertNull(range1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      XYSeries xYSeries1 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1545.6021), 0.0, 14, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeries1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1606.4256, 9999.0, (-1545.6021), 1606.4256}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(14, xYSeries1.getItemCount());
      assertTrue(xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals((-5.935059932663098E12), xYSeries1.getMinY(), 0.01);
      assertEquals(0.0, xYSeries1.getMaxX(), 0.01);
      assertEquals(1606.4256, xYSeries1.getMaxY(), 0.01);
      assertTrue(xYSeries1.getNotify());
      assertEquals((-1545.6021), xYSeries1.getMinX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      String string0 = "org.jfree.data.xy.YIntervalSeriesCollection";
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Byte byte0 = new Byte((byte) (-10));
      assertEquals((byte) (-10), (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((byte) (-10)));
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains((byte) (-10)));
      
      boolean boolean0 = linkedList0.addAll((Collection<? extends Byte>) vector0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(linkedList0.contains((byte) (-10)));
      assertFalse(vector0.contains((byte) (-10)));
      
      boolean boolean1 = linkedList0.add(byte0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte) (-10)));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = timeSeriesCollection0.getDomainBounds(false);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertNull(range1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Range range0 = jDBCXYDataset0.getRangeBounds(false);
      assertNotNull(range0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertNull(range2);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(jDBCXYDataset0);
      assertNull(number0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 0.0;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowKeys' argument.", "", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(7, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(7, doubleArray1.length);
      
      TimeSeries timeSeries0 = new TimeSeries(0.0, "-,F=+zU(yc,Ry]j", "");
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("-,F=+zU(yc,Ry]j", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("-,F=+zU(yc,Ry]j", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate((-915L));
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1969, month0.getYearValue());
      assertEquals((-915L), month0.getLastMillisecond());
      assertEquals(12, month0.getMonth());
      assertEquals(23640L, month0.getSerialIndex());
      assertEquals((-915L), month0.getFirstMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (-1213.844810993993));
      assertNull(timeSeriesDataItem0);
      assertNull(timeSeries0.getDescription());
      assertEquals((-1213.844810993993), timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("-,F=+zU(yc,Ry]j", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals((-1213.844810993993), timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1969, month0.getYearValue());
      assertEquals((-915L), month0.getLastMillisecond());
      assertEquals(12, month0.getMonth());
      assertEquals(23640L, month0.getSerialIndex());
      assertEquals((-915L), month0.getFirstMillisecond());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertFalse(number1.equals((Object)number0));
      assertEquals((-1213.844810993993), number1);
      assertNotNull(number1);
      assertNull(timeSeries0.getDescription());
      assertEquals((-1213.844810993993), timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("-,F=+zU(yc,Ry]j", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals((-1213.844810993993), timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(7, doubleArray1.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, false);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNull(timeSeries0.getDescription());
      assertEquals((-1213.844810993993), timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("-,F=+zU(yc,Ry]j", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals((-1213.844810993993), timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1213.844810993993), range1.getCentralValue(), 0.01);
      assertEquals((-1213.844810993993), range1.getUpperBound(), 0.01);
      assertEquals((-1213.844810993993), range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = timeSeriesCollection0.getDomainBounds(false);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNull(range1);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1691L);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("+");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      
      Year year0 = new Year(mockDate0, timeZone0, locale0);
      assertNotNull(year0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("1970", year0.toString());
      assertEquals(1970, year0.getYear());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1691L, year0.getLastMillisecond());
      assertEquals(1691L, year0.getFirstMillisecond());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains("+"));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) hashSet0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertNotNull(list0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(hashSet0.contains("+"));
      assertFalse(list0.contains("+"));
      
      Stack<Locale.LanguageRange> stack1 = new Stack<Locale.LanguageRange>();
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("+"));
      
      String string0 = Locale.lookupTag(stack1, arrayList0);
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertNull(string0);
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("+"));
      
      Year year1 = (Year)year0.previous();
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertFalse(year1.equals((Object)year0));
      assertNotNull(year1);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("1970", year0.toString());
      assertEquals(1970, year0.getYear());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1691L, year0.getLastMillisecond());
      assertEquals(1691L, year0.getFirstMillisecond());
      assertEquals(1969L, year1.getSerialIndex());
      assertEquals("1969", year1.toString());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1969, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(locale_FilteringMode0);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertNull(range0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1545.6021), 1767.870643);
      assertNotNull(lineFunction2D0);
      assertEquals(1767.870643, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1545.6021), lineFunction2D0.getIntercept(), 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 9999;
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, false);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertNull(range1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertNull(number0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      int int0 = 1800;
      MatrixSeries matrixSeries0 = new MatrixSeries(":5Q/'E", 1800, 1);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertEquals(1800, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      int int1 = 206;
      Vector<Short> vector0 = new Vector<Short>(213, 206);
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(213, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Number[][] numberArray0 = new Number[4][9];
      Number[] numberArray1 = new Number[8];
      Integer integer0 = Integer.valueOf((-3000));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-3000), (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[0] = (Number) integer0;
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(200, (int)integer1);
      assertNotNull(integer1);
      
      numberArray1[1] = (Number) integer1;
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(400, (int)integer2);
      assertNotNull(integer2);
      
      numberArray1[2] = (Number) integer2;
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      numberArray1[3] = number0;
      Float float0 = new Float((double) 213);
      assertEquals(213.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      numberArray1[4] = (Number) float0;
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultXYZDataset0.getY(1800, 1800);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1800, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      JDBCXYDataset jDBCXYDataset1 = (JDBCXYDataset)jDBCXYDataset0.clone();
      assertNotSame(jDBCXYDataset0, jDBCXYDataset1);
      assertNotSame(jDBCXYDataset1, jDBCXYDataset0);
      assertFalse(jDBCXYDataset1.equals((Object)jDBCXYDataset0));
      assertNotNull(jDBCXYDataset1);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset1.isTimeSeries());
      assertEquals(0, jDBCXYDataset1.getSeriesCount());
      assertEquals(0, jDBCXYDataset1.getItemCount());
      
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      assertNotSame(jDBCXYDataset0, jDBCXYDataset1);
      assertFalse(jDBCXYDataset0.equals((Object)jDBCXYDataset1));
      assertNotNull(range0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset1, true);
      assertNotSame(jDBCXYDataset0, jDBCXYDataset1);
      assertNotSame(jDBCXYDataset1, jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.equals((Object)jDBCXYDataset1));
      assertFalse(jDBCXYDataset1.equals((Object)jDBCXYDataset0));
      assertNull(range1);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset1.isTimeSeries());
      assertEquals(0, jDBCXYDataset1.getSeriesCount());
      assertEquals(0, jDBCXYDataset1.getItemCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(jDBCXYDataset0);
      assertNotSame(jDBCXYDataset0, jDBCXYDataset1);
      assertFalse(jDBCXYDataset0.equals((Object)jDBCXYDataset1));
      assertNull(number0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte0);
      assertNotNull(byte0);
      
      double[][] doubleArray0 = new double[4][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (byte)14;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (double) (byte)14;
      doubleArray2[3] = (double) (byte)14;
      doubleArray2[4] = (double) (-297);
      doubleArray2[5] = (double) (byte)14;
      doubleArray2[6] = (double) (byte)14;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = 656.406372499846;
      doubleArray3[2] = (double) (-297);
      doubleArray3[3] = (-1.0);
      doubleArray3[4] = (-1.0);
      doubleArray3[5] = (double) (byte)14;
      doubleArray3[6] = (double) (byte)14;
      doubleArray3[7] = (double) (-297);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "rc.+M306)MM}", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(41.0, range0.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      Number[][] numberArray0 = new Number[1][2];
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertNotNull(defaultPieDataset0);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) millisecond0, (KeyedValues) defaultPieDataset0);
      assertNotSame(millisecond0, millisecond1);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertNotNull(defaultCategoryDataset0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1, numberArray0.length);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (double) 59);
      assertNotNull(range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(59.0, range0.getLowerBound(), 0.01);
      assertEquals(59.0, range0.getCentralValue(), 0.01);
      assertEquals(59.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 598.0511330212;
      doubleArray1[2] = 1.7976931348623157E308;
      doubleArray1[3] = (-208.2);
      doubleArray1[4] = (-1497.62530019643);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.7976931348623157E308;
      doubleArray2[1] = 598.0511330212;
      doubleArray2[2] = (-1497.62530019643);
      doubleArray2[3] = (-1497.62530019643);
      doubleArray2[4] = 1.7976931348623157E308;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 598.0511330212;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-208.2);
      doubleArray3[1] = 3044.2243004332;
      doubleArray3[2] = 598.0511330212;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 1.7976931348623157E308;
      doubleArray3[5] = (-208.2);
      doubleArray3[6] = 0.0;
      doubleArray3[7] = (-208.2);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 3044.2243004332;
      doubleArray4[1] = (-1497.62530019643);
      doubleArray4[2] = 1.7976931348623157E308;
      doubleArray4[3] = 1.7976931348623157E308;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (-208.2);
      doubleArray5[1] = 3044.2243004332;
      doubleArray5[2] = 1.7976931348623157E308;
      doubleArray5[3] = 1.7976931348623157E308;
      doubleArray5[4] = (-208.2);
      doubleArray5[5] = (-208.2);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 968;
      doubleArray1[2] = (double) (-2202);
      doubleArray0[1] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) 968.0, (-2202.0), 1521);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Byte> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte0);
      assertNotNull(byte0);
      
      Date[] dateArray0 = new Date[1];
      Instant instant0 = MockInstant.ofEpochMilli((byte)77);
      assertNotNull(instant0);
      
      Instant instant1 = MockInstant.minusSeconds(instant0, (byte)77);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertFalse(instant1.equals((Object)instant0));
      assertNotNull(instant1);
      
      Date date0 = Date.from(instant1);
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      assertNotNull(date0);
      assertEquals("Wed Dec 31 23:58:43 GMT 1969", date0.toString());
      
      dateArray0[0] = date0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)77;
      doubleArray0[1] = 1162.6491813599;
      doubleArray0[2] = (double) (byte)77;
      doubleArray0[3] = (double) (byte)77;
      doubleArray0[4] = 0.570281124497992;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte)77;
      doubleArray1[1] = 0.570281124497992;
      doubleArray1[2] = 1162.6491813599;
      doubleArray1[3] = (double) (byte)77;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(byte0, dateArray0, doubleArray0, doubleArray1, doubleArray0, doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {77.0, 1162.6491813599, 77.0, 77.0, 0.570281124497992}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {77.0, 0.570281124497992, 1162.6491813599, 77.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(range0);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {77.0, 1162.6491813599, 77.0, 77.0, 0.570281124497992}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {77.0, 0.570281124497992, 1162.6491813599, 77.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(77.0, range0.getLowerBound(), 0.01);
      assertEquals(77.0, range0.getCentralValue(), 0.01);
      assertEquals(77.0, range0.getUpperBound(), 0.01);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(polynomialFunction2D0);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {77.0, 0.570281124497992, 1162.6491813599, 77.0}, doubleArray1, 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {77.0, 0.570281124497992, 1162.6491813599, 77.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {77.0, 0.570281124497992, 1162.6491813599, 77.0}, doubleArray1, 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(1162.6491813599));
      
      boolean boolean0 = stack0.add((Double) 77.0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals("[77.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains(1162.6491813599));
      assertTrue(stack0.contains(77.0));
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultHighLowDataset0, stack0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(range1, range0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(range1);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {77.0, 1162.6491813599, 77.0, 77.0, 0.570281124497992}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {77.0, 0.570281124497992, 1162.6491813599, 77.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertFalse(stack0.empty());
      assertEquals("[77.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-76923.0), range1.getLowerBound(), 0.01);
      assertEquals((-76923.0), range1.getCentralValue(), 0.01);
      assertEquals((-76923.0), range1.getUpperBound(), 0.01);
      assertFalse(stack0.contains(1162.6491813599));
      assertTrue(stack0.contains(77.0));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(77.0, number0);
      assertNotNull(number0);
      assertEquals(1, dateArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {77.0, 1162.6491813599, 77.0, 77.0, 0.570281124497992}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {77.0, 0.570281124497992, 1162.6491813599, 77.0}, doubleArray1, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 999;
      doubleArray0[1] = (double) 999;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 999;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {999.0, 999.0, 0.0, 999.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {999.0, 999.0, 0.0, 999.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {999.0, 999.0, 0.0, 999.0}, doubleArray1, 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      
      Double double0 = new Double((-1841.44566443658));
      assertEquals((-1841.44566443658), (double)double0, 0.01);
      assertNotNull(double0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains((-1841.44566443658)));
      
      Vector<Double> vector0 = new Vector<Double>(0);
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains((-1841.44566443658)));
      
      Double double1 = new Double((-2301.7));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2301.7), (double)double1, 0.01);
      assertNotNull(double1);
      
      boolean boolean0 = vector0.add(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean0);
      assertEquals("[-2301.7]", vector0.toString());
      assertEquals(1, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(double1));
      assertFalse(vector0.contains((-1841.44566443658)));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1794, 999, millisecond0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(998, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, vector0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      DefaultTableXYDataset defaultTableXYDataset1 = (DefaultTableXYDataset)defaultTableXYDataset0.clone();
      assertNotSame(defaultTableXYDataset0, defaultTableXYDataset1);
      assertNotSame(defaultTableXYDataset1, defaultTableXYDataset0);
      assertTrue(defaultTableXYDataset1.equals((Object)defaultTableXYDataset0));
      assertNotNull(defaultTableXYDataset1);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset1.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset1.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset1.getItemCount());
      assertEquals(0, defaultTableXYDataset1.getSeriesCount());
      assertFalse(defaultTableXYDataset1.isAutoPrune());
      
      defaultTableXYDataset0.updateXPoints();
      assertNotSame(defaultTableXYDataset0, defaultTableXYDataset1);
      assertTrue(defaultTableXYDataset0.equals((Object)defaultTableXYDataset1));
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNotSame(defaultTableXYDataset0, defaultTableXYDataset1);
      assertTrue(defaultTableXYDataset0.equals((Object)defaultTableXYDataset1));
      assertNull(number0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 60);
      assertNotNull(defaultPieDataset0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 60;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.validateObject();
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number1);
      
      XYSeries xYSeries0 = new XYSeries(60.0, false, false);
      assertNotNull(xYSeries0);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      PriorityQueue<TimeSeriesCollection> priorityQueue0 = new PriorityQueue<TimeSeriesCollection>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      LinkedList<TimeSeriesCollection> linkedList0 = new LinkedList<TimeSeriesCollection>(priorityQueue0);
      assertNotNull(linkedList0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, linkedList0.size());
      
      TimeSeries timeSeries0 = new TimeSeries(60.0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      boolean boolean0 = linkedList0.add(timeSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, priorityQueue0.size());
      assertEquals(1, linkedList0.size());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertFalse(priorityQueue0.contains(timeSeriesCollection0));
      assertTrue(linkedList0.contains(timeSeriesCollection0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("2)=A", "\u0005CAkbw", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) vectorSeriesCollection0, (List) vector0, true);
      assertNull(range2);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Byte byte0 = new Byte((byte)4);
      assertEquals((byte)4, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = Byte.valueOf((byte)6);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)6, (byte)byte1);
      assertNotNull(byte1);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = false;
      Byte byte2 = new Byte((byte) (-104));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-104), (byte)byte2);
      assertNotNull(byte2);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(byte2));
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Double double0 = new Double((-1.7976931348623157E308));
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertEquals((-1.7976931348623157E308), (double)double0, 0.01);
      assertNotNull(double0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains((-1.7976931348623157E308)));
      
      Double double1 = new Double((-1518.404506117383));
      assertNotEquals((double)double1, (double)number0, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1518.404506117383), (double)double1, 0.01);
      assertNotNull(double1);
      
      boolean boolean1 = stack0.add(double1);
      assertNotEquals((double)double1, (double)number0, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[-1518.404506117383]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains((-1.7976931348623157E308)));
      assertTrue(stack0.contains((-1518.404506117383)));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, false);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[-1518.404506117383]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains((-1.7976931348623157E308)));
      assertTrue(stack0.contains((-1518.404506117383)));
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, true);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
      assertNull(range2);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, (byte)4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = 1141.25431;
      doubleArray0[1] = 0.0;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      jDBCPieDataset0.clear();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) jDBCPieDataset0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1800, 1);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1800, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Vector<Short> vector0 = new Vector<Short>(213, 172);
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(213, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(categoryToPieDataset0);
      assertNotNull(defaultPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      defaultPieDataset0.sortByValues(sortOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.clear();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      double[] doubleArray0 = new double[2];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction2D0.getOrder());
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)29);
      assertEquals((byte)29, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte)29));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(linkedList0, byte0, millisecond0);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte)29));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, false);
      assertNotNull(range0);
      assertEquals(1, linkedList0.size());
      assertEquals(29.0, range0.getCentralValue(), 0.01);
      assertEquals(29.0, range0.getUpperBound(), 0.01);
      assertEquals(29.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(linkedList0.contains((byte)29));
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      Byte byte0 = new Byte((byte)25);
      assertEquals((byte)25, (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((byte)25));
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte)25));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = timeSeriesCollection0.getDomainBounds(false);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2708), (byte)25);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-2708), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(25, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Object[] objectArray0 = linkedList0.toArray();
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte)25));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) linkedList0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("s", "Null 'columnKeys' argument.", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, numberArray0.length);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(byte0));
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(byte0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      ArrayDeque<XYBarDataset> arrayDeque0 = new ArrayDeque<XYBarDataset>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>(arrayDeque0);
      assertNotNull(arrayList0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0, (List) arrayList0, false);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      numberArray0[2] = (Number) 999;
      numberArray0[3] = (Number) 999;
      numberArray0[4] = (Number) 0;
      numberArray0[5] = (Number) 999;
      Number[] numberArray1 = new Number[2];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[1] = (Number) 999;
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 999;
      doubleArray1[1] = (-1954.58121);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (double) 0);
      assertNotNull(range0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      JDBCXYDataset jDBCXYDataset1 = (JDBCXYDataset)jDBCXYDataset0.clone();
      assertNotSame(jDBCXYDataset0, jDBCXYDataset1);
      assertNotSame(jDBCXYDataset1, jDBCXYDataset0);
      assertFalse(jDBCXYDataset1.equals((Object)jDBCXYDataset0));
      assertNotNull(jDBCXYDataset1);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset1.getSeriesCount());
      assertFalse(jDBCXYDataset1.isTimeSeries());
      assertEquals(0, jDBCXYDataset1.getItemCount());
      
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      assertNotSame(jDBCXYDataset0, jDBCXYDataset1);
      assertFalse(jDBCXYDataset0.equals((Object)jDBCXYDataset1));
      assertNotNull(range0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      List list0 = jDBCCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List list1 = jDBCCategoryDataset0.getColumnKeys();
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) linkedList0, true);
      assertNull(range0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte) (-10));
      assertEquals((byte) (-10), (byte)byte0);
      assertNotNull(byte0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(byte0);
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNull(range1);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(1.5, 1606.4256);
      assertNotNull(lineFunction2D0);
      assertEquals(1.5, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1606.4256, lineFunction2D0.getSlope(), 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-10);
      doubleArray0[1] = (-384.4072916556332);
      doubleArray0[2] = (-384.4072916556332);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-10.0), (-384.4072916556332), (-384.4072916556332)}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction2D0.getOrder());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1606.4256, 968.21168551, (byte) (-10), (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertNotNull(lineFunction2D0);
      assertEquals(Double.POSITIVE_INFINITY, lineFunction2D0.getSlope(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "iKj]");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=iKj],offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("iKj]", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      Quarter quarter0 = new Quarter(mockDate0, simpleTimeZone0);
      assertNotNull(quarter0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("java.util.SimpleTimeZone[id=iKj],offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("iKj]", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 0.0, 879.209523123, 243, quarter0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(Double.POSITIVE_INFINITY, lineFunction2D0.getSlope(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("java.util.SimpleTimeZone[id=iKj],offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("iKj]", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYSeriesCollection0, (-357.18844809));
      assertNotNull(xYBarDataset0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(Double.POSITIVE_INFINITY, lineFunction2D0.getSlope(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("java.util.SimpleTimeZone[id=iKj],offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("iKj]", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-357.18844809), xYBarDataset0.getBarWidth(), 0.01);
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYBarDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(Double.POSITIVE_INFINITY, lineFunction2D0.getSlope(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("java.util.SimpleTimeZone[id=iKj],offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("iKj]", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-357.18844809), xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      double[][] doubleArray0 = new double[5][2];
      Byte byte0 = new Byte((byte)93);
      assertEquals((byte)93, (byte)byte0);
      assertNotNull(byte0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((byte)93));
      
      boolean boolean0 = linkedList0.add(byte0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((byte)93));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      Number[][] numberArray0 = new Number[0][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      
      List list0 = defaultIntervalCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) millisecond1, (KeyedValues) defaultPieDataset0);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(defaultCategoryDataset0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, numberArray0.length);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      
      Second second0 = millisecond1.getSecond();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(second0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1), 15);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(15, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 0);
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, numberArray0.length);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Byte byte0 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = linkedList0.add((Byte) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(byte0));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(byte0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      boolean boolean1 = false;
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(byte0));
      
      // Undeclared exception!
      try { 
        timeSeriesCollection0.getRangeBounds(linkedList0, (Range) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-2913.709);
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) Double.NEGATIVE_INFINITY);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      assertNull(range0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (-2202));
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(taskSeriesCollection0, 0, 0);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 0);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertNotNull(lineFunction2D0);
      assertEquals(Double.POSITIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, lineFunction2D0.getSlope(), 0.01);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "iKj]");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=iKj],offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("iKj]", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      MockDate mockDate1 = new MockDate();
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      SimpleTimeZone simpleTimeZone1 = new SimpleTimeZone((-1604), " ?I_-$&[Gub)hZ&T #L");
      assertFalse(simpleTimeZone1.equals((Object)simpleTimeZone0));
      assertNotNull(simpleTimeZone1);
      assertEquals(" ?I_-$&[Gub)hZ&T #L", simpleTimeZone1.getID());
      assertEquals((-1604), simpleTimeZone1.getRawOffset());
      assertFalse(simpleTimeZone1.useDaylightTime());
      assertEquals(0, simpleTimeZone1.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id= ?I_-$&[Gub)hZ&T #L,offset=-1604,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone1.toString());
      
      Quarter quarter0 = new Quarter(mockDate0, simpleTimeZone0);
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(simpleTimeZone0.equals((Object)simpleTimeZone1));
      assertNotNull(quarter0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("java.util.SimpleTimeZone[id=iKj],offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("iKj]", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      
      Second second0 = Second.parseSecond(" ?I_-$&[Gub)hZ&T #L");
      assertNull(second0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, 1274.071082, 4983.335781, 243, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      Number[][] numberArray0 = new Number[0][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      double[][] doubleArray0 = new double[0][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertNotNull(defaultIntervalCategoryDataset1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getColumnCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1, (double) 0);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertNull(range0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      int int0 = (-2202);
      int int1 = 968;
      Comparable<XYBarDataset>[] comparableArray0 = (Comparable<XYBarDataset>[]) Array.newInstance(Comparable.class, 10);
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 968;
      doubleArray2[2] = (double) (-2202);
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertNotNull(lineFunction2D0);
      assertEquals(Double.POSITIVE_INFINITY, lineFunction2D0.getSlope(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      
      MockDate mockDate0 = new MockDate(2781, (-1351), (-2132), 279, (-2132));
      assertNotNull(mockDate0);
      
      Month month0 = new Month(mockDate0);
      assertNotNull(month0);
      assertEquals("Mon Aug 09 03:28:00 GMT 4562", mockDate0.toString());
      assertEquals(8, month0.getMonth());
      assertEquals(54752L, month0.getSerialIndex());
      assertEquals(81814678080000L, month0.getFirstMillisecond());
      assertEquals(81814678080000L, month0.getLastMillisecond());
      assertEquals(4562, month0.getYearValue());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Month month1 = new Month();
      assertFalse(month1.equals((Object)month0));
      assertNotNull(month1);
      assertEquals(2, month1.getMonth());
      assertEquals(2014, month1.getYearValue());
      assertEquals(24170L, month1.getSerialIndex());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      
      defaultStatisticalCategoryDataset0.add((-188.6), (-1.0), (Comparable) month1, (Comparable) mockDate0);
      assertNotSame(month1, month0);
      assertFalse(month1.equals((Object)month0));
      assertEquals("Mon Aug 09 03:28:00 GMT 4562", mockDate0.toString());
      assertEquals(2, month1.getMonth());
      assertEquals(2014, month1.getYearValue());
      assertEquals(24170L, month1.getSerialIndex());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-297), (-912.5646501642));
      assertNotNull(powerFunction2D0);
      assertEquals((-912.5646501642), powerFunction2D0.getB(), 0.01);
      assertEquals((-297.0), powerFunction2D0.getA(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, 1141.25431, (-1.7976931348623157E308), (-297), "org.jfree.data.time.Millisecond");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (-969);
      doubleArray1[1] = (double) (-969);
      doubleArray1[2] = (double) (-969);
      doubleArray1[3] = (double) (-969);
      doubleArray1[4] = (double) (-969);
      doubleArray1[5] = (double) (-969);
      doubleArray1[6] = (double) (-969);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-969);
      doubleArray2[1] = (double) (-969);
      doubleArray2[2] = (double) (-969);
      doubleArray2[3] = (double) (-969);
      doubleArray2[4] = (double) (-969);
      doubleArray2[5] = (double) (-969);
      doubleArray2[6] = (double) (-969);
      doubleArray2[7] = (double) (-969);
      doubleArray2[8] = (double) (-969);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-969);
      doubleArray3[1] = (double) (-969);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) (-969);
      doubleArray4[1] = (double) (-969);
      doubleArray4[2] = (double) (-969);
      doubleArray4[3] = (double) (-969);
      doubleArray4[4] = (double) (-969);
      doubleArray4[5] = (double) (-969);
      doubleArray4[6] = (double) (-969);
      doubleArray4[7] = (double) (-969);
      doubleArray4[8] = (double) (-969);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (double) (-969);
      doubleArray5[1] = (double) (-969);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = (double) (-969);
      doubleArray6[1] = (double) (-969);
      doubleArray6[2] = (double) (-969);
      doubleArray6[3] = (double) (-969);
      doubleArray6[4] = (double) (-969);
      doubleArray6[5] = (double) (-969);
      doubleArray6[6] = (double) (-969);
      doubleArray0[5] = doubleArray6;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'dataset' argument.", "Null 'rowData' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(6, doubleArray0.length);
      assertEquals(8721.0, range0.getLength(), 0.01);
      assertEquals((-8721.0), range0.getLowerBound(), 0.01);
      assertEquals((-4360.5), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) mockDate0);
      assertNotNull(pieDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Locale locale0 = new Locale("m\"m(=j?)OU4Izb.5)E");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("m\"m(=j?)ou4izb.5)e", locale0.toString());
      assertEquals("m\"m(=j?)ou4izb.5)e", locale0.getLanguage());
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      assertNotNull(dateFormatSymbols0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("m\"m(=j?)ou4izb.5)e", locale0.toString());
      assertEquals("m\"m(=j?)ou4izb.5)e", locale0.getLanguage());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("iKj]", dateFormatSymbols0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'i'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3380.88162099;
      doubleArray0[1] = 2333.60671;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 0.5;
      doubleArray0[6] = 2746.62175;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {3380.88162099, 2333.60671, (-1.0), 1.0, Double.POSITIVE_INFINITY, 0.5, 2746.62175}, doubleArray0, 0.01);
      assertEquals(6, polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 1.0, 3303.616334, 2, 2333.60671);
      assertNotNull(xYSeriesCollection0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {3380.88162099, 2333.60671, (-1.0), 1.0, Double.POSITIVE_INFINITY, 0.5, 2746.62175}, doubleArray0, 0.01);
      assertEquals(6, polynomialFunction2D0.getOrder());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      int int0 = defaultMultiValueCategoryDataset0.getRowIndex(fixedMillisecond0);
      assertEquals((-1), int0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = (DefaultMultiValueCategoryDataset)defaultMultiValueCategoryDataset0.clone();
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertTrue(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      assertNotNull(defaultMultiValueCategoryDataset1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotSame(defaultMultiValueCategoryDataset0, defaultMultiValueCategoryDataset1);
      assertTrue(defaultMultiValueCategoryDataset0.equals((Object)defaultMultiValueCategoryDataset1));
      assertTrue(boolean0);
      
      double[][] doubleArray1 = new double[0][4];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "jSqJXh*fNy0'Dq", doubleArray1);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, doubleArray1.length);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertNotNull(millisecond1);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      numberArray0[2] = (Number) 999;
      numberArray0[3] = (Number) 999;
      numberArray0[4] = (Number) 0;
      numberArray0[5] = (Number) 999;
      Number[] numberArray1 = new Number[2];
      assertFalse(numberArray1.equals((Object)numberArray0));
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      
      numberArray1[1] = (Number) 999;
      Number[] numberArray2 = new Number[0];
      assertFalse(numberArray2.equals((Object)numberArray0));
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      Number[] numberArray3 = new Number[0];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray0));
      
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 999;
      doubleArray1[1] = (-1954.58121);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (-297.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 999;
      doubleArray2[1] = (-1954.58121);
      doubleArray2[2] = (-208.2);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 999;
      doubleArray3[2] = (-2572.9242);
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (-188.6);
      doubleArray3[5] = (double) 999;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (-188.6);
      doubleArray4[3] = (-1954.58121);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (double) 999;
      doubleArray5[1] = (double) 0;
      doubleArray5[2] = (-1954.58121);
      doubleArray5[3] = (double) 0;
      doubleArray5[4] = (-297.0);
      doubleArray5[5] = (double) 999;
      doubleArray5[6] = (-2572.9242);
      doubleArray5[7] = (double) 999;
      doubleArray5[8] = (double) 999;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-3513.40527312));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1691L);
      assertNotNull(mockDate0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("+");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      
      Year year0 = new Year(mockDate0, timeZone0, locale0);
      assertNotNull(year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1691L, year0.getLastMillisecond());
      assertEquals(1970, year0.getYear());
      assertEquals("1970", year0.toString());
      assertEquals(1691L, year0.getFirstMillisecond());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("+"));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) hashSet0, locale_FilteringMode0);
      assertNotNull(list0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(hashSet0.contains("+"));
      assertFalse(list0.contains("+"));
      
      String string0 = Locale.lookupTag(stack0, list0);
      assertNull(string0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(hashSet0.contains("+"));
      assertFalse(list0.contains("+"));
      
      Year year1 = (Year)year0.previous();
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertFalse(year1.equals((Object)year0));
      assertNotNull(year1);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1691L, year0.getLastMillisecond());
      assertEquals(1970, year0.getYear());
      assertEquals("1970", year0.toString());
      assertEquals(1691L, year0.getFirstMillisecond());
      assertEquals("1969", year1.toString());
      assertEquals(1969L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1969, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(year1);
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertNotNull(simpleHistogramDataset0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1691L, year0.getLastMillisecond());
      assertEquals(1970, year0.getYear());
      assertEquals("1970", year0.toString());
      assertEquals(1691L, year0.getFirstMillisecond());
      assertEquals("1969", year1.toString());
      assertEquals(1969L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1969, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertNull(range0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1691L, year0.getLastMillisecond());
      assertEquals(1970, year0.getYear());
      assertEquals("1970", year0.toString());
      assertEquals(1691L, year0.getFirstMillisecond());
      assertEquals("1969", year1.toString());
      assertEquals(1969L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1969, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-384.4072916556332), 1606.4256);
      assertNotNull(lineFunction2D0);
      assertEquals(1606.4256, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-384.4072916556332), lineFunction2D0.getIntercept(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-9999), 1691L, (-9999), "+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range0 = jDBCXYDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      
      Comparable<DefaultIntervalXYDataset>[] comparableArray0 = (Comparable<DefaultIntervalXYDataset>[]) Array.newInstance(Comparable.class, 6);
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) jDBCXYDataset0);
      assertNull(range2);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) jDBCXYDataset0);
      assertTrue(boolean0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries(":5Q/'E", 1800, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1800, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Vector<Short> vector0 = new Vector<Short>(213, 206);
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(213, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      Number[] numberArray0 = new Number[8];
      Integer integer0 = Integer.valueOf((-3000));
      assertEquals((-3000), (int)integer0);
      assertNotNull(integer0);
      
      numberArray0[0] = (Number) integer0;
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(200, (int)integer1);
      assertNotNull(integer1);
      
      numberArray0[1] = (Number) integer1;
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(400, (int)integer2);
      assertNotNull(integer2);
      
      numberArray0[2] = (Number) integer2;
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1799.0, range0.getLength(), 0.01);
      assertEquals(899.5, range0.getCentralValue(), 0.01);
      assertEquals(1799.0, range0.getUpperBound(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      assertFalse(boolean0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1800, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1800, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.getDomainLowerBound(true);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)48);
      Vector<Short> vector0 = new Vector<Short>(10, 10);
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[0];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(0.0, oHLCDataItemArray0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.clone();
      jDBCXYDataset0.getRangeBounds(true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1691L);
      TimeZone timeZone0 = TimeZone.getTimeZone("/4PnR|0[u");
      Locale locale0 = Locale.ITALIAN;
      Year year0 = new Year(mockDate0, timeZone0, locale0);
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      HashSet<String> hashSet0 = new HashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) hashSet0, locale_FilteringMode0);
      Locale.lookupTag(stack0, hashSet0);
      year0.previous();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(year0);
      Object[][][] objectArray0 = new Object[0][9][3];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(stack0, objectArray0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0, true);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-3513.40527312), (-1732.43559));
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-3265.86217), Double.NEGATIVE_INFINITY, (-9999), (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-1098));
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMAN;
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
      zoneOffset0.isSupported(chronoField0);
      timeZone0.getDisplayName();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      Number[][] numberArray0 = new Number[4][6];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = null;
      numberArray1[1] = null;
      numberArray1[2] = null;
      numberArray0[0] = numberArray1;
      TimeZone.getTimeZone("Greenwich Mean Time");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(zoneOffset0, (String) null, "");
      List list0 = timeSeries0.getItems();
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) list0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String string0 = "-\"xte)egmMsA(l^_rw";
      Number[][] numberArray0 = new Number[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("-\"xte)egmMsA(l^_rw", "org.jfree.data.time.Millisecond", numberArray0);
      Stack<TimeSeriesTableModel> stack0 = new Stack<TimeSeriesTableModel>();
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, false);
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("s", "Null 'columnKeys' argument.", numberArray0);
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.add(byte1);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.getDomainBounds(false);
      DatasetUtilities.findRangeBounds(categoryDataset1);
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset("?KLklm~07Z_(M", "", "s", "Null 'columnKeys' argument.");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      MockDate mockDate0 = new MockDate();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-297));
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, (-297), (-297), (-297), mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "iKj]");
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-297));
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultPieDataset0.sortByValues(sortOrder0);
      defaultPieDataset0.clear();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.getRangeBounds(true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      System.setCurrentTimeMillis(2253L);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      millisecond0.next();
      Number[] numberArray0 = new Number[6];
      numberArray0[0] = (Number) 999;
      numberArray0[1] = (Number) 999;
      numberArray0[2] = (Number) 999;
      numberArray0[3] = (Number) 999;
      numberArray0[4] = (Number) 0;
      Number[] numberArray1 = new Number[2];
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      numberArray1[1] = (Number) 999;
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 999;
      doubleArray1[1] = (-1954.58121);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (double) 0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      Vector<Double> vector0 = new Vector<Double>(0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      timeZone0.getOffset((long) 999);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, vector0, false);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 1062, millisecond0, timeZone0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      Number number0 = DatasetUtilities.findMinimumDomainValue(timePeriodValuesCollection0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-3616), 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (-537));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1141.25431;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1774.9546);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.7976931348623157E308);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 200, 200);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 200, (-1767));
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 238);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) (-1774.9546), (-1018.4108067582347), 986);
      XYDataset xYDataset0 = null;
      ArrayList<YIntervalSeriesCollection> arrayList0 = new ArrayList<YIntervalSeriesCollection>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-1098));
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMAN;
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
      zoneOffset0.isSupported(chronoField0);
      timeZone0.getDisplayName();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      Number[][] numberArray0 = new Number[4][6];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = null;
      numberArray1[1] = null;
      numberArray1[2] = null;
      numberArray0[0] = numberArray1;
      TimeZone.getTimeZone("Greenwich Mean Time");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeSeries) null, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(zoneOffset0, (String) null, "");
      List list0 = timeSeries0.getItems();
      DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, list0, true);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      int int0 = 243;
      MockDate mockDate0 = new MockDate();
      Month month0 = new Month(mockDate0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      defaultStatisticalCategoryDataset0.add(1.0, Double.POSITIVE_INFINITY, (Comparable) mockDate0, (Comparable) mockDate0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, 243);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 243, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      MockDate mockDate0 = new MockDate((-2202), 968, (-1351), (-2442), 968);
      Month month0 = new Month(mockDate0);
      defaultStatisticalCategoryDataset0.add(0.0, (-2157.677558555298), (Comparable) month0, (Comparable) month0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number[][] numberArrayArray0 = null;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-1098));
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMAN;
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
      zoneOffset0.isSupported(chronoField0);
      timeZone0.getDisplayName();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      zoneOffset0.toString();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultMultiValueCategoryDataset0, (-1098), (-1465));
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (-1097));
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
      Day day0 = null;
      try {
        day0 = new Day((-1098), (-1097), (-1097));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1336.560809), 0);
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(193, "iKj]");
      Quarter quarter0 = new Quarter(mockDate0, simpleTimeZone0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, 0.0, 243, 0, mockDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "iKj]");
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-297));
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Comparable<ChronoLocalDate>[] comparableArray0 = (Comparable<ChronoLocalDate>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1217.067907), (-1217.067907));
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "iKj]");
      Quarter quarter0 = new Quarter(mockDate0, simpleTimeZone0);
      DatasetUtilities.sampleFunction2D(lineFunction2D0, 1.0, 1141.25431, 210, mockDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      quarter0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("iKj]", "", "", "iKj]");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-1098));
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMAN;
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
      zoneOffset0.isSupported(chronoField0);
      timeZone0.getDisplayName();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      Number[][] numberArray0 = new Number[4][6];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = null;
      numberArray1[1] = null;
      numberArray1[2] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[6];
      numberArray2[0] = null;
      numberArray2[1] = null;
      numberArray2[2] = null;
      numberArray2[3] = null;
      numberArray2[4] = null;
      numberArray2[5] = null;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      numberArray3[0] = null;
      numberArray3[1] = null;
      numberArray3[2] = null;
      numberArray3[3] = null;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[8];
      numberArray4[0] = null;
      numberArray4[1] = null;
      numberArray4[2] = null;
      numberArray4[3] = null;
      BigInteger bigInteger0 = BigInteger.ZERO;
      numberArray4[4] = (Number) bigInteger0;
      numberArray4[5] = null;
      numberArray4[6] = null;
      numberArray4[7] = null;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.TAIWAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Number[][] numberArray0 = new Number[9][4];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-681), 0);
      int int0 = 673;
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getPercentComplete(673, 673);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 673, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      defaultTableXYDataset0.updateXPoints();
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 60);
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 60;
      doubleArray1[1] = (double) 60;
      doubleArray1[2] = (double) 60;
      doubleArray1[3] = (double) 60;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 60;
      doubleArray1[6] = (double) 60;
      doubleArray1[7] = (double) 60;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 60;
      doubleArray2[2] = (double) 60;
      doubleArray2[3] = (double) 60;
      doubleArray2[4] = (double) 60;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (double) 60;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (double) 60;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (-2913.709);
      doubleArray6[1] = (double) 60;
      doubleArray6[2] = Double.POSITIVE_INFINITY;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 0.0;
      doubleArray6[6] = (double) 60;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = (-1816.9141303592073);
      doubleArray7[3] = (double) 60;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      doubleArray8[0] = (-2913.709);
      doubleArray8[1] = (-1816.9141303592073);
      doubleArray8[2] = 0.0;
      doubleArray8[3] = (double) 60;
      doubleArray8[4] = (double) 60;
      doubleArray8[5] = Double.POSITIVE_INFINITY;
      doubleArray8[6] = (-1816.9141303592073);
      doubleArray8[7] = Double.NaN;
      doubleArray8[8] = 0.0;
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) 60.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("", "", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(3876.9158313, (-3780.821095870783), "Null 'rowData' argument.");
      categoryTableXYDataset0.clone();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 870.78875691);
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 3876.9158313;
      doubleArray1[1] = 870.78875691;
      doubleArray1[2] = (-3780.821095870783);
      doubleArray1[3] = 3876.9158313;
      doubleArray1[4] = 3876.9158313;
      doubleArray1[5] = 870.78875691;
      doubleArray1[6] = (-3780.821095870783);
      doubleArray1[7] = 3876.9158313;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("G?", "iR!&8Y1", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 1873);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1873, Size: 8
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      jDBCXYDataset0.getRangeBounds(true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      Comparable<DefaultIntervalXYDataset>[] comparableArray0 = (Comparable<DefaultIntervalXYDataset>[]) Array.newInstance(Comparable.class, 6);
      int int0 = (-3616);
      Week week0 = new Week(0, (-3616));
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.getDataItem((RegularTimePeriod) week0);
      comparableArray0[0] = (Comparable<DefaultIntervalXYDataset>) null;
      SimpleTimePeriod simpleTimePeriod0 = null;
      try {
        simpleTimePeriod0 = new SimpleTimePeriod(1, (-3616));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.SimpleTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      Number[][] numberArray0 = new Number[0][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      DatasetUtilities.createCategoryDataset((Comparable) millisecond1, (KeyedValues) defaultPieDataset0);
      millisecond1.getSecond();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (double) 0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)4);
      linkedList0.offerLast(byte0);
      Byte byte1 = Byte.valueOf((byte)6);
      linkedList0.add(byte1);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList0, false);
      Byte byte2 = new Byte((byte) (-104));
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList1.add(byte1);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.getDomainBounds(false);
      DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) linkedList1, true);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-1098));
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMAN;
      ChronoField chronoField0 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
      zoneOffset0.isSupported(chronoField0);
      timeZone0.getDisplayName();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      zoneOffset0.toString();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultMultiValueCategoryDataset0, (-1098), (-1465));
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, (-1097));
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-297));
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultPieDataset0.sortByValues(sortOrder0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)14);
      linkedList0.add(byte0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(byte0);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = "-\"xte)egmMsA(l^_rw";
      Number[][] numberArray0 = new Number[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("-\"xte)egmMsA(l^_rw", "org.jfree.data.time.Millisecond", numberArray0);
      Stack<TimeSeriesTableModel> stack0 = new Stack<TimeSeriesTableModel>();
      TimeSeries timeSeries0 = new TimeSeries("org.jfree.data.time.Millisecond", "ut~>sy8|8@f'X>I", "Pn|Z['E9/Et1");
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0, true);
      stack0.add(timeSeriesTableModel0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesTableModel cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      jDBCCategoryDataset0.getRowKeys();
      jDBCCategoryDataset0.getColumnKeys();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) linkedList0, true);
      Byte byte0 = new Byte((byte) (-10));
      linkedList0.add(byte0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.getDomainBounds(true);
      jDBCCategoryDataset0.hasListener(timeSeriesCollection0);
      DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) linkedList0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      RegularTimePeriod regularTimePeriod0 = millisecond0.next();
      Number[][] numberArray0 = new Number[5][1];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) 999;
      numberArray1[1] = (Number) 999;
      numberArray1[2] = (Number) 999;
      numberArray1[3] = (Number) 999;
      numberArray1[4] = (Number) 0;
      numberArray1[5] = (Number) 999;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = (Number) 999;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[7];
      numberArray3[0] = (Number) 0;
      numberArray3[1] = (Number) integer0;
      numberArray3[2] = (Number) 0;
      numberArray3[3] = (Number) integer0;
      numberArray3[4] = (Number) 999;
      numberArray3[5] = (Number) integer0;
      numberArray3[6] = (Number) 999;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[0];
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[0];
      numberArray0[4] = numberArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) regularTimePeriod0, (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-74.4969971201);
      doubleArray1[1] = 1084.638382;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = 2005.73745;
      doubleArray1[4] = (-1307.62);
      doubleArray1[5] = Double.NEGATIVE_INFINITY;
      doubleArray1[6] = (-1.7976931348623157E308);
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = (-1.7976931348623157E308);
      doubleArray2[2] = (-1307.62);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (-74.4969971201);
      doubleArray3[1] = 2005.73745;
      doubleArray3[2] = (-1.7976931348623157E308);
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("iJg)\"S?:d#Rkh/{*Uk", "The number of column keys does not match the number of columns in the data array.", doubleArray0);
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(taskSeriesCollection0, 0, 0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, false);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 0);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      defaultStatisticalCategoryDataset0.add((Number) integer0, (Number) integer0, (Comparable) integer0, (Comparable) integer0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Hour.parseHour("org.jfree.data.statistics.SimpleHistogramBin");
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) null, (double) 23);
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 2);
      comparableArray0[0] = (Comparable<Float>) null;
      comparableArray0[1] = (Comparable<Float>) null;
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-343.0);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = (double) 23;
      doubleArray2[2] = (-343.0);
      doubleArray2[3] = 3623.9336;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (double) 23;
      doubleArray2[6] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 23;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = 3623.9336;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (double) 0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (double) 23;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = Double.NEGATIVE_INFINITY;
      doubleArray6[2] = 0.0;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0);
      TimeZone timeZone0 = TimeZone.getTimeZone("l4XsW.C^3");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      timeSeries0.getItems();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1141.25431;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1774.9546);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1.7976931348623157E308);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 4912.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1774.9546);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 1141.25431;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 4912.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (-3513.40527312);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = (-1.7976931348623157E308);
      doubleArray7[1] = (-1.7976931348623157E308);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = (-1774.9546);
      doubleArray8[2] = Double.POSITIVE_INFINITY;
      doubleArray8[3] = 0.0;
      doubleArray8[4] = 0.0;
      doubleArray8[5] = (-1.7976931348623157E308);
      doubleArray8[6] = (-1.7976931348623157E308);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[2];
      doubleArray9[0] = (-1.7976931348623157E308);
      doubleArray9[1] = 1141.25431;
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(Double.POSITIVE_INFINITY, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Number[][] numberArray0 = new Number[0][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("-\"xte)egmMsA(l^_rw", "org.jfree.data.time.Millisecond", numberArray0);
      Stack<TimeSeriesTableModel> stack0 = new Stack<TimeSeriesTableModel>();
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, false);
      DatasetUtilities.createCategoryDataset("s", "Null 'columnKeys' argument.", numberArray0);
      int int0 = (-1201);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-2095), "org.jfree.data.time.Millisecond", (-2095), (-3531), 0, 0, 0, (-1201), 0, (-2095), (-2095), (-2095), (-3531));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -2095
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 959.16;
      doubleArray1[1] = 1009.02;
      doubleArray1[2] = 4643.1703682646;
      doubleArray1[3] = 971.0882810699;
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = Double.NEGATIVE_INFINITY;
      doubleArray1[6] = 983.7139410845147;
      doubleArray1[7] = Double.NEGATIVE_INFINITY;
      doubleArray1[8] = 2389.1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = 1009.02;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = 959.16;
      doubleArray2[4] = 2389.1;
      doubleArray2[5] = 2389.1;
      doubleArray2[6] = 971.0882810699;
      doubleArray2[7] = 4643.1703682646;
      doubleArray2[8] = 0.8;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) 983.7139410845147);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) null, 1.0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1691L);
      TimeZone timeZone0 = TimeZone.getTimeZone("+");
      Locale locale0 = Locale.ITALIAN;
      Year year0 = new Year(mockDate0, timeZone0, locale0);
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      HashSet<String> hashSet0 = new HashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) hashSet0, locale_FilteringMode0);
      Locale.lookupTag(stack0, list0);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(regularTimePeriod0);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      Stack<Float> stack0 = new Stack<Float>();
      jDBCXYDataset0.close();
      CategoryDataset categoryDataset0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) stack0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }
}
