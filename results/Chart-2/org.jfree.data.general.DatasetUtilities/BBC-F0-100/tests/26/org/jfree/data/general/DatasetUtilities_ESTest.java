/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 26 22:30:29 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.MultipleGradientPaint;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.Statement;
import java.text.DateFormatSymbols;
import java.time.Instant;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.IsoChronology;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Predicate;
import javax.swing.JLayeredPane;
import javax.swing.JSpinner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.SortOrder;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.ComparableObjectItem;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.SeriesChangeInfo;
import org.jfree.data.general.SeriesChangeType;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.BoxAndWhiskerItem;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeSeriesTableModel;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeries;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeries;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 4989.8;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 4989.8;
      doubleArray2[1] = 4989.8;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 4989.8;
      doubleArray2[4] = 4989.8;
      doubleArray2[5] = 4989.8;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 4989.8;
      doubleArray4[1] = 4989.8;
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = 4989.8;
      doubleArray4[5] = 4989.8;
      doubleArray4[6] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (-1.0);
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = 4989.8;
      doubleArray5[3] = (-1.0);
      doubleArray5[4] = 4989.8;
      doubleArray5[5] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = 4989.8;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = (-1.0);
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-215));
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[][] doubleArray0 = new double[19][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      defaultIntervalCategoryDataset0.addChangeListener(xYDatasetTableModel0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      MockDate mockDate0 = new MockDate(660, 0, 908);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 339.59;
      doubleArray1[1] = (-2822.65659860482);
      doubleArray1[2] = (double) 908;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 908;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(regularTimePeriod0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultHighLowDataset0);
      Vector<Double> vector0 = new Vector<Double>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, "6");
      categoryTableXYDataset0.setIntervalPositionFactor(0.0);
      categoryTableXYDataset0.add(0.0, 0.0, "gWwsz%3W2`YE~");
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      double[][] doubleArray0 = new double[8][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-1457.181602349643);
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = Double.NEGATIVE_INFINITY;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (-2097.51339138212);
      doubleArray4[4] = (double) 0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = Double.NEGATIVE_INFINITY;
      doubleArray5[1] = (double) 0;
      doubleArray5[2] = (-2097.51339138212);
      doubleArray5[3] = Double.NEGATIVE_INFINITY;
      doubleArray5[4] = Double.NEGATIVE_INFINITY;
      doubleArray5[5] = Double.NEGATIVE_INFINITY;
      doubleArray5[6] = 2.0;
      doubleArray5[7] = (-2097.51339138212);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = (double) 0;
      doubleArray6[1] = (-2097.51339138212);
      doubleArray6[2] = (-2097.51339138212);
      doubleArray6[3] = (-2097.51339138212);
      doubleArray6[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      doubleArray8[0] = (-2097.51339138212);
      doubleArray8[1] = (-1333.4841119);
      doubleArray0[7] = doubleArray8;
      DatasetUtilities.createCategoryDataset("org.jfree.data.general.Series", "#)8+/", doubleArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[][] doubleArray0 = new double[19][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      defaultIntervalCategoryDataset0.addChangeListener(xYDatasetTableModel0);
      DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      MockDate mockDate0 = new MockDate(660, 0, 908);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      fixedMillisecond0.next();
      fixedMillisecond0.previous();
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 339.59;
      doubleArray1[1] = (-2822.65659860482);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(1.0, (-2822.65659860482), "Category 2");
      DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (double) 0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[][] doubleArray0 = new double[19][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      defaultIntervalCategoryDataset0.addChangeListener(xYDatasetTableModel0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      MockDate mockDate0 = new MockDate(660, 0, 908);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 339.59;
      doubleArray1[1] = (-2822.65659860482);
      doubleArray1[2] = (double) 908;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 908;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(regularTimePeriod0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultHighLowDataset0);
      Vector<Double> vector0 = new Vector<Double>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, true);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 44);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("dDBCPeDatset -unknown data type", 9, 9);
      Comparable<YIntervalSeriesCollection>[] comparableArray0 = (Comparable<YIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 2);
      MockDate mockDate0 = new MockDate(9, 9, 9, 9, 9);
      Quarter quarter0 = new Quarter(mockDate0);
      RegularTimePeriod regularTimePeriod0 = quarter0.next();
      comparableArray0[1] = (Comparable<YIntervalSeriesCollection>) regularTimePeriod0;
      Hour hour0 = new Hour(mockDate0);
      comparableArray0[1] = (Comparable<YIntervalSeriesCollection>) hour0;
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (-1152.8904078364785);
      doubleArray1[2] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-1152.8904078364785);
      doubleArray2[1] = (double) 4;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MockDate mockDate0 = new MockDate();
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      Instant instant0 = MockInstant.now();
      Instant instant1 = MockInstant.minusNanos(instant0, 0L);
      ChronoUnit chronoUnit0 = ChronoUnit.HOURS;
      Instant instant2 = MockInstant.truncatedTo(instant1, chronoUnit0);
      Date date0 = Date.from(instant2);
      dateArray0[2] = date0;
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (-3629.0);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Short short0 = new Short((short)2);
      Vector<Short> vector0 = new Vector<Short>();
      vector0.add(short0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(0.0, 4027.8396409037277, "dDBCPeDatset -unknown data type");
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, vector0, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      xYSeriesCollection0.getRangeBounds(true);
      // Undeclared exception!
      try { 
        Range.shift((Range) null, (-2821.170350680712), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short)195);
      stack0.add(short0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((double) (short)195, (double) (short)195, "?");
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, true);
      Range.combine((Range) null, range0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      Period period0 = Period.ZERO;
      Stack<DefaultBoxAndWhiskerXYDataset> stack1 = new Stack<DefaultBoxAndWhiskerXYDataset>();
      period0.getChronology();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-2731.674), Double.NaN, "Xlzk?db<rON");
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      Double double0 = new Double((-2731.674));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Vector<Short> vector0 = new Vector<Short>(693);
      Short short0 = new Short((short)53);
      vector0.add(short0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(true);
      vector0.stream();
      vector0.listIterator();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(152.5, (-193.98234), 495.5203, 2539.5, (-3110.5517453519), (-1215.55005607424), (-1.0), 24.67, (List) vector0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) short0, (Comparable) short0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, false);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short)204);
      stack0.add(short0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(true);
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(2539.5, (double) (short)204, (-1730.3093), (-1730.3093), 1876.555827965, (-1730.3093), (-2114.7823457922), 152.5, (List) stack0);
      boxAndWhiskerItem0.equals(short0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) short0, (Comparable) short0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, false);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, false);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Short short0 = new Short((short)975);
      Stack<Short> stack0 = new Stack<Short>();
      Short short1 = new Short((short)975);
      stack0.add(short1);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(false);
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-2821.8295662885885), 2539.5, (-2114.7823457922), 2539.5, 152.5, 1876.555827965, 152.5, 152.5, (List) stack0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) short0, (Comparable) short0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      LocalDate localDate0 = MockLocalDate.now();
      stack0.add((ChronoLocalDate) localDate0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-2130.6146211051337), (-2130.6146211051337), 848.2037863159302, 848.2037863159302, (-713.961191), (-2130.6146211051337), (-2130.6146211051337), 848.2037863159302, (List) stack0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) localDate0, (Comparable) localDate0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-713.961191) <= upper (-2130.6146211051337).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("JDBCPeDatwet -unknown data t3pe", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" `C,", (String) null, doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getColumnIndex(" `C,");
      LinkedList<DefaultIntervalXYDataset> linkedList0 = new LinkedList<DefaultIntervalXYDataset>();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      linkedList0.addFirst(defaultIntervalXYDataset0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultIntervalXYDataset0, (List) linkedList0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultIntervalXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 1000);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getItemCount();
      categoryTableXYDataset0.add(369.166232343008, (double) 0, "AD!P");
      categoryTableXYDataset0.add((-2821.670350680712), (-2821.670350680712), "}8 l$,");
      DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0, true);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.setValue(1675.0, (Comparable) "p(o[", (Comparable) "p(o[");
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) "p(o[");
      defaultPieDataset0.insertValue(0, (Comparable) "p(o[", 1675.0);
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short)204);
      stack0.add(short0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(true);
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(2539.5, (double) (short)204, (-1730.30925873807), (-1730.30925873807), 1876.555827965, (-1730.30925873807), (-2114.7823457922), 152.5, (List) stack0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) short0, (Comparable) short0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, false);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      LocalDate localDate0 = MockLocalDate.now();
      stack0.add((ChronoLocalDate) localDate0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-2130.6146211051337), (-2130.6146211051337), 848.2037863159302, 848.2037863159302, (-713.961191), (-2130.6146211051337), (-2130.6146211051337), 848.2037863159302, (List) stack0);
      defaultBoxAndWhiskerCategoryDataset0.add(boxAndWhiskerItem0, (Comparable) localDate0, (Comparable) localDate0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-713.961191) <= upper (-2130.6146211051337).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2029.44868021839;
      doubleArray1[1] = (-3154.9876858);
      doubleArray1[2] = (-615.213031);
      doubleArray1[3] = (-3188.10055267);
      doubleArray1[4] = (-1556.9832);
      doubleArray1[5] = 1.7976931348623157E308;
      doubleArray1[6] = 1331.004504062;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 1331.004504062;
      doubleArray2[1] = (-3154.9876858);
      doubleArray2[2] = (-3154.9876858);
      doubleArray2[3] = 1.7976931348623157E308;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 806.59;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (-2379.242362);
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 430.9;
      doubleArray1[6] = Double.NEGATIVE_INFINITY;
      doubleArray1[7] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (-2379.242362);
      doubleArray2[3] = 1949.430553959165;
      doubleArray2[4] = 430.9;
      doubleArray2[5] = Double.NaN;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = (-1.0);
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.jdbc.JDBCXYDataset", "2f;", doubleArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-2821.670350680712), (-2821.670350680712), "}8 l$,");
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "}8 l$,";
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      double double0 = (-2821.670350680712);
      categoryTableXYDataset0.add((-2821.670350680712), (-2821.670350680712), "}8 l$,");
      boolean boolean0 = true;
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, true);
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      Comparable<MultipleGradientPaint.CycleMethod>[] comparableArray0 = (Comparable<MultipleGradientPaint.CycleMethod>[]) Array.newInstance(Comparable.class, 4);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      int int0 = (-4104);
      // Undeclared exception!
      try { 
        xYIntervalSeriesCollection0.getSeries((-4104));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.XYIntervalSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      short short0 = (short)1557;
      Short short1 = new Short((short)1557);
      stack0.add(short1);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      categoryTableXYDataset0.add((Number) short1, (Number) integer0, "(@f4~sd8*", true);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      short short0 = (short)1675;
      Short short1 = new Short((short)1675);
      Vector<Short> vector0 = new Vector<Short>();
      vector0.add(short1);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      categoryTableXYDataset0.add((Number) integer0, (Number) short1, ">92zut@65", true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[][] doubleArray0 = new double[18][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      MockDate mockDate0 = new MockDate(10, 1096, 3112, 2844, (-170));
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      MockDate mockDate1 = new MockDate(947L);
      Date[] dateArray0 = new Date[3];
      dateArray0[0] = (Date) mockDate1;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate1;
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 3112;
      doubleArray2[1] = 2695.06243040551;
      doubleArray2[2] = (double) 3112;
      doubleArray2[3] = 0.8;
      doubleArray2[4] = (double) 3112;
      doubleArray2[5] = (double) 2844;
      doubleArray2[6] = 2695.06243040551;
      doubleArray2[7] = (double) 2844;
      doubleArray2[8] = (-135.820332);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray2, doubleArray2);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[][] doubleArray0 = new double[18][2];
      DatasetUtilities.createCategoryDataset("p(o[", "p(o[", doubleArray0);
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      stack0.add((ChronoLocalDate) localDate0);
      MockDate mockDate0 = new MockDate(163, 163, 0);
      MockDate mockDate1 = new MockDate(0, 2844, 163, 163, 3112);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate1);
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate1;
      dateArray0[2] = (Date) mockDate1;
      MockDate mockDate2 = new MockDate((-1L));
      dateArray0[3] = (Date) mockDate2;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 3112;
      doubleArray1[2] = (double) (-1L);
      doubleArray1[3] = 0.8;
      doubleArray1[4] = (double) 2844;
      doubleArray1[5] = 2695.06243040551;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 2844;
      doubleArray2[1] = (double) 3112;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 2844;
      doubleArray2[4] = 2695.06243040551;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(simpleTimePeriod0, dateArray0, doubleArray1, doubleArray2, doubleArray1, doubleArray2, doubleArray2);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[][] doubleArray0 = new double[13][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 4);
      Hour hour0 = new Hour();
      defaultPieDataset0.insertValue(4, (Comparable) hour0, (double) 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("JDBCPieDataset - unknown data type", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((-1.0), 293.4789773314404);
      Millisecond millisecond0 = new Millisecond();
      RegularTimePeriod regularTimePeriod0 = millisecond0.next();
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 1746.72, (-3915.266177), 1, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[][] doubleArray0 = new double[18][2];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("z*]:44<T?{dEkmf1", "z*]:44<T?{dEkmf1", doubleArray0);
      defaultCategoryDataset0.setValue((-225.96388202), (Comparable) "z*]:44<T?{dEkmf1", (Comparable) "z*]:44<T?{dEkmf1");
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short)193);
      stack0.add(short0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalWidth((short)193);
      categoryTableXYDataset0.getDomainBounds(true);
      categoryTableXYDataset0.add((double) (short)193, (-2731.83281340046), "@");
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, false);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 11, 11);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      matrixSeriesCollection0.validateObject();
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      Number[][] numberArray0 = new Number[7][4];
      Number[] numberArray1 = new Number[1];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      numberArray2[0] = number0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = number0;
      numberArray2[3] = number0;
      numberArray2[4] = number0;
      numberArray2[5] = (Number) integer0;
      numberArray2[6] = number0;
      numberArray2[7] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      numberArray3[0] = number0;
      numberArray3[1] = (Number) integer0;
      numberArray3[2] = (Number) integer0;
      numberArray3[3] = number0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[2];
      numberArray4[0] = number0;
      Integer integer1 = JLayeredPane.FRAME_CONTENT_LAYER;
      numberArray4[1] = (Number) integer1;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[2];
      numberArray5[0] = (Number) integer0;
      numberArray5[1] = (Number) integer0;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[3];
      numberArray6[0] = (Number) integer0;
      numberArray6[1] = (Number) integer1;
      numberArray6[2] = (Number) integer0;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[4];
      numberArray7[0] = (Number) integer1;
      numberArray7[1] = (Number) integer1;
      numberArray7[2] = number0;
      numberArray7[3] = (Number) integer1;
      numberArray0[6] = numberArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeSeries timeSeries0 = new TimeSeries(zoneOffset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      MockDate mockDate0 = new MockDate();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1385.8), (-641.6504587), 0.5, (-1317.979283559), (-1385.8));
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-1317.979283559), (-1385.8), (-1385.8), 2.0, (-1385.8));
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-1317.979283559), (-641.6504587), 0.5, 3786.395218, 3586.956685800931);
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 3586.956685800931, (-779.0), (-1317.979283559), 4641.278864, 0.5);
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 3786.395218, 2363.11073210728, 4641.278864, (-1.0), (-18.51676));
      oHLCDataItemArray0[4] = oHLCDataItem4;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(zoneOffset0, oHLCDataItemArray0);
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      Stack<XYBarDataset> stack0 = new Stack<XYBarDataset>();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-502);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[][] doubleArray0 = new double[13][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((-5309.56165007), (-832.0), "org.jfree.data.DefaultKeyedValues");
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset1.fireSelectionEvent();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValuesDataset0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) "|#2R,Ab*gD", (Number) null);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 802.9135;
      doubleArray0[2] = 822.138;
      doubleArray0[3] = 2002.4982593544;
      doubleArray0[4] = 4.0;
      doubleArray0[5] = 3368.9584;
      doubleArray0[6] = 4.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 4.0, 802.9135, 463, "|#2R,Ab*gD");
      DatasetUtilities.isEmptyOrNull(xYDataset0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[][] doubleArray0 = new double[13][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 4);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "w%kGSg\"N|S";
      stringArray0[2] = "";
      stringArray0[3] = "@1iNZGl6";
      stringArray0[4] = "";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short)193);
      stack0.add(short0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalWidth((short)193);
      categoryTableXYDataset0.getDomainBounds(true);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-2052.0841994463403), (-2731.673907342));
      DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-3644.710387032), (-2731.673907342), (short)193, "@");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      fixedMillisecond0.toString();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(2631.2777, 0.0, "Fri Feb 14 20:21:21 GMT 2014");
      Integer integer0 = new Integer((-16));
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Period period0 = Period.ofMonths(1893);
      IsoChronology isoChronology0 = period0.getChronology();
      ChronoLocalDate chronoLocalDate0 = isoChronology0.dateEpochDay((-2084));
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      stack0.add(chronoLocalDate0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add((double) 1893, (-3190.9), "bt=$KY/bQ");
      DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 3322.2685221495);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short)1);
      stack0.add(short0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0, false);
      categoryTableXYDataset0.removeChangeListener(intervalXYDelegate0);
      categoryTableXYDataset0.setIntervalWidth((short)1);
      categoryTableXYDataset0.getDomainBounds(false);
      categoryTableXYDataset0.add((double) (short)1, 1003.0, "@");
      DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, 0.5);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("|#2R,Ab*gD", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainUpperBound(true);
      categoryTableXYDataset0.add(231.4373138822181, 2631.2777, "org.jfr;e.data.xy.*bstractXYDataset");
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      Integer integer0 = new Integer(1033);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainUpperBound(true);
      categoryTableXYDataset0.add(231.4373138822181, (-832.0), "org.jfree.data.DefaultKeyedValues");
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      double double0 = new Integer(0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Short short0 = new Short((short)1675);
      Vector<Short> vector0 = new Vector<Short>();
      vector0.add(short0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, true);
      DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) vector0, range0, false);
      categoryTableXYDataset0.add(3042.55197923, 3042.55197923, "+o");
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(48, (short)1675);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, vector0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(231.4373138822181, (-832.0), "org.jfree.data.DefaultKeyedValues");
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(1813.8359, (-832.0), "-dqe*IFvo|()dV;");
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-1967));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("org.jfree.data.xy.AbstractXYDataset", 7, 7);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      String[] stringArray0 = new String[0];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0);
      categoryTableXYDataset0.removeChangeListener(intervalXYDelegate0);
      categoryTableXYDataset0.add((-323.0), (-377.672), "^fiF{YpqvIVr");
      DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-377.672);
      doubleArray2[1] = (-323.0);
      doubleArray2[2] = (-323.0);
      doubleArray2[3] = 57.843641;
      doubleArray2[4] = (-377.672);
      doubleArray2[5] = (-377.672);
      doubleArray2[6] = (-377.672);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (-323.0);
      doubleArray3[1] = (-323.0);
      doubleArray3[2] = (-377.672);
      doubleArray3[3] = 57.843641;
      doubleArray3[4] = 57.843641;
      doubleArray3[5] = 57.843641;
      doubleArray3[6] = 57.843641;
      doubleArray3[7] = 57.843641;
      doubleArray3[8] = (-377.672);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 57.843641;
      doubleArray4[1] = 57.843641;
      doubleArray4[2] = (-323.0);
      doubleArray4[3] = 57.843641;
      doubleArray4[4] = (-323.0);
      doubleArray4[5] = (-323.0);
      doubleArray4[6] = (-323.0);
      doubleArray4[7] = (-377.672);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (-323.0);
      doubleArray5[1] = (-323.0);
      doubleArray5[2] = (-377.672);
      doubleArray5[3] = 1504.57239735106;
      doubleArray5[4] = 57.843641;
      doubleArray5[5] = 57.843641;
      doubleArray5[6] = 57.843641;
      doubleArray5[7] = (-377.672);
      doubleArray5[8] = 57.843641;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("O&Agl>5(F%p", "", doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 8, 8);
      DatasetUtilities.findCumulativeRangeBounds(slidingCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Short short0 = new Short((short)1249);
      Stack<Short> stack0 = new Stack<Short>();
      Short short1 = new Short((short)1249);
      stack0.add(short1);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) defaultIntervalXYDataset0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      stack0.removeIf(predicate3);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalWidth(0.0);
      categoryTableXYDataset0.getDomainBounds(true);
      categoryTableXYDataset0.add((double) (short)1249, 3355.45831, "Null 'period' argument.");
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, false);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, true);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries(".tgN|tuUG+aG0`", 7, 7);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 7;
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) 7;
      doubleArray0[4] = (double) 7;
      doubleArray0[5] = (double) 7;
      doubleArray0[6] = (double) 7;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((-403.0), 7.0);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 7, Double.POSITIVE_INFINITY, 121, 7.0);
      DatasetUtilities.iterateRangeBounds(xYDataset0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DatasetGroup datasetGroup0 = new DatasetGroup();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(true);
      categoryTableXYDataset0.add((-740.221143516), (-1664.786), "Po^'W_^$lEa%6Y&S-S");
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, vector0, false);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[][] doubleArray0 = new double[19][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      defaultIntervalCategoryDataset0.addChangeListener(xYDatasetTableModel0);
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      MockDate mockDate0 = new MockDate(660, 0, 908);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      Date[] dateArray0 = new Date[7];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 339.59;
      doubleArray1[1] = (-2822.65659860482);
      doubleArray1[2] = (double) 908;
      doubleArray1[3] = (double) 0;
      Range.expandToInclude(range0, 6443.513791116768);
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 908;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(regularTimePeriod0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultHighLowDataset0);
      Vector<Double> vector0 = new Vector<Double>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultHighLowDataset0, (List) vector0, range0, true);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Hour hour0 = new Hour();
      timeTableXYDataset0.add((TimePeriod) hour0, Double.NEGATIVE_INFINITY, "Nof6[ew.+I){\"Qw1~");
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Hour hour0 = new Hour();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 839, 839, 23, (-2995), 3963);
      hour0.peg(mockGregorianCalendar0);
      timeTableXYDataset0.add((TimePeriod) hour0, Double.NEGATIVE_INFINITY, "Nof6[ew.+I){\"Qw1~");
      DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      fixedMillisecond0.toString();
      fixedMillisecond0.getTime();
      fixedMillisecond0.toString();
      Number[][] numberArray0 = new Number[1][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short)2457);
      stack0.add(short0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalWidth(1027.0);
      categoryTableXYDataset0.getDomainBounds(true);
      categoryTableXYDataset0.add((-1180.4), (-1216.1198892748), "_x?4l/Ri");
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, true);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      ArrayList<Float> arrayList0 = new ArrayList<Float>();
      arrayList0.ensureCapacity(982);
      arrayList0.add((Float) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short)2457);
      stack0.add(short0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalWidth(1027.0);
      categoryTableXYDataset0.getDomainBounds(true);
      categoryTableXYDataset0.add(1027.0, (-1180.4), "_x?4l/Ri");
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, true);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Short short0 = new Short((short)1249);
      Stack<Short> stack0 = new Stack<Short>();
      Short short1 = new Short((short)1249);
      stack0.add(short1);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalWidth(0.0);
      categoryTableXYDataset0.getDomainBounds(true);
      categoryTableXYDataset0.add((double) (short)1249, 3355.45831, "Null 'period' argument.");
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, false);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      MatrixSeries matrixSeries0 = new MatrixSeries("|#2R,Ab*gD", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      matrixSeriesCollection0.removeChangeListener(xYTaskDataset0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[][] doubleArray0 = new double[11][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'rowData' argument.", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(37, 59, regularTimePeriod0);
      Vector<Long> vector0 = new Vector<Long>();
      DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) vector0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      stack0.add((ChronoLocalDate) null);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.previous();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(37, 37, regularTimePeriod0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (-2085);
      doubleArray1[1] = (double) (-2085);
      doubleArray1[2] = (double) (-2085);
      doubleArray1[3] = (double) (-2085);
      doubleArray1[4] = (double) (-2085);
      doubleArray1[5] = (double) (-2085);
      doubleArray1[6] = (double) (-2085);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) (-2085);
      doubleArray2[1] = (-1077.28699888022);
      doubleArray2[2] = (double) (-2085);
      doubleArray2[3] = (double) (-2085);
      doubleArray2[4] = (double) (-2085);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (-1077.28699888022);
      doubleArray3[1] = (double) (-2085);
      doubleArray3[2] = (double) (-2085);
      doubleArray3[3] = (-1077.28699888022);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) (-2085);
      doubleArray4[1] = 4027.1357778143897;
      doubleArray4[2] = (-1077.28699888022);
      doubleArray4[3] = (-1077.28699888022);
      doubleArray4[4] = (-1077.28699888022);
      doubleArray4[5] = (-1077.28699888022);
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short) (-3499));
      stack0.add(short0);
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (short) (-3499);
      doubleArray1[1] = (double) (short) (-3499);
      doubleArray1[2] = (-3424.9459);
      doubleArray1[3] = (double) (short) (-3499);
      doubleArray1[4] = (double) (short) (-3499);
      doubleArray1[5] = (double) (short) (-3499);
      doubleArray1[6] = (double) (short) (-3499);
      doubleArray1[7] = (double) (short) (-3499);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.DomainOrder", "", doubleArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short) (-3493));
      stack0.add(short0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(999L);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(fixedMillisecond0);
      Number[][] numberArray0 = new Number[2][6];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) short0;
      numberArray1[1] = (Number) short0;
      numberArray1[2] = (Number) short0;
      numberArray1[3] = (Number) short0;
      numberArray1[4] = (Number) short0;
      numberArray1[5] = (Number) short0;
      numberArray1[6] = (Number) short0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      numberArray2[0] = (Number) short0;
      numberArray2[1] = (Number) short0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" l$,", " l$,", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 54);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      categoryToPieDataset0.setGroup(datasetGroup0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) " l$,", (double) 54, 54);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 54, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short) (-3493));
      stack0.add(short0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      Short short1 = new Short((short) (-3493));
      stack0.add(short1);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, false);
      Range.combine(range0, (Range) null);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-620), (short) (-3493));
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'rowData' argument.", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (double) 1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Hour hour0 = new Hour();
      hour0.getStart();
      hour0.getEnd();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1863, 0, hour0);
      dynamicTimeSeriesCollection0.clone();
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short)11);
      stack0.add(short0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (short)11, (-346));
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[][] doubleArray0 = new double[16][2];
      DatasetUtilities.createCategoryDataset(" l$,", " l$,", doubleArray0);
      MatrixSeries matrixSeries0 = new MatrixSeries(" l$,", 44, 44);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(" l$,");
      DatasetUtilities.findMinimumDomainValue(simpleHistogramDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("", "0>=r1&/bEu+NDN", "0>=r1&/bEu+NDN");
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1014, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      ArrayList<CategoryTableXYDataset> arrayList0 = new ArrayList<CategoryTableXYDataset>();
      Integer integer0 = new Integer(1);
      DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[][] doubleArray0 = new double[6][1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = (-1214.8952223);
      doubleArray1[2] = 363.66581;
      doubleArray1[3] = Double.NaN;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 63.9441779337;
      doubleArray2[1] = 363.66581;
      doubleArray2[2] = 363.66581;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 63.9441779337;
      doubleArray3[1] = 363.66581;
      doubleArray3[2] = (-1586.6);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = Double.NaN;
      doubleArray4[1] = 2.0;
      doubleArray4[2] = 363.66581;
      doubleArray4[3] = 2.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = Double.NaN;
      doubleArray5[1] = 363.66581;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = Double.NaN;
      doubleArray6[1] = 2.0;
      doubleArray6[2] = Double.NaN;
      doubleArray6[3] = (-1586.6);
      doubleArray6[4] = 363.66581;
      doubleArray6[5] = 63.9441779337;
      doubleArray6[6] = Double.NaN;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(",6tmgfw/WT_Sa", (String) null, doubleArray0);
      Period period0 = Period.ZERO;
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultXYZDataset0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      jDBCPieDataset0.setValue((Comparable) ",6tmgfw/WT_Sa", 1.0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) null, 1.0, 1381);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1052.2425);
      doubleArray1[1] = 528.46;
      doubleArray1[2] = 730.2221095386727;
      doubleArray1[3] = 1926.8417711363127;
      doubleArray1[4] = 1542.1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 1542.1;
      doubleArray2[1] = (-1052.2425);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 881.955785701119;
      doubleArray1[1] = (-1902.5);
      doubleArray1[2] = 1096.589608;
      doubleArray1[3] = 881.955785701119;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 881.955785701119;
      doubleArray2[1] = 881.955785701119;
      doubleArray2[2] = 881.955785701119;
      doubleArray2[3] = 881.955785701119;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-611), 996);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      jDBCXYDataset0.getRangeBounds(true);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1326), (-1326));
      DatasetUtilities.findMaximumStackedRangeValue(slidingGanttCategoryDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) arrayList0, range0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1009, 1009, (-520));
      TimeZone timeZone0 = TimeZone.getDefault();
      Month month0 = new Month(mockDate0, timeZone0);
      RegularTimePeriod regularTimePeriod0 = month0.next();
      Date[] dateArray0 = new Date[9];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      dateArray0[7] = (Date) mockDate0;
      dateArray0[8] = (Date) mockDate0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-520);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(regularTimePeriod0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 365.11105476933636;
      double[][] doubleArray1 = new double[9][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("", "Index outside valid range.", doubleArray1);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      DatasetUtilities.findMinimumStackedRangeValue(categoryDataset1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Short short0 = new Short((short)1504);
      Stack<Short> stack0 = new Stack<Short>();
      Short short1 = new Short((short)11);
      stack0.add(short1);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, false);
      categoryTableXYDataset0.getDomainBounds(true);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 365.61105476933636;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1390.07668733391;
      doubleArray1[4] = (-3537.51079738497);
      doubleArray1[5] = (-2433.3);
      doubleArray1[6] = 2785.3242301506384;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1390.07668733391;
      doubleArray2[1] = (-3537.51079738497);
      doubleArray2[2] = (-3537.51079738497);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.clone();
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 1013);
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1013;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 1013;
      doubleArray1[3] = (double) 1013;
      doubleArray1[4] = (double) 1013;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) 1013;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 3199.4;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("v(q", "", doubleArray0);
      DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Short short0 = new Short((short)1504);
      Stack<Short> stack0 = new Stack<Short>();
      Short short1 = new Short((short)11);
      stack0.add(short1);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, true);
      Range.combine((Range) null, (Range) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1002;
      doubleArray1[1] = (double) 1002;
      doubleArray1[2] = (double) 1002;
      doubleArray1[3] = (double) 1002;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1639.4741103;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 1002;
      doubleArray3[1] = (double) 1002;
      doubleArray3[2] = 1639.4741103;
      doubleArray3[3] = 1639.4741103;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) 1002;
      doubleArray4[1] = 640.1409095;
      doubleArray4[2] = (double) 1002;
      doubleArray4[3] = 1639.4741103;
      doubleArray4[4] = 1639.4741103;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-2794.0);
      doubleArray1[1] = 4021.382;
      doubleArray1[2] = (-1839.4089241);
      doubleArray1[3] = 5665.7668888;
      doubleArray1[4] = (-1476.555);
      doubleArray1[5] = (-70.90979);
      doubleArray1[6] = 3099.787513328627;
      doubleArray1[7] = 958.508003788601;
      doubleArray1[8] = 1381.745236;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 1381.745236;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 4021.382;
      doubleArray3[3] = (-1839.4089241);
      doubleArray3[4] = 3099.787513328627;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Object object0 = new Object();
      SeriesChangeType seriesChangeType0 = SeriesChangeType.ADD_AND_REMOVE;
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo(seriesChangeType0, (-53), 1026);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(object0, seriesChangeInfo0);
      defaultIntervalCategoryDataset0.seriesChanged(seriesChangeEvent0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[][] doubleArray0 = new double[13][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, (-1415.58717675631));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Quarter quarter0 = new Quarter(date0);
      ArrayList<XIntervalSeriesCollection> arrayList0 = new ArrayList<XIntervalSeriesCollection>();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.isEmptyOrNull((XYDataset) timePeriodValuesCollection0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(quarter0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      matrixSeriesCollection0.setSelectionState(simpleHistogramDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0);
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 4;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("vp`1T>'%Zy2P[HQ", "f*}wZuK|", doubleArray0);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      Range.combine(range0, (Range) null);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" l$,", " l$,", doubleArray0);
      DatasetUtilities.createCategoryDataset(" l$,", " l$,", doubleArray0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      LineFunction2D lineFunction2D0 = new LineFunction2D((-4352.41), (-134.2712079868));
      DatasetUtilities.sampleFunction2D(lineFunction2D0, (-4352.41), (-3500.36), 2, " l$,");
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-1.9083369698804704);
      doubleArray0[1] = (-1.9083369698804704);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      int int0 = 3;
      double double1 = 363.66581;
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 3, 363.66581, 3, (-1.9083369698804704));
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      int int1 = 795;
      int int2 = 2850;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 795, 2850);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 528.77526943668;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-0.5);
      doubleArray0[5] = 2882.117800021;
      doubleArray0[6] = 3697.72046776;
      doubleArray0[7] = 2003.83388291936;
      doubleArray0[8] = (-1.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1.0), 0.0, 992, 0.0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-2342L));
      fixedMillisecond0.getTime();
      fixedMillisecond0.toString();
      Number[][] numberArray0 = new Number[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Wed Dec 31 23:59:57 GMT 1969", "Wed Dec 31 23:59:57 GMT 1969", numberArray0);
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      DatasetUtilities.findMinimumRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (double) 1;
      doubleArray4[1] = 41.641659;
      doubleArray4[2] = (double) 1;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (double) 1;
      doubleArray5[1] = (double) 1;
      doubleArray5[2] = 2802.6492;
      doubleArray5[3] = (double) 1;
      doubleArray5[4] = (double) 1;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 41.641659;
      doubleArray6[1] = (double) 1;
      doubleArray6[2] = 2802.6492;
      doubleArray6[3] = (double) 1;
      doubleArray6[4] = 2802.6492;
      doubleArray0[5] = doubleArray6;
      defaultKeyedValues2DDataset0.setValue(300.0, (Comparable) 2802.6492, (Comparable) 2802.6492);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Period period0 = Period.of((-1), 1009, 1009);
      IsoChronology isoChronology0 = period0.getChronology();
      ChronoLocalDate chronoLocalDate0 = isoChronology0.dateEpochDay(1326L);
      stack0.add(chronoLocalDate0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      Range.combine((Range) null, (Range) null);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-763.25931606);
      doubleArray1[1] = (-267.8597132875);
      doubleArray1[2] = (-1446.1048897232);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 318.3;
      doubleArray1[5] = 686.00022;
      doubleArray1[6] = (-2975.59);
      doubleArray1[7] = 526.9478032936557;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.validateObject();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 1871);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.NEGATIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 365.11105476933636;
      doubleArray0[2] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, 365.11105476933636, 1027, 0.0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.iterateRangeBounds(xYDataset0);
      DatasetUtilities.iterateXYRangeBounds(xYDataset0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Stack<Short> stack0 = new Stack<Short>();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 365.11105476933636;
      doubleArray0[1] = (-1232.904651);
      doubleArray0[2] = 365.11105476933636;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 365.11105476933636;
      doubleArray0[5] = 365.11105476933636;
      doubleArray0[6] = 365.11105476933636;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D1.getCoefficients();
      polynomialFunction2D1.getCoefficients();
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 686.00022, 1641.34129952808, 1033, 365.11105476933636);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.iterateDomainBounds(xYDataset0);
      Stack<XYBarDataset> stack1 = new Stack<XYBarDataset>();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, 365.11105476933636);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) 365.11105476933636, 365.11105476933636);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      matrixSeriesCollection0.setSelectionState(simpleHistogramDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1, 1);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.8;
      doubleArray1[1] = 1.7976931348623157E308;
      doubleArray1[2] = 1980.4;
      doubleArray1[3] = 4832.2201591371795;
      doubleArray1[4] = 894.0;
      doubleArray1[5] = (-1522.6);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 2229);
      Double double0 = new Double((-1.0));
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[1];
      doubleArray0[5] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      XYDataset xYDataset0 = null;
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(false);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) stack0, range0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      Range range1 = Range.shift(range0, 821.230860594, true);
      Range.shift(range0, 365.11105476933636, true);
      Stack<Short> stack0 = new Stack<Short>();
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack0, range1, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Quarter quarter0 = new Quarter(date0);
      ArrayList<XIntervalSeriesCollection> arrayList0 = new ArrayList<XIntervalSeriesCollection>();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) quarter0, (double) 4);
      timePeriodValues0.add(timePeriodValue0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.isEmptyOrNull((XYDataset) timePeriodValuesCollection0);
      timePeriodValuesCollection0.getDomainBounds(false);
      timePeriodValuesCollection0.getDomainBounds(false);
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0);
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 4;
      doubleArray1[3] = (double) 4;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = 1.5;
      doubleArray1[7] = (double) 1;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "z.", doubleArray0);
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 363.66581;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      TableXYDataset tableXYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 957);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-2244.27334822), (-1616.9));
      Quarter quarter0 = new Quarter();
      DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 957, 1241.01137362701, 957, quarter0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      keyToGroupMap0.clone();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Integer integer0 = new Integer(1002);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1, 3552);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      matrixSeriesCollection0.clone();
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
      // Undeclared exception!
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      keyToGroupMap0.clone();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 11, 1054);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = " `C,";
      stringArray0[1] = null;
      stringArray0[2] = " `C,";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = " `C,";
      stringArray0[6] = " `C,";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 363.66581;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      int int0 = 1033;
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), 363.66581, 1033, 363.66581);
      xYSeriesCollection0.fireSelectionEvent();
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      CategoryDataset categoryDataset0 = null;
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" `C,", (String) null, doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getColumnIndex(" `C,");
      LinkedList<DefaultIntervalXYDataset> linkedList0 = new LinkedList<DefaultIntervalXYDataset>();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      linkedList0.addFirst(defaultIntervalXYDataset0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) linkedList0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 363.66581;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), 363.66581, 1033, 363.66581);
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      xYSeriesCollection0.getDomainUpperBound(false);
      DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.createCategoryDataset((Comparable) 363.66581, (KeyedValues) defaultKeyedValuesDataset0);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) 363.66581, Double.NaN, 389);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      Comparable<DefaultOHLCDataset>[] comparableArray0 = (Comparable<DefaultOHLCDataset>[]) Array.newInstance(Comparable.class, 1);
      SimpleHistogramBin simpleHistogramBin0 = null;
      try {
        simpleHistogramBin0 = new SimpleHistogramBin(1.7976931348623157E308, 1.7976931348623157E308, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid bounds; 1.7976931348623157E308 to 1.7976931348623157E308
         //
         verifyException("org.jfree.data.statistics.SimpleHistogramBin", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      Integer integer0 = new Integer(1002);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, (double) 1002);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      MatrixSeries matrixSeries0 = new MatrixSeries("t", 1, 87);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("t");
      matrixSeriesCollection0.setSelectionState(simpleHistogramDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DatasetUtilities.findMaximumRangeValue((XYDataset) xIntervalSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short) (-3493));
      stack0.add(short0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      Range.shift(range0, (-433.9242), false);
      Range.shift(range0, (-433.9242), true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, false);
      DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      double[][] doubleArray3 = new double[8][2];
      doubleArray3[0] = doubleArray1;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray2;
      doubleArray3[4] = doubleArray2;
      doubleArray3[5] = doubleArray0;
      doubleArray3[6] = doubleArray0;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (-433.9242);
      doubleArray4[1] = (-433.9242);
      doubleArray4[2] = (-433.9242);
      doubleArray4[3] = (-433.9242);
      doubleArray4[4] = (-433.9242);
      doubleArray4[5] = (-433.9242);
      doubleArray4[6] = (-433.9242);
      doubleArray4[7] = (-433.9242);
      doubleArray4[8] = (double) (short) (-3493);
      doubleArray3[7] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'values' argument.", "Null 'values' argument.", doubleArray3);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 45);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) short0, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 45, Size: 9
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 536, 1440);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      Integer integer0 = new Integer(1002);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      matrixSeriesCollection0.clone();
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short)997);
      vector0.add(short0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      Range.shift(range0, 588.214129, true);
      DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      vector0.add(short0);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) vector0, true);
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (int) (short)997);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short) (-3493));
      stack0.add(short0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      Range.shift(range0, (-433.9242), false);
      Range.shift(range0, (-433.9242), true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, true);
      DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 363.66581;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), 363.66581, 1033, 363.66581);
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      xYSeriesCollection0.getDomainUpperBound(false);
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) vector0, range0, false);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XYDataset xYDataset0 = null;
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      Consumer<XYSeriesCollection> consumer0 = (Consumer<XYSeriesCollection>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      int int0 = 73;
      MockDate mockDate0 = new MockDate(73, 73, 73, 73, (-4418), (-2872));
      Quarter quarter0 = new Quarter(mockDate0);
      XYSeries xYSeries0 = new XYSeries(quarter0);
      XYSeries xYSeries1 = xYSeries0.createCopy((-2886), 4);
      xYSeries1.addOrUpdate((Number) 1, (Number) 1);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries1);
      vector0.add(xYSeriesCollection0);
      vector0.remove((Object) null);
      vector0.parallelStream();
      vector0.spliterator();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(integer0);
      matrixSeriesCollection0.setSelectionState(simpleHistogramDataset0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      Range.combine(range0, (Range) null);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      Integer integer0 = new Integer(959);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      matrixSeriesCollection0.clone();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      Integer integer0 = new Integer((-2159));
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      MatrixSeries matrixSeries0 = new MatrixSeries("Farout value must be greater than the outlier value, which is currently set at: (", 1, 1022);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Integer integer1 = new Integer((-2159));
      MatrixSeriesCollection matrixSeriesCollection1 = new MatrixSeriesCollection(matrixSeries0);
      matrixSeriesCollection1.clone();
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection1, false);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" l$,", (String) null, doubleArray0);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-3784));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" `C,", (String) null, doubleArray0);
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = Short.valueOf((short) (-334));
      stack0.add(short0);
      Short short1 = new Short((short) (-334));
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds(categoryDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.7976931348623157E308);
      doubleArray0[0] = doubleArray1;
      Double double0 = new Double((-1.7976931348623157E308));
      int int0 = 0;
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short) (-1682));
      vector0.add(short0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      Range.shift(range0, 3028.706943715769, true);
      DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) vector0, false);
      Comparable<DefaultOHLCDataset>[] comparableArray0 = (Comparable<DefaultOHLCDataset>[]) Array.newInstance(Comparable.class, 0);
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) double0;
      numberArray1[1] = (Number) short0;
      numberArray1[2] = (Number) short0;
      numberArray1[3] = (Number) (-1.7976931348623157E308);
      numberArray1[4] = (Number) (-1.7976931348623157E308);
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
      try {
        defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, numberArray0, numberArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" `C,", (String) null, doubleArray0);
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = Short.valueOf((short) (-334));
      stack0.add(short0);
      Short short1 = new Short((short) (-334));
      Short short2 = new Short((short) (-334));
      stack0.add(short2);
      stack0.add(short1);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(defaultTableXYDataset0);
      defaultTableXYDataset0.removeChangeListener(xYDatasetTableModel0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (double) 0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Short short0 = new Short((short) (-1048));
      Vector<Short> vector0 = new Vector<Short>();
      vector0.add(short0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultXYDataset0, (List) vector0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 363.66581;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), 363.66581, 1033, 363.66581);
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      Range range0 = DatasetUtilities.findDomainBounds(xYDataset0, true);
      DatasetUtilities.iterateToFindRangeBounds(xYDataset0, (List) vector0, range0, true);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[][] doubleArray0 = new double[5][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 996.0;
      doubleArray1[1] = (-1928.1955);
      doubleArray1[2] = 1021.8;
      doubleArray1[3] = 1561.11309203;
      doubleArray1[4] = 2499.182;
      doubleArray1[5] = Double.NEGATIVE_INFINITY;
      doubleArray1[6] = 1661.7;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 2499.182;
      doubleArray2[1] = 1661.7;
      doubleArray2[2] = 2499.182;
      doubleArray2[3] = 996.0;
      doubleArray2[4] = 1021.8;
      doubleArray2[5] = 996.0;
      doubleArray2[6] = (-1928.1955);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = 1661.7;
      doubleArray3[2] = 1.5;
      doubleArray3[3] = 2499.182;
      doubleArray3[4] = 1661.7;
      doubleArray3[5] = 1661.7;
      doubleArray3[6] = 996.0;
      doubleArray3[7] = Double.NEGATIVE_INFINITY;
      doubleArray3[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 1.5;
      doubleArray4[1] = 1.5;
      doubleArray4[2] = Double.NEGATIVE_INFINITY;
      doubleArray4[3] = 1.5;
      doubleArray4[4] = 1.5;
      doubleArray4[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 1.5;
      doubleArray5[1] = 2499.182;
      doubleArray5[2] = 2499.182;
      doubleArray5[3] = (-287.0);
      doubleArray5[4] = 1021.8;
      doubleArray5[5] = 1.5;
      doubleArray5[6] = 1661.7;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "?[Lw+^(L$Yd", doubleArray0);
      DatasetUtilities.findRangeBounds(categoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 3);
      double[][] doubleArray0 = new double[6][2];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(" `C,", (String) null, doubleArray0);
      defaultCategoryDataset0.getColumnIndex(" `C,");
      Integer integer0 = Integer.getInteger((String) null, (-1));
      defaultCategoryDataset0.setValue((Number) integer0, (Comparable) integer0, (Comparable) integer0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[0][5];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Quarter quarter0 = new Quarter(date0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      ArrayList<XIntervalSeriesCollection> arrayList0 = new ArrayList<XIntervalSeriesCollection>();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(date0);
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      matrixSeriesCollection0.clone();
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-2342L));
      fixedMillisecond0.getTime();
      fixedMillisecond0.toString();
      fixedMillisecond0.getEnd();
      Number[][] numberArray0 = new Number[1][8];
      DatasetUtilities.createCategoryDataset("Wed Dec 31 23:59:57 GMT 1969", "Wed Dec 31 23:59:57 GMT 1969", numberArray0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Wed Dec 31 23:59:57 GMT 1969", "Wed Dec 31 23:59:57 GMT 1969", numberArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(fixedMillisecond0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 302.89;
      doubleArray1[1] = (double) (-2342L);
      doubleArray1[2] = (double) (-2342L);
      doubleArray1[3] = (double) (-2342L);
      doubleArray1[4] = (double) (-2342L);
      doubleArray1[5] = (double) (-2342L);
      doubleArray1[6] = (double) (-2342L);
      doubleArray1[7] = (double) (-2342L);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = 302.89;
      doubleArray2[2] = 302.89;
      doubleArray2[3] = (double) (-2342L);
      doubleArray2[4] = (double) (-2342L);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) (-2342L);
      doubleArray3[1] = 302.89;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 302.89;
      doubleArray4[1] = Double.POSITIVE_INFINITY;
      doubleArray4[2] = 302.89;
      doubleArray4[3] = Double.POSITIVE_INFINITY;
      doubleArray4[4] = Double.POSITIVE_INFINITY;
      doubleArray4[5] = 1.0;
      doubleArray4[6] = 302.89;
      doubleArray4[7] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (double) (-2342L);
      doubleArray6[1] = 302.89;
      doubleArray6[2] = 1.0;
      doubleArray6[3] = (-1.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("fqt<7Q63a%", "", doubleArray0);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset1, false);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 3);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), 363.66581, 1033, 0.0);
      polynomialFunction2D0.getCoefficients();
      DatasetUtilities.findRangeBounds(xYDataset0);
      DatasetUtilities.isEmptyOrNull(xYDataset0);
      DatasetUtilities.iterateRangeBounds(xYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      Period.of((-2083), (-2083), (-2083));
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, false);
      DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      stack0.add((ChronoLocalDate) null);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Quarter quarter0 = new Quarter(date0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      ArrayList<XIntervalSeriesCollection> arrayList0 = new ArrayList<XIntervalSeriesCollection>();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(date0);
      Number[][] numberArray0 = new Number[1][0];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 363.66581;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), 363.66581, 1033, 363.66581);
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      DatasetUtilities.findRangeBounds(xYDataset0);
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      vector0.add(defaultStatisticalCategoryDataset0);
      stack0.setSize(1);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds(xYDataset0, (List) vector0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultStatisticalCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Quarter quarter0 = new Quarter(date0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      ArrayList<XIntervalSeriesCollection> arrayList0 = new ArrayList<XIntervalSeriesCollection>();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(date0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultXYZDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      jDBCPieDataset0.setValue((Comparable) date0, (-1.0));
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) date0, 257.0, 1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[2] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, 363.66581, 1033, 0.0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      xYSeriesCollection0.getDomainUpperBound(true);
      DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.7976931348623157E308);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      Double double0 = new Double((-1.7976931348623157E308));
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short) (-1682));
      vector0.add(short0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      Range range1 = Range.shift(range0, 3028.706943715769, true);
      Range.shift(range1, (-2078.833635), false);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultIntervalXYDataset0, (List) vector0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultIntervalXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2047), (-2047));
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(2435L, 2435L);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) simpleTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      Period period0 = Period.of((-2084), (-2084), (-2084));
      period0.getChronology();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack0, range0, false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 363.66581;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), 363.66581, 1033, 363.66581);
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      xYSeriesCollection0.getDomainUpperBound(false);
      DatasetUtilities.findMinimumDomainValue(xYSeriesCollection0);
      DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.7976931348623157E308);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      TimeSeries timeSeries0 = new TimeSeries(double0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ArrayList<XIntervalSeriesCollection> arrayList0 = new ArrayList<XIntervalSeriesCollection>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, false);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 363.66581;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), 363.66581, 1033, 363.66581);
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Stack<DefaultStatisticalCategoryDataset>();
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      xYSeriesCollection0.getDomainUpperBound(true);
      DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.7976931348623157E308);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      TimeSeries timeSeries0 = new TimeSeries(double0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      MockDate mockDate0 = new MockDate(59, (-2917), (-2917));
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(mockDate0);
      fixedMillisecond1.toString();
      fixedMillisecond0.toString();
      Vector<Short> vector0 = new Vector<Short>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultXYZDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection1);
      jDBCPieDataset0.setValue((Comparable) mockDate0, (double) 59);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) "Mon Dec 05 00:00:00 GMT 1707", (-1.0), (-3573));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 3);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      simpleTimePeriod0.getEnd();
      Date date0 = simpleTimePeriod0.getStart();
      comparableArray0[0] = (Comparable<Float>) simpleTimePeriod0;
      double[][] doubleArray0 = new double[6][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" `C,", (String) null, doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getColumnIndex(" `C,");
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(date0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      Quarter quarter0 = new Quarter();
      DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 1);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      taskSeriesCollection0.equals(comparableArray0[0]);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<Double> stack0 = new Stack<Double>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      LineFunction2D lineFunction2D0 = new LineFunction2D(58.9438886, (-1.0));
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-2429.2866175876898), (-2429.2866175876898), (-1), zoneOffset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Quarter quarter0 = new Quarter(date0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ArrayList<XIntervalSeriesCollection> arrayList0 = new ArrayList<XIntervalSeriesCollection>();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(date0);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.isEmptyOrNull((XYDataset) timePeriodValuesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timePeriodValuesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      Period period0 = Period.of((-2084), (-2084), (-2084));
      IsoChronology isoChronology0 = period0.getChronology();
      ChronoLocalDate chronoLocalDate0 = isoChronology0.dateEpochDay((-543L));
      stack0.add(chronoLocalDate0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 3);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      simpleTimePeriod0.getEnd();
      comparableArray0[0] = (Comparable<Float>) simpleTimePeriod0;
      SimpleTimePeriod simpleTimePeriod1 = new SimpleTimePeriod(1033, 1033);
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1033;
      doubleArray1[1] = (double) 1033;
      doubleArray1[2] = (double) 1033;
      doubleArray1[3] = (double) 1033;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 1033;
      doubleArray1[6] = (double) 1033;
      doubleArray1[7] = (double) 1033;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (double) 1033;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'columnKeys' argument.", "", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(comparableArray0[0]);
      KeyToGroupMap keyToGroupMap1 = new KeyToGroupMap(1033.0);
      keyToGroupMap1.clone();
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Long long0 = new Long(1L);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      LinkedList<DefaultIntervalXYDataset> linkedList0 = new LinkedList<DefaultIntervalXYDataset>();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      linkedList0.removeIf(predicate2);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) linkedList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Quarter quarter0 = new Quarter(date0);
      ArrayList<XIntervalSeriesCollection> arrayList0 = new ArrayList<XIntervalSeriesCollection>();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(quarter0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short)305);
      vector0.add(short0);
      Short short1 = new Short((short) (-1177));
      vector0.add(short0);
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1292.2195602);
      doubleArray0[1] = (-39.575);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-2063L), 2163L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-2063L));
      fixedMillisecond0.toString();
      fixedMillisecond0.toString();
      Vector<Short> vector0 = new Vector<Short>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      LinkedList<DefaultIntervalXYDataset> linkedList0 = new LinkedList<DefaultIntervalXYDataset>();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, false);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      Float float0 = new Float((double) 2163L);
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection1);
      jDBCPieDataset0.setValue((Comparable) (-1292.2195602), (-39.575));
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) (-1.0), 1.7976931348623157E308, 3216);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Week week0 = new Week();
      RegularTimePeriod regularTimePeriod0 = week0.next();
      regularTimePeriod0.compareTo(week0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) regularTimePeriod0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1018, 1018);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1018);
      fixedMillisecond0.toString();
      fixedMillisecond0.toString();
      Vector<Short> vector0 = new Vector<Short>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      LinkedList<DefaultIntervalXYDataset> linkedList0 = new LinkedList<DefaultIntervalXYDataset>();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, false);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultXYZDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection1);
      jDBCPieDataset0.setValue((Comparable) "Thu Jan 01 00:00:01 GMT 1970", (-1.0));
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) fixedMillisecond0, (-1.0), (-1790));
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("JDBCPeDatset -unknown data type", 1, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) 1;
      doubleArray2[7] = (double) 1;
      doubleArray0[1] = doubleArray2;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("JDBCPeDatset -unknown data type", "", doubleArray0);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultCategoryDataset0, tableOrder0, 1);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(categoryToPieDataset0);
      Hour.parseHour("JDBCPeDatset -unknown data type");
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) null, 4124.75573373, 23);
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset1, (Comparable) "JDBCPeDatset -unknown data type", 1905.21);
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset2, (Comparable) double0, 1.0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      polynomialFunction2D0.getCoefficients();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1058, 1058);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset", "Null 'columnKeys' argument.", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(simpleTimePeriod0);
      keyToGroupMap0.clone();
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      DatasetUtilities.findRangeBounds(categoryDataset0, false);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      Long long0 = new Long(1L);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) long0, (Number) long0);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Object object0 = new Object();
      taskSeriesCollection0.equals(object0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      stack0.add((ChronoLocalDate) null);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, false);
      Vector<TimeSeriesCollection> vector1 = new Vector<TimeSeriesCollection>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[][] doubleArray0 = new double[6][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (-1995.49);
      doubleArray1[2] = 1401.2762571791495;
      doubleArray1[3] = (-865.5472611);
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = 2395.114977146;
      doubleArray1[6] = 310.3024;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 310.3024;
      doubleArray2[1] = 375.4141;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = (-865.5472611);
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (-1995.49);
      doubleArray3[1] = 310.3024;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray3[3] = 375.4141;
      doubleArray3[4] = 1401.2762571791495;
      doubleArray3[5] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-1995.49);
      doubleArray4[1] = 2395.114977146;
      doubleArray4[2] = Double.NEGATIVE_INFINITY;
      doubleArray4[3] = 2395.114977146;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = (-865.5472611);
      doubleArray6[1] = 2.0;
      doubleArray6[2] = (-865.5472611);
      doubleArray6[3] = Double.POSITIVE_INFINITY;
      doubleArray6[4] = 310.3024;
      doubleArray0[5] = doubleArray6;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.xy.OHLCDataItem", (String) null, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-852));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      stack0.add((ChronoLocalDate) null);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) vectorSeriesCollection0, true);
      Range.combine((Range) null, (Range) null);
      Range.combine((Range) null, (Range) null);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      taskSeriesCollection0.equals((Object) null);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      Stack<ChronoLocalDate> stack1 = new Stack<ChronoLocalDate>();
      stack1.add((ChronoLocalDate) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) stack1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][5];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetGroup datasetGroup0 = new DatasetGroup();
      xYSeriesCollection0.setGroup(datasetGroup0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(2, "q~[", 2, 2, 2, 2, 1021, 1, 1, 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month 1021
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      Long long0 = new Long(1L);
      stack0.removeElement(long0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      defaultPieDataset0.sortByKeys(sortOrder0);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>();
      Number[][] numberArray0 = new Number[3][2];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) long0;
      Short short0 = new Short((short)2);
      numberArray1[1] = (Number) short0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      numberArray2[0] = (Number) long0;
      numberArray2[1] = (Number) short0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (double) 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      stack0.add((ChronoLocalDate) null);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      Range.combine((Range) null, (Range) null);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      taskSeriesCollection0.equals((Object) null);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[2] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 0.0, 363.66581, 1033, 0.0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      TimeZone timeZone0 = TimeZone.getTimeZone("Ec-@Wc_Bn3x+GD2]r");
      TimeSeries timeSeries0 = new TimeSeries(0.0, "Ec-@Wc_Bn3x+GD2]r", "Ec-@Wc_Bn3x+GD2]r");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      DatasetUtilities.iterateDomainBounds(xYDataset0);
      Vector<XYBarDataset> vector1 = new Vector<XYBarDataset>();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 363.66581;
      Period period0 = Period.of((-2084), (-2084), (-2084));
      IsoChronology isoChronology0 = period0.getChronology();
      ChronoLocalDate chronoLocalDate0 = isoChronology0.dateEpochDay((-543L));
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      stack0.add(chronoLocalDate0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      timeSeriesCollection0.getDomainBounds(true);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      fixedMillisecond0.toString();
      fixedMillisecond0.toString();
      Vector<Short> vector0 = new Vector<Short>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      LinkedList<DefaultIntervalXYDataset> linkedList0 = new LinkedList<DefaultIntervalXYDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) linkedList0, false);
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultIntervalXYDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) fixedMillisecond0, (double) 0, 190);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      ArrayList<JDBCXYDataset> arrayList0 = new ArrayList<JDBCXYDataset>();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Second.parseSecond("S");
      defaultKeyedValuesDataset0.setValue((Comparable) "S", (Number) 59);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) null, (-3041.0127470162), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      stack0.add((ChronoLocalDate) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1169.8729);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) null, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1058, 1058);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      arrayList0.add(xYIntervalSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      Period period0 = Period.of((-2084), (-2084), (-2084));
      IsoChronology isoChronology0 = period0.getChronology();
      ChronoLocalDate chronoLocalDate0 = isoChronology0.dateEpochDay((-543L));
      stack0.add(chronoLocalDate0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      Vector<Short> vector0 = new Stack<Short>();
      Short short0 = new Short((short)1);
      vector0.add(short0);
      Short short1 = new Short((short)1360);
      vector0.add(short1);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) vector0, true);
      int int0 = 1495;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = null;
      try {
        dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection((-1760), 1495);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      DatasetUtilities.findMinimumRangeValue((XYDataset) jDBCXYDataset0);
      int int0 = (-1255);
      String string0 = "ks";
      Minute.parseMinute("ks");
      Second second0 = null;
      try {
        second0 = new Second((-1255), (Minute) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'minute' argument.
         //
         verifyException("org.jfree.data.time.Second", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 363.66581;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), 363.66581, 1071, 363.66581);
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      DatasetUtilities.findRangeBounds(xYDataset0);
      DatasetUtilities.findMinimumDomainValue(xYDataset0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      DatasetUtilities.findMinimumRangeValue(xYDataset0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2223L);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(366, 2000, 181, 0, 0, 0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      fixedMillisecond0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      jDBCCategoryDataset0.getColumnIndex(regularTimePeriod0);
      jDBCCategoryDataset0.getRowKeys();
      MatrixSeries matrixSeries0 = new MatrixSeries("s@c", 181, 22);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (-821));
      defaultPieDataset0.setValue((Comparable) mockGregorianCalendar1, (Number) double0);
      DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 363.66581;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), 363.66581, 1033, 363.66581);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      TimeZone timeZone0 = TimeZone.getTimeZone("Ec-@Wc_Bn3x+GD2]r");
      TimeSeries timeSeries0 = new TimeSeries(363.66581, "Ec-@Wc_Bn3x+GD2]r", "Ec-@Wc_Bn3x+GD2]r");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      DatasetUtilities.iterateDomainBounds(xYDataset0);
      Vector<XYBarDataset> vector1 = new Vector<XYBarDataset>();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 363.66581;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), 363.66581, 1033, 363.66581);
      Stack<DefaultStatisticalCategoryDataset> stack0 = new Stack<DefaultStatisticalCategoryDataset>();
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      TimeSeries timeSeries0 = new TimeSeries("Ec-@Wc_Bn3x+GD2]r", "Duplicate items in 'rowKeys'.", "Ec-@Wc_Bn3x+GD2]r");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      DatasetUtilities.iterateDomainBounds(xYDataset0);
      Vector<XYBarDataset> vector1 = new Vector<XYBarDataset>();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 1400.596253050032;
      doubleArray0[2] = (-836.5336034557985);
      doubleArray0[3] = Double.NaN;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, Double.NaN, 1400.596253050032, 121, 0.0);
      DatasetUtilities.iterateDomainBounds(xYDataset0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1014, 1);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("");
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 1, 1);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      fixedMillisecond0.toString();
      fixedMillisecond0.toString();
      Vector<Short> vector0 = new Vector<Short>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      LinkedList<DefaultIntervalXYDataset> linkedList0 = new LinkedList<DefaultIntervalXYDataset>();
      vector0.add((Short) null);
      Number[][] numberArray0 = new Number[1][1];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = number0;
      numberArray1[1] = (Number) null;
      numberArray1[2] = (Number) null;
      numberArray1[3] = number0;
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      numberArray1[4] = (Number) integer0;
      numberArray1[5] = number0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "The 'data' array must contain three arrays all having the same length.", numberArray0);
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, true);
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultIntervalXYDataset0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultIntervalXYDataset0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-2342L));
      Date date0 = fixedMillisecond0.getTime();
      fixedMillisecond0.toString();
      fixedMillisecond0.getEnd();
      Number[][] numberArray0 = new Number[1][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Wed Dec 31 23:59:57 GMT 1969", "Wed Dec 31 23:59:57 GMT 1969", numberArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(date0);
      keyToGroupMap0.clone();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((String[]) null, numberArray0, numberArray0);
      DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1058, 1058);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      jDBCCategoryDataset0.getColumnIndex(simpleTimePeriod0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0, false);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(zoneOffset0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(zoneOffset0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, keyToGroupMap0);
      Quarter quarter0 = new Quarter();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, 1576);
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1169.8729);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 363.66581, 1526, 3, 2.147483647E9);
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>();
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 3);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      simpleTimePeriod0.getEnd();
      Date date0 = simpleTimePeriod0.getStart();
      comparableArray0[0] = (Comparable<Float>) simpleTimePeriod0;
      double[][] doubleArray0 = new double[6][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" `C,", (String) null, doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getColumnIndex(" `C,");
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(date0);
      DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) null, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      polynomialFunction2D0.getCoefficients();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1058, 1058);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset", "Null 'columnKeys' argument.", doubleArray0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(simpleTimePeriod0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      Quarter quarter0 = new Quarter();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 1);
      DatasetUtilities.createCategoryDataset((Comparable) "Null 'columnKeys' argument.", (KeyedValues) pieDataset0);
      DatasetUtilities.findRangeBounds(categoryDataset0);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (-953.700236029));
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DatasetUtilities.findMaximumDomainValue(defaultIntervalXYDataset0);
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 6443.513791116768;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 3167.476652539627;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-135.820332);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.7976931348623157E308);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      Vector<Short> vector0 = new Vector<Short>();
      Short short0 = new Short((short) (-1682));
      vector0.add(short0);
      Short short1 = new Short((short)1360);
      vector0.add(short1);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.7976931348623157E308);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("org.jfree.data.function.PolynomialFunction2D", "The number of column keys does not match the number of columns in the data array.", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(double0);
      keyToGroupMap0.clone();
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Short short0 = new Short((short)2457);
      Stack<Short> stack0 = new Stack<Short>();
      stack0.add(short0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.setIntervalWidth((short)2457);
      categoryTableXYDataset0.getDomainBounds(true);
      categoryTableXYDataset0.add(3843.4118533045, 1027.0, "");
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, true);
      double[][] doubleArray0 = new double[0][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Duplicate items in 'columnKeys'.", "+fvDgpT1SYdSt", doubleArray0);
      DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 363.66581;
      doubleArray0[2] = (-2.147483648E9);
      String string0 = null;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.getColumnIndex(" `C,");
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(363.66581);
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(363.66581);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, keyToGroupMap0);
      Quarter quarter0 = new Quarter();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      defaultMultiValueCategoryDataset0.getRangeBounds(true);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Integer integer0 = new Integer((-1678));
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultTableXYDataset0, 2148.944474);
      XYBarDataset xYBarDataset1 = new XYBarDataset(xYBarDataset0, 363.66581);
      vector0.add(xYBarDataset1);
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset(true);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset1);
      Range.shift(range0, 2148.944474, true);
      Range range1 = Range.shift(range0, (double) (-1678), true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) vector0, range1, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYBarDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1394), 1033);
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1394), 996);
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      Range.scale(range0, 1518.9);
      ArrayList<DefaultHighLowDataset> arrayList0 = new ArrayList<DefaultHighLowDataset>();
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) arrayList0, range0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      Period period0 = Period.of(1033, 1033, 3971);
      period0.getChronology();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-5143), (-299));
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2084), (-1214));
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) vector0, range0, false);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1169.8729);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 363.66581, 1526, 3, 2.147483647E9);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYTaskDataset0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 363.66581;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), 363.66581, 1033, 363.66581);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 363.66581, (Number) 363.66581);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) vector0, true);
      DatasetUtilities.findRangeBounds(xYDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      DatasetUtilities.isEmptyOrNull(xYDataset0);
      Range range0 = DatasetUtilities.iterateRangeBounds(xYDataset0, false);
      DatasetUtilities.findRangeBounds(xYDataset0, (List) vector0, range0, true);
      DatasetUtilities.findDomainBounds(xYDataset0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 363.66581;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), 363.66581, 1033, 363.66581);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 363.66581, (Number) 363.66581);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) vector0, true);
      DatasetUtilities.findRangeBounds(xYDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      DatasetUtilities.isEmptyOrNull(xYDataset0);
      JDBCCategoryDataset jDBCCategoryDataset1 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset1, (List) vector0, false);
      DatasetUtilities.findMaximumRangeValue(xYDataset0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-2342L));
      fixedMillisecond0.toString();
      fixedMillisecond0.toString();
      fixedMillisecond0.getEnd();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("Wed Dec 31 23:59:57 GMT 1969");
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset", doubleArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1033);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1033, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2047), (-2047));
      DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, true);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getXValue((-876), (-876));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.7976931348623157E308);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      fixedMillisecond0.toString();
      fixedMillisecond0.toString();
      fixedMillisecond0.getEnd();
      Vector<Short> vector0 = new Vector<Short>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, false);
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultIntervalXYDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1169.8729);
      doubleArray0[1] = (-1169.8729);
      doubleArray0[2] = (-1169.8729);
      doubleArray0[3] = (-1169.8729);
      doubleArray0[4] = (-1169.8729);
      doubleArray0[5] = (-1169.8729);
      doubleArray0[6] = (-1169.8729);
      doubleArray0[7] = (-1169.8729);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-1169.8729), 1526, 3, (-1169.8729));
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYTaskDataset0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      Stack<Short> stack0 = new Stack<Short>();
      Short short0 = new Short((short) (-3493));
      stack0.add(short0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      Range.shift(range0, (-433.9242), false);
      Range.shift(range0, (-433.9242), true);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) stack0, range0, false);
      DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 4832.2201591371795;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), 0.0, 1033, 4832.2201591371795);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 4832.2201591371795, (Number) 4832.2201591371795);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) vector0, true);
      DatasetUtilities.findRangeBounds(xYDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      DatasetUtilities.isEmptyOrNull(xYDataset0);
      Range range0 = DatasetUtilities.iterateRangeBounds(xYDataset0, false);
      DatasetUtilities.findRangeBounds(xYDataset0, (List) vector0, range0, true);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.7976931348623157E308);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      TimeSeries timeSeries0 = new TimeSeries(double0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("Ec-@Wc_Bn3x+GD2]r");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, zoneInfo0);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, (Range) null, false);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      Period period0 = Period.of((-2084), (-2084), (-2084));
      period0.getChronology();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1214), (-1214));
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, (-2084), (-2084));
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>();
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) stack0, range0, true);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 2223L;
      doubleArray0[2] = (-1169.8729);
      MatrixSeries matrixSeries0 = new MatrixSeries("=", 4, 1507);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.findMinimumDomainValue(defaultXYZDataset0);
      matrixSeriesCollection0.clone();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, 1507);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) stack0, false);
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      // Undeclared exception!
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      long long0 = 1493L;
      int int0 = 366;
      int int1 = 0;
      int int2 = 3980;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 3955, Integer.MAX_VALUE, 3980, 3955, 0);
      mockGregorianCalendar0.clone();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, (double) Integer.MAX_VALUE);
      int int3 = 1507;
      MatrixSeries matrixSeries0 = new MatrixSeries("s@c", 4, 1507);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      MatrixSeriesCollection matrixSeriesCollection1 = (MatrixSeriesCollection)matrixSeriesCollection0.clone();
      // Undeclared exception!
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection1, false);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 363.66581;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), 363.66581, 1033, 363.66581);
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      Range range0 = DatasetUtilities.findRangeBounds(xYDataset0);
      Range.shift(range0, (-2.147483648E9), false);
      DatasetUtilities.findMaximumDomainValue(xYDataset0);
      LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
      DatasetUtilities.iterateDomainBounds(xYDataset0, false);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      taskSeriesCollection0.removeAll();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYTaskDataset0);
      Vector<Integer> vector0 = new Vector<Integer>();
      DatasetUtilities.iterateRangeBounds((XYDataset) xYTaskDataset0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYTaskDataset0, (List) vector0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-397.6371076);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-298L));
      fixedMillisecond0.toString();
      fixedMillisecond0.getEnd();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, true);
      DatasetUtilities.findMaximumRangeValue((XYDataset) xYTaskDataset0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.getDomainBounds(true);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, true);
      DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      int int0 = 3557;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 3557);
      DatasetUtilities.findMinimumStackedRangeValue(slidingGanttCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = new double[6];
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = 0.0;
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0, false);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 3);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      simpleTimePeriod0.getEnd();
      simpleTimePeriod0.getStart();
      comparableArray0[0] = (Comparable<Float>) simpleTimePeriod0;
      double[][] doubleArray0 = new double[6][2];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(" `C,", (String) null, doubleArray0);
      defaultCategoryDataset0.getColumnIndex(" `C,");
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, false);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultCategoryDataset0.setSelectionState(defaultKeyedValues2DDataset0);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(zoneInfo0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 5994);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5994, Size: 6
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (-1169.8729);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.findMinimumDomainValue(vectorSeriesCollection0);
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      boolean boolean0 = false;
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection1, (List) stack0, false);
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      ChronoLocalDate chronoLocalDate0 = isoChronology0.dateEpochDay((-3318L));
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      stack0.add(chronoLocalDate0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      int int0 = 37;
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection1, 4, 37);
      int int1 = 2223;
      int int2 = 1189;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 2223, 1189);
      Integer integer0 = new Integer(37);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection1);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingGanttCategoryDataset1, (Comparable) chronoLocalDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      double[][] doubleArray0 = new double[1][2];
      String string0 = "Null 'dataset' argument.";
      DatasetUtilities.createCategoryDataset("Null 'dataset' argument.", "Duplicate items in 'columnKeys'.", doubleArray0);
      System.setCurrentTimeMillis((-1091L));
      Comparable<TimeSeriesTableModel>[] comparableArray0 = (Comparable<TimeSeriesTableModel>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 536, 536);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingGanttCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2162, 0, 366);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(277L);
      fixedMillisecond0.toString();
      fixedMillisecond0.getEnd();
      fixedMillisecond0.next();
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) fixedMillisecond0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1493L);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 3955, Integer.MAX_VALUE, 3980, 3955, 0);
      mockGregorianCalendar0.clone();
      regularTimePeriod0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      jDBCCategoryDataset0.getColumnIndex(regularTimePeriod0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, (double) Integer.MAX_VALUE);
      MatrixSeries matrixSeries0 = new MatrixSeries("s@c", 4, 1507);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      matrixSeriesCollection0.clone();
      JDBCCategoryDataset jDBCCategoryDataset1 = new JDBCCategoryDataset(connection1);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset1, 366);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) stack0, true);
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) jDBCCategoryDataset0);
      DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) mockGregorianCalendar0, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 363.66581;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), 363.66581, 1033, 363.66581);
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      Range range0 = DatasetUtilities.findRangeBounds(xYDataset0);
      Range.shift(range0, (-2.147483648E9), false);
      DatasetUtilities.findMaximumDomainValue(xYDataset0);
      LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) 363.66581, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 363.66581;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), 363.66581, 1033, 363.66581);
      Vector<DefaultStatisticalCategoryDataset> vector0 = new Vector<DefaultStatisticalCategoryDataset>();
      DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      xYSeriesCollection0.getDomainUpperBound(false);
      DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      ChronoLocalDate chronoLocalDate0 = isoChronology0.dateEpochDay((-3318L));
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      stack0.add(chronoLocalDate0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      stack0.setSize(37);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection1, 4, 37);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 2223, 1189);
      Integer integer0 = new Integer(37);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection1);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) jDBCPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      stack0.add((ChronoLocalDate) null);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, false);
      Vector<TimeSeriesCollection> vector1 = new Vector<TimeSeriesCollection>();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 1091);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) null, (double) 1091, 1091);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) pieDataset1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      Period period0 = Period.of((-2085), (-2085), (-2085));
      IsoChronology isoChronology0 = period0.getChronology();
      ChronoLocalDate chronoLocalDate0 = isoChronology0.dateEpochDay((-2085));
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) chronoLocalDate0, (double) (-2085), (-2085));
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) (-2085);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) (-2085);
      doubleArray3[1] = (double) (-2085);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (double) (-2085);
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = (double) (-2085);
      doubleArray3[7] = 0.0;
      doubleArray3[8] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (double) (-2085);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 0.0;
      doubleArray0[4] = doubleArray5;
      DatasetUtilities.createCategoryDataset("'O", "", doubleArray0);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2223L);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(366, 2000, 181, 0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      fixedMillisecond0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      jDBCCategoryDataset0.getColumnIndex(regularTimePeriod0);
      jDBCCategoryDataset0.getRowKeys();
      MatrixSeries matrixSeries0 = new MatrixSeries("s@c", 181, 22);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (-821));
      defaultPieDataset0.setValue((Comparable) mockGregorianCalendar1, (Number) double0);
      DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Quarter quarter0 = new Quarter(date0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      ArrayList<XIntervalSeriesCollection> arrayList0 = new ArrayList<XIntervalSeriesCollection>();
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(date0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      Double double0 = new Double(1.0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) regularTimePeriod0, (Number) 1);
      DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      MatrixSeries matrixSeries0 = new MatrixSeries("v5|x2eJqfa/", 837, 1);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      double[][] doubleArray0 = new double[5][5];
      defaultStatisticalCategoryDataset0.hasListener(defaultTableXYDataset0);
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-1.7976931348623157E308);
      doubleArray2[1] = (double) 1L;
      doubleArray2[2] = (-1.7976931348623157E308);
      doubleArray2[3] = (-1.7976931348623157E308);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 1L;
      doubleArray3[1] = (-1.7976931348623157E308);
      doubleArray3[2] = (-1.7976931348623157E308);
      doubleArray3[3] = (-397.31744654503007);
      doubleArray3[4] = (-1.7976931348623157E308);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-1.7976931348623157E308);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (-1.7976931348623157E308);
      doubleArray5[1] = (double) 1L;
      doubleArray5[2] = (-397.31744654503007);
      doubleArray5[3] = (-397.31744654503007);
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.getRowKeys();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1260.36882785237;
      doubleArray1[1] = 1260.36882785237;
      doubleArray1[2] = 2954.48329485122;
      doubleArray1[3] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 1260.36882785237;
      doubleArray2[2] = 2954.48329485122;
      doubleArray2[3] = 1260.36882785237;
      doubleArray2[4] = 1260.36882785237;
      doubleArray2[5] = 1260.36882785237;
      doubleArray2[6] = 2954.48329485122;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 2954.48329485122;
      doubleArray3[1] = 1260.36882785237;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      stack0.add((ChronoLocalDate) null);
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("i^", "i^", "i^");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "i^";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.7976931348623157E308);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      Long long0 = new Long(1L);
      stack0.removeElement(long0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      stack0.add((ChronoLocalDate) null);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-537L));
      fixedMillisecond0.toString();
      fixedMillisecond0.getEnd();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2162, 0, 366);
      mockGregorianCalendar0.clone();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (double) 0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2162);
      fixedMillisecond0.toString();
      fixedMillisecond0.getEnd();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3036.80517578125;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      MatrixSeries matrixSeries0 = new MatrixSeries("SeriesChangeType.ADD_AND_REMOVE", 14, 14);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      matrixSeriesCollection0.clone();
      DatasetUtilities.iterateDomainBounds((XYDataset) xYTaskDataset0, true);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "SeriesChangeType.ADD_AND_REMOVE", (KeyedValues) defaultKeyedValues0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0);
      ArrayList<IntervalXYDelegate> arrayList0 = new ArrayList<IntervalXYDelegate>();
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) arrayList0, true);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2223L);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(366, 2000, 181, 0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      mockGregorianCalendar0.clone();
      fixedMillisecond0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      jDBCCategoryDataset0.getColumnIndex(regularTimePeriod0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (double) 2000);
      MatrixSeries matrixSeries0 = new MatrixSeries("s@c", 181, 22);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (-821));
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      double[][] doubleArray0 = new double[11][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      categoryTableXYDataset0.add(1813.8359, 231.4373138822181, "");
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Hour hour0 = new Hour();
      timeTableXYDataset0.add((TimePeriod) hour0, Double.NEGATIVE_INFINITY, "Nof6[ew.+I){\"Qw1~");
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 1013);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1013, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      jDBCCategoryDataset0.validateObject();
      jDBCCategoryDataset0.clone();
      JSpinner jSpinner0 = new JSpinner();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(364, (-1193), (-2478), Integer.MAX_VALUE, (-2478), (-2478));
      Object object0 = new Object();
      MockDate mockDate0 = new MockDate(364, 2336, 2728, 2574, (-2478));
      TimeZone timeZone0 = TimeZone.getDefault();
      Day day0 = new Day(mockDate0, timeZone0);
      day0.getSerialIndex();
      day0.getSerialIndex();
      Hour hour0 = new Hour(364, day0);
      hour0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (double) 2574);
      MatrixSeries matrixSeries0 = new MatrixSeries("", 9, 9);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      matrixSeries0.fireSeriesChanged();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, false);
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 2728);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (-1169.8729);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.findMinimumDomainValue(vectorSeriesCollection0);
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection1, (List) stack0, false);
      DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0);
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection1);
      DatasetUtilities.isEmptyOrNull((XYDataset) xYTaskDataset0);
      DatasetUtilities.findMaximumDomainValue(vectorSeriesCollection0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, (-117));
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection1);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      simpleTimePeriod0.getStart();
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset", doubleArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) simpleTimePeriod0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 4832.2201591371795;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), 0.0, 1033, 4832.2201591371795);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 4832.2201591371795, (Number) 4832.2201591371795);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = 0.0;
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0, false);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (-2102));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (-821));
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) (-821);
      doubleArray2[1] = (double) (-821);
      doubleArray2[2] = (double) (-821);
      doubleArray2[3] = (double) (-821);
      doubleArray2[4] = (double) (-821);
      doubleArray2[5] = (-479.0);
      doubleArray2[6] = (double) (-821);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-479.0);
      doubleArray3[1] = (-479.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      double[][] doubleArray0 = new double[20][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 1);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[][] doubleArray1 = new double[1][8];
      doubleArray1[0] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      Double double0 = new Double(1.5);
      int int0 = 0;
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 0);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      Vector<Short> vector0 = new Vector<Short>();
      short short0 = (short) (-1682);
      Short short1 = new Short((short) (-1682));
      vector0.add(short1);
      Short short2 = new Short((short) (-1682));
      vector0.add(short2);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (-1169.8729);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.findMinimumDomainValue(vectorSeriesCollection0);
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      Stack<CategoryTableXYDataset> stack1 = new Stack<CategoryTableXYDataset>();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      stack1.add(categoryTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection1, (List) stack1, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.CategoryTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      ChronoLocalDate chronoLocalDate0 = isoChronology0.dateEpochDay((-3318L));
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      stack0.add(chronoLocalDate0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      stack0.setSize(37);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      TaskSeriesCollection taskSeriesCollection2 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection1, 37, 31);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 996, (-1697));
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection2);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 3);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      simpleTimePeriod0.getEnd();
      simpleTimePeriod0.getStart();
      comparableArray0[0] = (Comparable<Float>) simpleTimePeriod0;
      double[][] doubleArray0 = new double[6][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" `C,", (String) null, doubleArray0);
      ((DefaultCategoryDataset) categoryDataset0).getColumnIndex(" `C,");
      DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      DatasetUtilities.findMaximumRangeValue(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      Period period0 = Period.ZERO;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) (-2084);
      doubleArray0[5] = (double) 1L;
      doubleArray0[6] = (double) (-2084);
      doubleArray0[7] = (double) (-2084);
      doubleArray0[8] = (double) 1L;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      double[][] doubleArray3 = new double[5][2];
      doubleArray3[0] = doubleArray1;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      defaultStatisticalCategoryDataset0.equals(categoryTableXYDataset0);
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray2;
      doubleArray3[4] = doubleArray2;
      DatasetUtilities.createCategoryDataset((String) null, "LX", doubleArray3);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(1.0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      System.setCurrentTimeMillis((-9223372036854775808L));
      Comparable<String>[] comparableArray0 = (Comparable<String>[]) Array.newInstance(Comparable.class, 8);
      comparableArray0[0] = (Comparable<String>) null;
      comparableArray0[1] = (Comparable<String>) null;
      comparableArray0[2] = (Comparable<String>) null;
      comparableArray0[3] = (Comparable<String>) null;
      comparableArray0[4] = (Comparable<String>) null;
      comparableArray0[5] = (Comparable<String>) simpleTimePeriod0;
      comparableArray0[6] = (Comparable<String>) simpleTimePeriod0;
      comparableArray0[7] = (Comparable<String>) simpleTimePeriod0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset", "", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(simpleTimePeriod0);
      keyToGroupMap0.clone();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      stack0.push(defaultMultiValueCategoryDataset0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 363.66581;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      polynomialFunction2D0.getCoefficients();
      polynomialFunction2D0.getCoefficients();
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 3);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      comparableArray0[0] = (Comparable<Float>) simpleTimePeriod0;
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      TimeSeries timeSeries0 = new TimeSeries(comparableArray0[0], " `C,", " `C,");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      defaultIntervalXYDataset0.setSelectionState(timeSeriesCollection0);
      DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      Period period0 = Period.of((-2084), (-2084), (-2084));
      IsoChronology isoChronology0 = period0.getChronology();
      ChronoLocalDate chronoLocalDate0 = isoChronology0.dateEpochDay((-543L));
      stack0.add(chronoLocalDate0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 4, (-1803));
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 996, (-1760));
      DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      DatasetUtilities.createCategoryDataset((Comparable) isoChronology0, (KeyedValues) defaultKeyedValues0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      Period period0 = Period.of((-2084), (-2084), (-2084));
      IsoChronology isoChronology0 = period0.getChronology();
      ChronoLocalDate chronoLocalDate0 = isoChronology0.dateEpochDay((-543L));
      stack0.add(chronoLocalDate0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 4, (-1803));
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 996, (-1760));
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.setFirstCategoryIndex((-2084));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid index.
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection1);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYTaskDataset0, true);
      polynomialFunction2D0.getCoefficients();
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Hour.parseHour("IB");
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) null, (-445.4065), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection1);
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 3135.8050267203, 3719.211219, 1526, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultXYDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      Stack<DefaultMultiValueCategoryDataset> stack1 = new Stack<DefaultMultiValueCategoryDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(jDBCXYDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYDataset xYDataset0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection1);
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-397.6371076);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) xYTaskDataset0, true);
      double[][] doubleArray1 = new double[8][5];
      doubleArray1[6] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      jDBCCategoryDataset0.validateObject();
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      JDBCCategoryDataset jDBCCategoryDataset1 = (JDBCCategoryDataset)jDBCCategoryDataset0.clone();
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      assertNotNull(jDBCCategoryDataset1);
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
      
      JSpinner jSpinner0 = new JSpinner();
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertNotNull(jSpinner0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(364, (-1193), (-2478), Integer.MAX_VALUE, (-2478), (-2478));
      assertNotNull(mockGregorianCalendar0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      MockDate mockDate0 = new MockDate(364, 2336, 2728, 2574, (-2478));
      assertNotNull(mockDate0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Day day0 = new Day(mockDate0, zoneInfo0);
      assertEquals("Thu Jun 03 12:42:00 GMT 2466", mockDate0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(15665575320000L, day0.getLastMillisecond());
      assertEquals(15665575320000L, day0.getFirstMillisecond());
      assertNotNull(day0);
      
      long long0 = day0.getSerialIndex();
      assertEquals("Thu Jun 03 12:42:00 GMT 2466", mockDate0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(15665575320000L, day0.getLastMillisecond());
      assertEquals(15665575320000L, day0.getFirstMillisecond());
      assertEquals(206883L, long0);
      
      Hour hour0 = new Hour(364, day0);
      assertEquals("Thu Jun 03 12:42:00 GMT 2466", mockDate0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(15665575320000L, day0.getLastMillisecond());
      assertEquals(15665575320000L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(108, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      
      long long1 = hour0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2466,MONTH=5,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=3,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2147483647,HOUR_OF_DAY=108,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Thu Jun 03 12:42:00 GMT 2466", mockDate0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(15665575320000L, day0.getLastMillisecond());
      assertEquals(15665575320000L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(108, hour0.getHour());
      assertFalse(long1 == long0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0L, long1);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (double) 2574);
      assertNull(range0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 9, 9);
      assertNull(matrixSeries0.getDescription());
      assertEquals(9, matrixSeries0.getColumnsCount());
      assertEquals(9, matrixSeries0.getRowCount());
      assertEquals(81, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(9, matrixSeries0.getColumnsCount());
      assertEquals(9, matrixSeries0.getRowCount());
      assertEquals(81, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeriesCollection0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(zoneInfo0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(timeSeriesCollection0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(defaultMultiValueCategoryDataset0));
      assertNotNull(stack0);
      
      matrixSeries0.fireSeriesChanged();
      assertNull(matrixSeries0.getDescription());
      assertEquals(9, matrixSeries0.getColumnsCount());
      assertEquals(9, matrixSeries0.getRowCount());
      assertEquals(81, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, false);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(defaultMultiValueCategoryDataset0));
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(8.0, range2.getUpperBound(), 0.01);
      assertEquals(4.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(8.0, range2.getLength(), 0.01);
      assertNull(matrixSeries0.getDescription());
      assertEquals(9, matrixSeries0.getColumnsCount());
      assertEquals(9, matrixSeries0.getRowCount());
      assertEquals(81, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(range2);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 4832.2201591371795;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), 0.0, 1033, 4832.2201591371795);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotNull(xYSeriesCollection0);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      assertEquals(1033L, simpleTimePeriod0.getStartMillis());
      assertEquals(1033L, simpleTimePeriod0.getEndMillis());
      assertNotNull(simpleTimePeriod0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) 4832.2201591371795, (Number) 4832.2201591371795);
      assertEquals(4832.2201591371795, xYDataItem0.getYValue(), 0.01);
      assertEquals(4832.2201591371795, xYDataItem0.getXValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      MockDate mockDate0 = (MockDate)fixedMillisecond0.getEnd();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281321L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(1392409281321L, fixedMillisecond1.getLastMillisecond());
      assertEquals(1392409281321L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(1392409281321L, fixedMillisecond1.getSerialIndex());
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertNotNull(fixedMillisecond1);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      
      Number[] numberArray0 = new Number[7];
      numberArray0[0] = (Number) 363.66581;
      numberArray0[0] = (Number) (-2.147483648E9);
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertEquals(3, doubleArray0.length);
      assertEquals((-9.903520314283053E27), range0.getLowerBound(), 0.01);
      assertEquals((-4.951760157141527E27), range0.getCentralValue(), 0.01);
      assertEquals(363.66581, range0.getUpperBound(), 0.01);
      assertEquals(9.903520314283053E27, range0.getLength(), 0.01);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotNull(range0);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-812.789);
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 2954.48329485122;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = 1260.36882785237;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray4[1] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 1260.36882785237;
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = 2954.48329485122;
      doubleArray5[3] = 2954.48329485122;
      doubleArray0[4] = doubleArray5;
      doubleArray0[5] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 4832.2201591371795;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 3);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      assertEquals(1033L, simpleTimePeriod0.getStartMillis());
      assertEquals(1033L, simpleTimePeriod0.getEndMillis());
      assertNotNull(simpleTimePeriod0);
      
      Date date0 = simpleTimePeriod0.getStart();
      assertEquals(1033L, simpleTimePeriod0.getStartMillis());
      assertEquals(1033L, simpleTimePeriod0.getEndMillis());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", date0.toString());
      assertNotNull(date0);
      
      comparableArray0[0] = (Comparable<Float>) simpleTimePeriod0;
      double[][] doubleArray3 = new double[6][2];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray0;
      doubleArray3[5] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" `C,", (String) null, doubleArray3);
      assertEquals(6, doubleArray3.length);
      assertNotNull(categoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((-2.147483648E9));
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(6, doubleArray3.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(24161.100795685896, range0.getUpperBound(), 0.01);
      assertEquals((-5.368697039449602E9), range0.getCentralValue(), 0.01);
      assertEquals(1.0737442401100796E10, range0.getLength(), 0.01);
      assertEquals((-1.073741824E10), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertEquals(6, doubleArray3.length);
      assertEquals((-1.0737394078899205E9), range1.getCentralValue(), 0.01);
      assertEquals(4832.2201591371795, range1.getUpperBound(), 0.01);
      assertEquals((-2.147483648E9), range1.getLowerBound(), 0.01);
      assertEquals(2.147488480220159E9, range1.getLength(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertNotNull(jSpinner0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(number0);
      
      int int0 = 326;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 326);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(325, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(Double.NaN, number1);
      assertNotNull(number1);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, true);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, 0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      int int1 = (-1983);
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) 2, (-2.147483648E9), (-1983));
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertNotNull(pieDataset0);
      
      Date date0 = null;
      int int2 = 335;
      String string0 = null;
      int int3 = 121;
      int int4 = 1746;
      int int5 = (-95);
      int int6 = 13;
      int int7 = 3132;
      // Undeclared exception!
      try { 
        categoryToPieDataset0.getKey(3386);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid 'index': 3386
         //
         verifyException("org.jfree.data.category.CategoryToPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 2223L;
      doubleArray0[2] = (-1169.8729);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0, 2223.0, (-1169.8729), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, polynomialFunction2D1.getOrder());
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertNotNull(polynomialFunction2D1);
      assertArrayEquals(new double[] {0.0, 2223.0, (-1169.8729), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      defaultIntervalXYDataset0.setSelectionState(xYSeriesCollection0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(number0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (double) 2223L);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2223.0, range0.getLowerBound(), 0.01);
      assertEquals(2223.0, range0.getUpperBound(), 0.01);
      assertEquals(2223.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNotNull(jDBCXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(jDBCXYDataset0, stack0, false);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertNull(range2);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1089, 831);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1089, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(831, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertNotNull(taskSeriesCollection1);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertNotNull(xYTaskDataset0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYTaskDataset0, true);
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertNull(range0);
      assertNotSame(taskSeriesCollection1, taskSeriesCollection0);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      assertEquals(7, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotNull(range1);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        stack0.setSize((-199));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -199
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-397.6371076);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-397.6371076)}, doubleArray0, 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range1);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, polynomialFunction2D1.getOrder());
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertNotNull(polynomialFunction2D1);
      assertArrayEquals(new double[] {(-397.6371076)}, doubleArray0, 0.01);
      
      PolynomialFunction2D polynomialFunction2D2 = new PolynomialFunction2D(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, polynomialFunction2D2.getOrder());
      assertTrue(polynomialFunction2D2.equals((Object)polynomialFunction2D1));
      assertTrue(polynomialFunction2D2.equals((Object)polynomialFunction2D0));
      assertNotNull(polynomialFunction2D2);
      assertArrayEquals(new double[] {(-397.6371076)}, doubleArray0, 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 1111);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) (-397.6371076), (double) 1022, (-1));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertTrue(boolean0);
      assertNotSame(pieDataset0, pieDataset1);
      
      TimeTableXYDataset timeTableXYDataset0 = null;
      try {
        timeTableXYDataset0 = new TimeTableXYDataset((TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.data.time.TimeTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 4832.253086553081;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(15, doubleArray0.length);
      assertEquals(14, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(15, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertEquals(14, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(15, doubleArray0.length);
      assertEquals(15, doubleArray2.length);
      assertEquals(14, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((-2.147483648E9));
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      Vector<IntervalXYDelegate> vector0 = new Vector<IntervalXYDelegate>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultBoxAndWhiskerXYDataset0, vector0, true);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 4832.253086553081, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (-821));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(pieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.0, double0, 0.01);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertNotNull(taskSeriesCollection1);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertNotNull(xYTaskDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 2);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertNotNull(pieDataset0);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 2612.857019;
      doubleArray1[3] = 1.6144999009488985;
      doubleArray1[4] = 2154.0158;
      doubleArray1[5] = (-2628.6822968645038);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = 2154.0158;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      boolean boolean0 = stack0.add(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(categoryTableXYDataset0));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.CategoryTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      assertEquals(1033L, simpleTimePeriod0.getEndMillis());
      assertEquals(1033L, simpleTimePeriod0.getStartMillis());
      assertNotNull(simpleTimePeriod0);
      
      String string0 = "Null 'columnKeys' argument.";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset", "Null 'columnKeys' argument.", doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(simpleTimePeriod0);
      assertEquals(1033L, simpleTimePeriod0.getEndMillis());
      assertEquals(1033L, simpleTimePeriod0.getStartMillis());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      KeyToGroupMap keyToGroupMap1 = (KeyToGroupMap)keyToGroupMap0.clone();
      assertEquals(1033L, simpleTimePeriod0.getEndMillis());
      assertEquals(1033L, simpleTimePeriod0.getStartMillis());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, keyToGroupMap1.getGroupCount());
      assertTrue(keyToGroupMap1.equals((Object)keyToGroupMap0));
      assertNotNull(keyToGroupMap1);
      assertNotSame(keyToGroupMap0, keyToGroupMap1);
      assertNotSame(keyToGroupMap1, keyToGroupMap0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(1, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      
      Week week0 = new Week();
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = week0.getStart();
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(date0);
      
      Date date1 = mockGregorianCalendar0.getTime();
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertNotNull(date1);
      
      mockGregorianCalendar0.set(1, 53, 1, (-1282), 1000);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=53,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=1,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=-1282,MINUTE=1000,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      week0.peg(mockGregorianCalendar0);
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=53,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=1,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=-1282,MINUTE=1000,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      Week week1 = (Week)week0.previous();
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106748L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertEquals(2014, week1.getYearValue());
      assertEquals(6, week1.getWeek());
      assertFalse(week1.equals((Object)week0));
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week1);
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) week0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-812.789);
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 2954.48329485122;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = 1260.36882785237;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1.0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset1);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      DefaultPieDataset defaultPieDataset2 = new DefaultPieDataset(defaultPieDataset1);
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset2);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset2);
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(boolean0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      String string0 = fixedMillisecond0.toString();
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", string0);
      assertNotNull(string0);
      
      ArrayList<JDBCXYDataset> arrayList0 = new ArrayList<JDBCXYDataset>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, (List) arrayList0, true);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(range0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2209L);
      assertEquals(2209L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2209L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2209L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2209L, fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertEquals(2209L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2209L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2209L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2209L, fixedMillisecond0.getSerialIndex());
      assertEquals(2208L, regularTimePeriod0.getSerialIndex());
      assertEquals(2208L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(2208L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(2208L, regularTimePeriod0.getLastMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.UK;
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(2209L));
      assertNotNull(vector0);
      
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.next();
      assertEquals(2209L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2209L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2209L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2209L, fixedMillisecond0.getSerialIndex());
      assertEquals(2208L, regularTimePeriod0.getSerialIndex());
      assertEquals(2208L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(2208L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(2208L, regularTimePeriod0.getLastMillisecond());
      assertEquals(2209L, regularTimePeriod1.getMiddleMillisecond());
      assertEquals(2209L, regularTimePeriod1.getLastMillisecond());
      assertEquals(2209L, regularTimePeriod1.getFirstMillisecond());
      assertEquals(2209L, regularTimePeriod1.getSerialIndex());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertFalse(regularTimePeriod1.equals((Object)regularTimePeriod0));
      assertTrue(regularTimePeriod1.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod1);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(regularTimePeriod0, regularTimePeriod1);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(regularTimePeriod1, fixedMillisecond0);
      assertNotSame(regularTimePeriod1, regularTimePeriod0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0, false);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, 2);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) fixedMillisecond0, 1.5, 1);
      assertEquals(2209L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2209L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2209L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2209L, fixedMillisecond0.getSerialIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertTrue(fixedMillisecond0.equals((Object)regularTimePeriod1));
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertNotNull(pieDataset0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 1244.4826735426, 2209L, 1016, fixedMillisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 4832.2201591371795;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 3);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      assertEquals(1033L, simpleTimePeriod0.getEndMillis());
      assertEquals(1033L, simpleTimePeriod0.getStartMillis());
      assertNotNull(simpleTimePeriod0);
      
      comparableArray0[0] = (Comparable<Float>) simpleTimePeriod0;
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Short short0 = new Short((short)1);
      assertEquals((short)1, (short)short0);
      assertNotNull(short0);
      
      // Undeclared exception!
      try { 
        defaultIntervalXYDataset0.getY(1033, (-1597));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1033, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      ChronoLocalDate chronoLocalDate0 = null;
      boolean boolean0 = stack0.add((ChronoLocalDate) null);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[null]", stack0.toString());
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-979L));
      assertEquals((-979L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-979L), fixedMillisecond0.getSerialIndex());
      assertEquals((-979L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-979L), fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertEquals((-979L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-979L), fixedMillisecond0.getSerialIndex());
      assertEquals((-979L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-979L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-980L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-980L), regularTimePeriod0.getSerialIndex());
      assertEquals((-980L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-980L), regularTimePeriod0.getMiddleMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod1 = fixedMillisecond0.previous();
      assertEquals((-979L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-979L), fixedMillisecond0.getSerialIndex());
      assertEquals((-979L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-979L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-980L), regularTimePeriod1.getLastMillisecond());
      assertEquals((-980L), regularTimePeriod1.getFirstMillisecond());
      assertEquals((-980L), regularTimePeriod1.getSerialIndex());
      assertEquals((-980L), regularTimePeriod1.getMiddleMillisecond());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertTrue(regularTimePeriod1.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod1.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod1);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(regularTimePeriod1, regularTimePeriod0);
      assertNotSame(regularTimePeriod1, fixedMillisecond0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1858, 366);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(366, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1858, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      List<Object> list0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      assertEquals(1033L, simpleTimePeriod0.getStartMillis());
      assertEquals(1033L, simpleTimePeriod0.getEndMillis());
      assertNotNull(simpleTimePeriod0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 4832.2201591371795;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 3);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      assertEquals(1033L, simpleTimePeriod0.getStartMillis());
      assertEquals(1033L, simpleTimePeriod0.getEndMillis());
      assertNotNull(simpleTimePeriod0);
      
      comparableArray0[0] = (Comparable<Float>) simpleTimePeriod0;
      double[][] doubleArray3 = new double[6][2];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray0;
      doubleArray3[5] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" `C,", (String) null, doubleArray3);
      assertEquals(6, doubleArray3.length);
      assertNotNull(categoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((-2.147483648E9));
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(6, doubleArray3.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1.0737442401100796E10, range0.getLength(), 0.01);
      assertEquals((-1.073741824E10), range0.getLowerBound(), 0.01);
      assertEquals(24161.100795685896, range0.getUpperBound(), 0.01);
      assertEquals((-5.368697039449602E9), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      defaultIntervalXYDataset0.setSelectionState(xYSeriesCollection0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Period period0 = Period.ofDays((-2084));
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      ChronoLocalDate chronoLocalDate0 = isoChronology0.dateEpochDay((-543L));
      assertNotNull(chronoLocalDate0);
      
      boolean boolean0 = stack0.add(chronoLocalDate0);
      assertEquals("[1968-07-07]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean1 = stack0.removeElement(long0);
      assertEquals("[1968-07-07]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertEquals("[1968-07-07]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range1);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-543L));
      assertEquals((-543L), fixedMillisecond0.getSerialIndex());
      assertEquals((-543L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-543L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-543L), fixedMillisecond0.getFirstMillisecond());
      assertNotNull(fixedMillisecond0);
      
      String string0 = fixedMillisecond0.toString();
      assertEquals((-543L), fixedMillisecond0.getSerialIndex());
      assertEquals((-543L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-543L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-543L), fixedMillisecond0.getFirstMillisecond());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, (List) stack0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultIntervalXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertNull(range2);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Period period0 = Period.ofDays((-2084));
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      ChronoLocalDate chronoLocalDate0 = isoChronology0.dateEpochDay((-543L));
      assertNotNull(chronoLocalDate0);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = stack0.removeElement(long0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-543L));
      assertEquals((-543L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-543L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-543L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-543L), fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      String string0 = fixedMillisecond0.toString();
      assertEquals((-543L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-543L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-543L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-543L), fixedMillisecond0.getSerialIndex());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", string0);
      assertNotNull(string0);
      
      Date date0 = fixedMillisecond0.getEnd();
      assertEquals((-543L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-543L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-543L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-543L), fixedMillisecond0.getSerialIndex());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertNotNull(date0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertNotNull(jSpinner0);
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.7976931348623157E308);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(boolean0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-1.7976931348623157E308), (double)double0, 0.01);
      assertNotNull(double0);
      
      TimeSeries timeSeries0 = new TimeSeries(double0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNotNull(timeSeries0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("Ec-@Wc_Bn3x+GD2]r");
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, zoneInfo0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1273, 2000, 435, 435, 989, 366);
      assertNotNull(mockGregorianCalendar0);
      
      ZonedDateTime zonedDateTime0 = mockGregorianCalendar0.toZonedDateTime();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1273,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=435,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=435,HOUR_OF_DAY=435,MINUTE=989,SECOND=366,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(zonedDateTime0);
      
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1273,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=435,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=435,HOUR_OF_DAY=435,MINUTE=989,SECOND=366,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1273,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=435,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=435,HOUR_OF_DAY=435,MINUTE=989,SECOND=366,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(989);
      assertEquals(989L, fixedMillisecond0.getLastMillisecond());
      assertEquals(989L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(989L, fixedMillisecond0.getSerialIndex());
      assertEquals(989L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      long long0 = fixedMillisecond0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1273,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=435,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=435,HOUR_OF_DAY=435,MINUTE=989,SECOND=366,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(989L, fixedMillisecond0.getLastMillisecond());
      assertEquals(989L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(989L, fixedMillisecond0.getSerialIndex());
      assertEquals(989L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertEquals(989L, long0);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset1 = new JDBCCategoryDataset(connection1);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      assertNotNull(jDBCCategoryDataset1);
      
      int int0 = jDBCCategoryDataset0.getColumnIndex(zonedDateTime0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1273,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=435,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=435,HOUR_OF_DAY=435,MINUTE=989,SECOND=366,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertTrue(jDBCCategoryDataset0.equals((Object)jDBCCategoryDataset1));
      assertEquals((-1), int0);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, (-1.0));
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(jDBCCategoryDataset0.equals((Object)jDBCCategoryDataset1));
      assertNull(range0);
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1858, 0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1858, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1858, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, true);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(jDBCCategoryDataset0.equals((Object)jDBCCategoryDataset1));
      assertNull(range1);
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 2223L;
      doubleArray0[2] = (-1169.8729);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0, 2223.0, (-1169.8729), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, polynomialFunction2D1.getOrder());
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertNotNull(polynomialFunction2D1);
      assertArrayEquals(new double[] {0.0, 2223.0, (-1169.8729), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D1.getCoefficients();
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(5, polynomialFunction2D1.getOrder());
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 2223.0, (-1169.8729), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2223.0, (-1169.8729), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(polynomialFunction2D1, polynomialFunction2D0);
      assertNotSame(doubleArray1, doubleArray0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) (-1169.8729));
      assertNotNull(pieDataset0);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D1, (-1169.8729), 3135.8050267203, 1526, 2223.0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2223L);
      assertEquals(2223L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2223L, fixedMillisecond0.getSerialIndex());
      assertEquals(2223L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2223L, fixedMillisecond0.getFirstMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertEquals(2223L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2223L, fixedMillisecond0.getSerialIndex());
      assertEquals(2223L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2223L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2222L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(2222L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(2222L, regularTimePeriod0.getSerialIndex());
      assertEquals(2222L, regularTimePeriod0.getLastMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(366, 2000, 181, (-32), Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotNull(mockGregorianCalendar0);
      
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=366,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=181,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-32,HOUR_OF_DAY=-32,MINUTE=2147483647,SECOND=2147483647,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=366,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=181,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-32,HOUR_OF_DAY=-32,MINUTE=2147483647,SECOND=2147483647,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      
      long long0 = fixedMillisecond0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(2223L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2223L, fixedMillisecond0.getSerialIndex());
      assertEquals(2223L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2223L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=366,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=181,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-32,HOUR_OF_DAY=-32,MINUTE=2147483647,SECOND=2147483647,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertEquals(2223L, long0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      int int0 = jDBCCategoryDataset0.getColumnIndex(regularTimePeriod0);
      assertEquals(2223L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2223L, fixedMillisecond0.getSerialIndex());
      assertEquals(2223L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2223L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2222L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(2222L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(2222L, regularTimePeriod0.getSerialIndex());
      assertEquals(2222L, regularTimePeriod0.getLastMillisecond());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertEquals((-1), int0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (double) 2000);
      assertNull(range0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("s@c", 181, 0);
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(181, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(181, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) (-1);
      doubleArray0[0] = doubleArray1;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, 182);
      assertNotNull(defaultPieDataset0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotNull(categoryTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNull(range2);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 3557);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(3557, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(3557, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2209L);
      assertEquals(2209L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2209L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2209L, fixedMillisecond0.getSerialIndex());
      assertEquals(2209L, fixedMillisecond0.getFirstMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertEquals(2209L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2209L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2209L, fixedMillisecond0.getSerialIndex());
      assertEquals(2209L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2208L, regularTimePeriod0.getSerialIndex());
      assertEquals(2208L, regularTimePeriod0.getLastMillisecond());
      assertEquals(2208L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(2208L, regularTimePeriod0.getMiddleMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2162, 0, 366);
      assertNotNull(mockGregorianCalendar0);
      
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2162,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=366,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2162,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=366,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      
      long long0 = fixedMillisecond0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(2209L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2209L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2209L, fixedMillisecond0.getSerialIndex());
      assertEquals(2209L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2162,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=366,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertEquals(2209L, long0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      int int0 = jDBCCategoryDataset0.getColumnIndex(regularTimePeriod0);
      assertEquals(2209L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2209L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2209L, fixedMillisecond0.getSerialIndex());
      assertEquals(2209L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2208L, regularTimePeriod0.getSerialIndex());
      assertEquals(2208L, regularTimePeriod0.getLastMillisecond());
      assertEquals(2208L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(2208L, regularTimePeriod0.getMiddleMillisecond());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertEquals((-1), int0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (double) 0);
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 366, (-1760));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(366, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1760), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" l$,", " l$,", doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset(" l$,", " l$,", doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset1, true);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertTrue(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(range0);
      assertNotSame(categoryDataset1, categoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      assertTrue(categoryDataset0.equals((Object)categoryDataset1));
      assertEquals(0.0, number0);
      assertNotNull(number0);
      assertNotSame(categoryDataset0, categoryDataset1);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 2612.857019;
      doubleArray1[3] = 1.6144999009488985;
      doubleArray1[4] = 2154.0158;
      doubleArray1[5] = (-2628.6822968645038);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = 2154.0158;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Stack<CategoryTableXYDataset> stack0 = new Stack<CategoryTableXYDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNull(range1);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertTrue(boolean0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, (List) stack0, true);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNull(range2);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(defaultMultiValueCategoryDataset0, true);
      assertNull(range3);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Rfe}ZHv0eu^cA>4o", "Rfe}ZHv0eu^cA>4o", doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = stack0.removeElement(defaultStatisticalCategoryDataset0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      PieDataset pieDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) long0, (double) 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2223L);
      assertEquals(2223L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2223L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2223L, fixedMillisecond0.getSerialIndex());
      assertEquals(2223L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertEquals(2223L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2223L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2223L, fixedMillisecond0.getSerialIndex());
      assertEquals(2223L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2222L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(2222L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(2222L, regularTimePeriod0.getSerialIndex());
      assertEquals(2222L, regularTimePeriod0.getLastMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(366, 2000, 181, 0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotNull(mockGregorianCalendar0);
      
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=366,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=181,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=2147483647,SECOND=2147483647,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=366,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=181,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=2147483647,SECOND=2147483647,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      
      long long0 = fixedMillisecond0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(2223L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2223L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2223L, fixedMillisecond0.getSerialIndex());
      assertEquals(2223L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=366,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=181,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=2147483647,SECOND=2147483647,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertEquals(2223L, long0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      int int0 = jDBCCategoryDataset0.getColumnIndex(regularTimePeriod0);
      assertEquals(2223L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2223L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2223L, fixedMillisecond0.getSerialIndex());
      assertEquals(2223L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2222L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(2222L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(2222L, regularTimePeriod0.getSerialIndex());
      assertEquals(2222L, regularTimePeriod0.getLastMillisecond());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertEquals((-1), int0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (double) 2000);
      assertNull(range0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("s@c", 181, 0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(181, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(181, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(181, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (-821));
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(defaultPieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0.0, double0, 0.01);
      
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(181, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Period period0 = Period.ofDays((-2084));
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      ChronoLocalDate chronoLocalDate0 = isoChronology0.dateEpochDay((-543L));
      assertNotNull(chronoLocalDate0);
      
      boolean boolean0 = stack0.add(chronoLocalDate0);
      assertFalse(stack0.isEmpty());
      assertEquals("[1968-07-07]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean1 = stack0.removeElement(long0);
      assertFalse(stack0.isEmpty());
      assertEquals("[1968-07-07]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertFalse(stack0.isEmpty());
      assertEquals("[1968-07-07]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range1);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-543L));
      assertEquals((-543L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-543L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-543L), fixedMillisecond0.getSerialIndex());
      assertEquals((-543L), fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      String string0 = fixedMillisecond0.toString();
      assertEquals((-543L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-543L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-543L), fixedMillisecond0.getSerialIndex());
      assertEquals((-543L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", string0);
      assertNotNull(string0);
      
      Date date0 = fixedMillisecond0.getEnd();
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertEquals((-543L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-543L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-543L), fixedMillisecond0.getSerialIndex());
      assertEquals((-543L), fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(date0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      assertEquals((-542L), regularTimePeriod0.getSerialIndex());
      assertEquals((-542L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-542L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-542L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-543L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-543L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-543L), fixedMillisecond0.getSerialIndex());
      assertEquals((-543L), fixedMillisecond0.getMiddleMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      
      Stack<DefaultHighLowDataset> stack1 = new Stack<DefaultHighLowDataset>();
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertNotNull(stack1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultIntervalXYDataset0, false);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(range2);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(Double.NaN, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2223L);
      assertEquals(2223L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2223L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2223L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2223L, fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertEquals(2223L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2223L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2223L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2223L, fixedMillisecond0.getSerialIndex());
      assertEquals(2222L, regularTimePeriod0.getSerialIndex());
      assertEquals(2222L, regularTimePeriod0.getLastMillisecond());
      assertEquals(2222L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(2222L, regularTimePeriod0.getMiddleMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2336, Integer.MAX_VALUE, 0, Integer.MAX_VALUE, 0, (-2770));
      assertNotNull(mockGregorianCalendar0);
      
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2336,MONTH=2147483647,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2147483647,HOUR_OF_DAY=2147483647,MINUTE=0,SECOND=-2770,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2336,MONTH=2147483647,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2147483647,HOUR_OF_DAY=2147483647,MINUTE=0,SECOND=-2770,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      
      long long0 = fixedMillisecond0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(2223L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2223L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2223L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2223L, fixedMillisecond0.getSerialIndex());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2336,MONTH=2147483647,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2147483647,HOUR_OF_DAY=2147483647,MINUTE=0,SECOND=-2770,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertEquals(2223L, long0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, 1074.92283);
      assertNull(range0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("hp*w@c!0b", 2000, 0);
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2000, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2000, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2000, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2000, matrixSeries0.getRowCount());
      assertEquals(0, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 3388.8375354;
      doubleArray2[2] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = 2787.9383;
      doubleArray3[3] = 3388.8375354;
      doubleArray3[4] = 3388.8375354;
      doubleArray3[5] = (-1.0);
      doubleArray3[6] = 3388.8375354;
      doubleArray3[7] = (-1.0);
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Duplicate items in 'rowKeys'.", "Duplicate items in 'rowKeys'.", doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-979L));
      assertEquals((-979L), fixedMillisecond0.getSerialIndex());
      assertEquals((-979L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-979L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-979L), fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertEquals((-979L), fixedMillisecond0.getSerialIndex());
      assertEquals((-979L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-979L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-979L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-980L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-980L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-980L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-980L), regularTimePeriod0.getSerialIndex());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod1 = fixedMillisecond0.previous();
      assertEquals((-979L), fixedMillisecond0.getSerialIndex());
      assertEquals((-979L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-979L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-979L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-980L), regularTimePeriod1.getSerialIndex());
      assertEquals((-980L), regularTimePeriod1.getLastMillisecond());
      assertEquals((-980L), regularTimePeriod1.getFirstMillisecond());
      assertEquals((-980L), regularTimePeriod1.getMiddleMillisecond());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod1.equals((Object)fixedMillisecond0));
      assertTrue(regularTimePeriod1.equals((Object)regularTimePeriod0));
      assertNotNull(regularTimePeriod1);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(regularTimePeriod1, fixedMillisecond0);
      assertNotSame(regularTimePeriod1, regularTimePeriod0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1858, 2000, 366, 989, 1017, 366);
      assertNotNull(mockGregorianCalendar0);
      
      ZonedDateTime zonedDateTime0 = mockGregorianCalendar0.toZonedDateTime();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1858,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=366,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=989,HOUR_OF_DAY=989,MINUTE=1017,SECOND=366,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertNotNull(zonedDateTime0);
      
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1858,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=366,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=989,HOUR_OF_DAY=989,MINUTE=1017,SECOND=366,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1858,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=366,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=989,HOUR_OF_DAY=989,MINUTE=1017,SECOND=366,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      
      long long0 = regularTimePeriod1.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals((-979L), fixedMillisecond0.getSerialIndex());
      assertEquals((-979L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-979L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-979L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-980L), regularTimePeriod1.getSerialIndex());
      assertEquals((-980L), regularTimePeriod1.getLastMillisecond());
      assertEquals((-980L), regularTimePeriod1.getFirstMillisecond());
      assertEquals((-980L), regularTimePeriod1.getMiddleMillisecond());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1858,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=366,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=989,HOUR_OF_DAY=989,MINUTE=1017,SECOND=366,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod1));
      assertFalse(regularTimePeriod1.equals((Object)fixedMillisecond0));
      assertTrue(regularTimePeriod1.equals((Object)regularTimePeriod0));
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertEquals((-980L), long0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(regularTimePeriod1, fixedMillisecond0);
      assertNotSame(regularTimePeriod1, regularTimePeriod0);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset1 = new JDBCCategoryDataset(connection1);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      assertNotNull(jDBCCategoryDataset1);
      
      int int0 = jDBCCategoryDataset1.getColumnIndex(regularTimePeriod1);
      assertEquals((-979L), fixedMillisecond0.getSerialIndex());
      assertEquals((-979L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-979L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-979L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-980L), regularTimePeriod1.getSerialIndex());
      assertEquals((-980L), regularTimePeriod1.getLastMillisecond());
      assertEquals((-980L), regularTimePeriod1.getFirstMillisecond());
      assertEquals((-980L), regularTimePeriod1.getMiddleMillisecond());
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod1));
      assertFalse(regularTimePeriod1.equals((Object)fixedMillisecond0));
      assertTrue(regularTimePeriod1.equals((Object)regularTimePeriod0));
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      assertEquals((-1), int0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(regularTimePeriod1, fixedMillisecond0);
      assertNotSame(regularTimePeriod1, regularTimePeriod0);
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset1, (double) 1858);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      assertNull(range0);
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1858, 37);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1858, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(37, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1858, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(37, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-397.6371076);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-397.6371076)}, doubleArray0, 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Vector<DefaultOHLCDataset> vector0 = new Vector<DefaultOHLCDataset>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range1);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertTrue(boolean0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, (List) vector0, true);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(range2);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2209L);
      assertEquals(2209L, fixedMillisecond0.getSerialIndex());
      assertEquals(2209L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2209L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2209L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertEquals(2209L, fixedMillisecond0.getSerialIndex());
      assertEquals(2209L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2209L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2209L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2208L, regularTimePeriod0.getLastMillisecond());
      assertEquals(2208L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(2208L, regularTimePeriod0.getSerialIndex());
      assertEquals(2208L, regularTimePeriod0.getMiddleMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(Integer.MAX_VALUE, 0, 366);
      assertNotNull(mockGregorianCalendar0);
      
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2147483647,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=366,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2147483647,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=366,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[5] = (double) 181;
      doubleArray0[1] = (double) 2209L;
      doubleArray0[2] = 1.6144999009488985;
      doubleArray0[3] = (double) 2209L;
      doubleArray0[4] = 1333.5484852072848;
      doubleArray0[5] = (double) 181;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 2.147483647E9;
      doubleArray0[1] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.6144999009488985, 2209.0, 1333.5484852072848, 181.0, 0.0, 2.147483647E9, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 1.6144999009488985, 2209.0, 1333.5484852072848, 181.0, 0.0, 2.147483647E9, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.6144999009488985, 2209.0, 1333.5484852072848, 181.0, 0.0, 2.147483647E9, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 366, 1526.0, 366, 0.0);
      assertEquals(9, doubleArray0.length);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(xYSeriesCollection0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.6144999009488985, 2209.0, 1333.5484852072848, 181.0, 0.0, 2.147483647E9, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-3L), 181);
      assertEquals((-3L), simpleTimePeriod0.getStartMillis());
      assertEquals(181L, simpleTimePeriod0.getEndMillis());
      assertNotNull(simpleTimePeriod0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) 2.147483647E9, (Number) 181.0);
      assertEquals(2.147483647E9, xYDataItem0.getXValue(), 0.01);
      assertEquals(181.0, xYDataItem0.getYValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(0L);
      assertEquals(0L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond1.getSerialIndex());
      assertEquals(0L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond1.getLastMillisecond());
      assertFalse(fixedMillisecond1.equals((Object)regularTimePeriod0));
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertNotNull(fixedMillisecond1);
      
      String string0 = fixedMillisecond1.toString();
      assertEquals(0L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond1.getSerialIndex());
      assertEquals(0L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond1.getLastMillisecond());
      assertFalse(fixedMillisecond1.equals((Object)regularTimePeriod0));
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", string0);
      assertNotNull(string0);
      assertNotSame(fixedMillisecond1, regularTimePeriod0);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      
      MockDate mockDate0 = (MockDate)fixedMillisecond1.getEnd();
      assertEquals(0L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond1.getSerialIndex());
      assertEquals(0L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond1.getLastMillisecond());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(fixedMillisecond1.equals((Object)regularTimePeriod0));
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertNotNull(mockDate0);
      assertNotSame(fixedMillisecond1, regularTimePeriod0);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      
      FixedMillisecond fixedMillisecond2 = (FixedMillisecond)fixedMillisecond0.next();
      assertEquals(2209L, fixedMillisecond0.getSerialIndex());
      assertEquals(2209L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2209L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2209L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2210L, fixedMillisecond2.getMiddleMillisecond());
      assertEquals(2210L, fixedMillisecond2.getFirstMillisecond());
      assertEquals(2210L, fixedMillisecond2.getSerialIndex());
      assertEquals(2210L, fixedMillisecond2.getLastMillisecond());
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(fixedMillisecond2.equals((Object)fixedMillisecond0));
      assertFalse(fixedMillisecond2.equals((Object)fixedMillisecond1));
      assertFalse(fixedMillisecond2.equals((Object)regularTimePeriod0));
      assertNotNull(fixedMillisecond2);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(fixedMillisecond0, fixedMillisecond2);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(fixedMillisecond2, fixedMillisecond0);
      assertNotSame(fixedMillisecond2, fixedMillisecond1);
      assertNotSame(fixedMillisecond2, regularTimePeriod0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertEquals(9, doubleArray0.length);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(4.138012256292984E31, range0.getLength(), 0.01);
      assertEquals(4.138201184787173E31, range0.getUpperBound(), 0.01);
      assertEquals(1.8892849418978196E27, range0.getLowerBound(), 0.01);
      assertEquals(2.0691950566406815E31, range0.getCentralValue(), 0.01);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(range0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.6144999009488985, 2209.0, 1333.5484852072848, 181.0, 0.0, 2.147483647E9, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-397.6371076);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-397.6371076)}, doubleArray0, 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYTaskDataset0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNull(range0);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-397.6371076)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-397.6371076)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNull(number0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, false);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-397.6371076);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-397.6371076)}, doubleArray0, 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYTaskDataset0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNull(range0);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-397.6371076)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-397.6371076)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range1);
      
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      stack0.setSize(9);
      assertEquals(9, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[null, null, null, null, null, null, null, null, null]", stack0.toString());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-812.789);
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 2954.48329485122;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = 1260.36882785237;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray4[1] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 1260.36882785237;
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = 2954.48329485122;
      doubleArray5[3] = 2954.48329485122;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (-812.789);
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = (-812.789);
      doubleArray6[5] = 1260.36882785237;
      doubleArray6[6] = (-812.789);
      doubleArray6[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-979L));
      assertEquals((-979L), fixedMillisecond0.getSerialIndex());
      assertEquals((-979L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-979L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-979L), fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertEquals((-979L), fixedMillisecond0.getSerialIndex());
      assertEquals((-979L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-979L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-979L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-980L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-980L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-980L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-980L), regularTimePeriod0.getSerialIndex());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod1 = fixedMillisecond0.previous();
      assertEquals((-979L), fixedMillisecond0.getSerialIndex());
      assertEquals((-979L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-979L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-979L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-980L), regularTimePeriod1.getFirstMillisecond());
      assertEquals((-980L), regularTimePeriod1.getSerialIndex());
      assertEquals((-980L), regularTimePeriod1.getLastMillisecond());
      assertEquals((-980L), regularTimePeriod1.getMiddleMillisecond());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod1.equals((Object)fixedMillisecond0));
      assertTrue(regularTimePeriod1.equals((Object)regularTimePeriod0));
      assertNotNull(regularTimePeriod1);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(regularTimePeriod1, fixedMillisecond0);
      assertNotSame(regularTimePeriod1, regularTimePeriod0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1858, 2000, 366, 989, 1017, 366);
      assertNotNull(mockGregorianCalendar0);
      
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1858,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=366,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=989,HOUR_OF_DAY=989,MINUTE=1017,SECOND=366,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1858,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=366,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=989,HOUR_OF_DAY=989,MINUTE=1017,SECOND=366,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      
      long long0 = regularTimePeriod1.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals((-979L), fixedMillisecond0.getSerialIndex());
      assertEquals((-979L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-979L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-979L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-980L), regularTimePeriod1.getFirstMillisecond());
      assertEquals((-980L), regularTimePeriod1.getSerialIndex());
      assertEquals((-980L), regularTimePeriod1.getLastMillisecond());
      assertEquals((-980L), regularTimePeriod1.getMiddleMillisecond());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1858,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=366,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=989,HOUR_OF_DAY=989,MINUTE=1017,SECOND=366,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod1));
      assertFalse(regularTimePeriod1.equals((Object)fixedMillisecond0));
      assertTrue(regularTimePeriod1.equals((Object)regularTimePeriod0));
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertEquals((-980L), long0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(regularTimePeriod1, fixedMillisecond0);
      assertNotSame(regularTimePeriod1, regularTimePeriod0);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset1 = new JDBCCategoryDataset(connection1);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      assertNotNull(jDBCCategoryDataset1);
      
      int int0 = jDBCCategoryDataset1.getColumnIndex(regularTimePeriod1);
      assertEquals((-979L), fixedMillisecond0.getSerialIndex());
      assertEquals((-979L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-979L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-979L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-980L), regularTimePeriod1.getFirstMillisecond());
      assertEquals((-980L), regularTimePeriod1.getSerialIndex());
      assertEquals((-980L), regularTimePeriod1.getLastMillisecond());
      assertEquals((-980L), regularTimePeriod1.getMiddleMillisecond());
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod1));
      assertFalse(regularTimePeriod1.equals((Object)fixedMillisecond0));
      assertTrue(regularTimePeriod1.equals((Object)regularTimePeriod0));
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      assertEquals((-1), int0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(regularTimePeriod1, fixedMillisecond0);
      assertNotSame(regularTimePeriod1, regularTimePeriod0);
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset1, (double) 1858);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      assertNull(range0);
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset1);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      assertTrue(boolean0);
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 4832.2201591371795;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      
      double[] doubleArray4 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray4.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray4, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), 0.0, 1033, 4832.2201591371795);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotNull(xYSeriesCollection0);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      assertEquals(1033L, simpleTimePeriod0.getStartMillis());
      assertEquals(1033L, simpleTimePeriod0.getEndMillis());
      assertNotNull(simpleTimePeriod0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) 4832.2201591371795, (Number) 4832.2201591371795);
      assertEquals(4832.2201591371795, xYDataItem0.getYValue(), 0.01);
      assertEquals(4832.2201591371795, xYDataItem0.getXValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1033);
      assertEquals(1033L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1033L, fixedMillisecond0.getSerialIndex());
      assertEquals(1033L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1033L, fixedMillisecond0.getFirstMillisecond());
      assertNotNull(fixedMillisecond0);
      
      MockDate mockDate0 = (MockDate)fixedMillisecond0.getEnd();
      assertEquals(1033L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1033L, fixedMillisecond0.getSerialIndex());
      assertEquals(1033L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1033L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      assertEquals(1033L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1033L, fixedMillisecond0.getSerialIndex());
      assertEquals(1033L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1033L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1034L, fixedMillisecond1.getSerialIndex());
      assertEquals(1034L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(1034L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(1034L, fixedMillisecond1.getLastMillisecond());
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertNotNull(fixedMillisecond1);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      
      Number[] numberArray0 = new Number[7];
      numberArray0[0] = (Number) 363.66581;
      numberArray0[1] = (Number) (-2.147483648E9);
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 4832.2201591371795;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = 0.0;
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      double[] doubleArray4 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray4.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray4, 0.01);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2209L);
      assertEquals(2209L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2209L, fixedMillisecond0.getSerialIndex());
      assertEquals(2209L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2209L, fixedMillisecond0.getFirstMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertEquals(2209L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2209L, fixedMillisecond0.getSerialIndex());
      assertEquals(2209L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2209L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2208L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(2208L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(2208L, regularTimePeriod0.getSerialIndex());
      assertEquals(2208L, regularTimePeriod0.getLastMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.UK;
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(2209L));
      assertNotNull(vector0);
      
      RegularTimePeriod regularTimePeriod1 = regularTimePeriod0.next();
      assertEquals(2209L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2209L, fixedMillisecond0.getSerialIndex());
      assertEquals(2209L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2209L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2208L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(2208L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(2208L, regularTimePeriod0.getSerialIndex());
      assertEquals(2208L, regularTimePeriod0.getLastMillisecond());
      assertEquals(2209L, regularTimePeriod1.getMiddleMillisecond());
      assertEquals(2209L, regularTimePeriod1.getLastMillisecond());
      assertEquals(2209L, regularTimePeriod1.getFirstMillisecond());
      assertEquals(2209L, regularTimePeriod1.getSerialIndex());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertTrue(regularTimePeriod1.equals((Object)fixedMillisecond0));
      assertFalse(regularTimePeriod1.equals((Object)regularTimePeriod0));
      assertNotNull(regularTimePeriod1);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, regularTimePeriod1);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(regularTimePeriod1, regularTimePeriod0);
      assertNotSame(regularTimePeriod1, fixedMillisecond0);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset1 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      assertNotNull(defaultIntervalXYDataset1);
      
      defaultIntervalXYDataset1.setSelectionState(xYSeriesCollection0);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0, defaultIntervalXYDataset1.getSeriesCount());
      assertTrue(defaultIntervalXYDataset1.equals((Object)defaultIntervalXYDataset0));
      assertNotSame(defaultIntervalXYDataset1, defaultIntervalXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(defaultIntervalXYDataset0.equals((Object)defaultIntervalXYDataset1));
      assertNull(number0);
      assertNotSame(defaultIntervalXYDataset0, defaultIntervalXYDataset1);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertNull(range1);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, 335);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(335, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) regularTimePeriod0, (-4541.859366691448));
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(335, categoryToPieDataset0.getExtractIndex());
      assertEquals(2209L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2209L, fixedMillisecond0.getSerialIndex());
      assertEquals(2209L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2209L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2208L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(2208L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(2208L, regularTimePeriod0.getSerialIndex());
      assertEquals(2208L, regularTimePeriod0.getLastMillisecond());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertTrue(fixedMillisecond0.equals((Object)regularTimePeriod1));
      assertFalse(regularTimePeriod0.equals((Object)regularTimePeriod1));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(pieDataset0);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, regularTimePeriod1);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 3);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      assertEquals(1033L, simpleTimePeriod0.getStartMillis());
      assertEquals(1033L, simpleTimePeriod0.getEndMillis());
      assertNotNull(simpleTimePeriod0);
      
      Date date0 = simpleTimePeriod0.getEnd();
      assertEquals(1033L, simpleTimePeriod0.getStartMillis());
      assertEquals(1033L, simpleTimePeriod0.getEndMillis());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", date0.toString());
      assertNotNull(date0);
      
      Date date1 = simpleTimePeriod0.getStart();
      assertEquals(1033L, simpleTimePeriod0.getStartMillis());
      assertEquals(1033L, simpleTimePeriod0.getEndMillis());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", date1.toString());
      assertTrue(date1.equals((Object)date0));
      assertNotNull(date1);
      assertNotSame(date1, date0);
      
      comparableArray0[0] = (Comparable<Float>) simpleTimePeriod0;
      double[][] doubleArray0 = new double[6][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" `C,", (String) null, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      int int0 = ((DefaultCategoryDataset) categoryDataset0).getColumnIndex(" `C,");
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotNull(range0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("UTC", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertEquals("UTC", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      assertEquals("UTC", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(number0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(date1);
      assertEquals(1033L, simpleTimePeriod0.getStartMillis());
      assertEquals(1033L, simpleTimePeriod0.getEndMillis());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", date1.toString());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertTrue(date1.equals((Object)date0));
      assertNotNull(keyToGroupMap0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1033L, simpleTimePeriod0.getStartMillis());
      assertEquals(1033L, simpleTimePeriod0.getEndMillis());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", date1.toString());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(date1.equals((Object)date0));
      assertTrue(range1.equals((Object)range0));
      assertNotNull(range1);
      assertNotSame(date1, date0);
      assertNotSame(range1, range0);
      
      Quarter quarter0 = new Quarter();
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(quarter0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 1);
      assertEquals(6, doubleArray0.length);
      assertNotNull(pieDataset0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) quarter0, (KeyedValues) pieDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotSame(categoryDataset0, categoryDataset1);
      
      Range range2 = DatasetUtilities.findRangeBounds(categoryDataset1);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(range2);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(categoryDataset0, categoryDataset1);
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) 1);
      assertEquals(1.0, range3.getLowerBound(), 0.01);
      assertEquals(1.0, range3.getCentralValue(), 0.01);
      assertEquals(1.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals("UTC", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertNotNull(range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Period period0 = Period.ofDays((-2084));
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      ChronoLocalDate chronoLocalDate0 = isoChronology0.dateEpochDay((-543L));
      assertNotNull(chronoLocalDate0);
      
      boolean boolean0 = stack0.add(chronoLocalDate0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[1968-07-07]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean1 = stack0.removeElement(long0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[1968-07-07]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[1968-07-07]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range1);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-543L));
      assertEquals((-543L), fixedMillisecond0.getSerialIndex());
      assertEquals((-543L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-543L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-543L), fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      Class<Object> class0 = Object.class;
      Class class1 = RegularTimePeriod.downsize(class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertEquals("class org.jfree.data.time.Millisecond", class1.toString());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      String string0 = fixedMillisecond0.toString();
      assertEquals((-543L), fixedMillisecond0.getSerialIndex());
      assertEquals((-543L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-543L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-543L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", string0);
      assertNotNull(string0);
      
      Date date0 = fixedMillisecond0.getEnd();
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      assertEquals((-543L), fixedMillisecond0.getSerialIndex());
      assertEquals((-543L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-543L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-543L), fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(date0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      assertEquals((-542L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-542L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-542L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-542L), regularTimePeriod0.getSerialIndex());
      assertEquals((-543L), fixedMillisecond0.getSerialIndex());
      assertEquals((-543L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-543L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-543L), fixedMillisecond0.getMiddleMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      
      Stack<DefaultHighLowDataset> stack1 = new Stack<DefaultHighLowDataset>();
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertNotNull(stack1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultIntervalXYDataset0, false);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertNull(range3);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultIntervalXYDataset0, (List) stack1, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-979L));
      assertEquals((-979L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-979L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-979L), fixedMillisecond0.getSerialIndex());
      assertEquals((-979L), fixedMillisecond0.getFirstMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertEquals((-979L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-979L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-979L), fixedMillisecond0.getSerialIndex());
      assertEquals((-979L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-980L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-980L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals((-980L), regularTimePeriod0.getSerialIndex());
      assertEquals((-980L), regularTimePeriod0.getLastMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod1 = fixedMillisecond0.previous();
      assertEquals((-979L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-979L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-979L), fixedMillisecond0.getSerialIndex());
      assertEquals((-979L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-980L), regularTimePeriod1.getFirstMillisecond());
      assertEquals((-980L), regularTimePeriod1.getSerialIndex());
      assertEquals((-980L), regularTimePeriod1.getLastMillisecond());
      assertEquals((-980L), regularTimePeriod1.getMiddleMillisecond());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertTrue(regularTimePeriod1.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod1.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod1);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod1, regularTimePeriod0);
      assertNotSame(regularTimePeriod1, fixedMillisecond0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1858, 2000, 366, 989, 1017, 366);
      assertNotNull(mockGregorianCalendar0);
      
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1858,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=366,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=989,HOUR_OF_DAY=989,MINUTE=1017,SECOND=366,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1858,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=366,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=989,HOUR_OF_DAY=989,MINUTE=1017,SECOND=366,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      
      long long0 = regularTimePeriod1.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals((-979L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-979L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-979L), fixedMillisecond0.getSerialIndex());
      assertEquals((-979L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-980L), regularTimePeriod1.getFirstMillisecond());
      assertEquals((-980L), regularTimePeriod1.getSerialIndex());
      assertEquals((-980L), regularTimePeriod1.getLastMillisecond());
      assertEquals((-980L), regularTimePeriod1.getMiddleMillisecond());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1858,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=366,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=989,HOUR_OF_DAY=989,MINUTE=1017,SECOND=366,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod1));
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertTrue(regularTimePeriod1.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod1.equals((Object)fixedMillisecond0));
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertEquals((-980L), long0);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod1, regularTimePeriod0);
      assertNotSame(regularTimePeriod1, fixedMillisecond0);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset1 = new JDBCCategoryDataset(connection1);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      assertNotNull(jDBCCategoryDataset1);
      
      int int0 = jDBCCategoryDataset1.getColumnIndex(regularTimePeriod1);
      assertEquals((-979L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-979L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-979L), fixedMillisecond0.getSerialIndex());
      assertEquals((-979L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-980L), regularTimePeriod1.getFirstMillisecond());
      assertEquals((-980L), regularTimePeriod1.getSerialIndex());
      assertEquals((-980L), regularTimePeriod1.getLastMillisecond());
      assertEquals((-980L), regularTimePeriod1.getMiddleMillisecond());
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod1));
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertTrue(regularTimePeriod1.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod1.equals((Object)fixedMillisecond0));
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      assertEquals((-1), int0);
      assertNotSame(fixedMillisecond0, regularTimePeriod1);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod1, regularTimePeriod0);
      assertNotSame(regularTimePeriod1, fixedMillisecond0);
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset1, (double) 1858);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      assertNull(range0);
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1858, 37);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1858, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(37, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 736, 2000);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1858, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(37, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(736, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(2000, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertNotNull(slidingGanttCategoryDataset1);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(slidingGanttCategoryDataset1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1858, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(37, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(736, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(2000, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertNull(number0);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(jDBCCategoryDataset0.equals((Object)jDBCCategoryDataset1));
      assertNull(range2);
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 856.8213401958;
      doubleArray0[1] = (double) 2223L;
      doubleArray0[2] = 0.8;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.8;
      doubleArray0[5] = 363.66581;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {856.8213401958, 2223.0, 0.8, (-1.0), 0.8, 363.66581}, doubleArray0, 0.01);
      
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, polynomialFunction2D1.getOrder());
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertNotNull(polynomialFunction2D1);
      assertArrayEquals(new double[] {856.8213401958, 2223.0, 0.8, (-1.0), 0.8, 363.66581}, doubleArray0, 0.01);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D1, 0.8, 3915.0, 1526, 0.8);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-397.6371076);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-397.6371076)}, doubleArray0, 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYTaskDataset0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNull(range0);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-397.6371076)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-397.6371076)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range1);
      
      TimeSeries timeSeries0 = new TimeSeries((-397.6371076));
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      Week week0 = new Week(518, (-1));
      assertEquals((-47L), week0.getSerialIndex());
      assertEquals(6, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-1), week0.getYearValue());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) week0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals((-47L), week0.getSerialIndex());
      assertEquals(6, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-1), week0.getYearValue());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertNull(timeSeriesDataItem0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 131.548659886, (-3175.173816), (-1), (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Period period0 = Period.ofDays((-2084));
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      ChronoLocalDate chronoLocalDate0 = isoChronology0.dateEpochDay((-543L));
      assertNotNull(chronoLocalDate0);
      
      boolean boolean0 = stack0.add(chronoLocalDate0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[1968-07-07]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean1 = stack0.removeElement(long0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[1968-07-07]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[1968-07-07]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range1);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.POSITIVE_INFINITY, 5982.677801335101);
      assertEquals(5982.677801335101, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, normalDistributionFunction2D0.getMean(), 0.01);
      assertNotNull(normalDistributionFunction2D0);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 652.227353896, Double.POSITIVE_INFINITY, 2239, long0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = stack0.removeElement(defaultStatisticalCategoryDataset0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range1);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      TimeSeries timeSeries0 = new TimeSeries(long0);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT+18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("GMT+18:00", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) stack0, true);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("GMT+18:00", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(defaultMultiValueCategoryDataset0, true);
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = stack0.removeElement(defaultStatisticalCategoryDataset0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range1);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, (List) stack0, false);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(range2);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-397.6371076);
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 2612.857019;
      doubleArray1[3] = 1.6144999009488985;
      doubleArray1[4] = 2154.0158;
      doubleArray1[5] = (-2628.6822968645038);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = 2154.0158;
      doubleArray3[3] = (-397.6371076);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 2154.0158;
      doubleArray4[1] = 2904.54241047;
      doubleArray4[2] = Double.NEGATIVE_INFINITY;
      doubleArray4[3] = (-397.6371076);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (-397.6371076);
      doubleArray5[1] = 1.6144999009488985;
      doubleArray5[2] = 2154.0158;
      doubleArray5[3] = Double.NEGATIVE_INFINITY;
      doubleArray5[4] = 2612.857019;
      doubleArray5[5] = (-2628.6822968645038);
      doubleArray5[6] = 1.6144999009488985;
      doubleArray5[7] = 2154.0158;
      doubleArray5[8] = 2904.54241047;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = 2904.54241047;
      doubleArray6[1] = 3388.8375354;
      doubleArray6[2] = 1.6144999009488985;
      doubleArray6[3] = (-397.6371076);
      doubleArray6[4] = 1.6144999009488985;
      doubleArray6[5] = 2612.857019;
      doubleArray6[6] = 2904.54241047;
      doubleArray6[7] = 2612.857019;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      
      doubleArray7[0] = 2612.857019;
      doubleArray7[1] = (-2628.6822968645038);
      doubleArray7[2] = Double.NEGATIVE_INFINITY;
      doubleArray7[3] = 2904.54241047;
      doubleArray7[4] = (-1.0);
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 1012);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1012, Size: 9
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      defaultTableXYDataset0.prune();
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-397.6371076);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-397.6371076)}, doubleArray0, 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNotNull(xYTaskDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYTaskDataset0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertNull(range0);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-397.6371076)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-397.6371076)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, true);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, 1.0, (-397.6371076), 0, (-397.6371076));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = stack0.removeElement(long0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range1);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, (List) stack0, true);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(range2);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(defaultMultiValueCategoryDataset0, false);
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-397.6371076);
      doubleArray0[1] = 856.8213401958;
      doubleArray0[2] = 1190.319995508;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1180.28984747);
      doubleArray0[5] = 363.66581;
      doubleArray0[6] = 0.8;
      doubleArray0[7] = 2486.0;
      doubleArray0[8] = 1003.00761616;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-397.6371076), 856.8213401958, 1190.319995508, (-1.0), (-1180.28984747), 363.66581, 0.8, 2486.0, 1003.00761616}, doubleArray0, 0.01);
      
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, polynomialFunction2D1.getOrder());
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertNotNull(polynomialFunction2D1);
      assertArrayEquals(new double[] {(-397.6371076), 856.8213401958, 1190.319995508, (-1.0), (-1180.28984747), 363.66581, 0.8, 2486.0, 1003.00761616}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D1, 1.0, 2486.0, (-757), 1003.00761616);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 4832.2201591371795;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 3);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      assertEquals(1033L, simpleTimePeriod0.getEndMillis());
      assertEquals(1033L, simpleTimePeriod0.getStartMillis());
      assertNotNull(simpleTimePeriod0);
      
      comparableArray0[0] = (Comparable<Float>) simpleTimePeriod0;
      double[][] doubleArray3 = new double[6][2];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray0;
      double[] doubleArray4 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray4.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray4, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      
      doubleArray3[5] = doubleArray2;
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-757.0), 5355.1, (-612), 363.66581);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = stack0.removeElement(long0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2084), (-1755));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-2084), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1755), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 2476, 2476);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-2084), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1755), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2476, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(2476, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertNotNull(slidingGanttCategoryDataset1);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-2084), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1755), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2476, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(2476, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertNull(range1);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-2084), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1755), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertNull(range2);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = stack0.removeElement(long0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range1);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      Range range2 = DatasetUtilities.findCumulativeRangeBounds(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range2);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2223L);
      assertEquals(2223L, fixedMillisecond0.getSerialIndex());
      assertEquals(2223L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2223L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2223L, fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertEquals(2223L, fixedMillisecond0.getSerialIndex());
      assertEquals(2223L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2223L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2223L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2222L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(2222L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(2222L, regularTimePeriod0.getLastMillisecond());
      assertEquals(2222L, regularTimePeriod0.getSerialIndex());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(366, 2000, 181, 0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotNull(mockGregorianCalendar0);
      
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=366,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=181,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=2147483647,SECOND=2147483647,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=366,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=181,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=2147483647,SECOND=2147483647,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      
      long long0 = fixedMillisecond0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(2223L, fixedMillisecond0.getSerialIndex());
      assertEquals(2223L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2223L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2223L, fixedMillisecond0.getLastMillisecond());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=366,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=181,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=2147483647,SECOND=2147483647,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertEquals(2223L, long0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      int int0 = jDBCCategoryDataset0.getColumnIndex(regularTimePeriod0);
      assertEquals(2223L, fixedMillisecond0.getSerialIndex());
      assertEquals(2223L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2223L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2223L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2222L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(2222L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(2222L, regularTimePeriod0.getLastMillisecond());
      assertEquals(2222L, regularTimePeriod0.getSerialIndex());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertEquals((-1), int0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (double) 2000);
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2000, (-1760));
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(2000, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1760), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, (-45), 1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(2000, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1760), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-45), slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertNotNull(slidingGanttCategoryDataset1);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(number0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(2000, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1760), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-45), slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertNotNull(range1);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      long long0 = 1269L;
      System.setCurrentTimeMillis(1269L);
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, false);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      String string0 = "&Z(.6a>F!xRY3";
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "&Z(.6a>F!xRY3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("", "", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      GanttCategoryDataset ganttCategoryDataset0 = null;
      int int0 = (-1641);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 273, (-1641));
      assertEquals(273, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1641), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 273, 100);
      assertEquals(273, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1641), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(100, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertEquals(273, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertNotNull(slidingGanttCategoryDataset1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 4832.2201591371795;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 3);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      assertEquals(1033L, simpleTimePeriod0.getStartMillis());
      assertEquals(1033L, simpleTimePeriod0.getEndMillis());
      assertNotNull(simpleTimePeriod0);
      
      comparableArray0[0] = (Comparable<Float>) simpleTimePeriod0;
      double[][] doubleArray3 = new double[6][2];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray0;
      doubleArray3[5] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(" `C,", (String) null, doubleArray3);
      assertEquals(6, doubleArray3.length);
      assertNotNull(categoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertEquals(6, doubleArray3.length);
      assertEquals(24161.100795685896, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1, 1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(number0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNull(range0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      Week week0 = new Week(date0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      
      // Undeclared exception!
      try { 
        slidingGanttCategoryDataset0.getStartValue((Comparable) week0, (Comparable) date0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown columnKey: Fri Feb 14 20:21:21 GMT 2014
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertNotNull(jSpinner0);
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.7976931348623157E308);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(boolean0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-1.7976931348623157E308), (double)double0, 0.01);
      assertNotNull(double0);
      
      TimeSeries timeSeries0 = new TimeSeries(double0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      ArrayList<XIntervalSeriesCollection> arrayList0 = new ArrayList<XIntervalSeriesCollection>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(double0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertNotNull(timePeriodValues0);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) timePeriodValuesCollection0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, false);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range2);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timePeriodValuesCollection0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNull(number0);
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0, false);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNull(range3);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNotNull(jDBCXYDataset0);
      
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) jDBCXYDataset0, true);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertNull(range0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1326), (-1326));
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1326), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1326), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1326), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1326), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNull(number0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1326), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1326), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 4832.2201591371795;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), 0.0, 1033, 4832.2201591371795);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertNotNull(xYSeriesCollection0);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      assertEquals(1033L, simpleTimePeriod0.getEndMillis());
      assertEquals(1033L, simpleTimePeriod0.getStartMillis());
      assertNotNull(simpleTimePeriod0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) 4832.2201591371795, (Number) 4832.2201591371795);
      assertEquals(4832.2201591371795, xYDataItem0.getXValue(), 0.01);
      assertEquals(4832.2201591371795, xYDataItem0.getYValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1031L);
      assertEquals(1031L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1031L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1031L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1031L, fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      assertEquals(1031L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1031L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1031L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1031L, fixedMillisecond0.getSerialIndex());
      assertEquals(1032L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(1032L, fixedMillisecond1.getLastMillisecond());
      assertEquals(1032L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(1032L, fixedMillisecond1.getSerialIndex());
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertNotNull(fixedMillisecond1);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      
      Number[] numberArray0 = new Number[2];
      numberArray0[0] = (Number) 363.66581;
      numberArray0[1] = (Number) (-2.147483648E9);
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 4832.2201591371795;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      Long long0 = new Long(2995L);
      assertEquals(2995L, (long)long0);
      assertNotNull(long0);
      
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.removeElement(polynomialFunction2D0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) 4832.2201591371795, 4832.2201591371795);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertNotNull(pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) 4832.2201591371795, (KeyedValues) pieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertNotNull(categoryDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertNull(range0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset1.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotNull(defaultPieDataset1);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertEquals("NOID", datasetGroup0.getID());
      assertNotNull(datasetGroup0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-2325L));
      assertEquals((-2325L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-2325L), fixedMillisecond0.getSerialIndex());
      assertEquals((-2325L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-2325L), fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      String string0 = fixedMillisecond0.toString();
      assertEquals((-2325L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-2325L), fixedMillisecond0.getSerialIndex());
      assertEquals((-2325L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-2325L), fixedMillisecond0.getLastMillisecond());
      assertEquals("Wed Dec 31 23:59:57 GMT 1969", string0);
      assertNotNull(string0);
      
      Date date0 = fixedMillisecond0.getEnd();
      assertEquals((-2325L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-2325L), fixedMillisecond0.getSerialIndex());
      assertEquals((-2325L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-2325L), fixedMillisecond0.getLastMillisecond());
      assertEquals("Wed Dec 31 23:59:57 GMT 1969", date0.toString());
      assertNotNull(date0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, true);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertNull(range1);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset1);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(number0);
      
      Number[][] numberArray0 = new Number[1][8];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) long0;
      numberArray1[1] = (Number) (-2.147483648E9);
      numberArray1[2] = (Number) (-2.147483648E9);
      numberArray1[3] = null;
      numberArray1[4] = (Number) (-2.147483648E9);
      numberArray1[5] = null;
      numberArray1[6] = (Number) 4832.2201591371795;
      numberArray1[7] = (Number) 363.66581;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Wed Dec 31 23:59:57 GMT 1969", "org.jfree.data.ComparableObjectItem", numberArray0);
      assertEquals(1, numberArray0.length);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertNotNull(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2223L);
      assertEquals(2223L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2223L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2223L, fixedMillisecond0.getSerialIndex());
      assertEquals(2223L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertEquals(2223L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2223L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2223L, fixedMillisecond0.getSerialIndex());
      assertEquals(2223L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2222L, regularTimePeriod0.getSerialIndex());
      assertEquals(2222L, regularTimePeriod0.getLastMillisecond());
      assertEquals(2222L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(2222L, regularTimePeriod0.getMiddleMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(366, 2000, 181, 0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotNull(mockGregorianCalendar0);
      
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=366,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=181,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=2147483647,SECOND=2147483647,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=366,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=181,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=2147483647,SECOND=2147483647,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      
      long long0 = fixedMillisecond0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(2223L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2223L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2223L, fixedMillisecond0.getSerialIndex());
      assertEquals(2223L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=366,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=181,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=2147483647,SECOND=2147483647,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertEquals(2223L, long0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (double) 2000);
      assertNull(range0);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("s@c", 181, 0);
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(181, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertNotNull(matrixSeries0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(181, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      XYSeries xYSeries0 = new XYSeries(mockGregorianCalendar0, false);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=366,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=181,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=2147483647,SECOND=2147483647,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=366,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=181,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=2147483647,SECOND=2147483647,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertNotNull(xYSeriesCollection0);
      
      matrixSeriesCollection0.setSelectionState(xYSeriesCollection0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=366,MONTH=2000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=181,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=2147483647,SECOND=2147483647,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(181, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertEquals(181, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      Stack<DefaultMultiValueCategoryDataset> stack0 = new Stack<DefaultMultiValueCategoryDataset>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNull(range1);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number1);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 4832.2201591371795;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      
      double[] doubleArray4 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray4.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray4, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), 0.0, 1033, 4832.2201591371795);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(xYSeriesCollection0);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      assertEquals(1033L, simpleTimePeriod0.getEndMillis());
      assertEquals(1033L, simpleTimePeriod0.getStartMillis());
      assertNotNull(simpleTimePeriod0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) 4832.2201591371795, (Number) 4832.2201591371795);
      assertEquals(4832.2201591371795, xYDataItem0.getXValue(), 0.01);
      assertEquals(4832.2201591371795, xYDataItem0.getYValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1033);
      assertEquals(1033L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1033L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1033L, fixedMillisecond0.getSerialIndex());
      assertEquals(1033L, fixedMillisecond0.getFirstMillisecond());
      assertNotNull(fixedMillisecond0);
      
      MockDate mockDate0 = (MockDate)fixedMillisecond0.getEnd();
      assertEquals(1033L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1033L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1033L, fixedMillisecond0.getSerialIndex());
      assertEquals(1033L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertNotNull(mockDate0);
      
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      assertEquals(1033L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1033L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1033L, fixedMillisecond0.getSerialIndex());
      assertEquals(1033L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1034L, fixedMillisecond1.getLastMillisecond());
      assertEquals(1034L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(1034L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(1034L, fixedMillisecond1.getSerialIndex());
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertNotNull(fixedMillisecond1);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      
      Number[] numberArray0 = new Number[7];
      numberArray0[0] = (Number) 363.66581;
      numberArray0[1] = (Number) (-2.147483648E9);
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertEquals(3, doubleArray0.length);
      assertEquals((-4.951760157141527E27), range0.getCentralValue(), 0.01);
      assertEquals((-9.903520314283053E27), range0.getLowerBound(), 0.01);
      assertEquals(363.66581, range0.getUpperBound(), 0.01);
      assertEquals(9.903520314283053E27, range0.getLength(), 0.01);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(range0);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2209L);
      assertEquals(2209L, fixedMillisecond0.getSerialIndex());
      assertEquals(2209L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2209L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2209L, fixedMillisecond0.getMiddleMillisecond());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertEquals(2209L, fixedMillisecond0.getSerialIndex());
      assertEquals(2209L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2209L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2209L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2208L, regularTimePeriod0.getSerialIndex());
      assertEquals(2208L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(2208L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(2208L, regularTimePeriod0.getLastMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.UK;
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotNull(timeTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(2209L));
      assertNotNull(vector0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, false);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(2209L));
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNull(number0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) fixedMillisecond0);
      assertEquals(2209L, fixedMillisecond0.getSerialIndex());
      assertEquals(2209L, fixedMillisecond0.getLastMillisecond());
      assertEquals(2209L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2209L, fixedMillisecond0.getMiddleMillisecond());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertNotNull(pieDataset0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultKeyedValues2DDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, false);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNull(range0);
      
      double[][] doubleArray0 = new double[0][0];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.xy.MatrixSeriesCollection", "org.jfree.data.xy.MatrixSeriesCollection", doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) stack0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2982.228668365;
      doubleArray1[1] = 3915.0;
      doubleArray1[2] = 753.77;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2982.228668365;
      doubleArray2[1] = 2982.228668365;
      doubleArray2[2] = 2982.228668365;
      doubleArray2[3] = 3915.0;
      doubleArray2[4] = 753.77;
      doubleArray2[5] = 753.77;
      doubleArray2[6] = 3915.0;
      doubleArray2[7] = 2982.228668365;
      doubleArray2[8] = 2982.228668365;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 237.59043621566;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 2982.228668365;
      doubleArray3[4] = 2982.228668365;
      doubleArray3[5] = 3915.0;
      doubleArray3[6] = 2982.228668365;
      doubleArray3[7] = 753.77;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 753.77;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 2982.228668365;
      doubleArray4[3] = 237.59043621566;
      doubleArray4[4] = 1190.319995508;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 753.77;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 753.77;
      doubleArray5[1] = 2982.228668365;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 2982.228668365;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("6=<3;", "6=<3;", doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(9879.45733673, range0.getUpperBound(), 0.01);
      assertEquals(4939.728668365, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(9879.45733673, range0.getLength(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 0.0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      int int0 = (-1598);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-1598));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      int int0 = defaultKeyedValues2DDataset0.getRowCount();
      assertEquals(0, int0);
      
      defaultKeyedValues2DDataset0.fireSelectionEvent();
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      int int1 = (-2031);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (-2031));
      assertNotNull(pieDataset0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      String string0 = " ^Ye]+Bz";
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset(connection0, " ^Ye]+Bz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 4832.2201591371795;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2.147483648E9), 0.0, 1033, 4832.2201591371795);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotNull(xYSeriesCollection0);
      assertArrayEquals(new double[] {363.66581, 4832.2201591371795, (-2.147483648E9)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 3);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      assertEquals(1033L, simpleTimePeriod0.getEndMillis());
      assertEquals(1033L, simpleTimePeriod0.getStartMillis());
      assertNotNull(simpleTimePeriod0);
      
      comparableArray0[0] = (Comparable<Float>) simpleTimePeriod0;
      XYDataItem xYDataItem0 = new XYDataItem((Number) 4832.2201591371795, (Number) 4832.2201591371795);
      assertEquals(4832.2201591371795, xYDataItem0.getYValue(), 0.01);
      assertEquals(4832.2201591371795, xYDataItem0.getXValue(), 0.01);
      assertNotNull(xYDataItem0);
      
      comparableArray0[1] = (Comparable<Float>) xYDataItem0;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1031L);
      assertEquals(1031L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1031L, fixedMillisecond0.getSerialIndex());
      assertEquals(1031L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1031L, fixedMillisecond0.getFirstMillisecond());
      assertNotNull(fixedMillisecond0);
      
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      assertEquals(1031L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1031L, fixedMillisecond0.getSerialIndex());
      assertEquals(1031L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1031L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1032L, fixedMillisecond1.getLastMillisecond());
      assertEquals(1032L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(1032L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(1032L, fixedMillisecond1.getSerialIndex());
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertNotNull(fixedMillisecond1);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      
      comparableArray0[2] = (Comparable<Float>) fixedMillisecond1;
      Number[][] numberArray0 = new Number[1][8];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 363.66581;
      numberArray1[1] = (Number) (-2.147483648E9);
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = null;
      try {
        defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, numberArray0, numberArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      boolean boolean0 = true;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNotNull(defaultTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertNull(number0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      int int0 = 859;
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getXValue(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2000.0;
      doubleArray1[1] = (-197.716);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-2056.55424);
      doubleArray1[4] = 1651.822278269384;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1651.822278269384;
      doubleArray2[1] = (-2056.55424);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-197.716);
      doubleArray3[1] = (-197.716);
      doubleArray3[2] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-2056.55424);
      doubleArray4[1] = 1651.822278269384;
      doubleArray4[2] = 2000.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (-2056.55424);
      doubleArray6[1] = (-2056.55424);
      doubleArray6[2] = 2.0;
      doubleArray6[3] = 2000.0;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 1651.822278269384;
      doubleArray6[6] = (-197.716);
      doubleArray6[7] = (-197.716);
      doubleArray6[8] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      
      doubleArray8[0] = 1651.822278269384;
      doubleArray8[1] = 0.0;
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("hpI%BpF]", "org.jfree.data.time.TimeSeries", doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertNotNull(categoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 1139.869234578);
      assertEquals(8, doubleArray0.length);
      assertEquals(6443.513791116768, range0.getUpperBound(), 0.01);
      assertEquals(9812.185036538767, range0.getLength(), 0.01);
      assertEquals(1537.421272847384, range0.getCentralValue(), 0.01);
      assertEquals((-3368.6712454219996), range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotNull(jDBCCategoryDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertNotNull(regularTimePeriod0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1103, 1103, 1140, 1140, 0, 0);
      assertNotNull(mockGregorianCalendar0);
      
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1103,MONTH=1103,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1140,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1140,HOUR_OF_DAY=1140,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1103,MONTH=1103,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1140,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1140,HOUR_OF_DAY=1140,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      
      long long0 = regularTimePeriod0.getFirstMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1103,MONTH=1103,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1140,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1140,HOUR_OF_DAY=1140,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertEquals(1392409281319L, long0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      
      int int0 = jDBCCategoryDataset0.getColumnIndex(regularTimePeriod0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertEquals((-1), int0);
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, Double.POSITIVE_INFINITY);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNull(range0);
      
      MatrixSeries matrixSeries0 = null;
      try {
        matrixSeries0 = new MatrixSeries("s@c", 0, 213);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Day day0 = new Day();
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(day0);
      DatasetUtilities.iterateXYRangeBounds(simpleHistogramDataset0);
      double[][] doubleArray0 = new double[8][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-713.7225257246646);
      doubleArray1[1] = 508.36710007667995;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = (-2102.001151257559);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 223.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-2102.001151257559);
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = (-713.7225257246646);
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (-2102.001151257559);
      doubleArray3[1] = (-713.7225257246646);
      doubleArray3[2] = (-713.7225257246646);
      doubleArray3[3] = Double.POSITIVE_INFINITY;
      doubleArray3[4] = (-713.7225257246646);
      doubleArray3[5] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 1.0;
      doubleArray4[1] = 223.0;
      doubleArray4[2] = 1.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 1.0;
      doubleArray4[6] = 1.0;
      doubleArray4[7] = (-2102.001151257559);
      doubleArray4[8] = (-713.7225257246646);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 223.0;
      doubleArray6[1] = Double.POSITIVE_INFINITY;
      doubleArray6[2] = 1.0;
      doubleArray6[3] = (-713.7225257246646);
      doubleArray6[4] = Double.POSITIVE_INFINITY;
      doubleArray6[5] = 223.0;
      doubleArray6[6] = 508.36710007667995;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[1];
      doubleArray7[0] = 223.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = (-2102.001151257559);
      doubleArray8[1] = 223.0;
      doubleArray8[2] = 223.0;
      doubleArray8[3] = 0.0;
      doubleArray8[4] = 1.0;
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 827);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 827, Size: 9
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Z<gexprzy";
      stringArray0[1] = "blnfA,*f;h|55;<";
      stringArray0[2] = "";
      stringArray0[3] = "H#|F@;Nko^+y2bfESI";
      stringArray0[4] = "";
      stringArray0[5] = "5";
      stringArray0[6] = "YK";
      Number[][] numberArray0 = new Number[3][1];
      Number[] numberArray1 = new Number[9];
      BigInteger bigInteger0 = BigInteger.ZERO;
      numberArray1[0] = (Number) bigInteger0;
      XYSeries xYSeries0 = new XYSeries("H#|F@;Nko^+y2bfESI", false);
      int int0 = (-473);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-473));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Period period0 = Period.ofDays((-2084));
      IsoChronology isoChronology0 = period0.getChronology();
      isoChronology0.dateEpochDay((-543L));
      Long long0 = new Long(1L);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-543L));
      fixedMillisecond0.toString();
      fixedMillisecond0.getEnd();
      fixedMillisecond0.next();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-397.6371076);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0.0, 0.0, 0, (-397.6371076));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("", "", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-3342.0);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = 1738.496376;
      doubleArray1[4] = 2955.6339505;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-3342.0);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 2955.6339505;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 2955.6339505;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 2955.6339505;
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 1738.496376;
      doubleArray4[1] = (-3342.0);
      doubleArray4[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 363.66581;
      doubleArray0[1] = 4832.2201591371795;
      doubleArray0[2] = (-2.147483648E9);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) vectorSeriesCollection0, true);
      polynomialFunction2D0.getCoefficients();
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      Stack<DefaultOHLCDataset> stack0 = new Stack<DefaultOHLCDataset>();
      Stack<DefaultOHLCDataset> stack1 = new Stack<DefaultOHLCDataset>();
      // Undeclared exception!
      try { 
        stack1.setSize((-94));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -94
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1033, 1033);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1033, 996);
      Integer integer0 = new Integer(1033);
      Vector<XYBarDataset> vector0 = new Vector<XYBarDataset>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultTableXYDataset0, 996);
      vector0.add(xYBarDataset0);
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset(false);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset1);
      Range.shift(range0, 1.0, false);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset1, (List) vector0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYBarDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      defaultStatisticalCategoryDataset0.clone();
      Long long0 = new Long(1L);
      stack0.removeElement(long0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      defaultPieDataset0.setGroup(datasetGroup0);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset1);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Number number0 = DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
      Number[][] numberArray0 = new Number[7][8];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) long0;
      numberArray1[1] = (Number) long0;
      numberArray1[2] = number0;
      numberArray1[3] = (Number) long0;
      numberArray1[4] = (Number) long0;
      numberArray1[5] = (Number) long0;
      numberArray1[6] = (Number) long0;
      numberArray1[7] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      numberArray2[0] = number0;
      numberArray2[1] = number0;
      Float float0 = new Float(0.0F);
      numberArray2[2] = (Number) float0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[3];
      numberArray3[0] = (Number) float0;
      numberArray3[1] = (Number) long0;
      numberArray3[2] = number0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[4];
      numberArray4[0] = number0;
      numberArray4[1] = (Number) float0;
      numberArray4[2] = number0;
      numberArray4[3] = (Number) long0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[0];
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[1];
      numberArray6[0] = number0;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[2];
      numberArray7[0] = (Number) long0;
      numberArray7[1] = (Number) long0;
      numberArray0[6] = numberArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'item' argument.", ",ycTQ?TC%lZ9Z]?", numberArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Z<gexprzy";
      stringArray0[1] = "blnfA,*f;h|55;<";
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) yIntervalSeriesCollection0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      Long long0 = new Long(1L);
      stack0.removeElement(long0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset1);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Number number0 = DatasetUtilities.findMinimumDomainValue(categoryTableXYDataset0);
      Number[][] numberArray0 = new Number[7][8];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) long0;
      numberArray1[1] = (Number) long0;
      numberArray1[2] = number0;
      numberArray1[3] = (Number) long0;
      numberArray1[4] = (Number) long0;
      numberArray1[6] = (Number) long0;
      numberArray1[7] = number0;
      numberArray0[0] = numberArray1;
      Float float0 = new Float(0.0F);
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultStatisticalCategoryDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      Long long0 = new Long(1L);
      stack0.removeElement(long0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      Range.combine((Range) null, (Range) null);
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(defaultKeyedValues0);
      DatasetGroup datasetGroup0 = new DatasetGroup();
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.DateEditor jSpinner_DateEditor0 = null;
      try {
        jSpinner_DateEditor0 = new JSpinner.DateEditor((JSpinner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.JSpinner$DateEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      jDBCCategoryDataset0.validateObject();
      jDBCCategoryDataset0.clone();
      DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0, true);
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.DateEditor jSpinner_DateEditor0 = null;
      try {
        jSpinner_DateEditor0 = new JSpinner.DateEditor(jSpinner0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // model not a SpinnerDateModel
         //
         verifyException("javax.swing.JSpinner$DateEditor", e);
      }
  }
}
