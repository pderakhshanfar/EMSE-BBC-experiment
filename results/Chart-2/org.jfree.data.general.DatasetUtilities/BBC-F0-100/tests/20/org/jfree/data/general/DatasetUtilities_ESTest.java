/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 10:56:21 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.awt.Window;
import java.beans.PropertyChangeListener;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.Statement;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.EventListener;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.Vector;
import java.util.stream.Stream;
import javax.swing.JLayeredPane;
import javax.swing.plaf.synth.SynthSpinnerUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.chart.util.SortOrder;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DomainOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValue;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeries;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetSelectionState;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeries;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Stack<Long> stack0 = new Stack<Long>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      boolean boolean0 = stack0.add(long0);
      assertTrue(stack0.contains(long0));
      assertEquals(1, stack0.size());
      assertEquals("[-1]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      
      Long long1 = new Long(827L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(827L, (long)long1);
      
      boolean boolean1 = stack0.add(long1);
      assertTrue(stack0.contains((-1L)));
      assertEquals("[-1, 827]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(long1.equals((Object)long0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) long1, (double) 827L);
      assertFalse(long1.equals((Object)long0));
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Quarter quarter0 = new Quarter(mockDate0);
      assertNotNull(quarter0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2, quarter0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, stack0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Stack<Long> stack0 = new Stack<Long>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      boolean boolean0 = stack0.add(long0);
      assertTrue(stack0.contains(long0));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((Number) 0, (Number) 23, "Null 'date' argument.", true);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, stack0, true);
      assertTrue(stack0.contains(long0));
      assertNotNull(range0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, (List) stack0, true);
      assertTrue(stack0.contains(long0));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-0.5), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.5, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "WRw|y!n^uASz$(qw";
      stringArray0[2] = "[{20";
      stringArray0[3] = "Null 'xRange' argument";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 502);
      assertNotNull(categoryToPieDataset0);
      assertEquals(4, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(502, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Vector<Long> vector0 = new Vector<Long>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Long long0 = Long.valueOf(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      boolean boolean0 = vector0.add(long0);
      assertTrue(vector0.contains(0L));
      assertEquals("[0]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((Number) long0, (Number) long0, "NuQl 'da7e' argument.", false);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, vector0, false);
      assertTrue(vector0.contains(0L));
      assertNotNull(range0);
      assertEquals("[0]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((-2964.0), Double.NaN, "!Fm1-T%'=lbt");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.NaN);
      assertNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1729.7;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = 1.5;
      doubleArray1[4] = 2039.9;
      doubleArray1[5] = 11.737960434969153;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("=@zz{3H&kW7wkM}y`U#", "=@zz{3H&kW7wkM}y`U#", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertArrayEquals(new double[] {1729.7, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0, 2039.9, 11.737960434969153}, doubleArray1, 0.01);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, doubleArray1.length);
      assertEquals(5, polynomialFunction2D0.getOrder());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 3390.381270604158, 1729.7, (-1642), "=@zz{3H&kW7wkM}y`U#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Requires 'start' < 'end'.", 87, 87);
      assertNotNull(matrixSeries0);
      assertEquals(87, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(87, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(7569, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(87, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(87, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(7569, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(87, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(87, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(7569, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      // Undeclared exception!
      DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Byte byte0 = new Byte((byte)22);
      assertNotNull(byte0);
      assertEquals((byte)22, (byte)byte0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((double) (byte)22, (double) (byte)22, (Comparable) byte0, (Comparable) byte0);
      Stack<Byte> stack0 = new Stack<Byte>();
      assertFalse(stack0.contains((byte)22));
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add(byte0);
      assertTrue(stack0.contains((byte)22));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[22]", stack0.toString());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.contains((byte)22));
      assertNotNull(range0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[22]", stack0.toString());
      assertEquals(44.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(22.0, range0.getCentralValue(), 0.01);
      assertEquals(44.0, range0.getUpperBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((byte)22, "Null 'rowKeys' argument.");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Null 'rowKeys' argument.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(22, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Null 'rowKeys' argument.,offset=22,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(simpleTimeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Null 'rowKeys' argument.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(22, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Null 'rowKeys' argument.,offset=22,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, false);
      assertNull(range1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Null 'rowKeys' argument.", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(22, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Null 'rowKeys' argument.,offset=22,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(byte0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Stack<XYSeriesCollection> stack1 = new Stack<XYSeriesCollection>();
      assertNotNull(stack1);
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)22;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)22, (byte)22, (byte)22, (byte)22, (byte)22, (byte)22, (byte)22, (byte)22}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = stack1.add(xYSeriesCollection0);
      assertTrue(stack1.contains(xYSeriesCollection0));
      assertFalse(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
      assertTrue(stack0.contains((byte)22));
      assertNull(range2);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[22]", stack0.toString());
      assertEquals(44.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(22.0, range0.getCentralValue(), 0.01);
      assertEquals(44.0, range0.getUpperBound(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) "Null 'rowKeys' argument.");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("_VaM5=.^.{M)myn", 2, 2);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(4, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("_VaM5=.^.{M)myn");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection((XYSeries) null);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = stack0.add(xYSeriesCollection0);
      assertTrue(stack0.contains(xYSeriesCollection0));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short0 = new Short((short) (-1500));
      assertNotNull(short0);
      assertEquals((short) (-1500), (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Short short1 = new Short((short) (-1500));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-1500), (short)short1);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      categoryTableXYDataset0.add((Number) short1, (Number) short1, "Null 'date' argument.", true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(short1.equals((Object)short0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-1500.5), range0.getLowerBound(), 0.01);
      assertEquals((-1500.0), range0.getCentralValue(), 0.01);
      assertEquals((-1499.5), range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((double) 23, (-1432.0562262), "N9wzl^rC");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add((double) 0, (double) 23, "n-FCwojkN?#Dv3=T|M-");
      assertEquals(23.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(23.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(23.0, double0, 0.01);
      
      double[][] doubleArray0 = new double[7][2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 23;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 23;
      doubleArray1[4] = (double) 23;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (-1432.0562262);
      doubleArray1[7] = (double) 23;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 23.0;
      doubleArray3[1] = (-1432.0562262);
      doubleArray3[2] = 23.0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (-1432.0562262);
      doubleArray3[5] = 23.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-456.13968729);
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = 23.0;
      doubleArray4[3] = (double) 0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (double) 0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = (double) 23;
      doubleArray6[1] = 23.0;
      doubleArray6[2] = (double) 0;
      doubleArray6[3] = Double.POSITIVE_INFINITY;
      doubleArray6[4] = (-1432.0562262);
      doubleArray6[5] = 23.0;
      doubleArray6[6] = (double) 0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = (-456.13968729);
      doubleArray7[1] = 68.22;
      doubleArray7[2] = (double) 0;
      doubleArray7[3] = (double) 23;
      doubleArray7[4] = (-1432.0562262);
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("N9wzl^rC", "N9wzl^rC", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Byte byte0 = new Byte((byte)22);
      assertNotNull(byte0);
      assertEquals((byte)22, (byte)byte0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((double) (byte)22, (double) (byte)22, (Comparable) byte0, (Comparable) byte0);
      Stack<Byte> stack0 = new Stack<Byte>();
      assertFalse(stack0.contains((byte)22));
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add(byte0);
      assertTrue(stack0.contains((byte)22));
      assertFalse(stack0.isEmpty());
      assertEquals("[22]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.contains((byte)22));
      assertNotNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals("[22]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(44.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(22.0, range0.getCentralValue(), 0.01);
      assertEquals(44.0, range0.getUpperBound(), 0.01);
      
      Stack<DefaultTableXYDataset> stack1 = new Stack<DefaultTableXYDataset>();
      assertNotNull(stack1);
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      
      boolean boolean1 = stack1.add((DefaultTableXYDataset) null);
      assertFalse(stack1.isEmpty());
      assertEquals("[null]", stack1.toString());
      assertEquals(1, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.contains((byte)22));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(stack0.isEmpty());
      assertEquals("[22]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(44.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(22.0, range1.getCentralValue(), 0.01);
      assertEquals(44.0, range1.getUpperBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[][] doubleArray0 = new double[9][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("%`S'lZ|jJ49G");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      int int0 = timeZone0.getOffset(459L);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, int0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      MockDate mockDate0 = new MockDate(1297L);
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0, timeZone0);
      assertNotNull(minute0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(0, minute0.getHourValue());
      assertEquals(1297L, minute0.getLastMillisecond());
      assertEquals(1297L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      timeTableXYDataset0.add((TimePeriod) minute0, (Number) 0, "(~gp&?~D|VxRb$=NS", false);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getHourValue());
      assertEquals(0, minute0.getMinute());
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      boolean boolean0 = linkedList0.add(double0);
      assertTrue(linkedList0.contains(double0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotNull(range0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = timeTableXYDataset0.getDomainBounds(false);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) linkedList0, range1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      double double0 = 1410.3674;
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1410.3674, 1410.3674, 1410.3674, 1410.3674, 1410.3674);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      int int0 = (-202);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-202), (-202));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-202), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-202), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      int int1 = 2145962085;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(slidingGanttCategoryDataset0, 2145962085, 2145962085);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-202), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-202), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2145962085, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2145962085, slidingCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Number[][] numberArray0 = new Number[6][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("dy?{5Hd:H J\"9%F1", "dy?{5Hd:H J\"9%F1", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2);
      assertNotNull(categoryToPieDataset0);
      assertEquals(6, numberArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
      assertEquals(6, numberArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1410.3674, 1410.3674, 1410.3674, 1410.3674, 1410.3674);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      long long0 = MockDate.UTC((-1407), (-1407), (-1407), 1, (-1407), (-395));
      assertEquals((-50431415615000L), long0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("_VaM5=.^.{M)myn", 2, 2);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("_VaM5=.^.{M)myn");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) stack0, true);
      assertNull(range1);
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.5, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLength(), 0.01);
      assertTrue(range2.equals((Object)range0));
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range2, true);
      assertNotSame(range2, range0);
      assertNull(range3);
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.5, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getLength(), 0.01);
      assertTrue(range2.equals((Object)range0));
      
      Range range4 = Range.expandToInclude(range0, 2);
      assertNotSame(range0, range2);
      assertNotSame(range0, range4);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotNull(range4);
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(2.0, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(1.0, range4.getCentralValue(), 0.01);
      assertEquals(2.0, range4.getUpperBound(), 0.01);
      assertTrue(range0.equals((Object)range2));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Short short0 = new Short((short)32);
      assertNotNull(short0);
      assertEquals((short)32, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertFalse(arrayList0.contains(short0));
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Short short1 = new Short((short)32);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)32, (short)short1);
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset1);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      CategoryTableXYDataset categoryTableXYDataset2 = (CategoryTableXYDataset)categoryTableXYDataset1.clone();
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset2);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertNotSame(categoryTableXYDataset2, categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset2, categoryTableXYDataset0);
      assertNotNull(categoryTableXYDataset2);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset2.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset2.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset2.isAutoWidth());
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      assertTrue(categoryTableXYDataset2.equals((Object)categoryTableXYDataset0));
      assertTrue(categoryTableXYDataset2.equals((Object)categoryTableXYDataset1));
      
      categoryTableXYDataset0.add((Number) 0, (Number) 23, "Null 'date' argument.", true);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset2);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset2));
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, arrayList0, true);
      assertTrue(arrayList0.contains((short)32));
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset2);
      assertNotSame(categoryTableXYDataset0, categoryTableXYDataset1);
      assertNotNull(range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset2));
      assertFalse(categoryTableXYDataset0.equals((Object)categoryTableXYDataset1));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Double double0 = new Double(2291.0);
      assertNotNull(double0);
      assertEquals(2291.0, (double)double0, 0.01);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale1);
      assertNotNull(mockSimpleDateFormat0);
      assertFalse(locale1.equals((Object)locale0));
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotSame(locale1, locale0);
      assertNotNull(date0);
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(locale1.equals((Object)locale0));
      
      Year year0 = new Year(date0);
      assertNotNull(year0);
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Year year1 = (Year)year0.previous();
      assertNotSame(locale1, locale0);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertNotNull(year1);
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(2013, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals("2013", year1.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(year1.equals((Object)year0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      timeTableXYDataset0.add((TimePeriod) year0, (Number) 9999, "", false);
      assertNotSame(locale1, locale0);
      assertNotSame(year0, year1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(year0.equals((Object)year1));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertFalse(linkedList0.contains(2291.0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double1 = new Double((-9999));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-9999.0), (double)double1, 0.01);
      
      boolean boolean0 = linkedList0.add(double1);
      assertTrue(linkedList0.contains(double1));
      assertFalse(linkedList0.contains(double0));
      assertEquals(1, linkedList0.size());
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(4999.5, range0.getCentralValue(), 0.01);
      assertEquals(9999.0, range0.getUpperBound(), 0.01);
      assertEquals(9999.0, range0.getLength(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) linkedList0, range0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short0 = new Short((short) (-1534));
      assertNotNull(short0);
      assertEquals((short) (-1534), (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short) (-1534)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Short short1 = new Short((short) (-1534));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-1534), (short)short1);
      
      categoryTableXYDataset0.add((Number) short1, (Number) short1, "TimeSeriesDataset.addValue(): series #", true);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(short1.equals((Object)short0));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, arrayList0, true);
      assertTrue(arrayList0.contains(short0));
      assertNotNull(range0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-1533.5), range0.getUpperBound(), 0.01);
      assertEquals((-1534.0), range0.getCentralValue(), 0.01);
      assertEquals((-1534.5), range0.getLowerBound(), 0.01);
      
      Number[][] numberArray0 = new Number[4][6];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) short1;
      numberArray1[1] = (Number) short1;
      Double double0 = new Double((short) (-1534));
      assertNotNull(double0);
      assertEquals((-1534.0), (double)double0, 0.01);
      
      numberArray1[2] = (Number) double0;
      numberArray1[3] = (Number) short1;
      numberArray1[4] = (Number) short1;
      numberArray1[5] = (Number) short1;
      numberArray1[6] = (Number) short1;
      numberArray1[7] = (Number) short1;
      numberArray1[8] = (Number) short0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[7];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) double0;
      numberArray2[1] = (Number) short1;
      numberArray2[2] = (Number) short1;
      numberArray2[3] = (Number) short0;
      numberArray2[4] = (Number) short0;
      numberArray2[5] = (Number) double0;
      numberArray2[6] = (Number) short0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[9];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) short1;
      numberArray3[1] = (Number) double0;
      numberArray3[2] = (Number) double0;
      numberArray3[3] = (Number) double0;
      numberArray3[4] = (Number) double0;
      Double double1 = new Double(2472.0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(2472.0, (double)double1, 0.01);
      
      numberArray3[5] = (Number) double1;
      numberArray3[6] = (Number) short0;
      numberArray3[7] = (Number) short0;
      numberArray3[8] = (Number) short0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[7];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[0] = (Number) double0;
      numberArray4[1] = (Number) short1;
      numberArray4[2] = (Number) short0;
      numberArray4[3] = (Number) short1;
      numberArray4[4] = (Number) short1;
      numberArray4[5] = (Number) double0;
      numberArray4[6] = (Number) double1;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, numberArray0.length);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) short0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("_VaM5=.^.{M)myn", 2, 2);
      assertNotNull(matrixSeries0);
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("_VaM5=.^.{M)myn");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      boolean boolean0 = stack0.add(xYSeriesCollection0);
      assertTrue(stack0.contains(xYSeriesCollection0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Requires 'start' < 'end'.", 87, 87);
      assertNotNull(matrixSeries0);
      assertEquals(87, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(7569, matrixSeries0.getItemCount());
      assertEquals(87, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(87, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(7569, matrixSeries0.getItemCount());
      assertEquals(87, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(87, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(7569, matrixSeries0.getItemCount());
      assertEquals(87, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      LinkedList<YIntervalSeriesCollection> linkedList0 = new LinkedList<YIntervalSeriesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Stack<Long> stack0 = new Stack<Long>();
      assertFalse(stack0.contains(long0));
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      stack0.clear();
      assertFalse(stack0.contains(long0));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = stack0.add(long0);
      assertTrue(stack0.contains(long0));
      assertFalse(stack0.isEmpty());
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(stack0, long0, long0);
      assertTrue(stack0.contains(long0));
      assertFalse(stack0.isEmpty());
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, false);
      assertTrue(stack0.contains(long0));
      assertNotNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.contains(long0));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(stack0.isEmpty());
      assertEquals("[0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[][] doubleArray0 = new double[24][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(24, doubleArray0.length);
      assertEquals(24, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(24, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Byte byte0 = new Byte((byte)14);
      assertNotNull(byte0);
      assertEquals((byte)14, (byte)byte0);
      
      boolean boolean0 = stack0.add(byte0);
      assertTrue(stack0.contains(byte0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[14]", stack0.toString());
      assertTrue(boolean0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (byte)14, 1.0, (-106), (-106), (byte)14);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (byte)14, 1.0, (byte)14, (byte)14, (byte)14);
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1.0, (byte)14, 1.0, (byte)14, 1.0);
      assertNotNull(oHLCDataItem2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-106), 1.0, (byte)14, (-106), (byte)14);
      assertNotNull(oHLCDataItem3);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem2;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem1;
      oHLCDataItemArray0[6] = oHLCDataItem2;
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-106);
      doubleArray1[1] = (double) (-106);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(oHLCDataItem0, dateArray0, doubleArray1, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {(-106.0), (-106.0)}, doubleArray1, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(4, dateArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("9tEI(>d<ocv7", 87, 87);
      assertNotNull(matrixSeries0);
      assertEquals(87, matrixSeries0.getColumnsCount());
      assertEquals(7569, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(87, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      
      matrixSeries0.addPropertyChangeListener((PropertyChangeListener) null);
      assertEquals(87, matrixSeries0.getColumnsCount());
      assertEquals(7569, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(87, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(87, matrixSeries0.getColumnsCount());
      assertEquals(7569, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(87, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(87, matrixSeries0.getColumnsCount());
      assertEquals(7569, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(87, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(86.0, number0);
      
      // Undeclared exception!
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("d'?{CHd:@|JH9&%F1", "d'?{CHd:@|JH9&%F1", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      assertTrue(boolean0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 1496, Integer.MAX_VALUE);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(2, numberArray0.length);
      assertEquals(1496, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(Integer.MAX_VALUE, slidingCategoryDataset0.getMaximumCategoryCount());
      
      int int0 = slidingCategoryDataset0.getColumnCount();
      assertEquals(2, numberArray0.length);
      assertEquals(1496, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(Integer.MAX_VALUE, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(Integer.MAX_VALUE, int0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1496, Size: 6
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("_VaM5=.^.{M)myn", 2, 2);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      matrixSeriesCollection0.addChangeListener(xYTaskDataset0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("_VaM5=.^.{M)myn");
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Stack<XYSeriesCollection> stack0 = new Stack<XYSeriesCollection>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range0, true);
      assertNull(range1);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 441.3060243876;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 441.3060243876;
      doubleArray0[3] = (-1669.76283335052);
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = 441.3060243876;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertArrayEquals(new double[] {441.3060243876, (-1.0), 441.3060243876, (-1669.76283335052), 0.0, 0.0, 0.0, 441.3060243876}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, Double.NEGATIVE_INFINITY, 64.477199, 46, 0.0);
      assertArrayEquals(new double[] {441.3060243876, (-1.0), 441.3060243876, (-1669.76283335052), 0.0, 0.0, 0.0, 441.3060243876}, doubleArray0, 0.01);
      assertNotNull(xYSeriesCollection0);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertArrayEquals(new double[] {441.3060243876, (-1.0), 441.3060243876, (-1669.76283335052), 0.0, 0.0, 0.0, 441.3060243876}, doubleArray0, 0.01);
      assertNull(range0);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertArrayEquals(new double[] {441.3060243876, (-1.0), 441.3060243876, (-1669.76283335052), 0.0, 0.0, 0.0, 441.3060243876}, doubleArray0, 0.01);
      assertNull(range1);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("9tEI(>d<ocv7", 87, 87);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(7569, matrixSeries0.getItemCount());
      assertEquals(87, matrixSeries0.getRowCount());
      assertEquals(87, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(7569, matrixSeries0.getItemCount());
      assertEquals(87, matrixSeries0.getRowCount());
      assertEquals(87, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(matrixSeriesCollection0, 451.92463);
      assertNotNull(xYBarDataset0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(7569, matrixSeries0.getItemCount());
      assertEquals(87, matrixSeries0.getRowCount());
      assertEquals(87, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(451.92463, xYBarDataset0.getBarWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(xYBarDataset0);
      assertNotNull(number0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(7569, matrixSeries0.getItemCount());
      assertEquals(87, matrixSeries0.getRowCount());
      assertEquals(87, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(451.92463, xYBarDataset0.getBarWidth(), 0.01);
      assertEquals(311.962315, number0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("9tEI(>d<ocv7", 87, 87);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(87, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(87, matrixSeries0.getColumnsCount());
      assertEquals(7569, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(87, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(87, matrixSeries0.getColumnsCount());
      assertEquals(7569, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(87, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(87, matrixSeries0.getColumnsCount());
      assertEquals(7569, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(86.0, number0);
      
      // Undeclared exception!
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[][] doubleArray0 = new double[9][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-786));
      assertNotNull(categoryToPieDataset0);
      assertEquals(9, doubleArray0.length);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-786), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) null, (double) (-786), (-786));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Vector<Long> vector0 = new Vector<Long>();
      assertFalse(vector0.contains(0L));
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      boolean boolean0 = vector0.add(long0);
      assertTrue(vector0.contains(0L));
      assertEquals("[0]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(long0, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      MockDate mockDate0 = new MockDate(1977L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 24.0, 1977L, 24.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1227.51505936106, Double.NEGATIVE_INFINITY, (-613.812365024389), 4.363364228E12, (-613.812365024389));
      assertNotNull(oHLCDataItem1);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 356.33686431, 1227.51505936106, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (-2837.797954449));
      assertNotNull(oHLCDataItem2);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("Null 'datase<' arguHent.", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(3, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range0 = new Range((-1.0), 356.33686431);
      assertNotNull(range0);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(357.33686431, range0.getLength(), 0.01);
      assertEquals(177.668432155, range0.getCentralValue(), 0.01);
      assertEquals(356.33686431, range0.getUpperBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-412.123719);
      doubleArray0[1] = (-1.0);
      doubleArray0[1] = 441.3060243876;
      doubleArray0[3] = 369.93;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertArrayEquals(new double[] {(-412.123719), 441.3060243876, 0.0, 369.93}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-1.0), 0.0, 46, 369.93);
      assertArrayEquals(new double[] {(-412.123719), 441.3060243876, 0.0, 369.93}, doubleArray0, 0.01);
      assertNotNull(xYSeriesCollection0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertArrayEquals(new double[] {(-412.123719), 441.3060243876, 0.0, 369.93}, doubleArray0, 0.01);
      assertNotNull(range0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1223.3597433876), range0.getLowerBound(), 0.01);
      assertEquals((-412.123719), range0.getUpperBound(), 0.01);
      assertEquals(811.2360243876001, range0.getLength(), 0.01);
      assertEquals((-817.7417311938), range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertArrayEquals(new double[] {(-412.123719), 441.3060243876, 0.0, 369.93}, doubleArray0, 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-0.5), range1.getCentralValue(), 0.01);
      assertEquals(0.5, range1.getUpperBound(), 0.01);
      assertEquals(2.0, range1.getLength(), 0.01);
      assertEquals((-1.5), range1.getLowerBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertArrayEquals(new double[] {(-412.123719), 441.3060243876, 0.0, 369.93}, doubleArray0, 0.01);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1.5), range2.getLowerBound(), 0.01);
      assertEquals(2.0, range2.getLength(), 0.01);
      assertEquals((-0.5), range2.getCentralValue(), 0.01);
      assertEquals(0.5, range2.getUpperBound(), 0.01);
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("d'?{CHd:@|JH9&%F1", "d'?{CHd:@|JH9&%F1", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>(2856);
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add((Short) null);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2856, (-756));
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-757), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, arrayList0, true);
      assertNull(range0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-757), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("ull 'an' rg~mOent", 58, 58);
      assertNotNull(matrixSeries0);
      assertEquals(58, matrixSeries0.getColumnsCount());
      assertEquals(58, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3364, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      
      matrixSeries0.setNotify(true);
      assertEquals(58, matrixSeries0.getColumnsCount());
      assertEquals(58, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3364, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      
      timeTableXYDataset0.add((TimePeriod) day0, (Number) null, "ull 'an' rg~mOent", true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, true);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Double) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(3, 3, 3);
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2255, 5039, timeZone0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(5038, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(5038, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) linkedList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      MockDate mockDate0 = new MockDate(1866L);
      assertNotNull(mockDate0);
      
      Year year0 = new Year(mockDate0);
      assertNotNull(year0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(1970L, year0.getSerialIndex());
      assertEquals(1970, year0.getYear());
      assertEquals(1866L, year0.getFirstMillisecond());
      assertEquals("1970", year0.toString());
      assertEquals(1866L, year0.getLastMillisecond());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-488), 624);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals((-488), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(624, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingGanttCategoryDataset0, tableOrder0, 18);
      assertNotNull(categoryToPieDataset0);
      assertEquals((-488), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(624, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(18, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) year0, (-33.929412));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vector<Long> vector0 = new Vector<Long>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      long long0 = 2694L;
      Long long1 = new Long(2694L);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals(2694L, (long)long1);
      
      boolean boolean0 = vector0.add(long1);
      assertTrue(vector0.contains(long0));
      assertFalse(vector0.isEmpty());
      assertEquals("[2694]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(long1.equals((Object)long0));
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<DefaultMultiValueCategoryDataset> vector1 = new Vector<DefaultMultiValueCategoryDataset>();
      assertFalse(vector1.contains(defaultMultiValueCategoryDataset0));
      assertNotNull(vector1);
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      
      defaultMultiValueCategoryDataset0.add(vector1, long1, long1);
      assertFalse(vector1.contains(defaultMultiValueCategoryDataset0));
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertTrue(long1.equals((Object)long0));
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      int int0 = (-427);
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultMultiValueCategoryDataset0, tableOrder0, (-427));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-427), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) long1, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      
      Byte byte0 = new Byte((byte)14);
      assertNotNull(byte0);
      assertEquals((byte)14, (byte)byte0);
      
      Byte byte1 = new Byte((byte)109);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)109, (byte)byte1);
      
      boolean boolean0 = stack0.add(byte1);
      assertFalse(stack0.contains(byte0));
      assertTrue(stack0.contains(byte1));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[109]", stack0.toString());
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(boolean0);
      
      MockDate mockDate1 = new MockDate();
      assertNotNull(mockDate1);
      assertTrue(mockDate1.equals((Object)mockDate0));
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1.0, 1023.81366523, (byte)14, (byte)109, 1023.81366523);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(mockDate0.equals((Object)mockDate1));
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-106.0), (-106.0), (-1.0), (-4336.84), (-106));
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-4336.84), (-1725.4), (-4336.84), (-106), 2522.0);
      assertNotNull(oHLCDataItem2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertTrue(mockDate0.equals((Object)mockDate1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate1, (-1.7976931348623157E308), (-588.0424), (-1.7976931348623157E308), (-2545.5), 3318.4389117);
      assertNotNull(oHLCDataItem3);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem3, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, true);
      assertFalse(stack0.contains(byte0));
      assertTrue(stack0.contains((byte)109));
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(oHLCDataItem3, oHLCDataItem1);
      assertNotSame(oHLCDataItem3, oHLCDataItem2);
      assertNotSame(oHLCDataItem3, oHLCDataItem0);
      assertNotNull(range0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[109]", stack0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      
      Range range1 = new Range((-588.0424), 2463.4848074);
      assertNotNull(range1);
      assertEquals(2463.4848074, range1.getUpperBound(), 0.01);
      assertEquals(3051.5272074000004, range1.getLength(), 0.01);
      assertEquals(937.7212037, range1.getCentralValue(), 0.01);
      assertEquals((-588.0424), range1.getLowerBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      assertFalse(stack0.contains(byte0));
      assertTrue(stack0.contains((byte)109));
      assertNotSame(mockDate1, mockDate0);
      assertNotSame(oHLCDataItem3, oHLCDataItem1);
      assertNotSame(oHLCDataItem3, oHLCDataItem2);
      assertNotSame(oHLCDataItem3, oHLCDataItem0);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[109]", stack0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-4336.84), range2.getUpperBound(), 0.01);
      assertEquals((-4336.84), range2.getCentralValue(), 0.01);
      assertEquals((-4336.84), range2.getLowerBound(), 0.01);
      assertTrue(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Byte byte0 = new Byte((byte)22);
      assertNotNull(byte0);
      assertEquals((byte)22, (byte)byte0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add(0.5, (double) (byte)22, (Comparable) byte0, (Comparable) byte0);
      Byte byte1 = new Byte((byte)22);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)22, (byte)byte1);
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertFalse(stack0.contains(byte1));
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add(byte0);
      assertTrue(stack0.contains(byte1));
      assertEquals("[22]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(boolean0);
      
      Byte byte2 = new Byte((byte)34);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)34, (byte)byte2);
      
      boolean boolean1 = stack0.add(byte0);
      assertFalse(stack0.contains(byte2));
      assertTrue(stack0.contains(byte1));
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[22, 22]", stack0.toString());
      assertTrue(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertFalse(stack0.contains(byte2));
      assertTrue(stack0.contains(byte1));
      assertNotNull(range0);
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[22, 22]", stack0.toString());
      assertEquals((-21.5), range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(44.0, range0.getLength(), 0.01);
      assertEquals(22.5, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(defaultStatisticalCategoryDataset0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.25, range1.getCentralValue(), 0.01);
      assertEquals(0.5, range1.getUpperBound(), 0.01);
      assertEquals(0.5, range1.getLength(), 0.01);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(hour0);
      assertNotNull(timePeriodValues0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      MockDate mockDate0 = new MockDate(0, 0, 23);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-517.1633126984), (-2530.03691583), 1.0, (-517.1633126984), 1.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Jan 23 00:00:00 GMT 1900", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1.0, (-742.0), (-1.7976931348623157E308), (-517.1633126984), (-1.7976931348623157E308));
      assertNotNull(oHLCDataItem1);
      assertEquals("Tue Jan 23 00:00:00 GMT 1900", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[6] = oHLCDataItem1;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals("Tue Jan 23 00:00:00 GMT 1900", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1.7976931348623157E308, range0.getLength(), 0.01);
      assertEquals((-8.988465674311579E307), range0.getCentralValue(), 0.01);
      assertEquals((-742.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getLowerBound(), 0.01);
      assertEquals("Tue Jan 23 00:00:00 GMT 1900", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals((-2.207088E12), range1.getLowerBound(), 0.01);
      assertEquals((-2.207088E12), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2.207088E12), range1.getUpperBound(), 0.01);
      assertEquals("Tue Jan 23 00:00:00 GMT 1900", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals((-2.207088E12), range2.getLowerBound(), 0.01);
      assertEquals((-2.207088E12), range2.getCentralValue(), 0.01);
      assertEquals((-2.207088E12), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals("Tue Jan 23 00:00:00 GMT 1900", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)96);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)96, (byte)byte1);
      
      boolean boolean0 = stack0.add(byte1);
      assertFalse(stack0.contains((byte)0));
      assertTrue(stack0.contains(byte1));
      assertEquals(1, stack0.size());
      assertEquals("[96]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(boolean0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, Double.NaN, 23, (-2.147483648E9), Double.NaN, 0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0, (byte)0, (byte)0, 0, Double.POSITIVE_INFINITY);
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (byte)0, (byte)0, 1375.3702262274, (-1.7976931348623157E308), Double.POSITIVE_INFINITY);
      assertNotNull(oHLCDataItem2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1.7976931348623157E308), (-848.355095751), (-2.147483648E9), (-2.147483648E9), (-473.0607006054));
      assertNotNull(oHLCDataItem3);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      oHLCDataItemArray0[0] = oHLCDataItem2;
      oHLCDataItemArray0[1] = oHLCDataItem2;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, false);
      assertFalse(stack0.contains((byte)0));
      assertTrue(stack0.contains(byte1));
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem3);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotNull(range0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1, stack0.size());
      assertEquals("[96]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      Range range1 = new Range(0.8, Double.POSITIVE_INFINITY);
      assertNotNull(range1);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(0.8, range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range1, false);
      assertFalse(stack0.contains((byte)0));
      assertTrue(stack0.contains(byte1));
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem3);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotNull(range2);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, stack0.size());
      assertEquals("[96]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(0.8, range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals((-2.147483648E9), range2.getUpperBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range2.getLowerBound(), 0.01);
      assertEquals((-8.988465674311579E307), range2.getCentralValue(), 0.01);
      assertEquals(1.7976931348623157E308, range2.getLength(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      timeTableXYDataset0.add((TimePeriod) week0, (Number) 53, "Q%r68jDH OQ0jGJJ", true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, true);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(53.0, range0.getUpperBound(), 0.01);
      assertEquals(53.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(53.0, range0.getCentralValue(), 0.01);
      
      Range range1 = DatasetUtilities.iterateXYRangeBounds(timeTableXYDataset0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(53.0, range1.getLowerBound(), 0.01);
      assertEquals(53.0, range1.getCentralValue(), 0.01);
      assertEquals(53.0, range1.getUpperBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
      
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "Q%r68jDH OQ0jGJJ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      MockDate mockDate0 = new MockDate(0);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 23.0, Double.NEGATIVE_INFINITY, (-2443.939771013191), (-1514.60377331), (-1653.24));
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, oHLCDataItemArray0.length);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (-2443.939771013191) <= upper (-Infinity).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(23);
      assertNotNull(double0);
      assertEquals(23.0, (double)double0, 0.01);
      
      boolean boolean0 = linkedList0.add(double0);
      assertTrue(linkedList0.contains(double0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      MockDate mockDate0 = new MockDate(46, 23, Integer.MAX_VALUE, (-4006), 145, 0);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1019.738484553975), (-4006), (-1505.1528519873593), Integer.MAX_VALUE, (-4006));
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Dec 24 04:25:00 GMT 5881557", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(hour0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, false);
      assertFalse(linkedList0.contains((-1019.738484553975)));
      assertTrue(linkedList0.contains(double0));
      assertNotNull(range0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1, linkedList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.855418756127E17, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.855418756127E17, range0.getCentralValue(), 0.01);
      assertEquals(1.855418756127E17, range0.getUpperBound(), 0.01);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, range0, false);
      assertFalse(linkedList0.contains((-1019.738484553975)));
      assertTrue(linkedList0.contains(double0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1, linkedList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.855418756127E17, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.855418756127E17, range0.getCentralValue(), 0.01);
      assertEquals(1.855418756127E17, range0.getUpperBound(), 0.01);
      assertEquals(2.147483647E9, range1.getLowerBound(), 0.01);
      assertEquals(2.147483647E9, range1.getCentralValue(), 0.01);
      assertEquals(2.147483647E9, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Number[][] numberArray0 = new Number[0][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(oHLCDataItemArray0, oHLCDataItemArray0, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNull(range2);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4\\.ifR`";
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.clear();
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertEquals(0.0, double0, 0.01);
      
      MatrixSeries matrixSeries0 = new MatrixSeries(")H|.4p8bR_VBq0;", 12, 12);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(144, matrixSeries0.getItemCount());
      assertEquals(12, matrixSeries0.getRowCount());
      assertEquals(12, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(144, matrixSeries0.getItemCount());
      assertEquals(12, matrixSeries0.getRowCount());
      assertEquals(12, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      boolean boolean0 = vector0.add(xYSeriesCollection0);
      assertTrue(vector0.contains(xYSeriesCollection0));
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(144, matrixSeries0.getItemCount());
      assertEquals(12, matrixSeries0.getRowCount());
      assertEquals(12, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(11.0, range0.getUpperBound(), 0.01);
      assertEquals(11.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(5.5, range0.getCentralValue(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) vector0, range0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 11.0;
      doubleArray1[1] = (-1.7976931348623157E308);
      doubleArray1[2] = (-1.7976931348623157E308);
      doubleArray1[3] = (-617.612);
      doubleArray1[4] = 1165.1385805147731;
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = 383.0;
      doubleArray1[7] = (-1290.2);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = (-617.612);
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = 932.354;
      doubleArray2[5] = Double.NaN;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 932.354;
      doubleArray3[1] = 6.283185307179586;
      doubleArray3[2] = (-1.7976931348623157E308);
      doubleArray3[3] = 932.354;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      Byte byte0 = new Byte((byte) (-28));
      assertNotNull(byte0);
      assertEquals((byte) (-28), (byte)byte0);
      
      defaultStatisticalCategoryDataset0.add(5230.5, (-252.0), (Comparable) byte0, (Comparable) byte0);
      Byte byte1 = new Byte((byte)28);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)28, (byte)byte1);
      
      boolean boolean0 = stack0.add(byte1);
      assertTrue(stack0.contains(byte1));
      assertFalse(stack0.contains(byte0));
      assertEquals("[28]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Double double0 = new Double((-3881.8703086139685));
      assertNotNull(double0);
      assertEquals((-3881.8703086139685), (double)double0, 0.01);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertFalse(linkedList0.contains(double0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(double0);
      assertTrue(linkedList0.contains(double0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Double double1 = new Double((-3881.8703086139685));
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-3881.8703086139685), (double)double1, 0.01);
      
      boolean boolean1 = linkedList0.add(double1);
      assertTrue(linkedList0.contains(double0));
      assertEquals(2, linkedList0.size());
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MockDate mockDate0 = new MockDate(27, 27, 27, 27, 27, 27);
      assertNotNull(mockDate0);
      
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 28.885;
      doubleArray1[1] = 28.885;
      doubleArray1[2] = 28.885;
      doubleArray1[3] = (-3881.8703086139685);
      doubleArray1[4] = 28.885;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 28.885;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = (double) 27;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1049.863977578123;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 1049.863977578123;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = (double) 27;
      doubleArray4[3] = (-3881.8703086139685);
      doubleArray4[4] = 28.885;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("*b", ">Rq+OkI9E}?W$G 8y", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 27);
      assertNotNull(categoryToPieDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(27, categoryToPieDataset0.getExtractIndex());
      
      double double2 = (-1.7976931348623157E308);
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) 28.885, (-1.7976931348623157E308));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 27, Size: 5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(0.0, 0.0, "EFi3i<x}-");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals((-0.5), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.5, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(Double.NaN, (-2944.9), "s=6W8!}Ggqy>L*");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = categoryTableXYDataset0.getDomainLowerBound(false);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = "org.jfree.data.general.DatasetUtilities";
      boolean boolean0 = categoryTableXYDataset0.equals("org.jfree.data.general.DatasetUtilities");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertFalse(boolean0);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(categoryTableXYDataset0, 1138.7);
      assertNotNull(xYBarDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1138.7, xYBarDataset0.getBarWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYBarDataset0);
      assertNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1138.7, xYBarDataset0.getBarWidth(), 0.01);
      
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset("s=6W8!}Ggqy>L*", "k:wvd5k", "9/WT8HqWBPqXJ1", " ");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 225.96248053827657, 0.8, 1.0, (-1358.47), (-669.0));
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[6];
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-941.19193227), 1478.885081376587, 1.0, 1167.97578, 1478.885081376587);
      assertNotNull(oHLCDataItem1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("db'?{CHd:@|JH9&%F1", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(739.9425406882935, range0.getCentralValue(), 0.01);
      assertEquals(1477.885081376587, range0.getLength(), 0.01);
      assertEquals(1478.885081376587, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(6, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Double double0 = new Double(544.597733996);
      assertNotNull(double0);
      assertEquals(544.597733996, (double)double0, 0.01);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Year year0 = new Year(date0);
      assertNotNull(year0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      Year year1 = (Year)year0.previous();
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertNotNull(year1);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(2013, year1.getYear());
      assertEquals("2013", year1.toString());
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      timeTableXYDataset0.add((TimePeriod) year1, (Number) (-9999), "ftDUhb(NB", false);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(2013, year1.getYear());
      assertEquals("2013", year1.toString());
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertFalse(linkedList0.contains(544.597733996));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double1 = new Double(9999);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(9999.0, (double)double1, 0.01);
      
      boolean boolean0 = linkedList0.add(double1);
      assertTrue(linkedList0.contains(double1));
      assertFalse(linkedList0.contains(544.597733996));
      assertEquals(1, linkedList0.size());
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(9999.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-9999.0), range0.getLowerBound(), 0.01);
      assertEquals((-4999.5), range0.getCentralValue(), 0.01);
      
      LinkedList<DefaultOHLCDataset> linkedList1 = new LinkedList<DefaultOHLCDataset>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) linkedList1, range0, false);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(9999.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-9999.0), range0.getLowerBound(), 0.01);
      assertEquals((-4999.5), range0.getCentralValue(), 0.01);
      assertEquals(0, linkedList1.size());
      
      boolean boolean1 = linkedList0.removeAll(linkedList1);
      assertTrue(linkedList0.contains(double1));
      assertFalse(linkedList0.contains(544.597733996));
      assertEquals(1, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone("ftDUhb(NB");
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(zoneInfo0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertNull(range2);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, range0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[][] doubleArray0 = new double[24][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(24, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(24, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(24, defaultIntervalCategoryDataset0.getRowCount());
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Byte byte0 = new Byte((byte)14);
      assertNotNull(byte0);
      assertEquals((byte)14, (byte)byte0);
      
      boolean boolean0 = stack0.add(byte0);
      assertTrue(stack0.contains(byte0));
      assertEquals("[14]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (byte)14, 1.0, (-106), (-106), (byte)14);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (byte)14, 1.0, (byte)14, (byte)14, (byte)14);
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1.0, (byte)14, (-1.7976931348623157E308), (byte)14, 1.0);
      assertNotNull(oHLCDataItem2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-106), 1.0, (byte)14, (-106), (byte)14);
      assertNotNull(oHLCDataItem3);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem2;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[6] = oHLCDataItem2;
      oHLCDataItemArray0[7] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Range range0 = new Range((-1.7976931348623157E308), (-106));
      assertNotNull(range0);
      assertEquals(1.7976931348623157E308, range0.getLength(), 0.01);
      assertEquals((-106.0), range0.getUpperBound(), 0.01);
      assertEquals((-8.988465674311579E307), range0.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getLowerBound(), 0.01);
      
      Range range1 = new Range((-1.7976931348623157E308), 1.0);
      assertNotNull(range1);
      assertEquals((-1.7976931348623157E308), range1.getLowerBound(), 0.01);
      assertEquals((-8.988465674311579E307), range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, range1.getLength(), 0.01);
      assertFalse(range1.equals((Object)range0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Double double0 = new Double((-3881.8703086139685));
      assertNotNull(double0);
      assertEquals((-3881.8703086139685), (double)double0, 0.01);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertFalse(linkedList0.contains((-3881.8703086139685)));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double1 = new Double((-3881.8703086139685));
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-3881.8703086139685), (double)double1, 0.01);
      
      boolean boolean0 = linkedList0.add(double1);
      assertTrue(linkedList0.contains((-3881.8703086139685)));
      assertEquals(1, linkedList0.size());
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      MockDate mockDate0 = new MockDate(11, 11, 11, 11, 11, 11);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 11, (-3881.8703086139685), 28.885, (-3881.8703086139685), 1.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Mon Dec 11 11:11:11 GMT 1911", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("Nu6l 'xange' argument", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, false);
      assertFalse(linkedList0.contains(1.0));
      assertTrue(linkedList0.contains(double1));
      assertNotNull(range0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.832158129E12), range0.getCentralValue(), 0.01);
      assertEquals((-1.832158129E12), range0.getUpperBound(), 0.01);
      assertEquals((-1.832158129E12), range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, range0, false);
      assertFalse(linkedList0.contains(1.0));
      assertTrue(linkedList0.contains(double1));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.832158129E12), range0.getCentralValue(), 0.01);
      assertEquals((-1.832158129E12), range0.getUpperBound(), 0.01);
      assertEquals((-1.832158129E12), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-3881.8703086139685), range1.getLowerBound(), 0.01);
      assertEquals((-3881.8703086139685), range1.getCentralValue(), 0.01);
      assertEquals((-3881.8703086139685), range1.getUpperBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("ull 'an' rg~mOent", 58, 58);
      assertNotNull(matrixSeries0);
      assertEquals(58, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3364, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(58, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(58, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3364, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(58, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(58, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3364, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(58, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(57.0, number0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 58, 58);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(58, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(58, slidingCategoryDataset0.getFirstCategoryIndex());
      
      DatasetGroup datasetGroup0 = new DatasetGroup("ull 'an' rg~mOent");
      assertNotNull(datasetGroup0);
      assertEquals("ull 'an' rg~mOent", datasetGroup0.getID());
      
      slidingCategoryDataset0.setGroup(datasetGroup0);
      assertEquals(58, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(58, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals("ull 'an' rg~mOent", datasetGroup0.getID());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Double double0 = new Double((-322));
      assertNotNull(double0);
      assertEquals((-322.0), (double)double0, 0.01);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Year year0 = new Year(date0);
      assertNotNull(year0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      Year year1 = (Year)year0.previous();
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertNotNull(year1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals("2013", year1.toString());
      assertEquals(2013, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)mockSimpleDateFormat0.getCalendar();
      assertNotNull(mockGregorianCalendar0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      long long0 = year1.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals("2013", year1.toString());
      assertEquals(2013, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2013,MONTH=11,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=31,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertEquals(1392409281320L, long0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      timeTableXYDataset0.add((TimePeriod) year1, (Number) 9999, "", false);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals("2013", year1.toString());
      assertEquals(2013, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertFalse(linkedList0.contains(double0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(double0);
      assertTrue(linkedList0.contains(double0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(4999.5, range0.getCentralValue(), 0.01);
      assertEquals(9999.0, range0.getUpperBound(), 0.01);
      assertEquals(9999.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) linkedList0, range0, true);
      assertTrue(linkedList0.contains(double0));
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(4999.5, range0.getCentralValue(), 0.01);
      assertEquals(9999.0, range0.getUpperBound(), 0.01);
      assertEquals(9999.0, range0.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(9999.0, range2.getLowerBound(), 0.01);
      assertEquals(9999.0, range2.getCentralValue(), 0.01);
      assertEquals(9999.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.equals((Object)range0));
      
      Range range3 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, linkedList0, false);
      assertTrue(linkedList0.contains(double0));
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertNotNull(range3);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1.39240928132E12, range3.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range3.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range3.getLowerBound(), 0.01);
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) linkedList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      Byte byte0 = new Byte((byte) (-34));
      assertNotNull(byte0);
      assertEquals((byte) (-34), (byte)byte0);
      
      boolean boolean0 = stack0.add(byte0);
      assertTrue(stack0.contains((byte) (-34)));
      assertFalse(stack0.isEmpty());
      assertEquals("[-34]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) "s=6W8!}Ggqy>L*", (Comparable) byte0);
      assertTrue(stack0.contains((byte) (-34)));
      assertFalse(stack0.isEmpty());
      assertEquals("[-34]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(true);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-34.0), range0.getLowerBound(), 0.01);
      assertEquals((-34.0), range0.getCentralValue(), 0.01);
      assertEquals((-34.0), range0.getUpperBound(), 0.01);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) byte0, (Comparable) "s=6W8!}Ggqy>L*");
      assertTrue(stack0.contains((byte) (-34)));
      assertFalse(stack0.isEmpty());
      assertEquals("[-34]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.contains((byte) (-34)));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(stack0.isEmpty());
      assertEquals("[-34]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals((-34.0), range1.getCentralValue(), 0.01);
      assertEquals((-34.0), range1.getUpperBound(), 0.01);
      assertEquals((-34.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertEquals((-34.0), range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-34.0), range2.getUpperBound(), 0.01);
      assertEquals((-34.0), range2.getLowerBound(), 0.01);
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Double double0 = new Double((-322));
      assertNotNull(double0);
      assertEquals((-322.0), (double)double0, 0.01);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Year year0 = new Year(date0);
      assertNotNull(year0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Year year1 = (Year)year0.previous();
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertNotNull(year1);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2013, year1.getYear());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals("2013", year1.toString());
      assertFalse(year1.equals((Object)year0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      timeTableXYDataset0.add((TimePeriod) year1, (Number) 9999, "", false);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", mockSimpleDateFormat0.toPattern());
      assertEquals("", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(2013, year1.getYear());
      assertEquals(2013L, year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals("2013", year1.toString());
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertFalse(linkedList0.contains(double0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(double0);
      assertTrue(linkedList0.contains(double0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(9999.0, range0.getLength(), 0.01);
      assertEquals(9999.0, range0.getUpperBound(), 0.01);
      assertEquals(4999.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) linkedList0, range0, true);
      assertTrue(linkedList0.contains(double0));
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1, linkedList0.size());
      assertEquals(9999.0, range0.getLength(), 0.01);
      assertEquals(9999.0, range0.getUpperBound(), 0.01);
      assertEquals(4999.5, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(9999.0, range2.getLowerBound(), 0.01);
      assertEquals(9999.0, range2.getCentralValue(), 0.01);
      assertEquals(9999.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertFalse(range2.equals((Object)range0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) linkedList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add((-284.6987517738329), (double) 0, "Duplicate items in 'rowKeys'.");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.POSITIVE_INFINITY);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Number[][] numberArray0 = new Number[3][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, numberArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNull(range0);
      assertEquals(3, numberArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Double double0 = new Double((-3881.8703086139685));
      assertNotNull(double0);
      assertEquals((-3881.8703086139685), (double)double0, 0.01);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertFalse(linkedList0.contains(double0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double1 = new Double((-3881.8703086139685));
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-3881.8703086139685), (double)double1, 0.01);
      
      boolean boolean0 = linkedList0.add(double1);
      assertTrue(linkedList0.contains(double0));
      assertEquals(1, linkedList0.size());
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      MockDate mockDate0 = new MockDate(11, 11, 11, (-3751), 11, (-3751));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-3751), (-3881.8703086139685), 28.885, (-3881.8703086139685), 1.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Jul 07 16:08:29 GMT 1911", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1.0, 2894.3689, (-888.1276441666753), 11, 2894.3689);
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Jul 07 16:08:29 GMT 1911", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[2] = oHLCDataItem1;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("Nu6l 'xange' argument", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, false);
      assertTrue(linkedList0.contains(double0));
      assertFalse(linkedList0.contains((-888.1276441666753)));
      assertNotNull(range0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.845705091E12), range0.getCentralValue(), 0.01);
      assertEquals((-1.845705091E12), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.845705091E12), range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-888.1276441666753), range1.getLowerBound(), 0.01);
      assertEquals(3782.4965441666754, range1.getLength(), 0.01);
      assertEquals(1003.1206279166623, range1.getCentralValue(), 0.01);
      assertEquals(2894.3689, range1.getUpperBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, range0, false);
      assertTrue(linkedList0.contains(double0));
      assertFalse(linkedList0.contains((-888.1276441666753)));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.845705091E12), range0.getCentralValue(), 0.01);
      assertEquals((-1.845705091E12), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.845705091E12), range0.getLowerBound(), 0.01);
      assertEquals((-3881.8703086139685), range2.getLowerBound(), 0.01);
      assertEquals(3892.8703086139685, range2.getLength(), 0.01);
      assertEquals(11.0, range2.getUpperBound(), 0.01);
      assertEquals((-1935.4351543069843), range2.getCentralValue(), 0.01);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(number0.equals((Object)double0));
      assertFalse(number0.equals((Object)double1));
      assertEquals(2894.3689, number0);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(2894.3689, 1.0);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(1.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(2894.3689, normalDistributionFunction2D0.getMean(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-888.1276441666753), Double.NaN, 11, double0);
      assertNotNull(xYSeries0);
      assertEquals(1.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(2894.3689, normalDistributionFunction2D0.getMean(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertEquals(11, xYSeries0.getItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)number0, 0.01);
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotSame(range3, range1);
      assertNotNull(range3);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-1.845705091E12), range3.getUpperBound(), 0.01);
      assertEquals((-1.845705091E12), range3.getCentralValue(), 0.01);
      assertEquals((-1.845705091E12), range3.getLowerBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.insertValue(0, (Comparable) hour0, (Number) 23);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) hour0, (KeyedValues) defaultKeyedValuesDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2658.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2658.0);
      doubleArray2[1] = (-2658.0);
      doubleArray2[2] = (-2658.0);
      doubleArray2[3] = (-2658.0);
      doubleArray2[4] = (-2658.0);
      doubleArray2[5] = (-2658.0);
      doubleArray2[6] = (-2658.0);
      doubleArray2[7] = (-2658.0);
      doubleArray2[8] = (-2658.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-2658.0);
      doubleArray3[1] = (-2658.0);
      doubleArray3[2] = (-2658.0);
      doubleArray3[3] = (-2658.0);
      doubleArray3[4] = (-2658.0);
      doubleArray3[5] = (-2658.0);
      doubleArray3[6] = (-2658.0);
      doubleArray3[7] = (-2658.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-2658.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-2658.0);
      doubleArray5[1] = (-317.064405610656);
      doubleArray5[2] = (-2658.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = (-1.0);
      doubleArray6[1] = (-2658.0);
      doubleArray6[2] = (-317.064405610656);
      doubleArray6[3] = (-2658.0);
      doubleArray6[4] = (-2658.0);
      doubleArray6[5] = (-317.064405610656);
      doubleArray6[6] = (-317.064405610656);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = (-317.064405610656);
      doubleArray7[1] = (-2658.0);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      
      doubleArray8[0] = Double.NaN;
      doubleArray8[1] = (-1.0);
      doubleArray8[2] = (-1.0);
      doubleArray8[3] = (-1.0);
      doubleArray8[4] = (-317.064405610656);
      doubleArray8[5] = (-2658.0);
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2657.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-2658.0), range0.getLowerBound(), 0.01);
      assertEquals((-1329.5), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2189, 273, 11, 2189, 11, 2189);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 11, 1.0, 11, 1.0, 11);
      assertNotNull(oHLCDataItem0);
      assertEquals("Sun Jan 10 05:47:29 GMT 4112", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-3751), Double.POSITIVE_INFINITY, (-1128.0), 1.0, (-1593.269));
      assertNotNull(oHLCDataItem1);
      assertEquals("Sun Jan 10 05:47:29 GMT 4112", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 11, Double.NaN, Double.POSITIVE_INFINITY, Double.NaN, 2894.3689);
      assertNotNull(oHLCDataItem2);
      assertEquals("Sun Jan 10 05:47:29 GMT 4112", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals("Sun Jan 10 05:47:29 GMT 4112", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      
      Vector<TimeSeriesCollection> vector0 = new Vector<TimeSeriesCollection>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>(vector0);
      assertNotNull(arrayList0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<TimeSeriesCollection> arrayList1 = new ArrayList<TimeSeriesCollection>(arrayList0);
      assertNotNull(arrayList1);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) arrayList1, false);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(arrayList1, arrayList0);
      assertNull(range0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals("Sun Jan 10 05:47:29 GMT 4112", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotNull(range1);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals("Sun Jan 10 05:47:29 GMT 4112", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range1, false);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(arrayList0, arrayList1);
      assertNull(range2);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals("Sun Jan 10 05:47:29 GMT 4112", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertTrue(arrayList0.equals((Object)arrayList1));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotNull(number0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals("Sun Jan 10 05:47:29 GMT 4112", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertEquals(Double.POSITIVE_INFINITY, number0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Double) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Double double0 = new Double(0.5);
      assertNotNull(double0);
      assertEquals(0.5, (double)double0, 0.01);
      
      boolean boolean1 = linkedList0.add(double0);
      assertTrue(linkedList0.contains(double0));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((XYDataset) histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) linkedList0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'ange' rg~mOent", 47, 47);
      assertNotNull(matrixSeries0);
      assertEquals(47, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2209, matrixSeries0.getItemCount());
      assertEquals(47, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(47, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2209, matrixSeries0.getItemCount());
      assertEquals(47, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(47, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2209, matrixSeries0.getItemCount());
      assertEquals(47, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(46.0, number0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Null 'ange' rg~mOent";
      stringArray0[1] = "Null 'ange' rg~mOent";
      stringArray0[2] = "Null 'ange' rg~mOent";
      stringArray0[3] = "Null 'ange' rg~mOent";
      stringArray0[4] = "Null 'ange' rg~mOent";
      stringArray0[5] = "Null 'ange' rg~mOent";
      stringArray0[6] = "Null 'ange' rg~mOent";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, stringArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) hour0, (double) 0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 23, (-1));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(23, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("ull 'an' rg~mOent", 58, 58);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(3364, matrixSeries0.getItemCount());
      assertEquals(58, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(58, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(3364, matrixSeries0.getItemCount());
      assertEquals(58, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(58, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(3364, matrixSeries0.getItemCount());
      assertEquals(58, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(58, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(57.0, number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotNull(range0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(3364, matrixSeries0.getItemCount());
      assertEquals(58, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(58, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(57.0, range0.getLength(), 0.01);
      assertEquals(28.5, range0.getCentralValue(), 0.01);
      assertEquals(57.0, range0.getUpperBound(), 0.01);
      
      // Undeclared exception!
      DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Double double0 = new Double((-3881.8703086139685));
      assertNotNull(double0);
      assertEquals((-3881.8703086139685), (double)double0, 0.01);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertFalse(linkedList0.contains(double0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double1 = new Double(0.8);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.8, (double)double1, 0.01);
      
      boolean boolean0 = linkedList0.add(double1);
      assertTrue(linkedList0.contains(double1));
      assertFalse(linkedList0.contains((-3881.8703086139685)));
      assertEquals(1, linkedList0.size());
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      MockDate mockDate0 = new MockDate(11, 11, 11, (-3751), 11, (-3751));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-3751), (-3881.8703086139685), 28.885, 0.8, 1.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Jul 07 16:08:29 GMT 1911", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1.0, 2894.3689, (-888.1276441666753), 11, 2894.3689);
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Jul 07 16:08:29 GMT 1911", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[2] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 334.90342722923305, (-3881.8703086139685), 2894.3689, (-3751), (-1.0));
      assertNotNull(oHLCDataItem2);
      assertEquals("Fri Jul 07 16:08:29 GMT 1911", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[3] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("Nu6l 'xange' argument", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, false);
      assertTrue(linkedList0.contains(0.8));
      assertFalse(linkedList0.contains(double0));
      assertNotNull(range0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.845705091E12), range0.getCentralValue(), 0.01);
      assertEquals((-1.845705091E12), range0.getUpperBound(), 0.01);
      assertEquals((-1.845705091E12), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-888.1276441666753), range1.getLowerBound(), 0.01);
      assertEquals(3782.4965441666754, range1.getLength(), 0.01);
      assertEquals(2894.3689, range1.getUpperBound(), 0.01);
      assertEquals(1003.1206279166623, range1.getCentralValue(), 0.01);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, range0, false);
      assertTrue(linkedList0.contains(0.8));
      assertFalse(linkedList0.contains(double0));
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotNull(range2);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(11.0, range2.getUpperBound(), 0.01);
      assertEquals((-1870.0), range2.getCentralValue(), 0.01);
      assertEquals((-3751.0), range2.getLowerBound(), 0.01);
      assertEquals(3762.0, range2.getLength(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.845705091E12), range0.getCentralValue(), 0.01);
      assertEquals((-1.845705091E12), range0.getUpperBound(), 0.01);
      assertEquals((-1.845705091E12), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range0.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[][] doubleArray0 = new double[24][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(24, doubleArray0.length);
      assertEquals(24, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(24, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Byte byte0 = new Byte((byte)29);
      assertNotNull(byte0);
      assertEquals((byte)29, (byte)byte0);
      
      boolean boolean0 = stack0.add(byte0);
      assertTrue(stack0.contains(byte0));
      assertFalse(stack0.isEmpty());
      assertEquals("[29]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      
      MockDate mockDate0 = new MockDate((byte)29, (byte)29, (byte)29, (byte)29, (byte)29, (byte)29);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (byte)29, 1.0, (byte)29, 28.885, (byte)29);
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Jun 30 05:29:29 GMT 1931", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (byte)29, 1.0, 2894.3689, 1.39240928132E12, 28.885);
      assertNotNull(oHLCDataItem1);
      assertEquals("Tue Jun 30 05:29:29 GMT 1931", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1792.3468, (byte)29, (-1.7976931348623157E308), (byte)29, 1.0);
      assertNotNull(oHLCDataItem2);
      assertEquals("Tue Jun 30 05:29:29 GMT 1931", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1653.6682186046087), 2894.3689, (byte)29, (byte)29, (byte)29);
      assertNotNull(oHLCDataItem3);
      assertEquals("Tue Jun 30 05:29:29 GMT 1931", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      
      oHLCDataItemArray0[0] = oHLCDataItem3;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem2;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem1;
      oHLCDataItemArray0[6] = oHLCDataItem2;
      oHLCDataItemArray0[7] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Tue Jun 30 05:29:29 GMT 1931", mockDate0.toString());
      
      Range range0 = new Range((-1.7976931348623157E308), (-1.7976931348623157E308));
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getLowerBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getUpperBound(), 0.01);
      
      DomainOrder domainOrder0 = defaultOHLCDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      assertEquals("Tue Jun 30 05:29:29 GMT 1931", mockDate0.toString());
      
      Range range1 = Range.scale(range0, 28.885);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getLowerBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      assertTrue(stack0.contains((byte)29));
      assertNotSame(range0, range1);
      assertNull(range2);
      assertEquals(8, oHLCDataItemArray0.length);
      assertFalse(stack0.isEmpty());
      assertEquals("[29]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getLowerBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range0.getUpperBound(), 0.01);
      assertEquals("Tue Jun 30 05:29:29 GMT 1931", mockDate0.toString());
      assertFalse(range0.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Double double0 = new Double((-3881.8703086139685));
      assertNotNull(double0);
      assertEquals((-3881.8703086139685), (double)double0, 0.01);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertFalse(linkedList0.contains(double0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double1 = new Double(0.8);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.8, (double)double1, 0.01);
      
      boolean boolean0 = linkedList0.add(double1);
      assertTrue(linkedList0.contains(double1));
      assertFalse(linkedList0.contains((-3881.8703086139685)));
      assertEquals(1, linkedList0.size());
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      MockDate mockDate0 = new MockDate(11, 11, 11, (-3751), 11, (-3751));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-3751), (-3881.8703086139685), 28.885, 0.8, 1.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Jul 07 16:08:29 GMT 1911", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1.0, 2894.3689, (-888.1276441666753), 11, 2894.3689);
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Jul 07 16:08:29 GMT 1911", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 334.90342722923305, (-3881.8703086139685), 2894.3689, (-3751), (-1.0));
      assertNotNull(oHLCDataItem2);
      assertEquals("Fri Jul 07 16:08:29 GMT 1911", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[3] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("Nu6l 'xange' argument", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[][] doubleArray0 = new double[24][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(24, doubleArray0.length);
      assertEquals(24, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(24, defaultIntervalCategoryDataset0.getRowCount());
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Byte byte0 = new Byte((byte)14);
      assertNotNull(byte0);
      assertEquals((byte)14, (byte)byte0);
      
      boolean boolean0 = stack0.add(byte0);
      assertTrue(stack0.contains((byte)14));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[14]", stack0.toString());
      assertTrue(boolean0);
      
      MockDate mockDate0 = new MockDate((byte)14, (byte)14, (byte)14, (byte)14, (byte)14, (byte)14);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (byte)14, 1.0, (byte)14, 28.885, (byte)14);
      assertNotNull(oHLCDataItem0);
      assertEquals("Sun Mar 14 14:14:14 GMT 1915", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (byte)14, 1.0, 2894.3689, 1.39240928132E12, 28.885);
      assertNotNull(oHLCDataItem1);
      assertEquals("Sun Mar 14 14:14:14 GMT 1915", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1792.3468, (byte)14, (-1.7976931348623157E308), (byte)14, 1.0);
      assertNotNull(oHLCDataItem2);
      assertEquals("Sun Mar 14 14:14:14 GMT 1915", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1653.6682186046087), 2894.3689, (byte)14, (byte)14, (byte)14);
      assertNotNull(oHLCDataItem3);
      assertEquals("Sun Mar 14 14:14:14 GMT 1915", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[0] = oHLCDataItem3;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem2;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem1;
      oHLCDataItemArray0[6] = oHLCDataItem2;
      oHLCDataItemArray0[7] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Sun Mar 14 14:14:14 GMT 1915", mockDate0.toString());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, false);
      assertTrue(stack0.contains((byte)14));
      assertNotNull(range0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[14]", stack0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.729417546E12), range0.getLowerBound(), 0.01);
      assertEquals((-1.729417546E12), range0.getCentralValue(), 0.01);
      assertEquals((-1.729417546E12), range0.getUpperBound(), 0.01);
      assertEquals("Sun Mar 14 14:14:14 GMT 1915", mockDate0.toString());
      
      Range range1 = Range.scale(range0, 28.885);
      assertTrue(stack0.contains((byte)14));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(8, oHLCDataItemArray0.length);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[14]", stack0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.729417546E12), range0.getLowerBound(), 0.01);
      assertEquals((-1.729417546E12), range0.getCentralValue(), 0.01);
      assertEquals((-1.729417546E12), range0.getUpperBound(), 0.01);
      assertEquals((-4.995422581621E13), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-4.995422581621E13), range1.getCentralValue(), 0.01);
      assertEquals((-4.995422581621E13), range1.getUpperBound(), 0.01);
      assertEquals("Sun Mar 14 14:14:14 GMT 1915", mockDate0.toString());
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      assertTrue(stack0.contains((byte)14));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertEquals(8, oHLCDataItemArray0.length);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[14]", stack0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.729417546E12), range0.getLowerBound(), 0.01);
      assertEquals((-1.729417546E12), range0.getCentralValue(), 0.01);
      assertEquals((-1.729417546E12), range0.getUpperBound(), 0.01);
      assertEquals("Sun Mar 14 14:14:14 GMT 1915", mockDate0.toString());
      assertEquals(6.96204640667E11, range2.getCentralValue(), 0.01);
      assertEquals(1.392409281306E12, range2.getLength(), 0.01);
      assertEquals(1.39240928132E12, range2.getUpperBound(), 0.01);
      assertEquals(14.0, range2.getLowerBound(), 0.01);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      
      Byte byte0 = new Byte((byte)42);
      assertNotNull(byte0);
      assertEquals((byte)42, (byte)byte0);
      
      Byte byte1 = Byte.valueOf((byte) (-111));
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-111), (byte)byte1);
      
      boolean boolean0 = stack0.add(byte1);
      assertTrue(stack0.contains((byte) (-111)));
      assertFalse(stack0.contains(byte0));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[-111]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertTrue(stack0.contains((byte) (-111)));
      assertFalse(stack0.contains(byte0));
      assertNull(range0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[-111]", stack0.toString());
      assertFalse(stack0.isEmpty());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[5];
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-210.18797), (byte) (-111), (-210.18797), 2.0, (byte) (-111));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 0, 2.0, (byte)42, (-210.18797), 2.0);
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1806.939507227399, 1383.615, 2.0, 0.0, (-1500.8289641401));
      assertNotNull(oHLCDataItem2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 2.0, Double.NaN, Double.NaN, 2.0, (-2637.5090455));
      assertNotNull(oHLCDataItem3);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(mockDate0, 1806.939507227399, 1806.939507227399, (-488.56330312967043), (-488.56330312967043), 0);
      assertNotNull(oHLCDataItem4);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(byte1, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(byte1.equals((Object)byte0));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range1);
      assertEquals(5, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-488.56330312967043), range1.getLowerBound(), 0.01);
      assertEquals(659.1881020488643, range1.getCentralValue(), 0.01);
      assertEquals(2295.5028103570694, range1.getLength(), 0.01);
      assertEquals(1806.939507227399, range1.getUpperBound(), 0.01);
      assertFalse(byte1.equals((Object)byte0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[][] doubleArray0 = new double[24][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(24, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(24, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(24, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Byte byte0 = new Byte((byte)14);
      assertNotNull(byte0);
      assertEquals((byte)14, (byte)byte0);
      
      boolean boolean0 = stack0.add(byte0);
      assertTrue(stack0.contains(byte0));
      assertEquals("[14]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      
      MockDate mockDate0 = new MockDate((byte)14, (byte)14, (byte)14, (byte)14, (-106), (byte)14);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (byte)14, 1.0, (-106), 28.885, (byte)14);
      assertNotNull(oHLCDataItem0);
      assertEquals("Sun Mar 14 12:14:14 GMT 1915", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (byte)14, 1.0, 2894.3689, 1.39240928132E12, 28.885);
      assertNotNull(oHLCDataItem1);
      assertEquals("Sun Mar 14 12:14:14 GMT 1915", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1792.3468, (byte)14, (-1.7976931348623157E308), (byte)14, 1.0);
      assertNotNull(oHLCDataItem2);
      assertEquals("Sun Mar 14 12:14:14 GMT 1915", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1653.6682186046087), 2894.3689, (byte)14, (-106), (byte)14);
      assertNotNull(oHLCDataItem3);
      assertEquals("Sun Mar 14 12:14:14 GMT 1915", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[0] = oHLCDataItem3;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem2;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem1;
      oHLCDataItemArray0[6] = oHLCDataItem2;
      oHLCDataItemArray0[7] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Sun Mar 14 12:14:14 GMT 1915", mockDate0.toString());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, false);
      assertTrue(stack0.contains((byte)14));
      assertNotNull(range0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals("[14]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.729424746E12), range0.getUpperBound(), 0.01);
      assertEquals((-1.729424746E12), range0.getLowerBound(), 0.01);
      assertEquals((-1.729424746E12), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals("Sun Mar 14 12:14:14 GMT 1915", mockDate0.toString());
      
      Range range1 = Range.scale(range0, 28.885);
      assertTrue(stack0.contains((byte)14));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals("[14]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.729424746E12), range0.getUpperBound(), 0.01);
      assertEquals((-1.729424746E12), range0.getLowerBound(), 0.01);
      assertEquals((-1.729424746E12), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-4.995443378821E13), range1.getLowerBound(), 0.01);
      assertEquals((-4.995443378821E13), range1.getCentralValue(), 0.01);
      assertEquals((-4.995443378821E13), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("Sun Mar 14 12:14:14 GMT 1915", mockDate0.toString());
      assertFalse(range1.equals((Object)range0));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Sun Mar 14 12:14:14 GMT 1915", mockDate0.toString());
      assertEquals((-1.7976931348623157E308), number0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The 'year' argument must be in range 1900 to 9999.");
      assertFalse(boolean0);
      
      double[][] doubleArray0 = new double[31][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("9tEI(>d<ocv6", "9tEI(>d<ocv6", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(31, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 3);
      assertNotNull(categoryToPieDataset0);
      assertEquals(31, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(3, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add((double) 0, (double) 0, "#UO78|v<z4(S(S");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, double0, 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, "#UO78|v<z4(S(S");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(categoryTableXYDataset0);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0, false);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Vector<Long> vector0 = new Vector<Long>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Long long0 = new Long((-2706L));
      assertNotNull(long0);
      assertEquals((-2706L), (long)long0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(vector0, long0, long0);
      assertFalse(vector0.contains(long0));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset1 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset1);
      assertFalse(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      defaultMultiValueCategoryDataset1.removeChangeListener(xYTaskDataset0);
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset1, (List) vector0, true);
      assertFalse(vector0.contains(long0));
      assertNotSame(defaultMultiValueCategoryDataset1, defaultMultiValueCategoryDataset0);
      assertNull(range0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(defaultMultiValueCategoryDataset1.equals((Object)defaultMultiValueCategoryDataset0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2706L);
      doubleArray0[1] = (double) (-2706L);
      doubleArray0[2] = (double) (-2706L);
      doubleArray0[3] = (double) (-2706L);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertArrayEquals(new double[] {(-2706.0), (-2706.0), (-2706.0), (-2706.0)}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 663.492912, 2038.5471284, 957, long0);
      assertArrayEquals(new double[] {(-2706.0), (-2706.0), (-2706.0), (-2706.0)}, doubleArray0, 0.01);
      assertNotNull(xYSeries0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals((-2.2935232883072348E13), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(2038.5471284, xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(663.492912, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(957, xYSeries0.getItemCount());
      assertEquals((-7.91574339122067E11), xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Vector<Long> vector0 = new Vector<Long>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Long long0 = new Long((-1782L));
      assertNotNull(long0);
      assertEquals((-1782L), (long)long0);
      
      boolean boolean0 = vector0.add(long0);
      assertTrue(vector0.contains((-1782L)));
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[-1782]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      defaultMultiValueCategoryDataset0.add(vector0, long0, long0);
      assertTrue(vector0.contains((-1782L)));
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[-1782]", vector0.toString());
      assertFalse(vector0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, true);
      assertTrue(vector0.contains((-1782L)));
      assertNotNull(range0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[-1782]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1782.0), range0.getCentralValue(), 0.01);
      assertEquals((-1782.0), range0.getUpperBound(), 0.01);
      assertEquals((-1782.0), range0.getLowerBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, false);
      assertTrue(vector0.contains((-1782L)));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[-1782]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals((-1782.0), range1.getCentralValue(), 0.01);
      assertEquals((-1782.0), range1.getUpperBound(), 0.01);
      assertEquals((-1782.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertEquals((-1782.0), range2.getCentralValue(), 0.01);
      assertEquals((-1782.0), range2.getUpperBound(), 0.01);
      assertEquals((-1782.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[][] doubleArray0 = new double[24][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(24, doubleArray0.length);
      assertEquals(24, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(24, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Byte byte0 = new Byte((byte)14);
      assertNotNull(byte0);
      assertEquals((byte)14, (byte)byte0);
      
      boolean boolean0 = stack0.add(byte0);
      assertTrue(stack0.contains(byte0));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[14]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      MockDate mockDate0 = new MockDate((byte)14, (-424), (byte)14, (-424), (-106), (byte)14);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-424), 1.0, (-106), 28.885, (-424));
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (byte)14, 1.0, 2894.3689, 1.39240928132E12, 28.885);
      assertNotNull(oHLCDataItem1);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1792.3468, (byte)14, (-1.7976931348623157E308), (-424), 1.0);
      assertNotNull(oHLCDataItem2);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[10];
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1653.6682186046087), 2894.3689, (byte)14, (-106), (-424));
      assertNotNull(oHLCDataItem3);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      
      oHLCDataItemArray0[0] = oHLCDataItem3;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem2;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem1;
      oHLCDataItemArray0[6] = oHLCDataItem2;
      oHLCDataItemArray0[7] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(10, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, (-1.0), "#UO78|v<z4(S(S");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, true);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(number0.equals((Object)double0));
      assertEquals(Double.NEGATIVE_INFINITY, number0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, 19.5, "#UO78|v<z4(S(S");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(19.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[][] doubleArray0 = new double[24][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(24, doubleArray0.length);
      assertEquals(24, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(24, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Byte byte0 = new Byte((byte)14);
      assertNotNull(byte0);
      assertEquals((byte)14, (byte)byte0);
      
      boolean boolean0 = stack0.add(byte0);
      assertTrue(stack0.contains((byte)14));
      assertEquals("[14]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      
      MockDate mockDate0 = new MockDate((byte)14, (-424), (byte)14, (-424), (-106), (byte)14);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-424), 1.0, (-106), 28.885, (-424));
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (byte)14, 1.0, 2894.3689, 1.39240928132E12, 28.885);
      assertNotNull(oHLCDataItem1);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1792.3468, (byte)14, (-1.7976931348623157E308), (-424), 1.0);
      assertNotNull(oHLCDataItem2);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1653.6682186046087), 234.6831145, (byte)14, (-106), (-424));
      assertNotNull(oHLCDataItem3);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[0] = oHLCDataItem3;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem2;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem1;
      oHLCDataItemArray0[6] = oHLCDataItem2;
      oHLCDataItemArray0[7] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, false);
      assertTrue(stack0.contains((byte)14));
      assertNotNull(range0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals("[14]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2.882627146E12), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2.882627146E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.882627146E12), range0.getUpperBound(), 0.01);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, stack0, true);
      assertTrue(stack0.contains((byte)14));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals("[14]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2.882627146E12), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2.882627146E12), range1.getCentralValue(), 0.01);
      assertEquals((-2.882627146E12), range1.getUpperBound(), 0.01);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("#huL=XN$r)vhA97m", 47, 47);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(47, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2209, matrixSeries0.getItemCount());
      assertEquals(47, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(47, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2209, matrixSeries0.getItemCount());
      assertEquals(47, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(47, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2209, matrixSeries0.getItemCount());
      assertEquals(47, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = linkedList0.add(defaultMultiValueCategoryDataset0);
      assertTrue(linkedList0.contains(defaultMultiValueCategoryDataset0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, linkedList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockDate mockDate0 = new MockDate(12, 1, 2);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, Double.NaN, 2, 2, 12, (-1782.0));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 02 00:00:00 GMT 1912", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 934.5962445511, (-1040.0), 46.0, (-1653.6682186046087), 12);
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 02 00:00:00 GMT 1912", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      int int0 = oHLCDataItem1.compareTo(oHLCDataItem1);
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertEquals("Fri Feb 02 00:00:00 GMT 1912", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertEquals(0, int0);
      
      oHLCDataItemArray0[3] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals("Fri Feb 02 00:00:00 GMT 1912", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      Vector<Float> vector0 = new Vector<Float>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) vector0, false);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNull(range0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals("Fri Feb 02 00:00:00 GMT 1912", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotNull(range1);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals("Fri Feb 02 00:00:00 GMT 1912", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-820.8341093023043), range1.getCentralValue(), 0.01);
      assertEquals(1665.6682186046087, range1.getLength(), 0.01);
      assertEquals((-1653.6682186046087), range1.getLowerBound(), 0.01);
      assertEquals(12.0, range1.getUpperBound(), 0.01);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) vector0, range1, true);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNull(range2);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals("Fri Feb 02 00:00:00 GMT 1912", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals((-820.8341093023043), range1.getCentralValue(), 0.01);
      assertEquals(1665.6682186046087, range1.getLength(), 0.01);
      assertEquals((-1653.6682186046087), range1.getLowerBound(), 0.01);
      assertEquals(12.0, range1.getUpperBound(), 0.01);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(range3, range1);
      assertNotNull(range3);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals("Fri Feb 02 00:00:00 GMT 1912", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.8276192E12), range3.getLowerBound(), 0.01);
      assertEquals((-1.8276192E12), range3.getCentralValue(), 0.01);
      assertEquals((-1.8276192E12), range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(range3.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[][] doubleArray0 = new double[17][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(17, doubleArray0.length);
      assertEquals(17, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Byte byte0 = new Byte((byte)14);
      assertNotNull(byte0);
      assertEquals((byte)14, (byte)byte0);
      
      boolean boolean0 = stack0.add(byte0);
      assertTrue(stack0.contains((byte)14));
      assertFalse(stack0.isEmpty());
      assertEquals("[14]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) byte0, (Comparable) byte0);
      assertTrue(stack0.contains((byte)14));
      assertFalse(stack0.isEmpty());
      assertEquals("[14]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.contains((byte)14));
      assertNotNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals("[14]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(14.0, range0.getCentralValue(), 0.01);
      assertEquals(14.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(14.0, range0.getLowerBound(), 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (Comparable) byte0);
      assertNotNull(pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (byte)14);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[][] doubleArray0 = new double[24][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(24, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(24, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(24, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      Byte byte0 = new Byte((byte)14);
      assertNotNull(byte0);
      assertEquals((byte)14, (byte)byte0);
      
      boolean boolean0 = stack0.add(byte0);
      assertTrue(stack0.contains((byte)14));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[14]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-424), 1.0, (-106), 674.7695, (-424));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (byte)14, 2883.0, 2894.3689, 1.39240928132E12, 674.7695);
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1792.3468, (byte)14, (-1.7976931348623157E308), (-424), 1.0);
      assertNotNull(oHLCDataItem2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1653.3), 234.6831145, (byte)14, (-106), (-424));
      assertNotNull(oHLCDataItem3);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[0] = oHLCDataItem3;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem2;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem1;
      oHLCDataItemArray0[6] = oHLCDataItem2;
      oHLCDataItemArray0[7] = oHLCDataItem2;
      ListIterator<Byte> listIterator0 = stack0.listIterator();
      assertTrue(stack0.contains((byte)14));
      assertNotNull(listIterator0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[14]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, false);
      assertTrue(stack0.contains((byte)14));
      assertNotNull(range0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[14]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals((-8.988465674311579E307), range1.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range1.getLowerBound(), 0.01);
      assertEquals(1.7976931348623157E308, range1.getLength(), 0.01);
      assertEquals(2883.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(24, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(24, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(24, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-823L));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-823L), 1171.567, 570.917, (-3923.2558141574027), 3256.76);
      assertNotNull(oHLCDataItem0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1171.567, 116.0, 1.39240928132E12, 1103.913069732, 726.63);
      assertNotNull(oHLCDataItem1);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1.39240928132E12, (-2390.831), (-823L), 3299.0721473609287, (-47.63));
      assertNotNull(oHLCDataItem2);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem2, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, false);
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertNull(range0);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertNotNull(range1);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(7222.327961518331, range1.getLength(), 0.01);
      assertEquals((-3923.2558141574027), range1.getLowerBound(), 0.01);
      assertEquals((-312.091833398237), range1.getCentralValue(), 0.01);
      assertEquals(3299.0721473609287, range1.getUpperBound(), 0.01);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range1, false);
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertNull(range2);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(7222.327961518331, range1.getLength(), 0.01);
      assertEquals((-3923.2558141574027), range1.getLowerBound(), 0.01);
      assertEquals((-312.091833398237), range1.getCentralValue(), 0.01);
      assertEquals(3299.0721473609287, range1.getUpperBound(), 0.01);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      Range range3 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertNotSame(range3, range1);
      assertNotNull(range3);
      assertEquals(2, oHLCDataItemArray0.length);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(174.2835, range3.getCentralValue(), 0.01);
      assertEquals(1171.567, range3.getUpperBound(), 0.01);
      assertEquals((-823.0), range3.getLowerBound(), 0.01);
      assertEquals(1994.567, range3.getLength(), 0.01);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(range3.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[][] doubleArray0 = new double[24][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(24, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(24, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(24, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      Byte byte0 = new Byte((byte)14);
      assertNotNull(byte0);
      assertEquals((byte)14, (byte)byte0);
      
      boolean boolean0 = stack0.add(byte0);
      assertTrue(stack0.contains(byte0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[14]", stack0.toString());
      assertTrue(boolean0);
      
      MockDate mockDate0 = new MockDate((byte)14, (-424), (byte)14, (-424), (-106), (byte)14);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-424), 1.0, (-106), 28.885, (-424));
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (byte)14, 2883.0, 2894.3689, 1.39240928132E12, 28.885);
      assertNotNull(oHLCDataItem1);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1792.3468, (byte)14, (-1.7976931348623157E308), (-424), 1.0);
      assertNotNull(oHLCDataItem2);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1653.3), 234.6831145, (byte)14, (-106), (-424));
      assertNotNull(oHLCDataItem3);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      
      oHLCDataItemArray0[0] = oHLCDataItem3;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem2;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem1;
      oHLCDataItemArray0[6] = oHLCDataItem2;
      oHLCDataItemArray0[7] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, false);
      assertTrue(stack0.contains((byte)14));
      assertNotNull(range0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[14]", stack0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2.882627146E12), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2.882627146E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.882627146E12), range0.getUpperBound(), 0.01);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2883.0, range1.getUpperBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range1.getLowerBound(), 0.01);
      assertEquals((-8.988465674311579E307), range1.getCentralValue(), 0.01);
      assertEquals(1.7976931348623157E308, range1.getLength(), 0.01);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, true);
      assertTrue(stack0.contains((byte)14));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[14]", stack0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2.882627146E12), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2.882627146E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.882627146E12), range0.getUpperBound(), 0.01);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      assertEquals((-1.7976931348623157E308), range2.getLowerBound(), 0.01);
      assertEquals((-8.988465674311579E307), range2.getCentralValue(), 0.01);
      assertEquals(1.7976931348623157E308, range2.getLength(), 0.01);
      assertEquals(2883.0, range2.getUpperBound(), 0.01);
      assertFalse(range0.equals((Object)range1));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(mockDate0);
      assertNotNull(keyToGroupMap0);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertNotNull(range3);
      assertEquals(24, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(24, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(24, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotSame(range4, range3);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertNotSame(range4, range2);
      assertNotNull(range4);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      assertEquals(2883.0, range4.getUpperBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range4.getLowerBound(), 0.01);
      assertEquals(1.7976931348623157E308, range4.getLength(), 0.01);
      assertEquals((-8.988465674311579E307), range4.getCentralValue(), 0.01);
      assertFalse(range4.equals((Object)range3));
      assertFalse(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[][] doubleArray0 = new double[7][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      
      MockDate mockDate0 = new MockDate((-2918), (-1563), (-2918));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 8.0, (-3081.0), (-1563), (-3081.0), (-260.563149));
      assertNotNull(oHLCDataItem0);
      assertEquals("Wed Oct 04 00:00:00 GMT 1158", mockDate0.toString());
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertNotNull(simpleTimePeriod0);
      assertEquals("Wed Oct 04 00:00:00 GMT 1158", mockDate0.toString());
      assertEquals((-98655667200000L), simpleTimePeriod0.getEndMillis());
      assertEquals((-98655667200000L), simpleTimePeriod0.getStartMillis());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 8.0, 8.0, 8.0, (-2918), 8.0);
      assertNotNull(oHLCDataItem1);
      assertEquals("Wed Oct 04 00:00:00 GMT 1158", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-2918), (-260.563149), 1626.3870161, 278.8383485994259, 0.0);
      assertNotNull(oHLCDataItem2);
      assertEquals("Wed Oct 04 00:00:00 GMT 1158", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(simpleTimePeriod0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Wed Oct 04 00:00:00 GMT 1158", mockDate0.toString());
      assertEquals((-98655667200000L), simpleTimePeriod0.getEndMillis());
      assertEquals((-98655667200000L), simpleTimePeriod0.getStartMillis());
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, false);
      assertNull(range0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("Wed Oct 04 00:00:00 GMT 1158", mockDate0.toString());
      assertEquals((-98655667200000L), simpleTimePeriod0.getEndMillis());
      assertEquals((-98655667200000L), simpleTimePeriod0.getStartMillis());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotNull(range1);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Wed Oct 04 00:00:00 GMT 1158", mockDate0.toString());
      assertEquals((-1401.080825700287), range1.getCentralValue(), 0.01);
      assertEquals(278.8383485994259, range1.getUpperBound(), 0.01);
      assertEquals((-3081.0), range1.getLowerBound(), 0.01);
      assertEquals(3359.838348599426, range1.getLength(), 0.01);
      assertEquals((-98655667200000L), simpleTimePeriod0.getEndMillis());
      assertEquals((-98655667200000L), simpleTimePeriod0.getStartMillis());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Wed Oct 04 00:00:00 GMT 1158", mockDate0.toString());
      assertEquals((-98655667200000L), simpleTimePeriod0.getEndMillis());
      assertEquals((-98655667200000L), simpleTimePeriod0.getStartMillis());
      assertEquals(1571.0, range2.getLength(), 0.01);
      assertEquals((-1563.0), range2.getLowerBound(), 0.01);
      assertEquals(8.0, range2.getUpperBound(), 0.01);
      assertEquals((-777.5), range2.getCentralValue(), 0.01);
      assertFalse(range2.equals((Object)range1));
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range2, false);
      assertNotSame(range2, range1);
      assertNull(range3);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("Wed Oct 04 00:00:00 GMT 1158", mockDate0.toString());
      assertEquals((-98655667200000L), simpleTimePeriod0.getEndMillis());
      assertEquals((-98655667200000L), simpleTimePeriod0.getStartMillis());
      assertEquals(1571.0, range2.getLength(), 0.01);
      assertEquals((-1563.0), range2.getLowerBound(), 0.01);
      assertEquals(8.0, range2.getUpperBound(), 0.01);
      assertEquals((-777.5), range2.getCentralValue(), 0.01);
      assertFalse(range2.equals((Object)range1));
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range4 = DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      assertNull(range4);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(1585.8401879117, 1585.8401879117, "");
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1307.0018393122741));
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals((-514.0817453564241), range0.getCentralValue(), 0.01);
      assertEquals(1585.8401879117, range0.getLength(), 0.01);
      assertEquals(278.8383485994259, range0.getUpperBound(), 0.01);
      assertEquals((-1307.0018393122741), range0.getLowerBound(), 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 2.0);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[][] doubleArray0 = new double[9][8];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-3261.5765);
      doubleArray1[1] = 174.66;
      doubleArray1[2] = 3796.122;
      doubleArray1[3] = 508.10867;
      doubleArray1[4] = 57.761559981994;
      doubleArray1[5] = 1948.05845869785;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1948.05845869785;
      doubleArray2[1] = 57.761559981994;
      doubleArray2[2] = 57.761559981994;
      doubleArray2[3] = (-3261.5765);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 3796.122;
      doubleArray3[1] = 174.66;
      doubleArray3[2] = 57.761559981994;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 57.761559981994;
      doubleArray4[1] = 508.10867;
      doubleArray4[2] = 57.761559981994;
      doubleArray4[3] = 1948.05845869785;
      doubleArray4[4] = (-2.147483648E9);
      doubleArray4[5] = (-3261.5765);
      doubleArray4[6] = 174.66;
      doubleArray4[7] = 1948.05845869785;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 174.66;
      doubleArray5[1] = 1948.05845869785;
      doubleArray5[2] = (-2.147483648E9);
      doubleArray5[3] = (-3261.5765);
      doubleArray5[4] = (-1952.967);
      doubleArray5[5] = (-2.147483648E9);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = 1948.05845869785;
      doubleArray6[1] = (-2.147483648E9);
      doubleArray6[2] = 3796.122;
      doubleArray6[3] = 57.761559981994;
      doubleArray6[4] = 1948.05845869785;
      doubleArray6[5] = 3796.122;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = 1948.05845869785;
      doubleArray7[1] = 1948.05845869785;
      doubleArray7[2] = (-2.147483648E9);
      doubleArray7[3] = (-2.147483648E9);
      doubleArray7[4] = 3796.122;
      doubleArray7[5] = 3796.122;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[9];
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      
      doubleArray8[0] = 57.761559981994;
      doubleArray8[1] = (-1952.967);
      doubleArray8[2] = 3796.122;
      doubleArray8[3] = 57.761559981994;
      doubleArray8[4] = (-3261.5765);
      doubleArray8[5] = 174.66;
      doubleArray8[6] = 174.66;
      doubleArray8[7] = (-3261.5765);
      doubleArray8[8] = (-2.147483648E9);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[4];
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      
      doubleArray9[0] = 3796.122;
      doubleArray9[1] = 786.330402244;
      doubleArray9[2] = 508.10867;
      doubleArray9[3] = (-2.147483648E9);
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(47.0, Double.NEGATIVE_INFINITY, ",q3=");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = new Range(Double.NEGATIVE_INFINITY, (-1307.0018393122741));
      assertNotNull(range0);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals((-1307.0018393122741), range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      int int0 = taskSeriesCollection0.getColumnIndex(",q3=");
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1), int0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNull(number0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[][] doubleArray0 = new double[24][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(24, doubleArray0.length);
      assertEquals(24, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(24, defaultIntervalCategoryDataset0.getRowCount());
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      Byte byte0 = new Byte((byte)14);
      assertNotNull(byte0);
      assertEquals((byte)14, (byte)byte0);
      
      boolean boolean0 = stack0.add(byte0);
      assertTrue(stack0.contains(byte0));
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[14]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      MockDate mockDate0 = new MockDate((byte)14, (-424), (byte)14, (-424), (-106), (byte)14);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-424), 1.0, (-106), 28.885, (-424));
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (byte)14, 2883.0, 2894.3689, 1.39240928132E12, 28.885);
      assertNotNull(oHLCDataItem1);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1792.3468, (byte)14, (-1.7976931348623157E308), (-424), 1.0);
      assertNotNull(oHLCDataItem2);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1653.3), 234.6831145, (byte)14, (-106), (-424));
      assertNotNull(oHLCDataItem3);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      
      oHLCDataItemArray0[0] = oHLCDataItem3;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem2;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem1;
      oHLCDataItemArray0[6] = oHLCDataItem2;
      oHLCDataItemArray0[7] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) stack0, false);
      assertTrue(stack0.contains((byte)14));
      assertNotNull(range0);
      assertEquals(8, oHLCDataItemArray0.length);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[14]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2.882627146E12), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2.882627146E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.882627146E12), range0.getUpperBound(), 0.01);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(8, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2883.0, range1.getUpperBound(), 0.01);
      assertEquals(1.7976931348623157E308, range1.getLength(), 0.01);
      assertEquals((-8.988465674311579E307), range1.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range1.getLowerBound(), 0.01);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range0, false);
      assertTrue(stack0.contains((byte)14));
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertEquals(8, oHLCDataItemArray0.length);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[14]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2.882627146E12), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2.882627146E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.882627146E12), range0.getUpperBound(), 0.01);
      assertEquals("Tue Aug 27 06:14:14 GMT 1878", mockDate0.toString());
      assertEquals(1.39240928132E12, range2.getUpperBound(), 0.01);
      assertEquals((-424.0), range2.getLowerBound(), 0.01);
      assertEquals(1.392409281744E12, range2.getLength(), 0.01);
      assertEquals(6.96204640448E11, range2.getCentralValue(), 0.01);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, ",q3=");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.POSITIVE_INFINITY);
      assertNotNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      int int0 = taskSeriesCollection0.getColumnIndex(",q3=");
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1), int0);
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(categoryTableXYDataset0);
      assertNotNull(intervalXYDelegate0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      
      Range range1 = intervalXYDelegate0.getDomainBounds(false);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.combine(range1, range0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      
      ArrayList<XYBarDataset> arrayList0 = new ArrayList<XYBarDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range0, false);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNull(range3);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1, 243);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(243, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      categoryTableXYDataset0.add(6.283185307179586, (-1439.6690417), "oQN9{[1QK)Jq>>R");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.NEGATIVE_INFINITY);
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      int int0 = taskSeriesCollection0.getColumnIndex(",q3=");
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1), int0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1), 622);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(622, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        taskSeriesCollection0.getSeries((-1416));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.gantt.TaskSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Byte byte0 = new Byte((byte) (-123));
      assertNotNull(byte0);
      assertEquals((byte) (-123), (byte)byte0);
      
      boolean boolean0 = stack0.add(byte0);
      assertTrue(stack0.contains(byte0));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-123]", stack0.toString());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.contains(byte0));
      assertNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-123]", stack0.toString());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, stack0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.add(47.0, Double.NEGATIVE_INFINITY, ",q3=");
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, (-1307.0018393122741));
      assertNotNull(range0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals((-1307.0018393122741), range0.getUpperBound(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      int int0 = taskSeriesCollection0.getColumnIndex(",q3=");
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1), int0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-1342), (-1342));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1342), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1342), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, 8);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals((-1342), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1342), slidingGanttCategoryDataset0.getFirstCategoryIndex());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1459.16974987);
      doubleArray1[1] = 71.44361917;
      doubleArray1[2] = 170.64945;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 170.64945;
      doubleArray2[1] = 170.64945;
      doubleArray2[2] = (-1459.16974987);
      doubleArray2[3] = 170.64945;
      doubleArray2[4] = 170.64945;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 71.44361917;
      doubleArray3[1] = 170.64945;
      doubleArray3[2] = (-1459.16974987);
      doubleArray3[3] = 170.64945;
      doubleArray3[4] = (-1459.16974987);
      doubleArray3[5] = 170.64945;
      doubleArray3[6] = 71.44361917;
      doubleArray3[7] = 170.64945;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 170.64945;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      String string0 = week0.toString();
      assertNotNull(string0);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals("Week 7, 2014", string0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      timeTableXYDataset0.add((TimePeriod) week0, (Number) integer0, "Null 'range' argument.", true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(week0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      assertNotNull(number0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals((-30000.0), number0);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0, true);
      assertNull(range0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, 1389);
      assertNotNull(pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      categoryTableXYDataset0.add(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, "s=6W8!}Ggqy>L*");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      boolean boolean0 = categoryTableXYDataset0.equals("s=6W8!}Ggqy>L*");
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertFalse(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(Double.NEGATIVE_INFINITY, number0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Double double0 = new Double((-3881.8703086139685));
      assertNotNull(double0);
      assertEquals((-3881.8703086139685), (double)double0, 0.01);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertFalse(linkedList0.contains((-3881.8703086139685)));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(244, "");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=244,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(244, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=244,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(244, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      
      timeTableXYDataset0.remove((TimePeriod) day0, "}2gpbTFDjz8?=", false);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=244,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(244, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      
      timeTableXYDataset0.add((TimePeriod) day0, (Number) integer0, "The number of column keys does not match the number of columns in the data array.", false);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=244,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(244, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, false);
      assertNotNull(range0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=244,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(244, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals((-30000.0), range0.getLowerBound(), 0.01);
      assertEquals((-30000.0), range0.getUpperBound(), 0.01);
      assertEquals((-30000.0), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=244,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(244, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals((-30000.0), range1.getLowerBound(), 0.01);
      assertEquals(30000.0, range1.getLength(), 0.01);
      assertEquals((-15000.0), range1.getCentralValue(), 0.01);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Double double0 = new Double((-3881.8703086139685));
      assertNotNull(double0);
      assertEquals((-3881.8703086139685), (double)double0, 0.01);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertFalse(linkedList0.contains(double0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double1 = new Double(0.8);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.8, (double)double1, 0.01);
      
      boolean boolean0 = linkedList0.add(double1);
      assertTrue(linkedList0.contains(0.8));
      assertFalse(linkedList0.contains(double0));
      assertEquals(1, linkedList0.size());
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      MockDate mockDate0 = new MockDate(11, 11, 11, (-3751), 11, (-3751));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-3751), (-3881.8703086139685), 28.885, 0.8, 1.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Jul 07 16:08:29 GMT 1911", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1.0, 2894.3689, (-888.1276441666753), 11, 2894.3689);
      assertNotNull(oHLCDataItem1);
      assertEquals("Fri Jul 07 16:08:29 GMT 1911", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[2] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 334.90342722923305, (-3881.8703086139685), 2894.3689, (-3751), (-1.0));
      assertNotNull(oHLCDataItem2);
      assertEquals("Fri Jul 07 16:08:29 GMT 1911", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[3] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("Nu6l 'xange' argument", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, false);
      assertTrue(linkedList0.contains(0.8));
      assertFalse(linkedList0.contains(2894.3689));
      assertNotNull(range0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1.845705091E12), range0.getLowerBound(), 0.01);
      assertEquals((-1.845705091E12), range0.getUpperBound(), 0.01);
      assertEquals((-1.845705091E12), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2894.3689, range1.getUpperBound(), 0.01);
      assertEquals(1003.1206279166623, range1.getCentralValue(), 0.01);
      assertEquals(3782.4965441666754, range1.getLength(), 0.01);
      assertEquals((-888.1276441666753), range1.getLowerBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, range1, true);
      assertTrue(linkedList0.contains(0.8));
      assertFalse(linkedList0.contains(2894.3689));
      assertNotSame(range1, range0);
      assertNull(range2);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2894.3689, range1.getUpperBound(), 0.01);
      assertEquals(1003.1206279166623, range1.getCentralValue(), 0.01);
      assertEquals(3782.4965441666754, range1.getLength(), 0.01);
      assertEquals((-888.1276441666753), range1.getLowerBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[][] doubleArray0 = new double[33][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(33, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(33, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(33, defaultIntervalCategoryDataset0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1.0), (-1.0), 334.90342722923305, 334.90342722923305, (-1.0));
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      oHLCDataItemArray0[4] = oHLCDataItem0;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      oHLCDataItemArray0[8] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) treeSet0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) list0, true);
      assertNull(range0);
      assertEquals(9, oHLCDataItemArray0.length);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (334.90342722923305) <= upper (-1.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      timeTableXYDataset0.remove((TimePeriod) week0, "The number of column keys does not match the number of columns in the data array.", false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      timeTableXYDataset0.add((TimePeriod) week0, (Number) 53, "UwkFQ.%xfX={", false);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(integer0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, false);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(53.0, range0.getCentralValue(), 0.01);
      assertEquals(53.0, range0.getUpperBound(), 0.01);
      assertEquals(53.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(53.0, range1.getLength(), 0.01);
      assertEquals(26.5, range1.getCentralValue(), 0.01);
      assertEquals(53.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.insertValue(0, (Comparable) "rB", (double) 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("#huL=XN$r)vhA97m", 26, 26);
      assertNotNull(matrixSeries0);
      assertEquals(26, matrixSeries0.getColumnsCount());
      assertEquals(676, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(26, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      
      Comparable<DefaultOHLCDataset>[] comparableArray0 = (Comparable<DefaultOHLCDataset>[]) Array.newInstance(Comparable.class, 2);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      comparableArray0[0] = (Comparable<DefaultOHLCDataset>) fixedMillisecond0;
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (Number) integer0);
      assertNotNull(timeSeriesDataItem0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertFalse(timeSeriesDataItem0.isSelected());
      
      comparableArray0[1] = (Comparable<DefaultOHLCDataset>) timeSeriesDataItem0;
      Comparable<DefaultIntervalCategoryDataset>[] comparableArray1 = (Comparable<DefaultIntervalCategoryDataset>[]) Array.newInstance(Comparable.class, 5);
      comparableArray1[0] = (Comparable<DefaultIntervalCategoryDataset>) timeSeriesDataItem0;
      comparableArray1[1] = (Comparable<DefaultIntervalCategoryDataset>) fixedMillisecond0;
      comparableArray1[2] = (Comparable<DefaultIntervalCategoryDataset>) fixedMillisecond0;
      comparableArray1[3] = (Comparable<DefaultIntervalCategoryDataset>) timeSeriesDataItem0;
      comparableArray1[4] = (Comparable<DefaultIntervalCategoryDataset>) timeSeriesDataItem0;
      double[][] doubleArray0 = new double[0][0];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'columnKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Week week0 = new Week();
      assertNotNull(week0);
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      timeTableXYDataset0.add((TimePeriod) week0, (Number) integer0, "Null 'range' argument.", true);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(week0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(7, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, true);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-30000.0), range0.getLowerBound(), 0.01);
      assertEquals((-30000.0), range0.getUpperBound(), 0.01);
      assertEquals((-30000.0), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = 2.0;
      Comparable<TimeSeriesCollection>[] comparableArray0 = (Comparable<TimeSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 2.0);
      assertNull(range0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
      
      String string0 = "3hlF~?Wb4.D|bWN4";
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset("3hlF~?Wb4.D|bWN4", "3hlF~?Wb4.D|bWN4", "3hlF~?Wb4.D|bWN4", "3hlF~?Wb4.D|bWN4");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (-249.99522782217);
      doubleArray1[2] = (-427.253574);
      doubleArray1[3] = 2470.488862248;
      doubleArray1[4] = 47.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = (-86.27222384325);
      doubleArray2[2] = 47.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2470.488862248;
      doubleArray3[1] = (-249.99522782217);
      doubleArray3[2] = 46.0;
      doubleArray3[3] = 2470.488862248;
      doubleArray3[4] = 47.0;
      doubleArray3[5] = (-249.99522782217);
      doubleArray3[6] = (-249.99522782217);
      doubleArray3[7] = (-249.99522782217);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 47.0;
      doubleArray4[1] = 47.0;
      doubleArray4[2] = (-249.99522782217);
      doubleArray4[3] = (-618.0);
      doubleArray4[4] = (-86.27222384325);
      doubleArray4[5] = 46.0;
      doubleArray4[6] = 2470.488862248;
      doubleArray4[7] = (-2183.811223206);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = Double.NaN;
      doubleArray5[1] = Double.NaN;
      doubleArray5[2] = (-2183.811223206);
      doubleArray5[3] = (-427.253574);
      doubleArray5[4] = 2470.488862248;
      doubleArray5[5] = 2470.488862248;
      doubleArray5[6] = (-2183.811223206);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = 46.0;
      doubleArray6[1] = 47.0;
      doubleArray6[2] = (-427.253574);
      doubleArray6[3] = (-970.9);
      doubleArray6[4] = (-1667.75);
      doubleArray6[5] = (-249.99522782217);
      doubleArray6[6] = 2470.488862248;
      doubleArray6[7] = (-427.253574);
      doubleArray6[8] = 46.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = (-2183.811223206);
      doubleArray7[1] = (-2183.811223206);
      doubleArray7[2] = (-2183.811223206);
      doubleArray7[3] = (-1667.75);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      
      doubleArray8[0] = (-86.27222384325);
      doubleArray8[1] = (-427.253574);
      doubleArray8[2] = (-86.27222384325);
      doubleArray8[3] = 2470.488862248;
      doubleArray8[4] = (-1667.75);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[6];
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      
      doubleArray9[0] = 23.0;
      doubleArray9[1] = Double.NaN;
      doubleArray9[2] = (-86.27222384325);
      doubleArray9[3] = (-1824.749982993163);
      doubleArray9[4] = (-86.27222384325);
      doubleArray9[5] = 46.0;
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[][] doubleArray0 = new double[17][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(17, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      double double0 = DatasetUtilities.calculateStackTotal(jDBCXYDataset0, 0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, double0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0);
      assertNotNull(range0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      
      defaultIntervalCategoryDataset0.removeChangeListener(xYDatasetTableModel0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(boolean0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Double double0 = new Double((-3871.339092));
      assertNotNull(double0);
      assertEquals((-3871.339092), (double)double0, 0.01);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertFalse(linkedList0.contains((-3871.339092)));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double1 = new Double(0.8);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.8, (double)double1, 0.01);
      
      boolean boolean0 = linkedList0.add(double1);
      assertTrue(linkedList0.contains(double1));
      assertFalse(linkedList0.contains((-3871.339092)));
      assertEquals(1, linkedList0.size());
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      MockDate mockDate0 = new MockDate(6, 6, 6, (-3751), 6, (-3751));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-3751), (-3871.339092), 28.885, 0.8, 1.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Jan 30 16:03:29 GMT 1906", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 2894.3689, 2894.3689, 1.0, (-1653.3), (-2873.4665186383972));
      assertNotNull(oHLCDataItem1);
      assertEquals("Tue Jan 30 16:03:29 GMT 1906", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1.0, 46.0, (-888.1276441666753), 6, 2894.3689);
      assertNotNull(oHLCDataItem2);
      assertEquals("Tue Jan 30 16:03:29 GMT 1906", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 335.9739889882, (-3871.339092), 2894.3689, (-3751), (-1.0));
      assertNotNull(oHLCDataItem3);
      assertEquals("Tue Jan 30 16:03:29 GMT 1906", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("Nu6l 'xange' argument", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, false);
      assertTrue(linkedList0.contains(double1));
      assertFalse(linkedList0.contains(335.9739889882));
      assertNotNull(range0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals((-2.017122991E12), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2.017122991E12), range0.getLowerBound(), 0.01);
      assertEquals((-2.017122991E12), range0.getCentralValue(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, (-3751));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-3751), categoryToPieDataset0.getExtractIndex());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(categoryToPieDataset0);
      assertNotNull(defaultPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-3751), categoryToPieDataset0.getExtractIndex());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) oHLCDataItem1, (KeyedValues) defaultPieDataset0);
      assertNotSame(oHLCDataItem1, oHLCDataItem2);
      assertNotSame(oHLCDataItem1, oHLCDataItem3);
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertNotNull(categoryDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-3751), categoryToPieDataset0.getExtractIndex());
      assertEquals("Tue Jan 30 16:03:29 GMT 1906", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotSame(oHLCDataItem1, oHLCDataItem2);
      assertNotSame(oHLCDataItem1, oHLCDataItem3);
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertNull(range1);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-3751), categoryToPieDataset0.getExtractIndex());
      assertEquals("Tue Jan 30 16:03:29 GMT 1906", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(2894.3689, range2.getUpperBound(), 0.01);
      assertEquals(1003.1206279166623, range2.getCentralValue(), 0.01);
      assertEquals(3782.4965441666754, range2.getLength(), 0.01);
      assertEquals((-888.1276441666753), range2.getLowerBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(range2.equals((Object)range0));
      
      Range range3 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotSame(oHLCDataItem1, oHLCDataItem2);
      assertNotSame(oHLCDataItem1, oHLCDataItem3);
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertNull(range3);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-3751), categoryToPieDataset0.getExtractIndex());
      assertEquals("Tue Jan 30 16:03:29 GMT 1906", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Byte byte0 = new Byte((byte) (-74));
      assertNotNull(byte0);
      assertEquals((byte) (-74), (byte)byte0);
      
      boolean boolean0 = stack0.add(byte0);
      assertTrue(stack0.contains(byte0));
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[-74]", stack0.toString());
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<Long> vector0 = new Vector<Long>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      Long long0 = new Long((byte) (-74));
      assertNotNull(long0);
      assertEquals((-74L), (long)long0);
      
      boolean boolean1 = vector0.add(long0);
      assertTrue(vector0.contains(long0));
      assertFalse(vector0.isEmpty());
      assertEquals("[-74]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      defaultMultiValueCategoryDataset0.add(vector0, byte0, byte0);
      assertTrue(vector0.contains(long0));
      assertFalse(vector0.isEmpty());
      assertEquals("[-74]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.contains(byte0));
      assertNotNull(range0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[-74]", stack0.toString());
      assertEquals((-74.0), range0.getCentralValue(), 0.01);
      assertEquals((-74.0), range0.getUpperBound(), 0.01);
      assertEquals((-74.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Byte byte1 = new Byte((byte) (-74));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-74), (byte)byte1);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultMultiValueCategoryDataset0, 7, 1);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(7, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingCategoryDataset0);
      assertNull(number0);
      assertEquals(7, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      
      Random.setNextRandom((-2230));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) hour0, (double) 0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) hour0, 0.0, 23);
      assertNotNull(pieDataset0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0, 19.5);
      assertNotNull(powerFunction2D0);
      assertEquals(19.5, powerFunction2D0.getB(), 0.01);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 0, 23, 23, hour0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(19.5, powerFunction2D0.getB(), 0.01);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(19.5, powerFunction2D0.getB(), 0.01);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(19.5, powerFunction2D0.getB(), 0.01);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Number[][] numberArray0 = new Number[7][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("]h)J56QVc~:shh`", "]h)J56QVc~:shh`", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(7, numberArray0.length);
      
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getColumnKeys();
      assertNotNull(list0);
      assertEquals(7, numberArray0.length);
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(7, numberArray0.length);
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNull(range0);
      assertEquals(7, numberArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, list0, true);
      assertNull(range1);
      assertEquals(7, numberArray0.length);
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) "]h)J56QVc~:shh`");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.0), (-1.0));
      assertNotNull(powerFunction2D0);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      
      String string0 = day0.toString();
      assertNotNull(string0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals("14-February-2014", string0);
      
      RegularTimePeriod regularTimePeriod0 = day0.next();
      assertNotSame(day0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, day0);
      assertNotNull(regularTimePeriod0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)day0));
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-1812.867804186), (-1.0), 4, regularTimePeriod0);
      assertNotSame(day0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, day0);
      assertNotNull(xYSeries0);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getB(), 0.01);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281320L, regularTimePeriod0.getFirstMillisecond());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getNotify());
      assertEquals(4, xYSeries0.getItemCount());
      assertEquals(0.9999999999997726, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals((-1.0000000000002274), xYSeries0.getMaxX(), 0.01);
      assertEquals(5.516122012266705E-4, xYSeries0.getMinY(), 0.01);
      assertEquals((-1812.867804186), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(day0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)day0));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Double double0 = new Double(20.0);
      assertNotNull(double0);
      assertEquals(20.0, (double)double0, 0.01);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertFalse(linkedList0.contains(20.0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double1 = new Double(20.0);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(20.0, (double)double1, 0.01);
      
      boolean boolean0 = linkedList0.add(double1);
      assertTrue(linkedList0.contains(20.0));
      assertEquals(1, linkedList0.size());
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean0);
      
      MockDate mockDate0 = new MockDate(2, (-3751), 1, 8, 213, 6);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 8, (-3751), 20.0, 215.696, Double.POSITIVE_INFINITY);
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jun 01 11:33:06 GMT 1589", mockDate0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, Double.POSITIVE_INFINITY, (-3751), (-3751), 215.696, 2760.5);
      assertNotNull(oHLCDataItem1);
      assertEquals("Thu Jun 01 11:33:06 GMT 1589", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 2894.3689, 2206.937749484, 130.3537829, (-888.1276441666753), 242.365790059);
      assertNotNull(oHLCDataItem2);
      assertEquals("Thu Jun 01 11:33:06 GMT 1589", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-3751), 631.4790233966071, Double.POSITIVE_INFINITY, 46.0, (-316.23));
      assertNotNull(oHLCDataItem3);
      assertEquals("Thu Jun 01 11:33:06 GMT 1589", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem2, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Thu Jun 01 11:33:06 GMT 1589", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem3));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(2760.0, 2760.0);
      assertNotNull(powerFunction2D0);
      assertEquals(2760.0, powerFunction2D0.getA(), 0.01);
      assertEquals(2760.0, powerFunction2D0.getB(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 20, 2760.0, 20, "4\\.ifR`");
      assertNotNull(xYSeriesCollection0);
      assertEquals(2760.0, powerFunction2D0.getA(), 0.01);
      assertEquals(2760.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(2760.0, powerFunction2D0.getA(), 0.01);
      assertEquals(2760.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(2741.0, range0.getLength(), 0.01);
      assertEquals(1390.0, range0.getCentralValue(), 0.01);
      assertEquals(19.5, range0.getLowerBound(), 0.01);
      assertEquals(2760.5, range0.getUpperBound(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, 28);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(2760.0, 2760.0);
      assertNotNull(powerFunction2D0);
      assertEquals(2760.0, powerFunction2D0.getA(), 0.01);
      assertEquals(2760.0, powerFunction2D0.getB(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 20, 2760.0, 20, "4\\.ifR`");
      assertNotNull(xYSeriesCollection0);
      assertEquals(2760.0, powerFunction2D0.getA(), 0.01);
      assertEquals(2760.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(2760.0, powerFunction2D0.getA(), 0.01);
      assertEquals(2760.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1390.0, range0.getCentralValue(), 0.01);
      assertEquals(2760.5, range0.getUpperBound(), 0.01);
      assertEquals(19.5, range0.getLowerBound(), 0.01);
      assertEquals(2741.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(2760.0, powerFunction2D0.getA(), 0.01);
      assertEquals(2760.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1390.0, range1.getCentralValue(), 0.01);
      assertEquals(2760.5, range1.getUpperBound(), 0.01);
      assertEquals(2741.0, range1.getLength(), 0.01);
      assertEquals(19.5, range1.getLowerBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertEquals(2760.0, powerFunction2D0.getA(), 0.01);
      assertEquals(2760.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(Double.POSITIVE_INFINITY, range2.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("The number of column keys does not match the number of columns in the data array.", "]h)J56QVc~:shh`", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(4, numberArray0.length);
      assertTrue(boolean0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 2188);
      assertNotNull(categoryToPieDataset0);
      assertEquals(4, numberArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2188, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "]h)J56QVc~:shh`", (double) 2188, 2188);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2188, Size: 6
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Double double0 = new Double((-3871.339092));
      assertNotNull(double0);
      assertEquals((-3871.339092), (double)double0, 0.01);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertFalse(linkedList0.contains((-3871.339092)));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(double0);
      assertTrue(linkedList0.contains((-3871.339092)));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Double double1 = new Double(0.8);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.8, (double)double1, 0.01);
      
      boolean boolean1 = linkedList0.add(double1);
      assertTrue(linkedList0.contains(0.8));
      assertEquals(2, linkedList0.size());
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      MockDate mockDate0 = new MockDate(6, 6, 2203, (-3751), 2203, (-3751));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-3751), (-3871.339092), 28.885, 0.8, 1.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Wed Feb 07 04:40:29 GMT 1912", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 2894.3689, 2894.3689, 1.0, (-1653.3), (-2873.4665186383972));
      assertNotNull(oHLCDataItem1);
      assertEquals("Wed Feb 07 04:40:29 GMT 1912", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1.0, 46.0, (-888.1276441666753), 6, (-1.7976931348623157E308));
      assertNotNull(oHLCDataItem2);
      assertEquals("Wed Feb 07 04:40:29 GMT 1912", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 335.9739889882, (-3871.339092), (-77.2241027929837), (-3751), (-1.0));
      assertNotNull(oHLCDataItem3);
      assertEquals("Wed Feb 07 04:40:29 GMT 1912", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("Nu6l 'xange' argument", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, false);
      assertNotNull(range0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals((-3751.0), range0.getLowerBound(), 0.01);
      assertEquals((-1872.5), range0.getCentralValue(), 0.01);
      assertEquals(3757.0, range0.getLength(), 0.01);
      assertEquals(6.0, range0.getUpperBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Double double0 = new Double((-3871.339092));
      assertNotNull(double0);
      assertEquals((-3871.339092), (double)double0, 0.01);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertFalse(linkedList0.contains((-3871.339092)));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double1 = new Double(0.8);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.8, (double)double1, 0.01);
      
      boolean boolean0 = linkedList0.add(double1);
      assertFalse(linkedList0.contains((-3871.339092)));
      assertTrue(linkedList0.contains(double1));
      assertEquals(1, linkedList0.size());
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      MockDate mockDate0 = new MockDate(6, 6, 2203, (-3751), 2203, (-3751));
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-3751), (-3871.339092), 28.885, 0.8, 1.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Wed Feb 07 04:40:29 GMT 1912", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 2894.3689, 2894.3689, 1.0, (-1653.3), (-2873.4665186383972));
      assertNotNull(oHLCDataItem1);
      assertEquals("Wed Feb 07 04:40:29 GMT 1912", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 1.0, 46.0, (-888.1276441666753), 6, (-1.7976931348623157E308));
      assertNotNull(oHLCDataItem2);
      assertEquals("Wed Feb 07 04:40:29 GMT 1912", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 335.9739889882, (-3871.339092), (-77.2241027929837), (-3751), (-1.0));
      assertNotNull(oHLCDataItem3);
      assertEquals("Wed Feb 07 04:40:29 GMT 1912", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("Nu6l 'xange' argument", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) linkedList0, false);
      assertFalse(linkedList0.contains((-3871.339092)));
      assertTrue(linkedList0.contains(double1));
      assertNotNull(range0);
      assertEquals(4, oHLCDataItemArray0.length);
      assertEquals((-1.827170371E12), range0.getLowerBound(), 0.01);
      assertEquals((-1.827170371E12), range0.getCentralValue(), 0.01);
      assertEquals((-1.827170371E12), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, linkedList0.size());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      Number[][] numberArray0 = new Number[4][1];
      Number[] numberArray1 = new Number[2];
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      numberArray1[0] = (Number) bigInteger0;
      numberArray1[1] = (Number) double1;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) double0;
      Number number0 = oHLCDataItem0.getOpen();
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem3);
      assertNotNull(number0);
      assertEquals("Wed Feb 07 04:40:29 GMT 1912", mockDate0.toString());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertFalse(number0.equals((Object)double1));
      assertFalse(number0.equals((Object)double0));
      assertEquals((-3751.0), number0);
      
      numberArray2[1] = number0;
      numberArray2[2] = (Number) double1;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[8];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[0] = number0;
      BigInteger bigInteger1 = BigInteger.ONE;
      assertSame(bigInteger1, bigInteger0);
      assertNotNull(bigInteger1);
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      
      numberArray4[1] = (Number) bigInteger1;
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      numberArray4[2] = (Number) integer0;
      numberArray4[3] = (Number) double0;
      numberArray4[4] = (Number) double0;
      numberArray4[5] = (Number) double0;
      numberArray4[6] = (Number) bigInteger0;
      numberArray4[7] = (Number) double1;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, numberArray0.length);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[][] doubleArray0 = new double[31][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(31, doubleArray0.length);
      assertEquals(31, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(31, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(31, doubleArray0.length);
      assertEquals(31, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(31, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, number0);
      
      Random.setNextRandom(1900);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-2244L));
      assertNotNull(fixedMillisecond0);
      assertEquals((-2244L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-2244L), fixedMillisecond0.getSerialIndex());
      assertEquals((-2244L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-2244L), fixedMillisecond0.getMiddleMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotNull(regularTimePeriod0);
      assertEquals((-2244L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-2244L), fixedMillisecond0.getSerialIndex());
      assertEquals((-2244L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-2244L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-2245L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-2245L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-2245L), regularTimePeriod0.getSerialIndex());
      assertEquals((-2245L), regularTimePeriod0.getMiddleMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1900, 10, regularTimePeriod0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals((-2244L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-2244L), fixedMillisecond0.getSerialIndex());
      assertEquals((-2244L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-2244L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-2245L), regularTimePeriod0.getFirstMillisecond());
      assertEquals((-2245L), regularTimePeriod0.getLastMillisecond());
      assertEquals((-2245L), regularTimePeriod0.getSerialIndex());
      assertEquals((-2245L), regularTimePeriod0.getMiddleMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(9, dynamicTimeSeriesCollection0.getNewestIndex());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Byte byte0 = new Byte((byte) (-33));
      assertNotNull(byte0);
      assertEquals((byte) (-33), (byte)byte0);
      
      boolean boolean0 = stack0.add(byte0);
      assertTrue(stack0.contains((byte) (-33)));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-33]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Vector<Long> vector0 = new Vector<Long>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      boolean boolean1 = defaultMultiValueCategoryDataset0.equals(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      defaultMultiValueCategoryDataset0.add(vector0, byte0, byte0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.contains((byte) (-33)));
      assertNull(range0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-33]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      
      Byte byte1 = new Byte((byte) (-33));
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-33), (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.addValue((double) 47, (Comparable) "Nu6l 'xange' argumet", (Comparable) "Nu6l 'xange' argumet");
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(23.5, range0.getCentralValue(), 0.01);
      assertEquals(47.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(47.0, range0.getLength(), 0.01);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(47, 2127.52491142568);
      assertNotNull(lineFunction2D0);
      assertEquals(2127.52491142568, lineFunction2D0.getSlope(), 0.01);
      assertEquals(47.0, lineFunction2D0.getIntercept(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, 47, 1824.08450165917, 47, "Nu6l 'xange' argumet");
      assertNotNull(xYSeries0);
      assertEquals(2127.52491142568, lineFunction2D0.getSlope(), 0.01);
      assertEquals(47.0, lineFunction2D0.getIntercept(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1824.08450165917, xYSeries0.getMaxX(), 0.01);
      assertEquals(100040.67083700695, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(47.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(47, xYSeries0.getItemCount());
      assertEquals(3880832.217825381, xYSeries0.getMaxY(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(2127.52491142568, lineFunction2D0.getSlope(), 0.01);
      assertEquals(47.0, lineFunction2D0.getIntercept(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1824.08450165917, xYSeries0.getMaxX(), 0.01);
      assertEquals(100040.67083700695, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(47.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(47, xYSeries0.getItemCount());
      assertEquals(3880832.217825381, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(2127.52491142568, lineFunction2D0.getSlope(), 0.01);
      assertEquals(47.0, lineFunction2D0.getIntercept(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1824.08450165917, xYSeries0.getMaxX(), 0.01);
      assertEquals(100040.67083700695, xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(47.0, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(47, xYSeries0.getItemCount());
      assertEquals(3880832.217825381, xYSeries0.getMaxY(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(46.5, range1.getLowerBound(), 0.01);
      assertEquals(1778.08450165917, range1.getLength(), 0.01);
      assertEquals(1824.58450165917, range1.getUpperBound(), 0.01);
      assertEquals(935.542250829585, range1.getCentralValue(), 0.01);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(2760.0, 2760.0);
      assertNotNull(powerFunction2D0);
      assertEquals(2760.0, powerFunction2D0.getB(), 0.01);
      assertEquals(2760.0, powerFunction2D0.getA(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 3, 2760.0, 3, "\\.ifR`");
      assertNotNull(xYSeriesCollection0);
      assertEquals(2760.0, powerFunction2D0.getB(), 0.01);
      assertEquals(2760.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(2760.0, powerFunction2D0.getB(), 0.01);
      assertEquals(2760.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(2.5, range0.getLowerBound(), 0.01);
      assertEquals(1381.5, range0.getCentralValue(), 0.01);
      assertEquals(2760.5, range0.getUpperBound(), 0.01);
      assertEquals(2758.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(Double.NEGATIVE_INFINITY);
      assertNotNull(double0);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double0, 0.01);
      
      boolean boolean0 = linkedList0.add(double0);
      assertTrue(linkedList0.contains(double0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Double double1 = new Double(Double.NEGATIVE_INFINITY);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double1, 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = 715827883;
      MockDate mockDate0 = new MockDate(1, 1, 1, 2, 715827883, 1);
      assertNotNull(mockDate0);
      
      Millisecond millisecond0 = new Millisecond(mockDate0);
      assertNotNull(millisecond0);
      assertEquals("Tue Feb 07 18:43:01 GMT 3262", mockDate0.toString());
      assertEquals(40774905781000L, millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(40774905781000L, millisecond0.getLastMillisecond());
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) linkedList0, (Comparable) double0, (Comparable) millisecond0);
      assertTrue(linkedList0.contains(Double.NEGATIVE_INFINITY));
      assertEquals(1, linkedList0.size());
      assertEquals("Tue Feb 07 18:43:01 GMT 3262", mockDate0.toString());
      assertEquals(40774905781000L, millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(40774905781000L, millisecond0.getLastMillisecond());
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      Date date0 = millisecond0.getEnd();
      assertNotSame(mockDate0, date0);
      assertNotSame(date0, mockDate0);
      assertNotNull(date0);
      assertEquals("Tue Feb 07 18:43:01 GMT 3262", mockDate0.toString());
      assertEquals(40774905781000L, millisecond0.getFirstMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(40774905781000L, millisecond0.getLastMillisecond());
      assertEquals("Tue Feb 07 18:43:01 GMT 3262", date0.toString());
      assertTrue(date0.equals((Object)mockDate0));
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, true);
      assertTrue(linkedList0.contains(Double.NEGATIVE_INFINITY));
      assertNotNull(range0);
      assertEquals(1, linkedList0.size());
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getUpperBound(), 0.01);
      
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(",", ",", "bdsHUN,/E]YPqI@A", "%n,");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.clear();
      defaultKeyedValuesDataset0.setValue((Comparable) "84h", (-1.7976931348623157E308));
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "84h", Double.NEGATIVE_INFINITY, 2169);
      assertNotNull(pieDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) arrayList0, false);
      assertNull(range0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate(8, 181, 3800, 1, 3800, (-3777));
      assertNotNull(mockDate0);
      
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.7976931348623157E308);
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 181;
      doubleArray0[3] = (double) (-3777);
      doubleArray0[4] = (double) 8;
      doubleArray0[5] = (double) (-3777);
      doubleArray0[6] = (double) 8;
      doubleArray0[7] = (double) 2169;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("84h", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.7976931348623157E308), 8.0, 181.0, (-3777.0), 8.0, (-3777.0), 8.0, 2169.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-1.7976931348623157E308), 8.0, 181.0, (-3777.0), 8.0, (-3777.0), 8.0, 2169.0}, doubleArray0, 0.01);
      assertNotNull(number0);
      assertEquals(1, dateArray0.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-1.152088977E12), number0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      MockDate mockDate0 = new MockDate(4, 4, (-1073741824), 4, (-1073741824), 1);
      assertNotNull(mockDate0);
      
      Year year0 = new Year(mockDate0);
      assertNotNull(year0);
      assertEquals("Thu Dec 10 02:56:01 GMT 2939884", mockDate0.toString());
      assertEquals((-9236), year0.getYear());
      assertEquals((-9236L), year0.getSerialIndex());
      assertEquals((-92837789442239000L), year0.getLastMillisecond());
      assertEquals((-92837789442239000L), year0.getFirstMillisecond());
      assertEquals("-9236", year0.toString());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Year year1 = (Year)year0.next();
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertNotNull(year1);
      assertEquals("Thu Dec 10 02:56:01 GMT 2939884", mockDate0.toString());
      assertEquals((-9236), year0.getYear());
      assertEquals((-9236L), year0.getSerialIndex());
      assertEquals((-92837789442239000L), year0.getLastMillisecond());
      assertEquals((-92837789442239000L), year0.getFirstMillisecond());
      assertEquals("-9236", year0.toString());
      assertEquals((-9235), year1.getYear());
      assertEquals("-9235", year1.toString());
      assertEquals((-9235L), year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertFalse(year1.equals((Object)year0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      Number[][] numberArray0 = new Number[2][0];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) 9999;
      Year year2 = (Year)year1.next();
      assertNotSame(year0, year1);
      assertNotSame(year0, year2);
      assertNotSame(year1, year0);
      assertNotSame(year1, year2);
      assertNotSame(year2, year0);
      assertNotSame(year2, year1);
      assertNotNull(year2);
      assertEquals("Thu Dec 10 02:56:01 GMT 2939884", mockDate0.toString());
      assertEquals((-9236), year0.getYear());
      assertEquals((-9236L), year0.getSerialIndex());
      assertEquals((-92837789442239000L), year0.getLastMillisecond());
      assertEquals((-92837789442239000L), year0.getFirstMillisecond());
      assertEquals("-9236", year0.toString());
      assertEquals((-9235), year1.getYear());
      assertEquals("-9235", year1.toString());
      assertEquals((-9235L), year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals((-9234L), year2.getSerialIndex());
      assertEquals("-9234", year2.toString());
      assertEquals((-9234), year2.getYear());
      assertEquals(1392409281320L, year2.getLastMillisecond());
      assertEquals(1392409281320L, year2.getFirstMillisecond());
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertFalse(year2.equals((Object)year0));
      assertFalse(year2.equals((Object)year1));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      numberArray1[1] = (Number) (-9999);
      numberArray1[2] = (Number) (-9999);
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 9999;
      numberArray2[1] = (Number) (-9999);
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[][] doubleArray0 = new double[17][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(17, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(17, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      int int0 = 1828;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 1828);
      assertNotNull(categoryToPieDataset0);
      assertEquals(17, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1828, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'xRange' argument", 47, 47);
      assertNotNull(matrixSeries0);
      assertEquals(47, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2209, matrixSeries0.getItemCount());
      assertEquals(47, matrixSeries0.getRowCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 3093, 47);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(47, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(3093, slidingCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1367.6738609186477), 47);
      assertNotNull(powerFunction2D0);
      assertEquals((-1367.6738609186477), powerFunction2D0.getA(), 0.01);
      assertEquals(47.0, powerFunction2D0.getB(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-1367.6738609186477), 3, 2, "Null 'xRange' argument");
      assertNotNull(xYSeriesCollection0);
      assertEquals((-1367.6738609186477), powerFunction2D0.getA(), 0.01);
      assertEquals(47.0, powerFunction2D0.getB(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals((-1367.6738609186477), powerFunction2D0.getA(), 0.01);
      assertEquals(47.0, powerFunction2D0.getB(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(3.5, range0.getUpperBound(), 0.01);
      assertEquals((-682.3369304593239), range0.getCentralValue(), 0.01);
      assertEquals((-1368.1738609186477), range0.getLowerBound(), 0.01);
      assertEquals(1371.6738609186477, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultStatisticalCategoryDataset0);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, Double.POSITIVE_INFINITY);
      assertNull(range1);
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(2349.3462463, Double.POSITIVE_INFINITY);
      assertNotNull(lineFunction2D0);
      assertEquals(Double.POSITIVE_INFINITY, lineFunction2D0.getSlope(), 0.01);
      assertEquals(2349.3462463, lineFunction2D0.getIntercept(), 0.01);
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 0.0, 2349.3462463, 11, second0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(Double.POSITIVE_INFINITY, lineFunction2D0.getSlope(), 0.01);
      assertEquals(2349.3462463, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range2);
      assertEquals(Double.POSITIVE_INFINITY, lineFunction2D0.getSlope(), 0.01);
      assertEquals(2349.3462463, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getCentralValue(), 0.01);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 47;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("xv|xi^s hc)EW", 1, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.addValue(2271.3676829597225, (Comparable) "", (Comparable) "");
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2271.3676829597225, range0.getLowerBound(), 0.01);
      assertEquals(2271.3676829597225, range0.getCentralValue(), 0.01);
      assertEquals(2271.3676829597225, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultKeyedValues2DDataset0, true);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2271.3676829597225, range1.getLowerBound(), 0.01);
      assertEquals(2271.3676829597225, range1.getCentralValue(), 0.01);
      assertEquals(2271.3676829597225, range1.getUpperBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[][] doubleArray0 = new double[17][1];
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(17, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(17, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(17, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("7!", "7!", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 0.0);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      CategoryDataset categoryDataset1 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, (-1), 1, 1, (-1593), (-1));
      assertNotNull(mockDate0);
      
      Year year0 = new Year(mockDate0);
      assertNotNull(year0);
      assertEquals("Thu Nov 29 22:26:59 GMT 1900", mockDate0.toString());
      assertEquals((-2180223181000L), year0.getFirstMillisecond());
      assertEquals("1900", year0.toString());
      assertEquals(1900L, year0.getSerialIndex());
      assertEquals((-2180223181000L), year0.getLastMillisecond());
      assertEquals(1900, year0.getYear());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      Year year1 = (Year)year0.next();
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertNotNull(year1);
      assertEquals("Thu Nov 29 22:26:59 GMT 1900", mockDate0.toString());
      assertEquals((-2180223181000L), year0.getFirstMillisecond());
      assertEquals("1900", year0.toString());
      assertEquals(1900L, year0.getSerialIndex());
      assertEquals((-2180223181000L), year0.getLastMillisecond());
      assertEquals(1900, year0.getYear());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1901, year1.getYear());
      assertEquals(1901L, year1.getSerialIndex());
      assertEquals("1901", year1.toString());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertFalse(year1.equals((Object)year0));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      ZoneId zoneId0 = ZoneId.systemDefault();
      assertNotNull(zoneId0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(zoneId0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = new Locale("org.jfree.data.KeyedObject");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("org.jfree.data.keyedobject", locale0.toString());
      assertEquals("org.jfree.data.keyedobject", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("org.jfree.data.keyedobject", locale0.toString());
      assertEquals("org.jfree.data.keyedobject", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("org.jfree.data.keyedobject", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("org.jfree.data.keyedobject", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(zoneInfo0, locale1);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("org.jfree.data.keyedobject", locale0.toString());
      assertEquals("org.jfree.data.keyedobject", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("org.jfree.data.keyedobject", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("org.jfree.data.keyedobject", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      timeTableXYDataset0.add((TimePeriod) year0, (Number) 9999, "org.jfree.data.KeyedObject", true);
      assertNotSame(year0, year1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("Thu Nov 29 22:26:59 GMT 1900", mockDate0.toString());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("1900", year0.toString());
      assertEquals(1900L, year0.getSerialIndex());
      assertEquals(1900, year0.getYear());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("org.jfree.data.keyedobject", locale0.toString());
      assertEquals("org.jfree.data.keyedobject", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("org.jfree.data.keyedobject", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("org.jfree.data.keyedobject", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(year0.equals((Object)year1));
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 304);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, double0, 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      MockDate mockDate0 = new MockDate(4, 4, (-1073741824), 4, (-1073741824), 1);
      assertNotNull(mockDate0);
      
      Year year0 = new Year(mockDate0);
      assertNotNull(year0);
      assertEquals("Thu Dec 10 02:56:01 GMT 2939884", mockDate0.toString());
      assertEquals((-92837789442239000L), year0.getLastMillisecond());
      assertEquals((-9236), year0.getYear());
      assertEquals((-9236L), year0.getSerialIndex());
      assertEquals("-9236", year0.toString());
      assertEquals((-92837789442239000L), year0.getFirstMillisecond());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Year year1 = (Year)year0.next();
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertNotNull(year1);
      assertEquals("Thu Dec 10 02:56:01 GMT 2939884", mockDate0.toString());
      assertEquals((-92837789442239000L), year0.getLastMillisecond());
      assertEquals((-9236), year0.getYear());
      assertEquals((-9236L), year0.getSerialIndex());
      assertEquals("-9236", year0.toString());
      assertEquals((-92837789442239000L), year0.getFirstMillisecond());
      assertEquals("-9235", year1.toString());
      assertEquals((-9235L), year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals((-9235), year1.getYear());
      assertFalse(year1.equals((Object)year0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      timeTableXYDataset0.add((TimePeriod) year1, (Number) integer0, "", false);
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Thu Dec 10 02:56:01 GMT 2939884", mockDate0.toString());
      assertEquals((-92837789442239000L), year0.getLastMillisecond());
      assertEquals((-9236), year0.getYear());
      assertEquals((-9236L), year0.getSerialIndex());
      assertEquals("-9236", year0.toString());
      assertEquals((-92837789442239000L), year0.getFirstMillisecond());
      assertEquals("-9235", year1.toString());
      assertEquals((-9235L), year1.getSerialIndex());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals((-9235), year1.getYear());
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 304);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 304, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("xv|xi^s hc)EW", 1, 1);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate(1, 1, (-1535));
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertNotNull(week0);
      assertEquals("Tue Nov 17 00:00:00 GMT 1896", mockDate0.toString());
      assertEquals(47, week0.getWeek());
      assertEquals(1896, week0.getYearValue());
      assertEquals(100535L, week0.getSerialIndex());
      assertEquals((-2307484800000L), week0.getFirstMillisecond());
      assertEquals((-2307484800001L), week0.getLastMillisecond());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      Date[] dateArray0 = new Date[9];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      dateArray0[5] = (Date) mockDate0;
      dateArray0[6] = (Date) mockDate0;
      dateArray0[7] = (Date) mockDate0;
      dateArray0[8] = (Date) mockDate0;
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(week0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(9, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals("Tue Nov 17 00:00:00 GMT 1896", mockDate0.toString());
      assertEquals(47, week0.getWeek());
      assertEquals(1896, week0.getYearValue());
      assertEquals(100535L, week0.getSerialIndex());
      assertEquals((-2307484800000L), week0.getFirstMillisecond());
      assertEquals((-2307484800001L), week0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      XYDatasetSelectionState xYDatasetSelectionState0 = defaultHighLowDataset0.getSelectionState();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertSame(xYDatasetSelectionState0, defaultHighLowDataset0);
      assertSame(defaultHighLowDataset0, xYDatasetSelectionState0);
      assertNotNull(xYDatasetSelectionState0);
      assertEquals(9, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, xYDatasetSelectionState0.getSeriesCount());
      assertEquals("Tue Nov 17 00:00:00 GMT 1896", mockDate0.toString());
      assertEquals(47, week0.getWeek());
      assertEquals(1896, week0.getYearValue());
      assertEquals(100535L, week0.getSerialIndex());
      assertEquals((-2307484800000L), week0.getFirstMillisecond());
      assertEquals((-2307484800001L), week0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      matrixSeriesCollection0.setSelectionState(xYDatasetSelectionState0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertSame(xYDatasetSelectionState0, defaultHighLowDataset0);
      assertSame(defaultHighLowDataset0, xYDatasetSelectionState0);
      assertEquals(9, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, xYDatasetSelectionState0.getSeriesCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals("Tue Nov 17 00:00:00 GMT 1896", mockDate0.toString());
      assertEquals(47, week0.getWeek());
      assertEquals(1896, week0.getYearValue());
      assertEquals(100535L, week0.getSerialIndex());
      assertEquals((-2307484800000L), week0.getFirstMillisecond());
      assertEquals((-2307484800001L), week0.getLastMillisecond());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      Byte byte0 = new Byte((byte) (-33));
      assertNotNull(byte0);
      assertEquals((byte) (-33), (byte)byte0);
      
      boolean boolean0 = stack0.add(byte0);
      assertTrue(stack0.contains(byte0));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-33]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.contains(byte0));
      assertNull(range0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-33]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultMultiValueCategoryDataset0, (int) (byte) (-33));
      assertNotNull(pieDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1017, (byte) (-33));
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals((-34), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Stack<DefaultTableXYDataset> stack0 = new Stack<DefaultTableXYDataset>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = stack0.add((DefaultTableXYDataset) null);
      assertEquals(1, stack0.size());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      CategoryDataset categoryDataset0 = null;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 0, 23);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(23, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Double double0 = new Double(Double.NEGATIVE_INFINITY);
      assertNotNull(double0);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double0, 0.01);
      
      Double double1 = new Double(240.76143841242424);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(240.76143841242424, (double)double1, 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      ArrayList<TimeTableXYDataset> arrayList0 = new ArrayList<TimeTableXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = arrayList0.add(timeTableXYDataset0);
      assertTrue(arrayList0.contains(timeTableXYDataset0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      int int0 = 539;
      Week week0 = new Week(539, 539);
      assertNotNull(week0);
      assertEquals(539, week0.getYearValue());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(28594L, week0.getSerialIndex());
      assertEquals(27, week0.getWeek());
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) week0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) "84h", 2144.1004532827415);
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.NEGATIVE_INFINITY, (-1.7976931348623157E308));
      assertNotNull(lineFunction2D0);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1.7976931348623157E308), lineFunction2D0.getSlope(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, Double.NEGATIVE_INFINITY, 1165.255152, 23, "The number of row keys does not match the number of rows in the data array.");
      assertNotNull(xYSeriesCollection0);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1.7976931348623157E308), lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertNull(range0);
      assertEquals(Double.NEGATIVE_INFINITY, lineFunction2D0.getIntercept(), 0.01);
      assertEquals((-1.7976931348623157E308), lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertEquals(2144.1004532827415, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(year0, "TimePeriodAnchor unknown.", (String) null);
      assertNotNull(timePeriodValues0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("TimePeriodAnchor unknown.", timePeriodValues0.getDomainDescription());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-9999), 23L);
      assertNotNull(simpleTimePeriod0);
      assertEquals((-9999L), simpleTimePeriod0.getStartMillis());
      assertEquals(23L, simpleTimePeriod0.getEndMillis());
      
      Date date0 = simpleTimePeriod0.getStart();
      assertNotNull(date0);
      assertEquals((-9999L), simpleTimePeriod0.getStartMillis());
      assertEquals(23L, simpleTimePeriod0.getEndMillis());
      assertEquals("Wed Dec 31 23:59:50 GMT 1969", date0.toString());
      
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) simpleTimePeriod0, (double) (-9999));
      assertNotNull(timePeriodValue0);
      assertEquals((-9999L), simpleTimePeriod0.getStartMillis());
      assertEquals(23L, simpleTimePeriod0.getEndMillis());
      
      timePeriodValues0.add(timePeriodValue0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("TimePeriodAnchor unknown.", timePeriodValues0.getDomainDescription());
      assertEquals((-9999L), simpleTimePeriod0.getStartMillis());
      assertEquals(23L, simpleTimePeriod0.getEndMillis());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("TimePeriodAnchor unknown.", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0);
      assertNotNull(range0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("TimePeriodAnchor unknown.", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals((-9999.0), range0.getLowerBound(), 0.01);
      assertEquals((-9999.0), range0.getCentralValue(), 0.01);
      assertEquals((-9999.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("/", 2, 2);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      MatrixSeries matrixSeries1 = new MatrixSeries("/", 2, 2);
      assertNotNull(matrixSeries1);
      assertNull(matrixSeries1.getDescription());
      assertEquals(4, matrixSeries1.getItemCount());
      assertEquals(2, matrixSeries1.getColumnsCount());
      assertTrue(matrixSeries1.getNotify());
      assertEquals(2, matrixSeries1.getRowCount());
      assertTrue(matrixSeries1.equals((Object)matrixSeries0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotSame(matrixSeries0, matrixSeries1);
      assertNotNull(range0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertTrue(matrixSeries0.equals((Object)matrixSeries1));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotSame(matrixSeries0, matrixSeries1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.5, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertTrue(matrixSeries0.equals((Object)matrixSeries1));
      assertTrue(range1.equals((Object)range0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 5, 2);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(5, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(5, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertTrue(boolean0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotSame(matrixSeries0, matrixSeries1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertNull(matrixSeries0.getDescription());
      assertEquals(4, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1.0, range2.getUpperBound(), 0.01);
      assertEquals(0.5, range2.getCentralValue(), 0.01);
      assertEquals(1.0, range2.getLength(), 0.01);
      assertTrue(matrixSeries0.equals((Object)matrixSeries1));
      assertTrue(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("8MXV3;:dR7`&>V#", "8MXV3;:dR7`&>V#", "8MXV3;:dR7`&>V#");
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getDomainDescription());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      
      Double double0 = new Double((-1287.0));
      assertNotNull(double0);
      assertEquals((-1287.0), (double)double0, 0.01);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertFalse(linkedList0.contains((-1287.0)));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double1 = new Double(1165.255152);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1165.255152, (double)double1, 0.01);
      
      boolean boolean0 = linkedList0.add(double1);
      assertFalse(linkedList0.contains((-1287.0)));
      assertTrue(linkedList0.contains(double1));
      assertEquals(1, linkedList0.size());
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Stream<Double> stream0 = linkedList0.parallelStream();
      assertFalse(linkedList0.contains((-1287.0)));
      assertTrue(linkedList0.contains(double1));
      assertNotNull(stream0);
      assertEquals(1, linkedList0.size());
      
      Stack<Second> stack0 = new Stack<Second>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("84h", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(boolean0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("The number of row keys does not match the number of rows in the data array.");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertNull(range0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Stack<Long> stack0 = new Stack<Long>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0, 2760.0);
      assertNotNull(powerFunction2D0);
      assertEquals(2760.0, powerFunction2D0.getB(), 0.01);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 59, 2760.0, 3, second0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(2760.0, powerFunction2D0.getB(), 0.01);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(2760.0, powerFunction2D0.getB(), 0.01);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(58.5, range0.getLowerBound(), 0.01);
      assertEquals(2760.5, range0.getUpperBound(), 0.01);
      assertEquals(1409.5, range0.getCentralValue(), 0.01);
      assertEquals(2702.0, range0.getLength(), 0.01);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, false);
      assertNull(range1);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(2760.0, powerFunction2D0.getB(), 0.01);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Z8wGV", "dQ'Ee=^*>*l", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection1);
      assertNotSame(taskSeriesCollection1, taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertTrue(boolean0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("dQ'Ee=^*>*l", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotNull(categoryDataset1);
      assertEquals(1, doubleArray0.length);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(taskSeriesCollection0);
      assertNotSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(taskSeriesCollection0.equals((Object)taskSeriesCollection1));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotNull(number0);
      assertEquals(1, doubleArray0.length);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(0.0, number0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-692));
      assertNotNull(categoryToPieDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-692), categoryToPieDataset0.getExtractIndex());
      assertFalse(categoryDataset0.equals((Object)categoryDataset1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
      assertNull(number0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("4\\.ifR`", 1, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      timePeriodValuesCollection0.validateObject();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1.0), 1239.0);
      assertNotNull(powerFunction2D0);
      assertEquals(1239.0, powerFunction2D0.getB(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      
      Year year0 = new Year(3);
      assertNotNull(year0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("3", year0.toString());
      assertEquals(3L, year0.getSerialIndex());
      assertEquals(3, year0.getYear());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 3, 1874.837361, 3, year0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1239.0, powerFunction2D0.getB(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("3", year0.toString());
      assertEquals(3L, year0.getSerialIndex());
      assertEquals(3, year0.getYear());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 3);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNotNull(range1);
      assertEquals(1239.0, powerFunction2D0.getB(), 0.01);
      assertEquals((-1.0), powerFunction2D0.getA(), 0.01);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("3", year0.toString());
      assertEquals(3L, year0.getSerialIndex());
      assertEquals(3, year0.getYear());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1872.837361, range1.getLength(), 0.01);
      assertEquals(1875.337361, range1.getUpperBound(), 0.01);
      assertEquals(938.9186805, range1.getCentralValue(), 0.01);
      assertEquals(2.5, range1.getLowerBound(), 0.01);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("8MXV3;:dR7`&>V#", "8MXV3;:dR7`&>V#", "8MXV3;:dR7`&>V#");
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getRangeDescription());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getDomainDescription());
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(23L, 23L);
      assertNotNull(simpleTimePeriod0);
      assertEquals(23L, simpleTimePeriod0.getEndMillis());
      assertEquals(23L, simpleTimePeriod0.getStartMillis());
      
      Date date0 = simpleTimePeriod0.getStart();
      assertNotNull(date0);
      assertEquals(23L, simpleTimePeriod0.getEndMillis());
      assertEquals(23L, simpleTimePeriod0.getStartMillis());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) simpleTimePeriod0, (double) 23L);
      assertNotNull(timePeriodValue0);
      assertEquals(23L, simpleTimePeriod0.getEndMillis());
      assertEquals(23L, simpleTimePeriod0.getStartMillis());
      
      timePeriodValues0.add(timePeriodValue0);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getDomainDescription());
      assertEquals(23L, simpleTimePeriod0.getEndMillis());
      assertEquals(23L, simpleTimePeriod0.getStartMillis());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0, false);
      assertNotNull(range0);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(22.0, range0.getLowerBound(), 0.01);
      assertEquals(22.0, range0.getCentralValue(), 0.01);
      assertEquals(22.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, 2.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Stack<Float> stack1 = new Stack<Float>();
      assertFalse(stack1.contains(0.0F));
      assertNotNull(stack1);
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      boolean boolean0 = stack1.add(float1);
      assertTrue(stack1.contains(float1));
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertFalse(stack1.isEmpty());
      assertEquals("[0.0]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals((float)float1, (float)float0, 0.01F);
      assertTrue(boolean0);
      
      Double double0 = new Double(0.0F);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Byte byte0 = new Byte((byte)110);
      assertNotNull(byte0);
      assertEquals((byte)110, (byte)byte0);
      
      boolean boolean1 = stack0.add(byte0);
      assertTrue(stack0.contains((byte)110));
      assertEquals("[110]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) float1, (Comparable) float1);
      assertTrue(stack0.contains((byte)110));
      assertEquals("[110]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack1, true);
      assertTrue(stack1.contains(float1));
      assertNotNull(range0);
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertFalse(stack1.isEmpty());
      assertEquals("[0.0]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(110.0, range0.getLowerBound(), 0.01);
      assertEquals(110.0, range0.getCentralValue(), 0.01);
      assertEquals(110.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertFalse(number0.equals((Object)double0));
      assertEquals(110.0, number0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-3409), 3197);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(3197, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-3409), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (-2.147483648E9));
      assertNotNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(3197, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-3409), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2.147483648E9), range0.getLowerBound(), 0.01);
      assertEquals((-2.147483648E9), range0.getCentralValue(), 0.01);
      assertEquals((-2.147483648E9), range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range1);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      assertNotNull(number0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(Double.NaN, number0);
      
      SerialDate serialDate0 = SerialDate.createInstance(3197);
      assertNotNull(serialDate0);
      assertEquals(1, serialDate0.getDayOfMonth());
      assertEquals(3197, serialDate0.toSerial());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(10, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(1908, serialDate0.getYYYY());
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(serialDate0, "", "");
      assertNotNull(timePeriodValues0);
      assertEquals(1, serialDate0.getDayOfMonth());
      assertEquals(3197, serialDate0.toSerial());
      assertEquals(5, serialDate0.getDayOfWeek());
      assertEquals(10, serialDate0.getMonth());
      assertNull(serialDate0.getDescription());
      assertEquals(1908, serialDate0.getYYYY());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      
      // Undeclared exception!
      try { 
        timePeriodValues0.getTimePeriod(3197);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3197, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("84h", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(4217.88673, 4217.88673);
      assertNotNull(powerFunction2D0);
      assertEquals(4217.88673, powerFunction2D0.getB(), 0.01);
      assertEquals(4217.88673, powerFunction2D0.getA(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-629.91), (-1.0), 3, "");
      assertNotNull(xYSeriesCollection0);
      assertEquals(4217.88673, powerFunction2D0.getB(), 0.01);
      assertEquals(4217.88673, powerFunction2D0.getA(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(4217.88673, powerFunction2D0.getB(), 0.01);
      assertEquals(4217.88673, powerFunction2D0.getA(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals((-630.41), range0.getLowerBound(), 0.01);
      assertEquals((-315.455), range0.getCentralValue(), 0.01);
      assertEquals(629.91, range0.getLength(), 0.01);
      assertEquals((-0.5), range0.getUpperBound(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 3);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double((-687.8009));
      assertNotNull(double0);
      assertEquals((-687.8009), (double)double0, 0.01);
      
      boolean boolean0 = linkedList0.add(double0);
      assertTrue(linkedList0.contains(double0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Double double1 = new Double((-687.8009));
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-687.8009), (double)double1, 0.01);
      
      boolean boolean1 = linkedList0.add(double0);
      assertTrue(linkedList0.contains(double0));
      assertEquals(2, linkedList0.size());
      assertEquals((double)double0, (double)double1, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Range range1 = Range.expandToInclude(range0, 6.283185307179586);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(3.141592653589793, range1.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range1.getUpperBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) linkedList0, range1, true);
      assertFalse(linkedList0.contains(6.283185307179586));
      assertTrue(linkedList0.contains(double0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNull(range2);
      assertEquals(2, linkedList0.size());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(3.141592653589793, range1.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range1.getUpperBound(), 0.01);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      
      Range range3 = new Range((-687.8009), 2364.4759657618);
      assertNotNull(range3);
      assertEquals((-687.8009), range3.getLowerBound(), 0.01);
      assertEquals(2364.4759657618, range3.getUpperBound(), 0.01);
      assertEquals(3052.2768657618, range3.getLength(), 0.01);
      assertEquals(838.3375328809001, range3.getCentralValue(), 0.01);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2364.4759657618;
      doubleArray1[1] = 6.283185307179586;
      doubleArray1[2] = 2364.4759657618;
      doubleArray1[3] = 2364.4759657618;
      doubleArray1[4] = 2364.4759657618;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 6.283185307179586;
      doubleArray2[1] = 6.283185307179586;
      doubleArray2[2] = 2364.4759657618;
      doubleArray2[3] = (-687.8009);
      doubleArray2[4] = (-687.8009);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 2364.4759657618;
      doubleArray3[1] = 2364.4759657618;
      doubleArray3[2] = 2364.4759657618;
      doubleArray3[3] = 6.283185307179586;
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray3[5] = (-1.0);
      doubleArray3[6] = 2364.4759657618;
      doubleArray3[7] = 2364.4759657618;
      doubleArray3[8] = (-687.8009);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray4[1] = 2138.674;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, true);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 383.737530514087;
      doubleArray3[1] = (-1212.420242386);
      doubleArray3[2] = (-1255.1025267154);
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray3[4] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("|itT1<$E~eJGG]t", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range1);
      assertEquals(3, doubleArray0.length);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(boolean0);
      
      double[][] doubleArray4 = new double[8][4];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = doubleArray2;
      doubleArray4[1] = doubleArray3;
      doubleArray4[2] = doubleArray3;
      doubleArray4[3] = doubleArray2;
      doubleArray4[4] = doubleArray3;
      doubleArray4[5] = doubleArray1;
      doubleArray4[6] = doubleArray2;
      doubleArray4[7] = doubleArray3;
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("|itT1<$E~eJGG]t", "", doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotNull(categoryDataset1);
      assertEquals(8, doubleArray4.length);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range2);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range3 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset1, false);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotSame(range3, range1);
      assertNotNull(range3);
      assertEquals(8, doubleArray4.length);
      assertEquals(Double.NEGATIVE_INFINITY, range3.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range3.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range3.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range3.getCentralValue(), 0.01);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertTrue(range3.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, true);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Double double0 = new Double((-629.91));
      assertNotNull(double0);
      assertEquals((-629.91), (double)double0, 0.01);
      
      boolean boolean0 = linkedList0.add(double0);
      assertTrue(linkedList0.contains(double0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Double double1 = new Double((-599.4944));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-599.4944), (double)double1, 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) linkedList0, (Comparable) double0, (Comparable) double1);
      assertTrue(linkedList0.contains((-629.91)));
      assertFalse(linkedList0.contains(double1));
      assertEquals(1, linkedList0.size());
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) linkedList0, false);
      assertTrue(linkedList0.contains((-629.91)));
      assertFalse(linkedList0.contains(double1));
      assertNotNull(range1);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-629.91), range1.getCentralValue(), 0.01);
      assertEquals((-629.91), range1.getUpperBound(), 0.01);
      assertEquals((-629.91), range1.getLowerBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertFalse(number0.equals((Object)double1));
      assertFalse(number0.equals((Object)double0));
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("8MXV3;:dR7`&>V#", "8MXV3;:dR7`&>V#", "8MXV3;:dR7`&>V#");
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getDomainDescription());
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(23L, 23L);
      assertNotNull(simpleTimePeriod0);
      assertEquals(23L, simpleTimePeriod0.getStartMillis());
      assertEquals(23L, simpleTimePeriod0.getEndMillis());
      
      Date date0 = simpleTimePeriod0.getStart();
      assertNotNull(date0);
      assertEquals(23L, simpleTimePeriod0.getStartMillis());
      assertEquals(23L, simpleTimePeriod0.getEndMillis());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) simpleTimePeriod0, (double) 23L);
      assertNotNull(timePeriodValue0);
      assertEquals(23L, simpleTimePeriod0.getStartMillis());
      assertEquals(23L, simpleTimePeriod0.getEndMillis());
      
      timePeriodValues0.add(timePeriodValue0);
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getDomainDescription());
      assertEquals(23L, simpleTimePeriod0.getStartMillis());
      assertEquals(23L, simpleTimePeriod0.getEndMillis());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0);
      assertNotNull(range0);
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("8MXV3;:dR7`&>V#", "8MXV3;:dR7`&>V#", "8MXV3;:dR7`&>V#");
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getDomainDescription());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      assertNotNull(simpleTimePeriod0);
      assertEquals(0L, simpleTimePeriod0.getEndMillis());
      assertEquals(0L, simpleTimePeriod0.getStartMillis());
      
      Date date0 = simpleTimePeriod0.getStart();
      assertNotNull(date0);
      assertEquals(0L, simpleTimePeriod0.getEndMillis());
      assertEquals(0L, simpleTimePeriod0.getStartMillis());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      
      TimePeriodValue timePeriodValue0 = new TimePeriodValue((TimePeriod) simpleTimePeriod0, (double) 0L);
      assertNotNull(timePeriodValue0);
      assertEquals(0L, simpleTimePeriod0.getEndMillis());
      assertEquals(0L, simpleTimePeriod0.getStartMillis());
      
      timePeriodValues0.add(timePeriodValue0);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getDomainDescription());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0L, simpleTimePeriod0.getEndMillis());
      assertEquals(0L, simpleTimePeriod0.getStartMillis());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getDomainDescription());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0);
      assertNotNull(range0);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getDomainDescription());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Float float0 = new Float(166.4834F);
      assertNotNull(float0);
      assertEquals(166.4834F, (float)float0, 0.01F);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertFalse(stack0.contains(float0));
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Float float1 = new Float((-269.97406F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-269.97406F), (float)float1, 0.01F);
      
      Float float2 = new Float(0.0F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      boolean boolean0 = stack0.add(float2);
      assertFalse(stack0.contains(166.4834F));
      assertTrue(stack0.contains(0.0F));
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[0.0]", stack0.toString());
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertTrue(boolean0);
      
      Double double0 = new Double(0.0F);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) float2, (Comparable) "]!)J56QZc~:shh`");
      assertFalse(stack0.contains(166.4834F));
      assertTrue(stack0.contains(0.0F));
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[0.0]", stack0.toString());
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertFalse(stack0.contains(166.4834F));
      assertTrue(stack0.contains(0.0F));
      assertNotNull(range0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[0.0]", stack0.toString());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(number0);
      assertTrue(number0.equals((Object)double0));
      assertEquals(0.0, number0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
      
      Object[][][] objectArray0 = new Object[2][4][8];
      Object[][] objectArray1 = new Object[5][8];
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) range1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray2[1] = object0;
      objectArray2[2] = (Object) range0;
      objectArray2[3] = (Object) float0;
      objectArray2[4] = (Object) "]!)J56QZc~:shh`";
      objectArray2[5] = (Object) range0;
      objectArray2[6] = (Object) number0;
      objectArray2[7] = (Object) range1;
      objectArray2[8] = (Object) number0;
      objectArray1[0] = objectArray2;
      Object[] objectArray3 = new Object[9];
      assertFalse(objectArray3.equals((Object)objectArray2));
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray3[0] = object1;
      objectArray3[1] = (Object) number0;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray3[2] = object2;
      objectArray3[3] = (Object) number0;
      objectArray3[4] = object0;
      objectArray3[5] = (Object) float1;
      objectArray3[6] = (Object) range1;
      objectArray3[7] = object0;
      objectArray3[8] = (Object) float2;
      objectArray1[1] = objectArray3;
      Object[] objectArray4 = new Object[1];
      assertFalse(objectArray4.equals((Object)objectArray2));
      assertFalse(objectArray4.equals((Object)objectArray3));
      
      objectArray4[0] = (Object) float2;
      objectArray1[2] = objectArray4;
      Object[] objectArray5 = new Object[9];
      assertFalse(objectArray5.equals((Object)objectArray2));
      assertFalse(objectArray5.equals((Object)objectArray4));
      assertFalse(objectArray5.equals((Object)objectArray3));
      
      objectArray5[0] = object1;
      objectArray5[1] = object2;
      objectArray5[2] = (Object) defaultBoxAndWhiskerCategoryDataset0;
      objectArray5[3] = object1;
      objectArray5[4] = (Object) range1;
      objectArray5[5] = object0;
      objectArray5[6] = (Object) double0;
      objectArray5[7] = (Object) float0;
      objectArray5[8] = (Object) double0;
      objectArray1[3] = objectArray5;
      Object[] objectArray6 = new Object[4];
      assertFalse(objectArray6.equals((Object)objectArray3));
      assertFalse(objectArray6.equals((Object)objectArray4));
      assertFalse(objectArray6.equals((Object)objectArray5));
      assertFalse(objectArray6.equals((Object)objectArray2));
      
      objectArray6[0] = (Object) double0;
      objectArray6[1] = (Object) range0;
      objectArray6[2] = (Object) range1;
      objectArray6[3] = (Object) "]!)J56QZc~:shh`";
      objectArray1[4] = objectArray6;
      objectArray0[0] = objectArray1;
      Object[][] objectArray7 = new Object[8][7];
      assertFalse(objectArray7.equals((Object)objectArray1));
      
      objectArray7[0] = objectArray2;
      objectArray7[1] = objectArray4;
      objectArray7[2] = objectArray4;
      objectArray7[3] = objectArray2;
      objectArray7[4] = objectArray4;
      Object[] objectArray8 = new Object[8];
      assertFalse(objectArray8.equals((Object)objectArray3));
      assertFalse(objectArray8.equals((Object)objectArray5));
      assertFalse(objectArray8.equals((Object)objectArray6));
      assertFalse(objectArray8.equals((Object)objectArray2));
      assertFalse(objectArray8.equals((Object)objectArray4));
      
      objectArray8[0] = (Object) range1;
      objectArray8[1] = object2;
      objectArray8[2] = object0;
      objectArray8[3] = (Object) number0;
      objectArray8[4] = (Object) float2;
      objectArray8[5] = (Object) range1;
      objectArray8[6] = (Object) "]!)J56QZc~:shh`";
      objectArray8[7] = (Object) float1;
      objectArray7[5] = objectArray8;
      objectArray7[6] = objectArray6;
      objectArray7[7] = objectArray2;
      objectArray0[1] = objectArray7;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(stack0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data array.
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-613);
      doubleArray1[2] = (double) (-613);
      doubleArray1[3] = (double) (-613);
      doubleArray1[4] = (double) (-613);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1287.4707138879);
      doubleArray2[1] = (double) (-613);
      doubleArray2[2] = (double) (-613);
      doubleArray2[3] = (double) (-613);
      doubleArray2[4] = (double) (-613);
      doubleArray2[5] = (double) (-613);
      doubleArray2[6] = (double) (-613);
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals((-643.73535694395), range0.getCentralValue(), 0.01);
      assertEquals((-1287.4707138879), range0.getLowerBound(), 0.01);
      assertEquals(1287.4707138879, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ArrayDeque<ChronoLocalDate> arrayDeque0 = new ArrayDeque<ChronoLocalDate>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Vector<ChronoLocalDate> vector0 = new Vector<ChronoLocalDate>(arrayDeque0);
      assertNotNull(vector0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, vector0.size());
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(false);
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) vector0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("]!)J56QZc~:shh`", 41, 139);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(41, matrixSeries0.getRowCount());
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(41, matrixSeries0.getRowCount());
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(41, matrixSeries0.getRowCount());
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(20.0, range0.getCentralValue(), 0.01);
      assertEquals(40.0, range0.getLength(), 0.01);
      assertEquals(40.0, range0.getUpperBound(), 0.01);
      
      // Undeclared exception!
      DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("]!)J56QZc~:shh`", 41, 139);
      assertNotNull(matrixSeries0);
      assertEquals(41, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(139, matrixSeries0.getColumnsCount());
      
      boolean boolean0 = matrixSeries0.isEmpty();
      assertEquals(41, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertFalse(boolean0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(41, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(41, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(138.0, number0);
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(41, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(40.0, range0.getUpperBound(), 0.01);
      assertEquals(20.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(40.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) arrayList0, range0, false);
      assertNull(range1);
      assertEquals(41, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(40.0, range0.getUpperBound(), 0.01);
      assertEquals(20.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(40.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("84h", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(boolean0);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotNull(categoryDataset1);
      assertEquals(1, doubleArray0.length);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection((MatrixSeries) null);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      boolean boolean1 = linkedList0.add(defaultTableXYDataset0);
      assertTrue(linkedList0.contains(defaultTableXYDataset0));
      assertEquals(1, linkedList0.size());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) linkedList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("/", 2, 1231);
      assertNotNull(matrixSeries0);
      assertEquals(2462, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1231, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      
      matrixSeries0.fireSeriesChanged();
      assertEquals(2462, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1231, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(2462, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1231, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(2462, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1231, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(2462, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1231, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getCentralValue(), 0.01);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(timeTableXYDataset0, (-3871.339092));
      assertNotNull(xYBarDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals((-3871.339092), xYBarDataset0.getBarWidth(), 0.01);
      
      timeTableXYDataset0.addChangeListener(xYBarDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals((-3871.339092), xYBarDataset0.getBarWidth(), 0.01);
      
      Double double0 = new Double((-3871.339092));
      assertNotNull(double0);
      assertEquals((-3871.339092), (double)double0, 0.01);
      
      boolean boolean0 = linkedList0.add(double0);
      assertTrue(linkedList0.contains((-3871.339092)));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.expandToInclude(range0, 6.283185307179586);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3.141592653589793, range2.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range2.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) linkedList0, range0, true);
      assertFalse(linkedList0.contains(6.283185307179586));
      assertTrue(linkedList0.contains((-3871.339092)));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNull(range3);
      assertEquals(1, linkedList0.size());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      
      Range range4 = new Range(6.283185307179586, 6.283185307179586);
      assertNotNull(range4);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(6.283185307179586, range4.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range4.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range4.getLowerBound(), 0.01);
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range2));
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 2303, 2303);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(2303, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2303, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(slidingGanttCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      String string0 = "8MXV3;:dR7`&>V#";
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("8MXV3;:dR7`&>V#", "8MXV3;:dR7`&>V#", "8MXV3;:dR7`&>V#");
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getDomainDescription());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getDomainDescription());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertTrue(boolean0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Hour hour0 = Hour.parseHour("8MXV3;:dR7`&>V#");
      assertNull(hour0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("84h", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add((Short) null);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = timePeriodValuesCollection0.getDomainBounds(true);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      int int0 = timePeriodValuesCollection0.indexOf("]!)J56QZc~:shh`");
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals((-1), int0);
      
      Number[][] numberArray0 = new Number[15][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("=[0]m!P", "]!)J56QZc~:shh`", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(15, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(15, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(15, numberArray0.length);
      assertTrue(boolean0);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYDataset0);
      assertNull(range1);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.iterateRangeBounds(categoryDataset0, true);
      assertNull(range2);
      assertEquals(15, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) "4.]{ifR`", (-1.7976931348623157E308));
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "4.]{ifR`", 0.8, 1);
      assertNotNull(pieDataset0);
      
      defaultKeyedValuesDataset0.validateObject();
      System.setCurrentTimeMillis(5686);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Stack<Float> stack1 = new Stack<Float>();
      assertFalse(stack1.contains(0.0F));
      assertNotNull(stack1);
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      boolean boolean0 = stack1.add(float1);
      assertTrue(stack1.contains(float1));
      assertFalse(stack1.isEmpty());
      assertEquals("[0.0]", stack1.toString());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertEquals((float)float1, (float)float0, 0.01F);
      assertTrue(boolean0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Double double0 = new Double(0.0F);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) float1, (Comparable) float1);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack1, true);
      assertTrue(stack1.contains(float1));
      assertNull(range0);
      assertFalse(stack1.isEmpty());
      assertEquals("[0.0]", stack1.toString());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultWindDataset0);
      assertNull(number0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultWindDataset0, true);
      assertNull(range1);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Stack<Long> stack0 = new Stack<Long>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0, 2760.0);
      assertNotNull(powerFunction2D0);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(2760.0, powerFunction2D0.getB(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 59, 2760.0, 3, second0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(2760.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(2760.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(58.5, range0.getLowerBound(), 0.01);
      assertEquals(2760.5, range0.getUpperBound(), 0.01);
      assertEquals(1409.5, range0.getCentralValue(), 0.01);
      assertEquals(2702.0, range0.getLength(), 0.01);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYSeriesCollection0, (List) stack0, range0, false);
      assertNull(range1);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0.0, powerFunction2D0.getA(), 0.01);
      assertEquals(2760.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(58.5, range0.getLowerBound(), 0.01);
      assertEquals(2760.5, range0.getUpperBound(), 0.01);
      assertEquals(1409.5, range0.getCentralValue(), 0.01);
      assertEquals(2702.0, range0.getLength(), 0.01);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Comparable<XIntervalSeriesCollection>[] comparableArray0 = (Comparable<XIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<XIntervalSeriesCollection>) second0;
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2760.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = 2760.0;
      doubleArray2[2] = (double) 3;
      doubleArray2[3] = (-1082.15655429);
      doubleArray2[4] = (double) 59;
      doubleArray2[5] = 2760.0;
      doubleArray2[6] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 2760.0;
      doubleArray3[1] = (double) 59;
      doubleArray3[2] = (double) 59;
      doubleArray3[3] = 1.7976931348623157E308;
      doubleArray3[4] = 2760.0;
      doubleArray3[5] = (-1082.15655429);
      doubleArray3[6] = (double) 0;
      doubleArray3[7] = (double) 59;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 59;
      doubleArray4[2] = (-1082.15655429);
      doubleArray4[3] = 2760.0;
      doubleArray4[4] = (double) 59;
      doubleArray4[5] = (-1082.15655429);
      doubleArray4[6] = (double) 0;
      doubleArray4[7] = (double) 0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 1.0;
      doubleArray5[1] = (double) 59;
      doubleArray5[2] = 2760.0;
      doubleArray5[3] = 865.7;
      doubleArray5[4] = (double) 3;
      doubleArray5[5] = 1.7976931348623157E308;
      doubleArray5[6] = (double) 59;
      doubleArray5[7] = 1.7976931348623157E308;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = (double) 3;
      doubleArray6[1] = 1.7976931348623157E308;
      doubleArray6[2] = (double) 59;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = (double) 0;
      doubleArray7[1] = 2760.0;
      doubleArray7[2] = (double) 3;
      doubleArray7[3] = (-2275.6596871);
      doubleArray7[4] = (double) 59;
      doubleArray7[5] = (double) 3;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      
      doubleArray8[0] = 1.7976931348623157E308;
      doubleArray8[1] = (double) 0;
      doubleArray8[2] = (double) 0;
      doubleArray8[3] = 1.0;
      doubleArray8[4] = (double) 3;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[2];
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      
      doubleArray9[0] = 865.7;
      doubleArray9[1] = 1.0;
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double((-687.8009));
      assertNotNull(double0);
      assertEquals((-687.8009), (double)double0, 0.01);
      
      boolean boolean0 = linkedList0.add(double0);
      assertTrue(linkedList0.contains((-687.8009)));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = Range.scale(range0, 1.5);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.expandToInclude(range0, 2.0);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2.0, range2.getUpperBound(), 0.01);
      assertEquals(1.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(2.0, range2.getLength(), 0.01);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) linkedList0, range0, false);
      assertTrue(linkedList0.contains((-687.8009)));
      assertFalse(linkedList0.contains(2.0));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNull(range3);
      assertEquals(1, linkedList0.size());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      
      Range range4 = null;
      try {
        range4 = new Range(6.283185307179586, (-687.8009));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (6.283185307179586) <= upper (-687.8009).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int int0 = 139;
      MatrixSeries matrixSeries0 = new MatrixSeries("]!)J56QZc~:shh`", 41, 139);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertEquals(41, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertEquals(41, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertEquals(41, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(69.0, range0.getCentralValue(), 0.01);
      assertEquals(138.0, range0.getUpperBound(), 0.01);
      assertEquals(138.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      // Undeclared exception!
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("]!)J56QZc~:shh`", 41, 139);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(41, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(41, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(41, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(69.0, range0.getCentralValue(), 0.01);
      assertEquals(138.0, range0.getUpperBound(), 0.01);
      assertEquals(138.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1767.4899618985573;
      doubleArray1[1] = (double) 139;
      doubleArray1[2] = (double) 41;
      doubleArray1[3] = (double) 139;
      doubleArray1[4] = (double) 139;
      doubleArray1[5] = (double) 41;
      doubleArray1[6] = (double) 139;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 41;
      doubleArray2[1] = (double) 41;
      doubleArray2[2] = (double) 139;
      doubleArray2[3] = 1767.4899618985573;
      doubleArray2[4] = (double) 139;
      doubleArray2[5] = (double) 41;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1767.4899618985573;
      doubleArray3[1] = 1767.4899618985573;
      doubleArray3[2] = (double) 41;
      doubleArray3[3] = (double) 41;
      doubleArray3[4] = (double) 41;
      doubleArray3[5] = (double) 139;
      doubleArray3[6] = (double) 139;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 1767.4899618985573;
      doubleArray4[1] = (double) 41;
      doubleArray4[2] = (double) 41;
      doubleArray4[3] = 1767.4899618985573;
      doubleArray4[4] = (double) 41;
      doubleArray4[5] = (double) 41;
      doubleArray4[6] = (double) 41;
      doubleArray4[7] = 1767.4899618985573;
      doubleArray4[8] = (double) 139;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = (double) 41;
      doubleArray5[1] = (double) 139;
      doubleArray5[2] = (double) 139;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = (double) 139;
      doubleArray6[1] = (double) 41;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = (double) 139;
      doubleArray7[1] = (double) 41;
      doubleArray7[2] = 1767.4899618985573;
      doubleArray7[3] = 1767.4899618985573;
      doubleArray7[4] = (double) 41;
      doubleArray7[5] = (double) 139;
      doubleArray7[6] = (double) 139;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      
      doubleArray8[0] = 1767.4899618985573;
      doubleArray8[1] = 1767.4899618985573;
      doubleArray8[2] = (double) 139;
      doubleArray8[3] = 135.94996;
      doubleArray8[4] = 1767.4899618985573;
      doubleArray8[5] = 1767.4899618985573;
      doubleArray8[6] = (double) 41;
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[][] doubleArray0 = new double[8][7];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-228.1441469432943);
      doubleArray1[2] = (-1835.0);
      doubleArray1[3] = 2092.90204245166;
      doubleArray1[4] = (-878.0);
      doubleArray1[5] = 206.88866;
      doubleArray1[6] = (-388.8456213);
      doubleArray1[7] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 2053.603;
      doubleArray2[2] = (-878.0);
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = (-878.0);
      doubleArray2[5] = 206.88866;
      doubleArray2[6] = (-388.8456213);
      doubleArray2[7] = Double.POSITIVE_INFINITY;
      doubleArray2[8] = (-878.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-878.0);
      doubleArray4[1] = (-1835.0);
      doubleArray4[2] = 206.88866;
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = Double.POSITIVE_INFINITY;
      doubleArray4[5] = (-228.1441469432943);
      doubleArray4[6] = (-1.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 206.88866;
      doubleArray5[1] = 2053.603;
      doubleArray5[2] = (-228.1441469432943);
      doubleArray5[3] = (-388.8456213);
      doubleArray5[4] = 556.0;
      doubleArray5[5] = (-228.1441469432943);
      doubleArray5[6] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = 2053.603;
      doubleArray6[1] = 6.283185307179586;
      doubleArray6[2] = (-228.1441469432943);
      doubleArray6[3] = Double.POSITIVE_INFINITY;
      doubleArray6[4] = 206.88866;
      doubleArray6[5] = (-388.8456213);
      doubleArray6[6] = 556.0;
      doubleArray6[7] = (-878.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = (-878.0);
      doubleArray7[1] = (-878.0);
      doubleArray7[2] = (-878.0);
      doubleArray7[3] = (-228.1441469432943);
      doubleArray7[4] = (-1835.0);
      doubleArray7[5] = (-878.0);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = 3645.0;
      doubleArray8[1] = Double.POSITIVE_INFINITY;
      doubleArray8[2] = 206.88866;
      doubleArray8[3] = (-1835.0);
      doubleArray8[4] = 556.0;
      doubleArray8[5] = (-1835.0);
      doubleArray8[6] = 2092.90204245166;
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 2053.603);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Float float0 = new Float(2356.299F);
      assertNotNull(float0);
      assertEquals(2356.299F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertTrue(stack0.contains(2356.299F));
      assertEquals("[2356.299]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Double double0 = new Double(2356.299F);
      assertNotNull(double0);
      assertEquals(2356.299072265625, (double)double0, 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) double0, (Comparable) float0);
      assertTrue(stack0.contains(2356.299F));
      assertEquals("[2356.299]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultKeyedValues2DDataset0.addValue((-1.0), (Comparable) "~", (Comparable) "~");
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      YIntervalSeries yIntervalSeries0 = new YIntervalSeries("~");
      assertNotNull(yIntervalSeries0);
      assertTrue(yIntervalSeries0.getNotify());
      assertTrue(yIntervalSeries0.getAutoSort());
      assertNull(yIntervalSeries0.getDescription());
      assertTrue(yIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, yIntervalSeries0.getMaximumItemCount());
      assertEquals(0, yIntervalSeries0.getItemCount());
      
      yIntervalSeriesCollection0.removeSeries(yIntervalSeries0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(yIntervalSeries0.getNotify());
      assertTrue(yIntervalSeries0.getAutoSort());
      assertNull(yIntervalSeries0.getDescription());
      assertTrue(yIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, yIntervalSeries0.getMaximumItemCount());
      assertEquals(0, yIntervalSeries0.getItemCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0);
      assertNull(range0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultKeyedValues2DDataset0, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Float float0 = new Float(2356.299F);
      assertNotNull(float0);
      assertEquals(2356.299F, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertTrue(stack0.contains(2356.299F));
      assertEquals("[2356.299]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultWindDataset0, stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid series index: -1
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultKeyedValues2DDataset0.addValue((-1.0), (Comparable) "", (Comparable) "");
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(boolean0);
      
      Vector<Long> vector0 = new Vector<Long>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Spliterator<Long> spliterator0 = vector0.spliterator();
      assertNotNull(spliterator0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) vector0, false);
      assertNull(range0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultKeyedValues2DDataset0, false);
      assertNotNull(range1);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = timePeriodValuesCollection0.getDomainBounds(true);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      int int0 = timePeriodValuesCollection0.indexOf("]!)J56QZc~:shh`");
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals((-1), int0);
      
      Number[][] numberArray0 = new Number[15][6];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("=[0]m!P", "]!)J56QZc~:shh`", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(15, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(15, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertEquals(15, numberArray0.length);
      assertTrue(boolean0);
      
      Number number1 = DatasetUtilities.findMinimumDomainValue(timePeriodValuesCollection0);
      assertNotNull(number1);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number1);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, false);
      assertNull(range1);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("84h", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertTrue(boolean0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      
      defaultCategoryDataset0.addValue(4152.443923478, (Comparable) "", (Comparable) "84h");
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(4152.443923478, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2076.221961739, range0.getCentralValue(), 0.01);
      assertEquals(4152.443923478, range0.getUpperBound(), 0.01);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertNotNull(double0);
      assertEquals(1, doubleArray0.length);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertEquals(4152.443923478, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(2014, month0.getYearValue());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      SortOrder sortOrder0 = SortOrder.ASCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      defaultKeyedValuesDataset0.sortByValues(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) month0, (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      assertEquals(2014, month0.getYearValue());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-1059.9092551819));
      assertNotNull(range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1059.9092551819), range0.getLowerBound(), 0.01);
      assertEquals((-1059.9092551819), range0.getUpperBound(), 0.01);
      assertEquals((-1059.9092551819), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultKeyedValues2DDataset0.addValue((-1.0), (Comparable) "", (Comparable) "");
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(boolean0);
      
      Vector<Long> vector0 = new Vector<Long>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Spliterator<Long> spliterator0 = vector0.spliterator();
      assertNotNull(spliterator0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Long long0 = new Long(7L);
      assertNotNull(long0);
      assertEquals(7L, (long)long0);
      
      Long long1 = Long.getLong("Null 'visibleSeriesKeys' argument.", long0);
      assertNotNull(long1);
      assertEquals(7L, (long)long1);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("~", "~", "");
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("~", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("~", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0);
      assertNull(range0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("~", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.POSITIVE_INFINITY);
      assertNotNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertNotNull(double0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number[] numberArray0 = new Number[28];
      numberArray0[0] = null;
      numberArray0[1] = (Number) double0;
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      numberArray0[2] = (Number) bigInteger0;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) double0, 0.8);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) month0, (-180.0), 5677);
      assertNotNull(defaultPieDataset0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset1);
      assertFalse(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      
      Number[][] numberArray1 = new Number[1][4];
      numberArray1[0] = numberArray0;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("org.jfree.data.KeyedObjectComparator", "org.jfree.data.KeyedObjectComparator", numberArray1);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, numberArray1.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, 0.8);
      assertNotNull(range0);
      assertEquals(1, numberArray1.length);
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals(1.3, range0.getCentralValue(), 0.01);
      assertEquals(1.8, range0.getUpperBound(), 0.01);
      assertEquals(0.8, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, true);
      assertNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Double double0 = new Double((-1472.85129));
      assertNotNull(double0);
      assertEquals((-1472.85129), (double)double0, 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) double0, 2897.14734);
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(boolean0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Short short0 = new Short((short)2527);
      assertNotNull(short0);
      assertEquals((short)2527, (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertFalse(arrayList0.contains((short)2527));
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)2527));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains((short)2527));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, linkedList0, false);
      assertFalse(linkedList0.contains((short)2527));
      assertNull(range0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, linkedList0.size());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      jDBCPieDataset0.setValue((Comparable) short0, (Number) short0);
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) jDBCPieDataset0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("8MXV3;:dR7`&>V#", "8MXV3;:dR7`&>V#", "8MXV3;:dR7`&>V#");
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("8MXV3;:dR7`&>V#", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-181), (-181));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals((-181), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-181), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("WjUw8n.", 34, 2);
      assertNotNull(matrixSeries0);
      assertEquals(68, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(34, matrixSeries0.getRowCount());
      
      matrixSeries0.fireSeriesChanged();
      assertEquals(68, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(34, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(68, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(34, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(68, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(34, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(33.0, range0.getUpperBound(), 0.01);
      assertEquals(16.5, range0.getCentralValue(), 0.01);
      assertEquals(33.0, range0.getLength(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      assertEquals(68, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(34, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(68, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertEquals(34, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(33.0, number0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Double double0 = new Double(Double.POSITIVE_INFINITY);
      assertNotNull(double0);
      assertEquals(Double.POSITIVE_INFINITY, (double)double0, 0.01);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertFalse(linkedList0.contains(double0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(double0);
      assertTrue(linkedList0.contains(double0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      assertNotNull(range0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      double double1 = 6.283185307179586;
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.expandToInclude(range1, Double.POSITIVE_INFINITY);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getUpperBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range2.getLength(), 0.01);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timePeriodValuesCollection0, (List) linkedList0, range2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 'series' out of range.
         //
         verifyException("org.jfree.data.time.TimePeriodValuesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      
      Month month1 = new Month();
      assertNotNull(month1);
      assertEquals(2014, month1.getYearValue());
      assertEquals(2, month1.getMonth());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(24170L, month1.getSerialIndex());
      assertTrue(month1.equals((Object)month0));
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) month0, (double) (-1868));
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(month0, month1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotNull(pieDataset0);
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertTrue(month0.equals((Object)month1));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Integer integer0 = new Integer((-1868));
      assertNotNull(integer0);
      assertEquals((-1868), (int)integer0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((-4528.89888981567), 3);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(3.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals((-4528.89888981567), normalDistributionFunction2D0.getMean(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, (-1.0), 183.367, 111, month1);
      assertNotSame(month1, month0);
      assertNotNull(xYSeries0);
      assertEquals(2014, month1.getYearValue());
      assertEquals(2, month1.getMonth());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(24170L, month1.getSerialIndex());
      assertEquals(3.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals((-4528.89888981567), normalDistributionFunction2D0.getMean(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(111, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals((-1.0), xYSeries0.getMinX(), 0.01);
      assertEquals(183.367, xYSeries0.getMaxX(), 0.01);
      assertTrue(month1.equals((Object)month0));
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(865.7, 183.367);
      assertNotSame(month1, month0);
      assertNull(xYDataItem0);
      assertEquals(2014, month1.getYearValue());
      assertEquals(2, month1.getMonth());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(24170L, month1.getSerialIndex());
      assertEquals(3.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals((-4528.89888981567), normalDistributionFunction2D0.getMean(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(865.7, xYSeries0.getMaxX(), 0.01);
      assertEquals(112, xYSeries0.getItemCount());
      assertEquals(183.367, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals((-1.0), xYSeries0.getMinX(), 0.01);
      assertTrue(month1.equals((Object)month0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, 3, (-1.7976931348623157E308), 3, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      defaultKeyedValues2DDataset0.addValue(2336.081915002, (Comparable) "4\\.ifR`", (Comparable) "4\\.ifR`");
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(boolean0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertNotNull(range0);
      assertEquals(2336.081915002, range0.getLowerBound(), 0.01);
      assertEquals(2336.081915002, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2336.081915002, range0.getUpperBound(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Float float0 = new Float((-1425.9117725));
      assertNotNull(float0);
      assertEquals((-1425.9117F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("84h", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      CategoryTableXYDataset categoryTableXYDataset1 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset1);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset1);
      assertNotSame(categoryTableXYDataset1, categoryTableXYDataset0);
      assertNull(number0);
      assertEquals(1.0, categoryTableXYDataset1.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset1.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset1.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset1.equals((Object)categoryTableXYDataset0));
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) "4\\.ifR`", (-1.7976931348623157E308));
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Double double0 = new Double((-3871.339092));
      assertNotNull(double0);
      assertEquals((-3871.339092), (double)double0, 0.01);
      
      boolean boolean0 = linkedList0.add(double0);
      assertTrue(linkedList0.contains((-3871.339092)));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Range range1 = Range.combine(range0, range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = Range.expandToInclude(range0, 6.283185307179586);
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(3.141592653589793, range2.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range2.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) linkedList0, range0, true);
      assertFalse(linkedList0.contains(6.283185307179586));
      assertTrue(linkedList0.contains((-3871.339092)));
      assertNotSame(range0, range2);
      assertNotSame(range0, range1);
      assertNull(range3);
      assertEquals(1, linkedList0.size());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      
      Range range4 = new Range(6.283185307179586, 6.283185307179586);
      assertNotNull(range4);
      assertEquals(6.283185307179586, range4.getCentralValue(), 0.01);
      assertEquals(6.283185307179586, range4.getUpperBound(), 0.01);
      assertEquals(6.283185307179586, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range1));
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset("org.jfree.data.xy.XYIntervalDataItem", "4", "org.jfree.data.KeyedObjectComparatorType", "org.jfree.data.xy.VectorDataItem");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      int int0 = timePeriodValuesCollection0.indexOf("]!)J56QZc~:shh`");
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals((-1), int0);
      
      double[][] doubleArray0 = new double[1][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("]!)J56QZc~:shh`", "]!)J56QZc~:shh`", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      defaultCategoryDataset0.clearSelection();
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      Number[][] numberArray0 = new Number[1][6];
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("=[0]m!P", "]!)J56QZc~:shh`", numberArray0);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertNotNull(defaultCategoryDataset1);
      assertEquals(1, numberArray0.length);
      assertFalse(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset1);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertNull(number0);
      assertEquals(1, numberArray0.length);
      assertFalse(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      Integer integer0 = new Integer(1009);
      assertNotNull(integer0);
      assertEquals(1009, (int)integer0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 1009;
      doubleArray1[1] = (double) 1009;
      doubleArray1[2] = (-1868.501974321257);
      doubleArray1[3] = (double) (short) (-1);
      doubleArray1[4] = (double) (short) (-1);
      doubleArray1[5] = (double) 1009;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (short) (-1);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 1009;
      doubleArray3[1] = (-1868.501974321257);
      doubleArray3[2] = (-1868.501974321257);
      doubleArray3[3] = (-1868.501974321257);
      doubleArray3[4] = (double) 1009;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      defaultKeyedValues2DDataset0.addValue((-1.0), (Comparable) "", (Comparable) "");
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(boolean0);
      
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "", (-1.0), 45);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotNull(pieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "", (double) 45, 45);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotNull(pieDataset1);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset1.equals((Object)defaultPieDataset0));
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) "", (double) 45, 1340);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset2);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset1, pieDataset2);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotSame(pieDataset2, pieDataset1);
      assertNotSame(pieDataset2, defaultPieDataset0);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotNull(pieDataset2);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)defaultPieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("sgWT", 30, 2);
      assertNotNull(matrixSeries0);
      assertEquals(60, matrixSeries0.getItemCount());
      assertEquals(30, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(60, matrixSeries0.getItemCount());
      assertEquals(30, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Vector<XYSeriesCollection> vector0 = new Stack<XYSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(60, matrixSeries0.getItemCount());
      assertEquals(30, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(60, matrixSeries0.getItemCount());
      assertEquals(30, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(14.5, range0.getCentralValue(), 0.01);
      assertEquals(29.0, range0.getUpperBound(), 0.01);
      assertEquals(29.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(60, matrixSeries0.getItemCount());
      assertEquals(30, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(14.5, range0.getCentralValue(), 0.01);
      assertEquals(29.0, range0.getUpperBound(), 0.01);
      assertEquals(29.0, range0.getLength(), 0.01);
      
      Range range2 = Range.shift(range0, (-3186.66870737239));
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertNotNull(range2);
      assertEquals(60, matrixSeries0.getItemCount());
      assertEquals(30, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(14.5, range0.getCentralValue(), 0.01);
      assertEquals(29.0, range0.getUpperBound(), 0.01);
      assertEquals(29.0, range0.getLength(), 0.01);
      assertEquals((-3186.66870737239), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals((-1593.334353686195), range2.getCentralValue(), 0.01);
      assertEquals(3186.66870737239, range2.getLength(), 0.01);
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("]!)J56QZc~:shh`", 51, 139);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(7089, matrixSeries0.getItemCount());
      assertEquals(51, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(139, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(7089, matrixSeries0.getItemCount());
      assertEquals(51, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(7089, matrixSeries0.getItemCount());
      assertEquals(51, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-2194.725836806671);
      doubleArray1[1] = 2336.081915002;
      doubleArray1[2] = (-1255.1025267154);
      doubleArray1[3] = 10.0;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 3535.914;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-2306.9922631468);
      doubleArray2[1] = 2336.081915002;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 2336.081915002;
      doubleArray3[1] = 2336.081915002;
      doubleArray3[2] = 10.0;
      doubleArray3[3] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = 10.0;
      doubleArray4[2] = (-2306.9922631468);
      doubleArray4[3] = (-1255.1025267154);
      doubleArray4[4] = (-1255.1025267154);
      doubleArray4[5] = (-1255.1025267154);
      doubleArray4[6] = 3.0;
      doubleArray4[7] = 10.0;
      doubleArray4[8] = (-2194.725836806671);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 3535.914;
      doubleArray5[1] = 10.0;
      doubleArray5[2] = (-1255.1025267154);
      doubleArray5[3] = (-1255.1025267154);
      doubleArray5[4] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (-1255.1025267154);
      doubleArray6[1] = 3535.914;
      doubleArray6[2] = 3535.914;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[8];
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      
      doubleArray8[0] = (-2306.9922631468);
      doubleArray8[1] = (-1255.1025267154);
      doubleArray8[2] = (-1.0);
      doubleArray8[3] = (-1.0);
      doubleArray8[4] = (-1255.1025267154);
      doubleArray8[5] = (-1.0);
      doubleArray8[6] = 3535.914;
      doubleArray8[7] = (-1.0);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[3];
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      
      doubleArray9[0] = 10.0;
      doubleArray9[1] = 3.0;
      doubleArray9[2] = (-1255.1025267154);
      doubleArray0[8] = doubleArray9;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("g)TG9UX@b", "g)TG9UX@b", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(9, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, 3535.914);
      assertNotNull(range0);
      assertEquals(9, doubleArray0.length);
      assertEquals((-4528.89888981567), range0.getLowerBound(), 0.01);
      assertEquals(18631.97263482167, range0.getLength(), 0.01);
      assertEquals(4787.087427595165, range0.getCentralValue(), 0.01);
      assertEquals(14103.073745006, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      Byte byte0 = new Byte((byte)64);
      assertNotNull(byte0);
      assertEquals((byte)64, (byte)byte0);
      
      boolean boolean0 = stack0.add(byte0);
      assertTrue(stack0.contains(byte0));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[64]", stack0.toString());
      assertTrue(boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.contains(byte0));
      assertNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[64]", stack0.toString());
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYDataset0);
      assertNull(range1);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      double double0 = (-1.0);
      defaultKeyedValues2DDataset0.addValue((-1.0), (Comparable) "", (Comparable) "");
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, false);
      assertNotNull(range0);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      categoryTableXYDataset0.validateObject();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNull(number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      int int0 = 4688;
      double double1 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, 4688);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      Comparable<DefaultBoxAndWhiskerCategoryDataset>[] comparableArray0 = (Comparable<DefaultBoxAndWhiskerCategoryDataset>[]) Array.newInstance(Comparable.class, 8);
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      
      XIntervalSeries xIntervalSeries0 = new XIntervalSeries(day0, true, false);
      assertNotNull(xIntervalSeries0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(0, xIntervalSeries0.getItemCount());
      assertTrue(xIntervalSeries0.getNotify());
      assertNull(xIntervalSeries0.getDescription());
      assertTrue(xIntervalSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xIntervalSeries0.getMaximumItemCount());
      assertFalse(xIntervalSeries0.getAllowDuplicateXValues());
      
      // Undeclared exception!
      try { 
        xIntervalSeries0.remove(day0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("]!)J56QZc~:shh`", 41, 139);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertEquals(41, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5699, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertEquals(41, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertEquals(41, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      CategoryDataset categoryDataset0 = null;
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[0][5];
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("?d$?vfe=afnsIKUv0", "]!)J56QZc~:shh`", doubleArray0);
      assertNotNull(categoryDataset1);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(millisecond0);
      assertNotNull(timePeriodValues0);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
      assertNull(range0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timePeriodValuesCollection0, (List) null, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      
      Number[][] numberArray0 = new Number[2][3];
      Number[] numberArray1 = new Number[28];
      numberArray1[0] = number0;
      numberArray1[1] = number0;
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      numberArray1[2] = (Number) bigInteger0;
      numberArray1[3] = number0;
      numberArray1[4] = number0;
      numberArray1[15] = number0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)110;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertArrayEquals(new byte[] {(byte)110}, byteArray0);
      assertNotNull(bigInteger1);
      assertEquals(1, byteArray0.length);
      assertEquals((short)110, bigInteger1.shortValue());
      assertEquals((byte)110, bigInteger1.byteValue());
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      BigInteger bigInteger2 = bigInteger0.modPow(bigInteger1, bigInteger1);
      assertArrayEquals(new byte[] {(byte)110}, byteArray0);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotNull(bigInteger2);
      assertEquals(1, byteArray0.length);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)110, bigInteger1.shortValue());
      assertEquals((byte)110, bigInteger1.byteValue());
      assertEquals((byte)100, bigInteger2.byteValue());
      assertEquals((short)100, bigInteger2.shortValue());
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      
      numberArray1[16] = number0;
      Short short0 = new Short((short) (-819));
      assertNotNull(short0);
      assertEquals((short) (-819), (short)short0);
      
      numberArray1[7] = (Number) short0;
      numberArray1[8] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[25];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = number0;
      numberArray2[1] = number0;
      numberArray1[7] = number0;
      numberArray2[3] = number0;
      numberArray2[4] = (Number) short0;
      Number number1 = DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      assertNotNull(number1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(number1.equals((Object)number0));
      assertEquals(Double.NaN, number1);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      double[][] doubleArray0 = new double[6][9];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (byte)110;
      doubleArray1[1] = (double) (byte)110;
      doubleArray1[2] = (double) (byte)110;
      doubleArray1[3] = (double) (byte)110;
      doubleArray1[4] = (double) (short) (-819);
      doubleArray1[5] = (double) (byte)110;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (byte)110;
      doubleArray2[1] = (double) (short) (-819);
      doubleArray2[2] = (double) (short) (-819);
      doubleArray2[3] = (double) (short) (-819);
      doubleArray2[4] = (double) (byte)110;
      doubleArray2[5] = (double) (byte)110;
      doubleArray2[6] = (double) (short) (-819);
      doubleArray2[7] = (double) (byte)110;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (byte)110;
      doubleArray3[1] = (double) (short) (-819);
      doubleArray3[2] = (double) (byte)110;
      doubleArray3[3] = (double) (byte)110;
      doubleArray3[4] = (double) (short) (-819);
      doubleArray3[5] = (double) (short) (-819);
      doubleArray3[6] = (double) (short) (-819);
      doubleArray3[7] = (double) (byte)110;
      doubleArray3[8] = (double) (byte)110;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) (short) (-819);
      doubleArray4[1] = (double) (byte)110;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 6077.289858058;
      doubleArray5[1] = (double) (short) (-819);
      doubleArray5[2] = (double) (byte)110;
      doubleArray5[3] = (double) (byte)110;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = (double) (short) (-819);
      doubleArray6[1] = (double) (byte)110;
      doubleArray6[2] = (double) (short) (-819);
      doubleArray6[3] = (double) (byte)110;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("]!)J56QZc~:shh`", 41, 139);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(41, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(41, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(41, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      // Undeclared exception!
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Stack<Byte> stack0 = new Stack<Byte>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYDataset0);
      assertNull(range1);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-1243));
      assertNotNull(pieDataset0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) yIntervalSeriesCollection0);
      assertNull(range0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertNotNull(range1);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-1243);
      doubleArray1[1] = (double) (-1243);
      doubleArray1[2] = (double) (-1243);
      doubleArray1[3] = (double) (-1243);
      doubleArray1[4] = (double) (short) (-1);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1243);
      doubleArray2[1] = (double) (short) (-1);
      doubleArray2[2] = (double) (short) (-1);
      doubleArray2[3] = (double) (short) (-1);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (short) (-1);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) (-1243);
      doubleArray4[1] = (double) (short) (-1);
      doubleArray4[2] = (double) (-1243);
      doubleArray4[3] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (double) (-1243);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = (double) (short) (-1);
      doubleArray6[1] = (double) (short) (-1);
      doubleArray6[2] = (double) (-1243);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = (double) (short) (-1);
      doubleArray7[1] = (double) (short) (-1);
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = (double) (-1243);
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("5'xU`Q*fp7h(8{", "5'xU`Q*fp7h(8{", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(7, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, 1340);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("]!)J56QZc~:shh`", 41, 139);
      assertNotNull(matrixSeries0);
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(41, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(41, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(41, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(138.0, range0.getLength(), 0.01);
      assertEquals(69.0, range0.getCentralValue(), 0.01);
      assertEquals(138.0, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(41, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(40.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(20.0, range1.getCentralValue(), 0.01);
      assertEquals(40.0, range1.getUpperBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "]!)J56QZc~:shh`", (double) 139, 2160);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("The number of row keys does not match the number of rows in the data array.");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-3367));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      assertNull(range1);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("84h", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection1);
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection1);
      assertNotSame(taskSeriesCollection1, taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertTrue(taskSeriesCollection1.equals((Object)taskSeriesCollection0));
      assertTrue(boolean0);
      
      TaskSeriesCollection taskSeriesCollection2 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection2);
      assertEquals(0, taskSeriesCollection2.getColumnCount());
      assertEquals(0, taskSeriesCollection2.getRowCount());
      assertTrue(taskSeriesCollection2.equals((Object)taskSeriesCollection0));
      assertTrue(taskSeriesCollection2.equals((Object)taskSeriesCollection1));
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotNull(categoryDataset1);
      assertEquals(1, doubleArray0.length);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertTrue(range1.equals((Object)range0));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertNotNull(number0);
      assertEquals(1, doubleArray0.length);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double0 = (-778.82722);
      doubleArray2[2] = (-778.82722);
      doubleArray2[3] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(3, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      assertFalse(vector0.contains(defaultTableXYDataset0));
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      String string0 = "";
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0, true);
      assertNull(range0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      SortOrder sortOrder0 = SortOrder.DESCENDING;
      assertNotNull(sortOrder0);
      assertEquals("SortOrder.DESCENDING", sortOrder0.toString());
      
      defaultKeyedValuesDataset0.sortByKeys(sortOrder0);
      assertEquals("SortOrder.DESCENDING", sortOrder0.toString());
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "4\\.ifR`", (double) 0, 1246);
      assertNotNull(pieDataset0);
      
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 1246;
      doubleArray1[1] = (double) 1246;
      doubleArray1[2] = (double) 1246;
      doubleArray1[3] = (double) 1246;
      doubleArray1[4] = (double) 1246;
      doubleArray1[5] = (double) 1246;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 1246;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 789.0;
      doubleArray4[1] = (double) 1246;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 1246;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 789.0;
      doubleArray5[1] = (double) 1246;
      doubleArray5[2] = 6.283185307179586;
      doubleArray5[3] = 789.0;
      doubleArray5[4] = (double) 1246;
      doubleArray5[5] = Double.NEGATIVE_INFINITY;
      doubleArray5[6] = 789.0;
      doubleArray5[7] = 789.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = 6.283185307179586;
      doubleArray6[1] = (double) 0;
      doubleArray6[2] = Double.NEGATIVE_INFINITY;
      doubleArray6[3] = (-798.9748497947);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("4\\.ifR`", "4\\.ifR`", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(7, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(7, doubleArray0.length);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(4984.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "4\\.ifR`", (double) 0, 0);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "4\\.ifR`", (double) 0, 1246);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNull(number0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      DatasetGroup datasetGroup0 = new DatasetGroup();
      assertNotNull(datasetGroup0);
      assertEquals("NOID", datasetGroup0.getID());
      
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[0][3];
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(0, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(number0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = 2.515948001593526;
      doubleArray1[2] = 855.92061912;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(2.515948001593526, "Null 'xRange' argument", "Duplicate items in 'columnKeys'.");
      assertNotNull(timePeriodValues0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Null 'xRange' argument", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Duplicate items in 'columnKeys'.", timePeriodValues0.getRangeDescription());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Null 'xRange' argument", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Duplicate items in 'columnKeys'.", timePeriodValues0.getRangeDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNull(range0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Null 'xRange' argument", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Duplicate items in 'columnKeys'.", timePeriodValues0.getRangeDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("The number of row keys does not match the number of rows in the data array.");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) "", (Number) null);
      Hour hour0 = Hour.parseHour("s,#");
      assertNull(hour0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) null, (double) 0, (-3892));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup("");
      assertNotNull(datasetGroup0);
      assertEquals("", datasetGroup0.getID());
      
      defaultKeyedValues2DDataset0.addValue(3340.16395, (Comparable) "", (Comparable) "");
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(boolean0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(number0);
      assertEquals(3340.16395, number0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(3340.16395, range0.getLowerBound(), 0.01);
      assertEquals(3340.16395, range0.getCentralValue(), 0.01);
      assertEquals(3340.16395, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double[] doubleArray0 = new double[4];
      double[][] doubleArray1 = new double[2][6];
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 45.0;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray1.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(45.0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      
      Vector<Long> vector0 = new Vector<Long>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Spliterator<Long> spliterator0 = vector0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Long long0 = new Long((-167L));
      assertNotNull(long0);
      assertEquals((-167L), (long)long0);
      
      Long long1 = new Long((-9223372036854775785L));
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals((-9223372036854775785L), (long)long1);
      
      Long long2 = Long.getLong((String) null, long1);
      assertNotNull(long2);
      assertFalse(long1.equals((Object)long0));
      assertFalse(long2.equals((Object)long0));
      assertEquals((-9223372036854775785L), (long)long2);
      
      boolean boolean0 = vector0.add(long2);
      assertTrue(vector0.contains(long2));
      assertFalse(vector0.contains(long0));
      assertEquals(10, vector0.capacity());
      assertEquals("[-9223372036854775785]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertFalse(long1.equals((Object)long0));
      assertFalse(long2.equals((Object)long0));
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) vector0, true);
      assertTrue(vector0.contains(long2));
      assertFalse(vector0.contains(long0));
      assertNull(range0);
      assertEquals(10, vector0.capacity());
      assertEquals("[-9223372036854775785]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertNotNull(regularTimePeriod0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281321L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281321L, regularTimePeriod0.getMiddleMillisecond());
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      Date date0 = fixedMillisecond0.getTime();
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotNull(date0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      
      MatrixSeries matrixSeries0 = new MatrixSeries("]!)J56QZc~:shh`", 41, 139);
      assertNotNull(matrixSeries0);
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(41, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, (-901.3003305923534), (-428), 139, fixedMillisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("]!)J56QZc~:shh`", 41, 139);
      assertNotNull(matrixSeries0);
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(41, matrixSeries0.getRowCount());
      assertEquals(5699, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(41, matrixSeries0.getRowCount());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(41, matrixSeries0.getRowCount());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(138.0, range0.getLength(), 0.01);
      assertEquals(69.0, range0.getCentralValue(), 0.01);
      assertEquals(138.0, range0.getUpperBound(), 0.01);
      
      // Undeclared exception!
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("]!)J56QZc~:shh`", 41, 139);
      assertNotNull(matrixSeries0);
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(41, matrixSeries0.getRowCount());
      assertEquals(5699, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(41, matrixSeries0.getRowCount());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(41, matrixSeries0.getRowCount());
      assertEquals(5699, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, number0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) "]!)J56QZc~:shh`", (-3.423856119989));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 682.5;
      doubleArray1[1] = (-590.6708020306);
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = 2177.4185;
      doubleArray1[4] = 6.283185307179586;
      doubleArray1[5] = Double.POSITIVE_INFINITY;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1735.03233);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(integer0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Vector<Long> vector0 = new Vector<Long>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Spliterator<Long> spliterator0 = vector0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      Long long1 = new Long(4L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(4L, (long)long1);
      
      vector0.add(0, long1);
      assertFalse(vector0.contains(1L));
      assertTrue(vector0.contains(4L));
      assertEquals("[4]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = Long.getLong("", long0);
      assertNotNull(long2);
      assertFalse(long0.equals((Object)long1));
      assertFalse(long2.equals((Object)long1));
      assertEquals(1L, (long)long2);
      
      boolean boolean0 = vector0.add(long2);
      assertTrue(vector0.contains(4L));
      assertEquals(10, vector0.capacity());
      assertEquals("[4, 1]", vector0.toString());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertFalse(long0.equals((Object)long1));
      assertFalse(long2.equals((Object)long1));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double[] doubleArray0 = new double[4];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Float float0 = new Float(Double.NEGATIVE_INFINITY);
      assertNotNull(float0);
      assertEquals(Float.NEGATIVE_INFINITY, (float)float0, 0.01F);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Requires 'samples' > 1", "5z'd", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      int int0 = 5679;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 5679);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5679, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Stack<Float> stack0 = new Stack<Float>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      Float float0 = new Float(Double.NEGATIVE_INFINITY);
      assertNotNull(float0);
      assertEquals(Float.NEGATIVE_INFINITY, (float)float0, 0.01F);
      
      boolean boolean0 = stack0.add(float0);
      assertTrue(stack0.contains(float0));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[-Infinity]", stack0.toString());
      assertTrue(boolean0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      DomainOrder domainOrder0 = defaultWindDataset0.getDomainOrder();
      assertNotNull(domainOrder0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals("DomainOrder.NONE", domainOrder0.toString());
      
      Double double0 = new Double(Double.NEGATIVE_INFINITY);
      assertNotNull(double0);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double0, 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0);
      assertNull(range1);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertTrue(stack0.contains(float0));
      assertNull(range2);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[-Infinity]", stack0.toString());
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Range range3 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(range3);
      assertEquals(Double.NaN, range3.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range3.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range3.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range3.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.clearSelection();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "4\\.ifR`", (double) 0, 0);
      assertNotNull(pieDataset0);
      
      List list0 = defaultKeyedValuesDataset0.getKeys();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("]!)J56QZc~:shh`", 43, 139);
      assertNotNull(matrixSeries0);
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(43, matrixSeries0.getRowCount());
      assertEquals(5977, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(43, matrixSeries0.getRowCount());
      assertEquals(5977, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range0);
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(43, matrixSeries0.getRowCount());
      assertEquals(5977, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(138.0, range0.getLength(), 0.01);
      assertEquals(69.0, range0.getCentralValue(), 0.01);
      assertEquals(138.0, range0.getUpperBound(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(43, matrixSeries0.getRowCount());
      assertEquals(5977, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Second second1 = new Second();
      assertNotNull(second1);
      assertEquals(21, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertTrue(second1.equals((Object)second0));
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Stack<Long> stack0 = new Stack<Long>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1.0863380394888518, 2760.0);
      assertNotNull(powerFunction2D0);
      assertEquals(1.0863380394888518, powerFunction2D0.getA(), 0.01);
      assertEquals(2760.0, powerFunction2D0.getB(), 0.01);
      
      int int0 = 3;
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 71.44361917, 2760.0, 3, second1);
      assertNotSame(second1, second0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(21, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1.0863380394888518, powerFunction2D0.getA(), 0.01);
      assertEquals(2760.0, powerFunction2D0.getB(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(second1.equals((Object)second0));
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertNotSame(second1, second0);
      assertEquals(21, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1.0863380394888518, powerFunction2D0.getA(), 0.01);
      assertEquals(2760.0, powerFunction2D0.getB(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertTrue(second1.equals((Object)second0));
      assertFalse(boolean0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      String string0 = "-p=5E";
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "-p=5E");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4\\.ifR`";
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      int int0 = (-882);
      double double0 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, (-882));
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.0, double0, 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) null, (Comparable) "4\\.ifR`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Second second1 = (Second)second0.previous();
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertNotNull(second1);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(20, second1.getSecond());
      assertFalse(second1.equals((Object)second0));
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Stack<Long> stack0 = new Stack<Long>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(2907.538167552299, (-428));
      assertNotNull(powerFunction2D0);
      assertEquals(2907.538167552299, powerFunction2D0.getA(), 0.01);
      assertEquals((-428.0), powerFunction2D0.getB(), 0.01);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, Double.NEGATIVE_INFINITY, (-428), 2675, second0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      TimeSeries timeSeries0 = new TimeSeries("Duplicate items in 'columnKeys'.");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Duplicate items in 'columnKeys'.");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      defaultTableXYDataset0.setSelectionState(timeSeriesCollection0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(defaultTableXYDataset0);
      assertNotNull(number0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(Double.NaN, number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) jDBCXYDataset0);
      assertNotNull(number1);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertFalse(number1.equals((Object)number0));
      assertEquals(0.0, number1);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Second second1 = (Second)second0.previous();
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertNotNull(second1);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(20, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertFalse(second1.equals((Object)second0));
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) second0, (double) 59, 59);
      assertNotSame(second0, second1);
      assertNotNull(defaultPieDataset0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertFalse(second0.equals((Object)second1));
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Vector<Long> vector0 = new Vector<Long>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(59, 0, second1);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(20, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) dynamicTimeSeriesCollection0);
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertNotNull(double0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(20, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals((-1), dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("'oXzCS=+!", "*O4e=7", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) fixedMillisecond0, (Number) integer0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond();
      assertNotNull(fixedMillisecond1);
      assertEquals(1392409281320L, fixedMillisecond1.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond1.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond1.getMiddleMillisecond());
      assertTrue(fixedMillisecond1.equals((Object)fixedMillisecond0));
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertEquals(400.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4\\.ifR`";
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "4\\.ifR`", (double) 0, 0);
      assertNotNull(pieDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) "4\\.ifR`", (Number) integer0);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "4\\.ifR`", 5313.83460507, 45);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double[] doubleArray0 = new double[4];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D1);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, polynomialFunction2D1.getOrder());
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      
      double[] doubleArray1 = polynomialFunction2D1.getCoefficients();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(polynomialFunction2D1, polynomialFunction2D0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(3, polynomialFunction2D1.getOrder());
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultXYDataset0);
      assertNull(number0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultXYDataset0);
      assertNull(range0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      double[][] doubleArray2 = new double[4][3];
      doubleArray2[0] = doubleArray0;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[1] = (-1667.320138);
      doubleArray3[2] = (double) (-400);
      doubleArray3[3] = (double) (-400);
      doubleArray3[4] = (double) (-400);
      doubleArray3[5] = (double) (-400);
      doubleArray3[6] = (double) (-400);
      doubleArray2[1] = doubleArray3;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray2);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray2.length);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(4, doubleArray2.length);
      assertEquals((-3667.320138), range1.getLowerBound(), 0.01);
      assertEquals((-1833.660069), range1.getCentralValue(), 0.01);
      assertEquals(3667.320138, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      
      Range range2 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertEquals(4, doubleArray2.length);
      assertEquals((-1667.320138), range2.getLowerBound(), 0.01);
      assertEquals(1667.320138, range2.getLength(), 0.01);
      assertEquals((-833.660069), range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertFalse(range2.equals((Object)range1));
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYDataset0);
      assertNull(range3);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range4 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYDataset0, (List) linkedList0, false);
      assertNull(range4);
      assertEquals(0, linkedList0.size());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range5 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYDataset0, false);
      assertNull(range5);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      
      Second second1 = (Second)second0.previous();
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertNotNull(second1);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(20, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertFalse(second1.equals((Object)second0));
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Minute minute0 = second0.getMinute();
      assertNotSame(second0, second1);
      assertNotNull(minute0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertFalse(second0.equals((Object)second1));
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      
      Stack<Long> stack0 = new Stack<Long>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(1.0863380394888518, 2760.0);
      assertNotNull(powerFunction2D0);
      assertEquals(2760.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1.0863380394888518, powerFunction2D0.getA(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 71.44361917, 2760.0, 3, second1);
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(20, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(2760.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1.0863380394888518, powerFunction2D0.getA(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 0, (-2238));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-2238), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      String string0 = "Duplicate items in 'columnKeys'.";
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2083.4794167;
      doubleArray2[1] = (-1443.0);
      doubleArray2[2] = (-452.43354);
      doubleArray2[3] = 2424.077235520088;
      doubleArray2[4] = 2033.5;
      doubleArray2[5] = 441.3060243876001;
      doubleArray2[6] = (-2.147483640837401E9);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Duplicate items in 'columnKeys'.", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (Comparable) "Duplicate items in 'columnKeys'.");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4\\.ifR`";
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "4\\.ifR`", (double) 0, 0);
      assertNotNull(pieDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      TimeSeries timeSeries0 = new TimeSeries("4\\.ifR`");
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.5;
      doubleArray1[1] = (-2862.0);
      doubleArray1[2] = (double) (-407);
      doubleArray1[3] = (double) (-407);
      doubleArray0[1] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Comparable<Dialog>[] comparableArray0 = (Comparable<Dialog>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[1][1];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.8;
      doubleArray0[1] = 0.8;
      doubleArray0[2] = 0.8;
      doubleArray0[3] = 0.8;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertArrayEquals(new double[] {0.8, 0.8, 0.8, 0.8}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray0);
      assertArrayEquals(new double[] {0.8, 0.8, 0.8, 0.8}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D1);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, polynomialFunction2D1.getOrder());
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      
      double[] doubleArray1 = polynomialFunction2D1.getCoefficients();
      assertArrayEquals(new double[] {0.8, 0.8, 0.8, 0.8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.8, 0.8, 0.8, 0.8}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(polynomialFunction2D1, polynomialFunction2D0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(3, polynomialFunction2D1.getOrder());
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[][] doubleArray2 = new double[5][4];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray2, doubleArray2);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup("");
      assertNotNull(datasetGroup0);
      assertEquals("", datasetGroup0.getID());
      
      defaultKeyedValues2DDataset0.addValue((-1.0), (Comparable) "", (Comparable) "");
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(boolean0);
      
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(number0);
      assertEquals((-1.0), number0);
      
      double[][] doubleArray0 = new double[0][3];
      Hour hour0 = new Hour();
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      int int0 = defaultKeyedValues2DDataset0.getColumnIndex(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals((-1), int0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(defaultKeyedValues2DDataset0);
      assertNotNull(number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals((-1.0), number1);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      Month month1 = new Month();
      assertNotNull(month1);
      assertEquals(2014, month1.getYearValue());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(24170L, month1.getSerialIndex());
      assertEquals(2, month1.getMonth());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertTrue(month1.equals((Object)month0));
      
      Month month2 = (Month)month0.next();
      assertNotSame(month0, month2);
      assertNotSame(month0, month1);
      assertNotSame(month2, month0);
      assertNotSame(month2, month1);
      assertNotNull(month2);
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(2, month0.getMonth());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(24171L, month2.getSerialIndex());
      assertEquals(3, month2.getMonth());
      assertEquals(2014, month2.getYearValue());
      assertEquals(1392409281320L, month2.getFirstMillisecond());
      assertEquals(1392409281320L, month2.getLastMillisecond());
      assertTrue(month0.equals((Object)month1));
      assertFalse(month2.equals((Object)month0));
      assertFalse(month2.equals((Object)month1));
      
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) month1, (-1153.344311005));
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(month1, month0);
      assertNotSame(month1, month2);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotNull(defaultPieDataset2);
      assertEquals(2014, month1.getYearValue());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(24170L, month1.getSerialIndex());
      assertEquals(2, month1.getMonth());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(month1.equals((Object)month2));
      assertTrue(month1.equals((Object)month0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-1868);
      doubleArray1[1] = (-1153.344311005);
      doubleArray1[2] = (double) (-1868);
      doubleArray1[3] = (double) (-1868);
      doubleArray1[4] = (-1153.344311005);
      doubleArray1[5] = (double) (-1868);
      doubleArray1[6] = (-1153.344311005);
      doubleArray1[7] = (-1153.344311005);
      doubleArray1[8] = (double) (-1868);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals((-1868.0), range0.getLowerBound(), 0.01);
      assertEquals((-1153.344311005), range0.getUpperBound(), 0.01);
      assertEquals(714.655688995, range0.getLength(), 0.01);
      assertEquals((-1510.6721555025001), range0.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Vector<Long> vector0 = new Vector<Long>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("]!)J56QZc~:shh`");
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      
      TimePeriodValues timePeriodValues1 = new TimePeriodValues("]!)J56QZc~:shh`");
      assertNotNull(timePeriodValues1);
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) xYSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(Double.NaN, number0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertNull(number1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-412.123719);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 441.3060243876;
      doubleArray0[3] = 369.93;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertArrayEquals(new double[] {(-412.123719), (-1.0), 441.3060243876, 369.93}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-1.0), 441.3060243876, 46, 369.93);
      assertArrayEquals(new double[] {(-412.123719), (-1.0), 441.3060243876, 369.93}, doubleArray0, 0.01);
      assertNotNull(xYSeriesCollection0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertArrayEquals(new double[] {(-412.123719), (-1.0), 441.3060243876, 369.93}, doubleArray0, 0.01);
      assertNotNull(range0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1.5939750384411678E10, range0.getCentralValue(), 0.01);
      assertEquals((-339.7476946124), range0.getLowerBound(), 0.01);
      assertEquals(3.1879501108571053E10, range0.getUpperBound(), 0.01);
      assertEquals(3.187950144831875E10, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, false);
      assertArrayEquals(new double[] {(-412.123719), (-1.0), 441.3060243876, 369.93}, doubleArray0, 0.01);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(442.3060243876001, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(441.3060243876001, range1.getUpperBound(), 0.01);
      assertEquals(220.15301219380004, range1.getCentralValue(), 0.01);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4\\.ifR`";
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "4\\.ifR`", (double) 0, 0);
      assertNotNull(pieDataset0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset1);
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertTrue(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
      assertTrue(boolean0);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      TimeSeries timeSeries0 = new TimeSeries("4\\.ifR`");
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      // Undeclared exception!
      try { 
        TimeZone.getTimeZone((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("]!)J56QZc~:shh`", 12, 139);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(12, matrixSeries0.getRowCount());
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1668, matrixSeries0.getItemCount());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 139;
      doubleArray0[1] = 1260.4949505148;
      doubleArray0[2] = (double) 139;
      doubleArray0[3] = (-2.147483648E9);
      doubleArray0[4] = (double) 12;
      doubleArray0[5] = (double) 139;
      doubleArray0[6] = (double) 12;
      doubleArray0[7] = (double) 139;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertArrayEquals(new double[] {139.0, 1260.4949505148, 139.0, (-2.147483648E9), 12.0, 139.0, 12.0, 139.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, polynomialFunction2D0.getOrder());
      
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray0);
      assertArrayEquals(new double[] {139.0, 1260.4949505148, 139.0, (-2.147483648E9), 12.0, 139.0, 12.0, 139.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D1);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, polynomialFunction2D1.getOrder());
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      
      double[] doubleArray1 = polynomialFunction2D1.getCoefficients();
      assertArrayEquals(new double[] {139.0, 1260.4949505148, 139.0, (-2.147483648E9), 12.0, 139.0, 12.0, 139.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {139.0, 1260.4949505148, 139.0, (-2.147483648E9), 12.0, 139.0, 12.0, 139.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(polynomialFunction2D1, polynomialFunction2D0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(7, polynomialFunction2D1.getOrder());
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D1, 12.0, 139.0, 3, 139.0);
      assertArrayEquals(new double[] {139.0, 1260.4949505148, 139.0, (-2.147483648E9), 12.0, 139.0, 12.0, 139.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(polynomialFunction2D1, polynomialFunction2D0);
      assertNotNull(xYSeries0);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, polynomialFunction2D1.getOrder());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(3, xYSeries0.getItemCount());
      assertEquals(139.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(1.33680111949270112E17, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-3.7058004188630605E12), xYSeries0.getMinY(), 0.01);
      assertEquals(12.0, xYSeries0.getMinX(), 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Short short0 = Short.valueOf((short)2343);
      assertNotNull(short0);
      assertEquals((short)2343, (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains((short)2343));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.DefaultTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4\\.ifR`";
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "4\\.ifR`", (double) 0, 0);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "4\\.ifR`", (-1868.0), 1246);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "4\\.ifR`", (KeyedValues) pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(categoryDataset0);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertFalse(boolean0);
      
      TimeTableXYDataset timeTableXYDataset0 = null;
      try {
        timeTableXYDataset0 = new TimeTableXYDataset((TimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
         verifyException("org.jfree.data.time.TimeTableXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, true);
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      int int0 = categoryTableXYDataset0.getItemCount(745);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        categoryTableXYDataset0.getEndX(558, 558);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 558, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DatasetGroup datasetGroup0 = new DatasetGroup("");
      assertNotNull(datasetGroup0);
      assertEquals("", datasetGroup0.getID());
      
      defaultKeyedValues2DDataset0.addValue((-1.0), (Comparable) "", (Comparable) "");
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(boolean0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) vectorSeriesCollection0);
      assertNull(number0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0);
      assertNull(range0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "Hq#", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(1, doubleArray0.length);
      assertEquals(4.0, range1.getLength(), 0.01);
      assertEquals((-2.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals((-4.0), range1.getLowerBound(), 0.01);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(number1);
      assertEquals((-1.0), number1);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      
      Month month1 = (Month)month0.next();
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertNotNull(month1);
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24171L, month1.getSerialIndex());
      assertEquals(3, month1.getMonth());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(2014, month1.getYearValue());
      assertFalse(month1.equals((Object)month0));
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) month0, (double) (-1868));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(month0, month1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertFalse(month0.equals((Object)month1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      double[][] doubleArray0 = new double[7][1];
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(boolean0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset1, (Comparable) month1, (double) (-1868));
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertNotNull(defaultPieDataset2);
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24171L, month1.getSerialIndex());
      assertEquals(3, month1.getMonth());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(2014, month1.getYearValue());
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(month0.equals((Object)month1));
      assertFalse(month1.equals((Object)month0));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("The number of row keys does not match the number of rows in the data array.");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Vector<Long> vector0 = new Vector<Long>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      long long0 = (-9223372036854775785L);
      Long long1 = new Long((-9223372036854775785L));
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      assertEquals((-9223372036854775785L), (long)long1);
      
      Long long2 = Long.getLong("The number of row keys does not match the number of rows in the data array.", long1);
      assertNotNull(long2);
      assertTrue(long1.equals((Object)long0));
      assertTrue(long2.equals((Object)long0));
      assertEquals((-9223372036854775785L), (long)long2);
      
      boolean boolean0 = vector0.add(long1);
      assertTrue(vector0.contains(long2));
      assertFalse(vector0.isEmpty());
      assertEquals("[-9223372036854775785]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(long1.equals((Object)long0));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) vector0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      int int0 = timePeriodValuesCollection0.indexOf("]!)J56QZc~:shh`");
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals((-1), int0);
      
      double[][] doubleArray0 = new double[1][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("]!)J56QZc~:shh`", "]!)J56QZc~:shh`", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      int int1 = defaultCategoryDataset0.getColumnIndex("]!)J56QZc~:shh`");
      assertEquals(1, doubleArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      defaultCategoryDataset0.clearSelection();
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      Number[][] numberArray0 = new Number[1][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset1);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getSeriesCount());
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset1, true);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNull(range1);
      assertEquals(1, numberArray0.length);
      assertEquals(1, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getSeriesCount());
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-4251));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, false);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      LinkedHashSet<Window.Type> linkedHashSet0 = new LinkedHashSet<Window.Type>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Window.Type window_Type0 = Window.Type.POPUP;
      boolean boolean0 = linkedHashSet0.add(window_Type0);
      assertTrue(linkedHashSet0.contains(window_Type0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      Vector<Window.Type> vector0 = new Stack<Window.Type>();
      assertFalse(vector0.contains(window_Type0));
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      Range range2 = categoryTableXYDataset0.getDomainBounds(false);
      assertNull(range2);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      System.setCurrentTimeMillis(1173L);
      Number number0 = DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      assertNotNull(number0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(Double.NaN, number0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) window_Type0);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = null;
      try {
        normalDistributionFunction2D0 = new NormalDistributionFunction2D(1.0, (-922.91942));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'std' > 0.
         //
         verifyException("org.jfree.data.function.NormalDistributionFunction2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      
      Month month1 = (Month)month0.next();
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertNotNull(month1);
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(2014, month1.getYearValue());
      assertEquals(3, month1.getMonth());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(24171L, month1.getSerialIndex());
      assertFalse(month1.equals((Object)month0));
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) month0, (double) (-1868));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(month0, month1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertFalse(month0.equals((Object)month1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number[][] numberArray0 = new Number[2][3];
      Number[] numberArray1 = new Number[28];
      numberArray1[0] = null;
      numberArray1[1] = number0;
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      numberArray1[2] = (Number) bigInteger0;
      numberArray1[3] = number0;
      numberArray1[4] = null;
      numberArray1[5] = null;
      numberArray1[6] = null;
      Short short0 = new Short((short) (-819));
      assertNotNull(short0);
      assertEquals((short) (-819), (short)short0);
      
      numberArray1[7] = (Number) short0;
      numberArray1[8] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = null;
      numberArray2[1] = number0;
      numberArray1[7] = number0;
      numberArray2[3] = null;
      numberArray2[4] = (Number) short0;
      numberArray2[5] = (Number) short0;
      numberArray2[6] = null;
      numberArray2[7] = (Number) short0;
      numberArray0[1] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, numberArray0.length);
      assertEquals(28, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(28, defaultIntervalCategoryDataset0.getColumnCount());
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(double0);
      assertEquals(2, numberArray0.length);
      assertEquals(28, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(28, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotEquals((double)double0, (double)number0, 0.01);
      assertEquals(20.0, (double)double0, 0.01);
      
      Number number2 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number2);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, arrayList0, true);
      assertNull(range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      assertFalse(vector0.contains(defaultTableXYDataset0));
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      boolean boolean0 = vector0.add(defaultTableXYDataset0);
      assertTrue(vector0.contains(defaultTableXYDataset0));
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, true);
      assertNull(range0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Vector<Long> vector0 = new Vector<Long>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      assertNotNull(timePeriodValues0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timePeriodValuesCollection0);
      assertNull(number0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(taskSeriesCollection0);
      assertNull(number1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4\\.ifR`";
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "4\\.ifR`", (double) 0, 0);
      assertNotNull(pieDataset0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) "4\\.ifR`", (Number) integer0);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "4\\.ifR`", 5313.83460507, 45);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
      assertNotNull(number0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(Double.NaN, number0);
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset(pieDataset1, (Comparable) "4\\.ifR`", (double) 45, 0);
      assertNotSame(pieDataset1, pieDataset2);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset2, pieDataset1);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotNull(pieDataset2);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertFalse(pieDataset2.equals((Object)pieDataset1));
      assertFalse(pieDataset2.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Vector<DefaultTableXYDataset> vector0 = new Stack<DefaultTableXYDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      boolean boolean0 = vector0.add((DefaultTableXYDataset) null);
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4\\.ifR`";
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "4\\.ifR`", (double) 0, 0);
      assertNotNull(pieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "4\\.ifR`", (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createPieDatasetForRow(categoryDataset0, 0);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, false);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      double double0 = DatasetUtilities.calculateStackTotal(categoryTableXYDataset0, (-604));
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-604), (-604));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals((-604), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-604), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Quarter quarter0 = null;
      try {
        quarter0 = new Quarter((-604), (-604));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Quarter outside valid range.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      double double0 = 0.0;
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      
      Month month1 = (Month)month0.next();
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertNotNull(month1);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(3, month1.getMonth());
      assertEquals(24171L, month1.getSerialIndex());
      assertEquals(2014, month1.getYearValue());
      assertFalse(month1.equals((Object)month0));
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) month1, 0.0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(3, month1.getMonth());
      assertEquals(24171L, month1.getSerialIndex());
      assertEquals(2014, month1.getYearValue());
      assertFalse(month0.equals((Object)month1));
      assertFalse(month1.equals((Object)month0));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      boolean boolean0 = true;
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertEquals(0.0, double0, 0.01);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("]!)J56QZc~:shh`", 12, 139);
      assertNotNull(matrixSeries0);
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertEquals(1668, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(12, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertEquals(1668, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(12, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(defaultBoxAndWhiskerCategoryDataset0);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range2);
      assertEquals(139, matrixSeries0.getColumnsCount());
      assertEquals(1668, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(12, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(11.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(5.5, range2.getCentralValue(), 0.01);
      assertEquals(11.0, range2.getUpperBound(), 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      double double1 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 7);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = new Range(0.0, 0.0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[2] = (-0.18505723433318055);
      doubleArray0[3] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-0.18505723433318055), 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertArrayEquals(new double[] {0.0, 0.0, (-0.18505723433318055), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-0.18505723433318055), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-428), 0.0, 1072, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, (-0.18505723433318055), 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(xYSeries0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals((-428.0), xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals((-33899.52441408935), xYSeries0.getMinY(), 0.01);
      assertEquals(1072, xYSeries0.getItemCount());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      Number[][] numberArray0 = new Number[8][5];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) (-0.18505723433318055);
      numberArray1[1] = (Number) 0.0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) (-0.18505723433318055);
      numberArray2[1] = (Number) (-0.18505723433318055);
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[3];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) (-0.18505723433318055);
      numberArray3[1] = (Number) (-0.18505723433318055);
      numberArray3[2] = (Number) 0.0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[2];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      numberArray4[0] = (Number) (-0.18505723433318055);
      numberArray4[1] = (Number) 0.0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[0];
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray3));
      
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[7];
      assertFalse(numberArray6.equals((Object)numberArray2));
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray1));
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray4));
      
      numberArray6[0] = (Number) 0.0;
      numberArray6[1] = (Number) 0.0;
      numberArray6[2] = (Number) 0.0;
      numberArray6[3] = (Number) 0.0;
      numberArray6[4] = (Number) (-0.18505723433318055);
      numberArray6[5] = (Number) 0.0;
      numberArray6[6] = (Number) 0.0;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[2];
      assertFalse(numberArray7.equals((Object)numberArray4));
      assertFalse(numberArray7.equals((Object)numberArray5));
      assertFalse(numberArray7.equals((Object)numberArray2));
      assertFalse(numberArray7.equals((Object)numberArray3));
      assertFalse(numberArray7.equals((Object)numberArray6));
      assertFalse(numberArray7.equals((Object)numberArray1));
      
      numberArray7[0] = (Number) 0.0;
      numberArray7[1] = (Number) 0.0;
      numberArray0[6] = numberArray7;
      Number[] numberArray8 = new Number[1];
      assertFalse(numberArray8.equals((Object)numberArray6));
      assertFalse(numberArray8.equals((Object)numberArray2));
      assertFalse(numberArray8.equals((Object)numberArray3));
      assertFalse(numberArray8.equals((Object)numberArray1));
      assertFalse(numberArray8.equals((Object)numberArray4));
      assertFalse(numberArray8.equals((Object)numberArray7));
      assertFalse(numberArray8.equals((Object)numberArray5));
      
      numberArray8[0] = (Number) 0.0;
      numberArray0[7] = numberArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("k'WO~i", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(8, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertEquals(0.0, double0, 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "]!)J56QZc~:shh`", (double) 12, 139);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) fixedMillisecond0, (double) 139, 1194);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotNull(pieDataset1);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) "]!)J56QZc~:shh`", (KeyedValues) defaultKeyedValuesDataset0);
      assertNotNull(categoryDataset0);
      
      Vector<CategoryTableXYDataset> vector0 = new Vector<CategoryTableXYDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) vector0, true);
      assertNull(range1);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) jDBCXYDataset0, true);
      assertNull(range2);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      
      Month month1 = (Month)month0.next();
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertNotNull(month1);
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(24171L, month1.getSerialIndex());
      assertEquals(2014, month1.getYearValue());
      assertEquals(3, month1.getMonth());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertFalse(month1.equals((Object)month0));
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) month0, (double) (-1868));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(month0, month1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertFalse(month0.equals((Object)month1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      Vector<Byte> vector0 = new Vector<Byte>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number[][] numberArray0 = new Number[2][3];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = null;
      numberArray1[1] = number0;
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      numberArray1[2] = (Number) bigInteger0;
      numberArray1[3] = number0;
      numberArray1[4] = null;
      numberArray1[5] = null;
      numberArray1[6] = null;
      Short short0 = new Short((short) (-819));
      assertNotNull(short0);
      assertEquals((short) (-819), (short)short0);
      
      numberArray1[7] = (Number) short0;
      numberArray1[8] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = null;
      numberArray2[1] = number0;
      numberArray2[2] = number0;
      numberArray2[3] = null;
      numberArray2[4] = (Number) short0;
      numberArray2[5] = (Number) short0;
      numberArray2[6] = null;
      numberArray2[7] = (Number) short0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, numberArray0.length);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = new Range(0.0, 0.0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(defaultXYDataset0, 0.0);
      assertNotNull(xYBarDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      
      boolean boolean0 = linkedList0.add(xYBarDataset0);
      assertTrue(linkedList0.contains(xYBarDataset0));
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultXYDataset0, (List) linkedList0, range0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYBarDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      short short0 = (short) (-1);
      Short short1 = new Short((short) (-1));
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-1), (short)short1);
      
      boolean boolean0 = arrayList0.add(short1);
      assertTrue(arrayList0.contains(short1));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(short1.equals((Object)short0));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, arrayList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (-1).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, false);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Short short0 = new Short((short) (-1339));
      assertNotNull(short0);
      assertEquals((short) (-1339), (short)short0);
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertFalse(arrayList0.contains((short) (-1339)));
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short1 = new Short((short)37);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)37, (short)short1);
      
      Short short2 = new Short((short)2814);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)2814, (short)short2);
      
      boolean boolean0 = arrayList0.add(short2);
      assertTrue(arrayList0.contains((short)2814));
      assertFalse(arrayList0.contains((short) (-1339)));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertTrue(boolean0);
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(categoryTableXYDataset0, arrayList0, false);
      assertTrue(arrayList0.contains((short)2814));
      assertFalse(arrayList0.contains((short) (-1339)));
      assertNull(range1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) arrayList0, false);
      assertTrue(arrayList0.contains((short)2814));
      assertFalse(arrayList0.contains((short) (-1339)));
      assertNull(range2);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      boolean boolean0 = arrayList0.add(short0);
      assertTrue(arrayList0.contains(short0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, arrayList0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'series' argument is out of bounds (-1).
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Duplicate items in 'columnKeys'.";
      Number[][] numberArray0 = new Number[0][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      assertFalse(vector0.contains(defaultTableXYDataset0));
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      boolean boolean0 = vector0.add((DefaultTableXYDataset) null);
      assertFalse(vector0.contains(defaultTableXYDataset0));
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(stringArray0, stringArray0, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset1);
      assertEquals(1, stringArray0.length);
      assertEquals(0, numberArray0.length);
      assertEquals(0, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getRowCount());
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(xIntervalSeriesCollection0);
      assertNull(number0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4\\.ifR`";
      int int0 = 0;
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(400, (int)integer0);
      
      int int1 = 45;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
      assertNotNull(number0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(Double.NaN, number0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertFalse(linkedList0.contains(int0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, linkedList0, true);
      assertFalse(linkedList0.contains(int0));
      assertNull(range0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, linkedList0.size());
      
      String string0 = "";
      Number[][] numberArray0 = new Number[9][2];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = number0;
      numberArray1[1] = number0;
      numberArray1[2] = number0;
      numberArray1[3] = number0;
      numberArray1[4] = number0;
      numberArray1[5] = (Number) integer0;
      numberArray1[6] = number0;
      numberArray1[7] = number0;
      numberArray1[8] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = number0;
      numberArray2[2] = number0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[4];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) integer0;
      numberArray3[1] = (Number) integer0;
      Long long0 = new Long(2264L);
      assertNotNull(long0);
      assertEquals(2264L, (long)long0);
      
      numberArray3[2] = (Number) long0;
      numberArray3[3] = (Number) integer0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[2];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      
      long long1 = 743L;
      Long long2 = new Long(743L);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(743L, (long)long2);
      
      numberArray4[0] = (Number) long2;
      numberArray4[1] = (Number) integer0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[1];
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray2));
      
      numberArray5[0] = (Number) long2;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[1];
      assertFalse(numberArray6.equals((Object)numberArray1));
      assertFalse(numberArray6.equals((Object)numberArray4));
      assertFalse(numberArray6.equals((Object)numberArray3));
      assertFalse(numberArray6.equals((Object)numberArray5));
      assertFalse(numberArray6.equals((Object)numberArray2));
      
      numberArray6[0] = (Number) long2;
      numberArray0[5] = numberArray6;
      Number[] numberArray7 = new Number[9];
      assertFalse(numberArray7.equals((Object)numberArray4));
      assertFalse(numberArray7.equals((Object)numberArray3));
      assertFalse(numberArray7.equals((Object)numberArray5));
      assertFalse(numberArray7.equals((Object)numberArray2));
      assertFalse(numberArray7.equals((Object)numberArray6));
      assertFalse(numberArray7.equals((Object)numberArray1));
      
      numberArray7[0] = (Number) integer0;
      numberArray7[1] = (Number) long2;
      numberArray7[2] = number0;
      numberArray7[3] = (Number) integer0;
      numberArray7[4] = number0;
      numberArray7[5] = (Number) long0;
      numberArray7[6] = (Number) long0;
      Object[][][] objectArray0 = new Object[0][3][4];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertNotNull(defaultWindDataset0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        defaultWindDataset0.getWindDirection(45, 45);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 45, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, arrayList0, true);
      assertNull(range0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) jDBCPieDataset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertEquals(0.0, double0, 0.01);
      
      MatrixSeries matrixSeries0 = new MatrixSeries("]!)J56QZc~:shh`", 12, 12);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(144, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(12, matrixSeries0.getRowCount());
      assertEquals(12, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(144, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(12, matrixSeries0.getRowCount());
      assertEquals(12, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(144, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(12, matrixSeries0.getRowCount());
      assertEquals(12, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(11.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(5.5, range0.getCentralValue(), 0.01);
      assertEquals(11.0, range0.getUpperBound(), 0.01);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      double double1 = DatasetUtilities.calculateStackTotal(defaultTableXYDataset0, 7);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset1);
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset1);
      assertNotSame(defaultKeyedValuesDataset1, defaultKeyedValuesDataset0);
      assertTrue(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4\\.ifR`";
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      int int0 = 0;
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) "4\\.ifR`", (double) 0, 0);
      assertNotNull(pieDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-1), 2);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(2, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1), slidingCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertTrue(boolean0);
      
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
      assertNotNull(number1);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(Double.NaN, number1);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultTableXYDataset0);
      assertNull(range0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      double[][] doubleArray0 = new double[1][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("]!)J56QZc~:shh`", "]!)J56QZc~:shh`", doubleArray0);
      defaultCategoryDataset0.clearSelection();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-4022), 1244);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1744.5), (-1744.5));
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(powerFunction2D0, (-1744.5), (-1674.742212), 1244, "]!)J56QZc~:shh`");
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetGroup datasetGroup0 = new DatasetGroup("");
      defaultKeyedValues2DDataset0.addValue((-1.0), (Comparable) "", (Comparable) "");
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(boolean0);
      
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertEquals((-1.0), number0);
      assertNotNull(number0);
      
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList0, false);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      double[][] doubleArray0 = new double[1][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("]!)J56QZc~:shh`", "]!)J56QZc~:shh`", doubleArray0);
      defaultCategoryDataset0.clearSelection();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("]!)J56QZc~:shh`");
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(2, 2);
      TimePeriodValuesCollection timePeriodValuesCollection1 = new TimePeriodValuesCollection(timePeriodValues1);
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection1);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      Month month0 = new Month();
      month0.next();
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) month0, (double) (-1868));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1868);
      doubleArray0[1] = (double) (-1868);
      doubleArray0[2] = (double) (-1868);
      doubleArray0[3] = (double) (-1868);
      doubleArray0[4] = (double) (-1868);
      DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      boolean boolean0 = false;
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, false);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      // Undeclared exception!
      try { 
        Month.parseMonth("*k}@V/p7g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the month.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4\\.ifR`";
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertEquals(0.0, double0, 0.01);
      
      MatrixSeries matrixSeries0 = new MatrixSeries(")H|.4p8bR_VBq0;", 12, 12);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, true);
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(11.0, range0.getLength(), 0.01);
      assertEquals(5.5, range0.getCentralValue(), 0.01);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(5.5, range2.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      String string0 = "";
      DatasetUtilities.createCategoryDataset("84h", "The number of row keys does not match the number of rows in the data array.", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("The number of row keys does not match the number of rows in the data array.");
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Vector<Long> vector0 = new Vector<Long>();
      Long long0 = new Long(9223372036854775807L);
      Long long1 = Long.getLong("", long0);
      vector0.add(long1);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Second second0 = new Second();
      RegularTimePeriod regularTimePeriod0 = second0.previous();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) second0, (double) 59, 59);
      double[][] doubleArray0 = new double[0][3];
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.clearSelection();
      Comparable<Long>[] comparableArray0 = (Comparable<Long>[]) Array.newInstance(Comparable.class, 6);
      comparableArray0[0] = (Comparable<Long>) regularTimePeriod0;
      comparableArray0[1] = (Comparable<Long>) second0;
      comparableArray0[2] = (Comparable<Long>) second0;
      comparableArray0[3] = (Comparable<Long>) regularTimePeriod0;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, (Number) 59);
      comparableArray0[4] = (Comparable<Long>) timeSeriesDataItem0;
      comparableArray0[5] = (Comparable<Long>) regularTimePeriod0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      defaultPieDataset0.setSelectionState(jDBCPieDataset0);
      Month month0 = new Month();
      month0.getEnd();
      month0.next();
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) month0, (double) (-1868));
      double[][] doubleArray0 = new double[7][1];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-1868);
      doubleArray1[1] = (double) (-1868);
      doubleArray1[2] = (double) (-1868);
      doubleArray1[3] = (double) (-1868);
      doubleArray1[4] = (double) (-1868);
      doubleArray1[5] = (double) (-1868);
      doubleArray1[6] = (double) (-1868);
      doubleArray1[7] = (double) (-1868);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) (-1868);
      doubleArray2[1] = (double) (-1868);
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) vector0, (Range) null, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      Month month0 = new Month();
      month0.next();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) month0, (double) (-1868));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      
      double[][] doubleArray0 = new double[7][1];
      Vector<Byte> vector0 = new Vector<Byte>();
      Integer integer0 = new Integer((-1868));
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      
      defaultIntervalCategoryDataset0.hasListener(timeSeriesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) vector0, range0, true);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4\\.ifR`";
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      MatrixSeries matrixSeries0 = new MatrixSeries(")H|.4p8bR_VBq0;", 12, 12);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(2422.416520491766, 0.0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-1.0), 81.8, (-5711), "4\\.ifR`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      Stack<Float> stack0 = new Stack<Float>();
      Float float0 = new Float(Double.NEGATIVE_INFINITY);
      Float float1 = new Float(0.0F);
      stack0.add(float1);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultWindDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) stack0, true);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      String string0 = "W+Y[ueaM-3~";
      // Undeclared exception!
      try { 
        Month.parseMonth("ull 'xRang' argument");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the month.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2422.416520491766;
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 6, 2);
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      vector0.add((DefaultTableXYDataset) null);
      DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector0, true);
      DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, true);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) 2422.416520491766);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("8MXV3;:dR7`&>V#", "H*-wzTH~E~pT?RT", "8MXV3;:dR7`&>V#");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      double[][] doubleArray0 = new double[1][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("]!)J56QZc~:shh`", "]!)J56QZc~:shh`", doubleArray0);
      defaultCategoryDataset0.clearSelection();
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertFalse(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-4022), 1244);
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("=[0]m!P", "]!)J56QZc~:shh`", numberArray0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset1);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, false);
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.3539292599317319;
      doubleArray1[1] = 2422.416520491766;
      doubleArray1[2] = 0.3539292599317319;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 0.5;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("]!)J56QZc~:shh`", "]!)J56QZc~:shh`", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.5);
      defaultCategoryDataset0.clearSelection();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumRangeValue((XYDataset) timePeriodValuesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0);
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1571.2332624642886;
      doubleArray1[2] = 0.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("84h", "", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("84h");
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.clearSelection();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      DatasetUtilities.isEmptyOrNull(categoryDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.findMaximumRangeValue((XYDataset) vectorSeriesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      Stack<Float> stack0 = new Stack<Float>();
      double double0 = Double.NEGATIVE_INFINITY;
      Float float0 = new Float(Double.NEGATIVE_INFINITY);
      stack0.add(float0);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultWindDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      // Undeclared exception!
      try { 
        Month.parseMonth("W+Y[ueaM-3~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the month.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      XYDataset xYDataset0 = null;
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1406.136619);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1406.136619);
      doubleArray0[3] = 0.0;
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.POSITIVE_INFINITY, 1304.2754296138721);
      XYSeries xYSeries0 = new XYSeries(0.0, true);
      double double0 = Double.NEGATIVE_INFINITY;
      XYDataItem xYDataItem0 = new XYDataItem(0.0, Double.NEGATIVE_INFINITY);
      xYSeries0.addOrUpdate(xYDataItem0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 1304.2754296138721, 1.0, 1399, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1406.136619);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (-1406.136619);
      doubleArray1[3] = 0.0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 695);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(range0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Second second0 = new Second();
      RegularTimePeriod regularTimePeriod0 = second0.previous();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) second0, (double) 59, 59);
      double[][] doubleArray0 = new double[0][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Vector<Long> vector0 = new Vector<Long>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, true);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(59, 59);
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-2.147483648E9), 1394.20961, 59, regularTimePeriod0);
      assertFalse(xYSeriesCollection0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetGroup datasetGroup0 = new DatasetGroup("");
      defaultKeyedValues2DDataset0.addValue((-1.0), (Comparable) "", (Comparable) "");
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(boolean0);
      
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(number0);
      assertEquals((-1.0), number0);
      
      defaultTableXYDataset0.validateObject();
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      DatasetUtilities.findMaximumDomainValue(defaultTableXYDataset0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1571.2332624642886;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-5.789785911157748);
      doubleArray0[4] = 1571.2332624642886;
      doubleArray0[6] = 2083.4794167;
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("<*)k", "lSCD_j_gGGP{<", doubleArray1);
      Vector<Byte> vector0 = new Vector<Byte>();
      DatasetUtilities.findRangeBounds(categoryDataset0, (List) vector0, true);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals(2083.4794167, range0.getUpperBound(), 0.01);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, true);
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals((-5.789785911157748), number0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetGroup datasetGroup0 = new DatasetGroup("ull 'xRang' argument");
      defaultKeyedValues2DDataset0.setGroup(datasetGroup0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) "ull 'xRang' argument");
      DatasetUtilities.createCategoryDataset((Comparable) "ull 'xRang' argument", (KeyedValues) pieDataset0);
      Object object0 = new Object();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Number number1 = DatasetUtilities.findMaximumDomainValue(categoryTableXYDataset0);
      assertTrue(number1.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Duplicate items in 'columnKeys'.";
      Number[][] numberArray0 = new Number[0][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      DatasetUtilities.createCategoryDataset("Un=WE'Y(Y`i", "K+yf4", numberArray0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2862);
      doubleArray0[1] = (double) 1224;
      doubleArray0[2] = (double) (-2862);
      doubleArray0[3] = (double) (-2862);
      doubleArray0[4] = (double) (-2862);
      doubleArray0[5] = (double) 1224;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2862.0), 5313.83460507, (-2862), "Duplicate items in 'columnKeys'.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetGroup datasetGroup0 = new DatasetGroup("");
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      defaultKeyedValues2DDataset0.addValue((-1.0), (Comparable) "", (Comparable) integer0);
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<Integer>) integer0;
      double[][] doubleArray0 = new double[0][7];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2424.077235520088;
      doubleArray0[2] = 2424.077235520088;
      doubleArray0[3] = 2424.077235520088;
      doubleArray0[4] = 0.5;
      doubleArray0[5] = 0.0;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2146819071, 1224);
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      vector0.add((DefaultTableXYDataset) null);
      DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) vector0, false);
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Duplicate items in 'columnKeys'.";
      Number[][] numberArray0 = new Number[0][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      DatasetUtilities.createCategoryDataset("Un=WE'Y(Y`i", "K+yf4", numberArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("Un=WE'Y(Y`i");
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      int int0 = 4781;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 4781, (-2418));
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      vector0.clear();
      vector0.add(defaultTableXYDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultTableXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      Month month0 = new Month();
      Month month1 = new Month();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) month0, (double) (-1868));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      
      double[][] doubleArray0 = new double[7][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("v-<5HvV<oc&(J", "v-<5HvV<oc&(J", doubleArray0);
      Vector<Byte> vector0 = new Vector<Byte>();
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      Month month0 = new Month();
      month0.next();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) month0, (double) (-1868));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      
      double[][] doubleArray0 = new double[7][1];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-1868);
      doubleArray1[1] = (double) (-1868);
      doubleArray1[2] = (double) (-1868);
      doubleArray1[3] = (double) (-1868);
      doubleArray1[4] = (double) (-1868);
      doubleArray1[5] = (double) (-1868);
      doubleArray1[6] = (double) (-1868);
      doubleArray1[7] = (double) (-1868);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) (-1868);
      doubleArray2[1] = (double) (-1868);
      doubleArray2[2] = (double) (-1868);
      doubleArray2[3] = (double) (-1868);
      doubleArray2[4] = (double) (-1868);
      doubleArray2[5] = (double) (-1868);
      doubleArray2[6] = (double) (-1868);
      doubleArray2[7] = 1304.2754296138721;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "dxEC}Z'h.$^%nL#vPf", doubleArray0);
      Vector<Byte> vector0 = new Vector<Byte>();
      DatasetUtilities.findRangeBounds(categoryDataset0, (List) vector0, false);
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertEquals((-1868.0), number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Duplicate items in 'columnKeys'.";
      Number[][] numberArray0 = new Number[0][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Un=WE'Y(Y`i", "K+yf4", numberArray0);
      Stack<Float> stack0 = new Stack<Float>();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0);
      DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      DatasetUtilities.findMinimumDomainValue(defaultWindDataset0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("Un=WE'Y(Y`i");
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2422.416520491766;
      doubleArray1[2] = 2422.416520491766;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 0.5;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("]!)J56QZc~:shh`", "]!)J56QZc~:shh`", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.5);
      defaultCategoryDataset0.clearSelection();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findMaximumRangeValue((XYDataset) timePeriodValuesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0);
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(double0);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, (List) vector0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2422.416520491766;
      doubleArray1[2] = 2422.416520491766;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 0.5;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("]!)J56QZc~:shh`", "]!)J56QZc~:shh`", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.5);
      defaultCategoryDataset0.clearSelection();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertFalse(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      taskSeriesCollection0.clone();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-4022), 1244);
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) 0.0;
      numberArray0[0] = numberArray1;
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("=[0]m!P", "]!)J56QZc~:shh`", numberArray0);
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset1);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset1);
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 0.0);
      assertNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 0.0);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 1.2962520634471641);
      assertEquals(1.2962520634471641, range0.getLowerBound(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      Month month0 = new Month();
      month0.next();
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) month0, (double) (-1868));
      double[][] doubleArray0 = new double[7][1];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-1868);
      doubleArray1[1] = (double) (-1868);
      doubleArray1[2] = (double) (-1868);
      doubleArray1[3] = (double) (-1868);
      doubleArray1[4] = (double) (-1868);
      doubleArray1[5] = (double) (-1868);
      doubleArray1[6] = (double) (-1868);
      doubleArray1[7] = (double) (-1868);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) (-1868);
      doubleArray2[1] = (double) (-1868);
      doubleArray2[2] = (double) (-1868);
      doubleArray2[3] = (double) (-1868);
      doubleArray2[4] = (double) (-1868);
      doubleArray2[5] = (double) (-1868);
      doubleArray2[6] = (double) (-1868);
      doubleArray2[7] = 1304.2754296138721;
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-1868.0), 357.0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-1868.0), (-1868.0), (-1868), (-1868.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1571.2332624642886;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-5.789785911157748);
      doubleArray0[4] = 0.04675323095745935;
      doubleArray0[6] = 2083.4794167;
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-280.95421910064), 0.36537630027131035);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, 5313.83460507, 2083.4794167, 1236, 1571.2332624642886);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      Stack<Float> stack0 = new Stack<Float>();
      Float float0 = new Float(Double.NEGATIVE_INFINITY);
      stack0.add(float0);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultWindDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0, (List) linkedList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      String string0 = "";
      DatasetGroup datasetGroup0 = new DatasetGroup("");
      Float float0 = new Float(2422.416520491766);
      Stack<Float> stack0 = new Stack<Float>();
      Float float1 = null;
      stack0.add((Float) null);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultWindDataset0);
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Duplicate items in 'columnKeys'.";
      Number[][] numberArray0 = new Number[0][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Un=WE'Y(Y`i", "K+yf4", numberArray0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2862), 1224);
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      vector0.add((DefaultTableXYDataset) null);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, true);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4\\.ifR`";
      stringArray0[1] = "";
      stringArray0[2] = "K+yf4";
      stringArray0[3] = "Duplicate items in 'columnKeys'.";
      Number[][] numberArray0 = new Number[0][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      DatasetUtilities.createCategoryDataset("The number of row keys does not match the number of rows in the data array.", "Duplicate items in 'columnKeys'.", numberArray0);
      Stack<Float> stack0 = new Stack<Float>();
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, 0.0, 0.0, (-2370), "The number of row keys does not match the number of rows in the data array.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2424.077235520088;
      doubleArray1[2] = 2424.077235520088;
      doubleArray1[3] = 2424.077235520088;
      doubleArray1[4] = 0.5;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.5);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-4022), 1244);
      Number[] numberArray0 = new Number[1];
      numberArray0[0] = (Number) 0.0;
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      vector0.add((DefaultTableXYDataset) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) vector0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Duplicate items in 'columnKeys'.";
      Number[][] numberArray0 = new Number[0][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      DatasetUtilities.createCategoryDataset("Un=WE'Y(Y`i", "K+yf4", numberArray0);
      Stack<Float> stack0 = new Stack<Float>();
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 0, 1224);
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) vector0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      int int0 = 1900;
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.getOffset((long) 1900);
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1221, 1900, timeZone0);
      dynamicTimeSeriesCollection0.getDomainOrder();
      DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      LinkedList<DefaultHighLowDataset> linkedList0 = new LinkedList<DefaultHighLowDataset>();
      dynamicTimeSeriesCollection0.setPosition(1221);
      boolean boolean0 = false;
      DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, (List) linkedList0, false);
      String string0 = "\\S5";
      int int1 = 955;
      Frame frame0 = null;
      try {
        frame0 = new Frame("S5");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1571.2332624642886;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-5.789785911157748);
      doubleArray0[4] = 0.04675323095745935;
      doubleArray0[5] = (-1560.2133239);
      doubleArray0[6] = 2083.4794167;
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, true);
      DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, (List) linkedList0, range0, true);
      Range range1 = Range.expandToInclude((Range) null, (-2646.069691339));
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) jDBCXYDataset0, (List) linkedList0, range1, true);
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) jDBCXYDataset0, true);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      boolean boolean0 = true;
      DatasetUtilities.iterateRangeBounds((XYDataset) defaultWindDataset0, true);
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultWindDataset0.getX(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      String string0 = "\"N6}fitI1LOL;IOHon";
      DatasetGroup datasetGroup0 = new DatasetGroup("\"N6}fitI1LOL;IOHon");
      datasetGroup0.clone();
      datasetGroup0.clone();
      defaultKeyedValues2DDataset0.setGroup(datasetGroup0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Range range0 = new Range(0.0, 0.0);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      boolean boolean0 = false;
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultXYDataset0, (List) linkedList0, range0, false);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(0.0, 0.0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, 2421.0474695799253, 2119.0, 1227, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      XYDataset xYDataset0 = null;
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      double[][] doubleArray0 = new double[8][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1406.136619);
      DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-2275), 2084);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, 1221);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      Month month0 = new Month();
      month0.next();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) month0, (double) (-1868));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      
      double[][] doubleArray0 = new double[7][1];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-1868);
      doubleArray1[1] = (double) (-1868);
      doubleArray1[2] = (double) (-1868);
      doubleArray1[3] = (double) (-1868);
      doubleArray1[4] = (double) (-1868);
      doubleArray1[5] = (double) (-1868);
      doubleArray1[6] = (double) (-1868);
      doubleArray1[7] = (double) (-1868);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) (-1868);
      doubleArray2[1] = (double) (-1868);
      doubleArray2[2] = (double) (-1868);
      doubleArray2[3] = (double) (-1868);
      doubleArray2[4] = (double) (-1868);
      doubleArray2[5] = (double) (-1868);
      doubleArray2[6] = (double) (-1868);
      doubleArray2[7] = 1304.2754296138721;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "dxEC}Z'h.$^%nL#vPf", doubleArray0);
      Vector<Byte> vector0 = new Vector<Byte>();
      DatasetUtilities.findRangeBounds(categoryDataset0, (List) vector0, false);
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0);
      assertEquals((-934.0), range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Comparable<Dialog>[] comparableArray0 = (Comparable<Dialog>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1571.2332624642886;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-5.789785911157748);
      doubleArray1[4] = 0.04675323095745935;
      doubleArray1[5] = (-1560.2133239);
      doubleArray1[6] = 2083.4794167;
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      ArrayList<DefaultBoxAndWhiskerCategoryDataset> arrayList0 = new ArrayList<DefaultBoxAndWhiskerCategoryDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYTaskDataset0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, true);
      String string0 = "XK4 xP(";
      String string1 = "";
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("XK4 xP(", "", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      Integer integer0 = new Integer((-1868));
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      Month month0 = new Month();
      month0.next();
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) month0, (double) (-1868));
      double[][] doubleArray0 = new double[7][1];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-1868);
      doubleArray1[1] = (double) (-1868);
      doubleArray1[2] = (double) (-1868);
      doubleArray1[3] = (double) (-1868);
      doubleArray1[4] = (double) (-1868);
      doubleArray1[5] = (double) (-1868);
      doubleArray1[6] = (double) (-1868);
      doubleArray1[7] = (double) (-1868);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) (-1868);
      doubleArray2[1] = (double) (-1868);
      doubleArray2[2] = (double) (-1868);
      doubleArray2[3] = (double) (-1868);
      doubleArray2[4] = (double) (-1868);
      doubleArray2[5] = (double) (-1868);
      doubleArray2[6] = (double) (-1868);
      doubleArray2[7] = 1304.2754296138721;
      doubleArray2[8] = (double) (-1868);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 1304.2754296138721;
      doubleArray3[1] = (double) (-1868);
      doubleArray3[2] = 1304.2754296138721;
      doubleArray3[3] = 1304.2754296138721;
      doubleArray3[4] = 86.3;
      doubleArray3[5] = (double) (-1868);
      doubleArray3[6] = 1304.2754296138721;
      doubleArray3[7] = 1304.2754296138721;
      doubleArray3[8] = 1304.2754296138721;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = 86.3;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 1304.2754296138721;
      doubleArray5[1] = 1304.2754296138721;
      doubleArray5[2] = (-2.147483648E9);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = (double) (-1868);
      doubleArray6[1] = (double) (-1868);
      doubleArray6[2] = (double) (-1868);
      doubleArray6[3] = 1304.2754296138721;
      doubleArray6[4] = 1304.2754296138721;
      doubleArray6[5] = (-2.147483648E9);
      doubleArray6[6] = (-2.147483648E9);
      doubleArray6[7] = (double) (-1868);
      doubleArray6[8] = 86.3;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = 86.3;
      doubleArray7[1] = 1304.2754296138721;
      doubleArray7[2] = 86.3;
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      Vector<Byte> vector0 = new Vector<Byte>();
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) vector0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Integer integer0 = new Integer(3960);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(3960, (-4662.0043857));
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, true);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultTableXYDataset0);
      DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getStartXValue((-813), (-813));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      double[][] doubleArray0 = new double[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("]!)J56QZc~:shh`", "n7AVOj!WAA_?Ik0hF", doubleArray0);
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(0.0, 0.5, true, true);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(simpleHistogramBin0);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Range range1 = Range.expandToInclude(range0, (-2224.112703698585));
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) timePeriodValuesCollection0, (List) linkedList0, range1, true);
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0, false);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultTableXYDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getStartXValue((-813), (-813));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("8MXV3;:dR7`&>V#", "H*-wzTH~E~pT?RT", "8MXV3;:dR7`&>V#");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      timePeriodValuesCollection0.getDomainOrder();
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0);
      DatasetUtilities.isEmptyOrNull((XYDataset) timePeriodValuesCollection0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("", "8MXV3;:dR7`&>V#", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultTableXYDataset0);
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getStartXValue((-813), (-813));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Range range0 = new Range(0.0, 0.0);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultXYDataset0, (List) linkedList0, range0, false);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2422.416520491766;
      doubleArray1[2] = 2422.416520491766;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 0.5;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("]!)J56QZc~:shh`", "]!)J56QZc~:shh`", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.5);
      defaultCategoryDataset0.clearSelection();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-4022), 1244);
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, 1244);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1244, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2422.416520491766;
      doubleArray1[2] = 2422.416520491766;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 0.5;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("]!)J56QZc~:shh`", "]!)J56QZc~:shh`", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.5);
      defaultCategoryDataset0.clearSelection();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertFalse(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-4022), 1244);
      Number[][] numberArray0 = new Number[1][6];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) 0.0;
      numberArray0[0] = numberArray1;
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("=[0]m!P", "]!)J56QZc~:shh`", numberArray0);
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset1);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotNull(range1);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2422.416520491766;
      doubleArray1[2] = 2422.416520491766;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 0.5;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("]!)J56QZc~:shh`", "]!)J56QZc~:shh`", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.5);
      defaultCategoryDataset0.clearSelection();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertFalse(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1244, 2);
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range1);
      assertEquals(2422.416520491766, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      String string0 = "\"N6}fitI1LOL;IOHon";
      DatasetGroup datasetGroup0 = new DatasetGroup("\"N6}fitI1LOL;IOHon");
      datasetGroup0.clone();
      defaultKeyedValues2DDataset0.setGroup(datasetGroup0);
      DatasetUtilities.findMaximumStackedRangeValue(defaultKeyedValues2DDataset0);
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4\\.ifR`";
      stringArray0[1] = "";
      stringArray0[2] = "K+yf4";
      stringArray0[3] = "Duplicate items in 'columnKeys'.";
      Number[][] numberArray0 = new Number[0][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      DatasetUtilities.createCategoryDataset("K+yf4", "K+yf4", numberArray0);
      Stack<Float> stack0 = new Stack<Float>();
      Object[][][] objectArray0 = new Object[3][0][0];
      objectArray0[0] = (Object[][]) numberArray0;
      objectArray0[1] = (Object[][]) numberArray0;
      Object[][] objectArray1 = new Object[6][6];
      objectArray1[0] = (Object[]) stringArray0;
      objectArray1[1] = (Object[]) stringArray0;
      objectArray1[2] = (Object[]) stringArray0;
      objectArray1[3] = (Object[]) stringArray0;
      objectArray1[0] = (Object[]) stringArray0;
      objectArray1[5] = (Object[]) stringArray0;
      objectArray0[2] = objectArray1;
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultWindDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4\\.ifR`";
      stringArray0[1] = "4\\.ifR`";
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      defaultKeyedValuesDataset0.equals(xYIntervalSeriesCollection0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Second second0 = new Second();
      RegularTimePeriod regularTimePeriod0 = second0.previous();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      regularTimePeriod0.getFirstMillisecond();
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) second0, (double) 59, 59);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) regularTimePeriod0, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Second second0 = new Second();
      second0.previous();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) second0, (double) 59, 59);
      double[][] doubleArray0 = new double[0][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Vector<Long> vector0 = new Vector<Long>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, true);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      // Undeclared exception!
      try { 
        Month.parseMonth("W+Y[ueaM-3~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the month.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetGroup datasetGroup0 = new DatasetGroup("");
      defaultKeyedValues2DDataset0.setGroup(datasetGroup0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList0, true);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-2144.161);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 2421.0474695799253;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-2144.161);
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("org.jfree.data.pie.DefaultPieDataset", "org.jfree.data.pie.DefaultPieDataset", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.0);
      defaultKeyedValues2DDataset0.clearSelection();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1244, 85);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2421.0474695799253;
      doubleArray1[2] = 2421.0474695799253;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 0.5;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.5);
      defaultCategoryDataset0.clearSelection();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) 0.0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) 1.0, 1.0);
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      // Undeclared exception!
      try { 
        Range.shift((Range) null, 1.0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      double[][] doubleArray0 = new double[20][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1571.2332624642886;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("k7{ls\"#JNL+X^U", "k7{ls\"#JNL+X^U", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(1571.2332624642886);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Integer integer0 = new Integer(3960);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      defaultKeyedValuesDataset0.equals((Object) null);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, (-1634.68), (-1467.9), 3960, fixedMillisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Integer integer0 = new Integer(3960);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(3960, (-4662.0043857));
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(powerFunction2D0, 3960, (-309.855725), 3960, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4\\.ifR`";
      stringArray0[1] = "";
      stringArray0[2] = "K+yf4";
      stringArray0[3] = "Duplicate items in 'columnKeys'.";
      Number[][] numberArray0 = new Number[0][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      DatasetUtilities.createCategoryDataset("K+yf4", "K+yf4", numberArray0);
      Stack<Float> stack0 = new Stack<Float>();
      LineFunction2D lineFunction2D0 = new LineFunction2D(Double.POSITIVE_INFINITY, (-1.0));
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D(lineFunction2D0, 0.5, 0.0, 1, "K+yf4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1406.136619);
      doubleArray1[1] = 1.0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4\\.ifR`";
      stringArray0[1] = "";
      stringArray0[2] = "K+yf4";
      stringArray0[3] = "Duplicate items in 'columnKeys'.";
      Number[][] numberArray0 = new Number[0][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      DatasetUtilities.createCategoryDataset("K+yf4", "K+yf4", numberArray0);
      Stack<Float> stack0 = new Stack<Float>();
      Object[][][] objectArray0 = new Object[3][0][0];
      objectArray0[0] = (Object[][]) numberArray0;
      objectArray0[1] = (Object[][]) numberArray0;
      Object[][] objectArray1 = new Object[6][6];
      objectArray1[0] = (Object[]) stringArray0;
      objectArray1[1] = (Object[]) stringArray0;
      objectArray1[2] = (Object[]) stringArray0;
      objectArray1[3] = (Object[]) stringArray0;
      objectArray1[0] = (Object[]) stringArray0;
      objectArray1[5] = (Object[]) stringArray0;
      objectArray0[2] = objectArray1;
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultWindDataset0);
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      String string0 = "8MXV3;:dR7`&>V#";
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("Null 'locale' argument.", "8MXV3;:dR7`&>V#", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2, timeZone0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1406.136619);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 855.92061912;
      doubleArray1[3] = 0.0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 695);
      assertNotNull(pieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2421.0474695799253;
      doubleArray1[2] = (-2.147483648E9);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 0.5;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("]!)J56QZc~:shh`", "]!)J56QZc~:shh`", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.5);
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(2.1474860690474696E9, range0.getLength(), 0.01);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Range range1 = Range.expandToInclude(range0, 0.0);
      DatasetUtilities.iterateToFindRangeBounds((XYDataset) timePeriodValuesCollection0, (List) linkedList0, range1, true);
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2421.0474695799253;
      doubleArray1[2] = 2421.0474695799253;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 0.5;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("]!)J56QZc~:shh`", "]!)J56QZc~:shh`", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(0.5);
      defaultCategoryDataset0.clearSelection();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertFalse(boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, (-4022), 1244);
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      DatasetGroup datasetGroup0 = new DatasetGroup("");
      defaultKeyedValues2DDataset0.setGroup(datasetGroup0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset0);
      LinkedList<XYBarDataset> linkedList0 = new LinkedList<XYBarDataset>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList0, true);
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      double[][] doubleArray0 = new double[7][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-2144.161);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 2421.0474695799253;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-2144.161);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 2421.0474695799253;
      doubleArray3[3] = 909.9896;
      doubleArray3[4] = 2421.0474695799253;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (-2144.161);
      doubleArray4[1] = 2421.0474695799253;
      doubleArray4[2] = 909.9896;
      doubleArray4[3] = 2421.0474695799253;
      doubleArray4[4] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (-2144.161);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-1546.0);
      doubleArray5[3] = 909.9896;
      doubleArray5[4] = 2421.0474695799253;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 1.0;
      doubleArray6[1] = (-2144.161);
      doubleArray6[2] = 2421.0474695799253;
      doubleArray6[3] = (-2144.161);
      doubleArray6[4] = 2421.0474695799253;
      doubleArray6[5] = (-2619.9873591088513);
      doubleArray6[6] = (-2144.161);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = 909.9896;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 909.9896;
      doubleArray0[6] = doubleArray7;
      // Undeclared exception!
      try { 
        defaultXYDataset0.addSeries("", doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'data' array must have length == 2.
         //
         verifyException("org.jfree.data.xy.DefaultXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4\\.ifR`";
      stringArray0[1] = "";
      stringArray0[2] = "K+yf4";
      stringArray0[3] = "Duplicate items in 'columnKeys'.";
      Number[][] numberArray0 = new Number[0][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      DatasetUtilities.createCategoryDataset("K+yf4", "K+yf4", numberArray0);
      Stack<Float> stack0 = new Stack<Float>();
      Object[][][] objectArray0 = new Object[3][0][0];
      objectArray0[0] = (Object[][]) numberArray0;
      objectArray0[1] = (Object[][]) numberArray0;
      Object[][] objectArray1 = new Object[6][6];
      objectArray1[0] = (Object[]) stringArray0;
      objectArray1[1] = (Object[]) stringArray0;
      objectArray1[2] = (Object[]) stringArray0;
      objectArray1[3] = (Object[]) stringArray0;
      objectArray1[4] = (Object[]) stringArray0;
      objectArray1[5] = (Object[]) stringArray0;
      objectArray0[2] = objectArray1;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(stack0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data array.
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) linkedList0, true);
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1600, (-1231));
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("]!)J56QZc~:shh`", 41, 139);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      Number[][] numberArray0 = new Number[4][7];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = number0;
      numberArray1[1] = number0;
      numberArray1[2] = number0;
      numberArray1[3] = number0;
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      numberArray1[4] = (Number) integer0;
      numberArray1[5] = number0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      numberArray2[0] = (Number) integer0;
      numberArray2[1] = number0;
      numberArray2[2] = (Number) integer0;
      numberArray2[3] = (Number) integer0;
      numberArray2[4] = number0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[6];
      numberArray3[0] = number0;
      numberArray3[1] = number0;
      BigInteger bigInteger0 = BigInteger.ONE;
      numberArray3[2] = (Number) bigInteger0;
      numberArray3[3] = number0;
      numberArray3[4] = number0;
      numberArray3[5] = (Number) integer0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[3];
      numberArray4[0] = (Number) bigInteger0;
      numberArray4[1] = (Number) integer0;
      numberArray4[2] = (Number) integer0;
      numberArray0[3] = numberArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("]!)J56QZc~:shh`", "]!)J56QZc~:shh`", numberArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 907);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 907, Size: 6
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("84h", "The number of row keys does notmatch the number o rows in the data array.", doubleArray0);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("The number of row keys does notmatch the number o rows in the data array.");
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      defaultKeyedValues2DDataset0.clearSelection();
      DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      TaskSeriesCollection taskSeriesCollection1 = new TaskSeriesCollection();
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      DatasetUtilities.findMaximumRangeValue((XYDataset) vectorSeriesCollection0);
      DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Number number0 = DatasetUtilities.findMaximumDomainValue(vectorSeriesCollection0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1.0;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 855.92061912;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-1406.136619);
      doubleArray3[5] = 35.556844298;
      doubleArray3[6] = (-1406.136619);
      doubleArray3[7] = 0.0;
      doubleArray0[3] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (-1406.136619);
      doubleArray4[1] = 1918.3358577515983;
      doubleArray0[4] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[1] = 35.556844298;
      doubleArray5[2] = 0.0;
      doubleArray0[5] = doubleArray5;
      DatasetUtilities.createCategoryDataset("J$vb#bGt:u1ytGVNBD", "J$vb#bGt:u1ytGVNBD", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 2, (-1868));
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Integer integer0 = new Integer(3960);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      // Undeclared exception!
      try { 
        Month.parseMonth("&-2ZAC?P:I7|p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the month.
         //
         verifyException("org.jfree.data.time.Month", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      boolean boolean0 = false;
      Comparable<DefaultBoxAndWhiskerXYDataset> comparable0 = null;
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      int int0 = 0;
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 0);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) null, 6.283185307179586);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) pieDataset1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, (-1748), (-1748));
      defaultCategoryDataset0.getRowCount();
      DatasetUtilities.findMinimumStackedRangeValue(slidingCategoryDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      PieDataset pieDataset0 = null;
      // Undeclared exception!
      try { 
        defaultCategoryDataset0.getRowKey(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      TableXYDataset tableXYDataset0 = null;
      double double0 = (-398.86702);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, (-398.86702));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      TableXYDataset tableXYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 87);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4\\.ifR`";
      stringArray0[1] = "";
      stringArray0[2] = "K+yf4";
      stringArray0[3] = "Duplicate items in 'columnKeys'.";
      Number[][] numberArray0 = new Number[0][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (-4153));
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      DatasetUtilities.findCumulativeRangeBounds(defaultStatisticalCategoryDataset0);
      int int0 = 6;
      int int1 = (-950);
      Day day0 = null;
      try {
        day0 = new Day((-950), 6, (-950));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
         verifyException("org.jfree.data.time.SpreadsheetDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      keyToGroupMap0.equals((Object) null);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      Integer integer0 = new Integer(3960);
      DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      timePeriodValuesCollection0.hasListener((EventListener) null);
      LinkedList<DefaultMultiValueCategoryDataset> linkedList0 = new LinkedList<DefaultMultiValueCategoryDataset>();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, keyToGroupMap0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((XYDataset) null);
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1406.136619);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 855.92061912;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 35.556844298;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 855.92061912;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = (-1406.136619);
      doubleArray4[5] = 35.556844298;
      doubleArray4[6] = 0.0;
      doubleArray4[7] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (-1406.136619);
      doubleArray5[1] = 1918.3358577515983;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = Double.NEGATIVE_INFINITY;
      doubleArray6[1] = 35.556844298;
      doubleArray6[2] = 0.0;
      doubleArray0[5] = doubleArray6;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("J$vb#bGt:u1ytGVNBD", "J$vb#bGt:u1ytGVNBD", doubleArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Double double0 = new Double((-3871.339092));
      linkedList0.add(double0);
      DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      Short short0 = new Short((short) (-729));
      ArrayList<Short> arrayList0 = new ArrayList<Short>();
      Short short1 = new Short((short) (-729));
      arrayList0.add(short1);
      DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, arrayList0, true);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultWindDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, (List) arrayList0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("permitted.  Try using the addOrUpdate() method.", "SYWZj~Xq=^Fcq", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String string0 = "]!)J56QZc~:shh`";
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      MatrixSeries matrixSeries0 = new MatrixSeries("]!)J56QZc~:shh`", 2, 2);
      SynthSpinnerUI synthSpinnerUI0 = new SynthSpinnerUI();
      matrixSeries0.removePropertyChangeListener(synthSpinnerUI0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Vector<XYSeriesCollection> vector0 = new Vector<XYSeriesCollection>();
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("]!)J56QZc~:shh`");
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, true);
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 2;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      Vector<Byte> vector0 = new Vector<Byte>();
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) vector0, false);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      LinkedList<DynamicTimeSeriesCollection> linkedList0 = new LinkedList<DynamicTimeSeriesCollection>();
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, (List) linkedList0, true);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4\\.ifR`";
      stringArray0[1] = "";
      stringArray0[2] = "K+yf4";
      stringArray0[3] = "4\\.ifR`";
      Stack<Float> stack0 = new Stack<Float>();
      Object[][][] objectArray0 = new Object[3][0][0];
      Object[][] objectArray1 = new Object[6][6];
      objectArray1[0] = (Object[]) stringArray0;
      objectArray1[2] = (Object[]) stringArray0;
      objectArray1[3] = (Object[]) stringArray0;
      objectArray1[0] = (Object[]) stringArray0;
      objectArray1[5] = (Object[]) stringArray0;
      Float float0 = new Float(1.7976931348623157E308);
      stack0.add(float0);
      objectArray0[2] = objectArray1;
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.findMaximumRangeValue((XYDataset) defaultWindDataset0);
      DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, (List) stack0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid series index: -1
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2148.532924;
      doubleArray1[1] = (-723.472383);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1270.61988969592;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-2611.8940599);
      doubleArray1[6] = (-2684.5);
      doubleArray1[7] = 1808.0;
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-2684.5);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-2611.8940599);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-2611.8940599);
      doubleArray3[1] = 1.0;
      doubleArray3[2] = (-2611.8940599);
      doubleArray3[3] = (-30.55967);
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 1270.61988969592;
      doubleArray3[6] = (-723.472383);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 835.501;
      doubleArray4[1] = (-723.472383);
      doubleArray4[2] = 1.0;
      doubleArray4[3] = 0.0;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, 695);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      // Undeclared exception!
      try { 
        defaultTableXYDataset0.getStartX(3960, 3960);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3960, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (-1583.7413772);
      doubleArray1[2] = 1332.943355;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = Double.POSITIVE_INFINITY;
      doubleArray1[5] = 2497.30935;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1.0;
      doubleArray1[8] = (-562.037993694);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (-562.037993694);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 2497.30935;
      doubleArray3[3] = 2497.30935;
      doubleArray3[4] = 1332.943355;
      doubleArray3[5] = 1332.943355;
      doubleArray3[6] = Double.POSITIVE_INFINITY;
      doubleArray3[7] = 0.0;
      doubleArray3[8] = (-562.037993694);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 2497.30935;
      doubleArray4[1] = Double.POSITIVE_INFINITY;
      doubleArray4[2] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = Double.NaN;
      doubleArray5[1] = 2497.30935;
      doubleArray5[2] = 1332.943355;
      doubleArray5[3] = Double.POSITIVE_INFINITY;
      doubleArray5[4] = 1786.6609872;
      doubleArray5[5] = Double.NaN;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (-1224.794);
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (-562.037993694);
      doubleArray6[3] = 1332.943355;
      doubleArray6[4] = 2497.30935;
      doubleArray6[5] = 1786.6609872;
      doubleArray6[6] = 0.0;
      doubleArray0[5] = doubleArray6;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("e$+AdRhAKYA", "Null 'visibleSeriesKeys' argument.", doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds(categoryDataset0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Second second0 = new Second();
      RegularTimePeriod regularTimePeriod0 = second0.previous();
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      regularTimePeriod0.getFirstMillisecond();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) second0, (double) 59, 59);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) regularTimePeriod0, (KeyedValues) pieDataset0);
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      Object[][][] objectArray0 = new Object[9][4][5];
      Object[][] objectArray1 = new Object[3][1];
      Object[] objectArray2 = new Object[3];
      objectArray2[0] = (Object) pieDataset0;
      objectArray2[1] = (Object) second0;
      Object object0 = new Object();
      objectArray2[2] = object0;
      objectArray1[0] = objectArray2;
      Object[] objectArray3 = new Object[7];
      objectArray3[0] = (Object) regularTimePeriod0;
      objectArray3[1] = (Object) defaultKeyedValuesDataset0;
      objectArray3[2] = (Object) second0;
      objectArray3[3] = object0;
      objectArray3[4] = (Object) second0;
      objectArray3[5] = (Object) pieDataset0;
      objectArray3[6] = (Object) defaultKeyedValuesDataset0;
      objectArray1[1] = objectArray3;
      Object[] objectArray4 = new Object[9];
      objectArray4[0] = (Object) second0;
      objectArray4[1] = (Object) linkedList0;
      objectArray4[2] = (Object) regularTimePeriod0;
      objectArray4[3] = (Object) linkedList0;
      objectArray4[4] = (Object) regularTimePeriod0;
      objectArray4[5] = (Object) defaultKeyedValuesDataset0;
      objectArray4[6] = (Object) categoryDataset0;
      objectArray4[7] = (Object) categoryDataset0;
      objectArray4[8] = (Object) categoryDataset0;
      objectArray1[2] = objectArray4;
      objectArray0[0] = objectArray1;
      Object[][] objectArray5 = new Object[0][2];
      objectArray0[1] = objectArray5;
      Object[][] objectArray6 = new Object[4][9];
      Object[] objectArray7 = new Object[7];
      objectArray7[0] = (Object) linkedList0;
      objectArray7[1] = (Object) second0;
      objectArray7[2] = (Object) categoryDataset0;
      Object object1 = new Object();
      objectArray7[3] = object1;
      objectArray7[4] = object0;
      objectArray7[5] = (Object) categoryDataset0;
      objectArray7[6] = (Object) categoryDataset0;
      objectArray6[0] = objectArray7;
      Object[] objectArray8 = new Object[3];
      objectArray8[0] = object0;
      objectArray8[1] = (Object) linkedList0;
      objectArray8[2] = (Object) regularTimePeriod0;
      objectArray6[1] = objectArray8;
      objectArray6[2] = objectArray3;
      objectArray6[3] = objectArray2;
      objectArray0[2] = objectArray6;
      Object[][] objectArray9 = new Object[5][1];
      objectArray9[0] = objectArray4;
      objectArray9[1] = objectArray7;
      Object[] objectArray10 = new Object[5];
      objectArray10[0] = (Object) categoryDataset0;
      objectArray10[1] = (Object) regularTimePeriod0;
      objectArray10[2] = (Object) regularTimePeriod0;
      objectArray10[3] = object1;
      objectArray10[4] = (Object) linkedList0;
      objectArray9[2] = objectArray10;
      Object[] objectArray11 = new Object[0];
      objectArray9[3] = objectArray11;
      objectArray9[4] = objectArray8;
      objectArray0[3] = objectArray9;
      Object[][] objectArray12 = new Object[0][1];
      objectArray0[4] = objectArray12;
      Object[][] objectArray13 = new Object[3][8];
      objectArray13[0] = objectArray10;
      objectArray13[1] = objectArray2;
      objectArray13[2] = objectArray10;
      objectArray0[5] = objectArray13;
      Object[][] objectArray14 = new Object[5][7];
      objectArray14[0] = objectArray2;
      objectArray14[1] = objectArray2;
      objectArray14[2] = objectArray4;
      objectArray14[3] = objectArray2;
      objectArray14[4] = objectArray11;
      objectArray0[6] = objectArray14;
      Object[][] objectArray15 = new Object[0][5];
      objectArray0[7] = objectArray15;
      Object[][] objectArray16 = new Object[4][6];
      objectArray16[0] = objectArray10;
      objectArray16[1] = objectArray7;
      Object[] objectArray17 = new Object[9];
      objectArray17[0] = (Object) second0;
      objectArray17[1] = (Object) regularTimePeriod0;
      objectArray17[2] = (Object) defaultKeyedValuesDataset0;
      objectArray17[3] = (Object) defaultKeyedValuesDataset0;
      objectArray17[4] = (Object) second0;
      objectArray17[5] = object0;
      objectArray17[6] = (Object) pieDataset0;
      objectArray17[7] = (Object) defaultKeyedValuesDataset0;
      objectArray17[8] = (Object) regularTimePeriod0;
      objectArray16[2] = objectArray17;
      objectArray16[3] = objectArray10;
      objectArray0[8] = objectArray16;
      DefaultWindDataset defaultWindDataset0 = null;
      try {
        defaultWindDataset0 = new DefaultWindDataset(linkedList0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of series keys does not match the number of series in the data array.
         //
         verifyException("org.jfree.data.xy.DefaultWindDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1, 2786);
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Comparable<Object> comparable0 = null;
      double double0 = 0.0;
      int int0 = 2210;
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) null, 0.0, 2210);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, true);
      XYDataset xYDataset0 = null;
      Stack<DynamicTimeSeriesCollection> stack0 = new Stack<DynamicTimeSeriesCollection>();
      // Undeclared exception!
      try { 
        stack0.removeElementAt(1089);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1089 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Comparable<Dialog>[] comparableArray0 = (Comparable<Dialog>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1571.2332624642886;
      doubleArray1[1] = 2405.152173;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-1560.2133239);
      doubleArray1[6] = 2083.4794167;
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Comparable<DefaultTableXYDataset>[] comparableArray0 = (Comparable<DefaultTableXYDataset>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 3266.4;
      doubleArray1[1] = 1.7976931348623157E308;
      doubleArray1[2] = (-3466.259296115622);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 966.02286875;
      doubleArray1[6] = (-259.586945714);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 966.02286875;
      doubleArray2[1] = (-562.088);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 966.02286875;
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = 3266.4;
      doubleArray3[3] = (-3466.259296115622);
      doubleArray3[4] = (-562.088);
      doubleArray3[5] = (-259.586945714);
      doubleArray3[6] = (-1.0);
      doubleArray3[7] = 1.7976931348623157E308;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray4[1] = 966.02286875;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (-562.088);
      doubleArray5[1] = (-1.0);
      doubleArray5[2] = (-1.0);
      doubleArray5[3] = (-1.0);
      doubleArray5[4] = (-562.088);
      doubleArray5[5] = 3266.4;
      doubleArray5[6] = (-1.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 1.7976931348623157E308;
      doubleArray6[1] = Double.POSITIVE_INFINITY;
      doubleArray6[2] = 966.02286875;
      doubleArray6[3] = 0.0;
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 335);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }
}
