/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 20:00:57 GMT 2021
 */

package org.jfree.data.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.ParseException;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.time.Clock;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.plaf.synth.SynthButtonUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.DatasetChangeListener;
import org.jfree.data.event.SeriesChangeEvent;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.SeriesChangeInfo;
import org.jfree.data.general.SeriesChangeType;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimePeriod;
import org.jfree.data.time.TimePeriodValues;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.TimeSeriesTableModel;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DatasetUtilities_ESTest extends DatasetUtilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1243.3974106593678, 1243.3974106593678, 1243.3974106593678, 1243.3974106593678, 1243.3974106593678);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1243.3974106593678, range0.getLowerBound(), 0.01);
      assertEquals(1243.3974106593678, range0.getCentralValue(), 0.01);
      assertEquals(1243.3974106593678, range0.getUpperBound(), 0.01);
      assertEquals(1, oHLCDataItemArray0.length);
      
      double[][] doubleArray0 = new double[7][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1243.3974106593678;
      doubleArray1[1] = 1243.3974106593678;
      doubleArray1[2] = 1243.3974106593678;
      doubleArray1[3] = 1243.3974106593678;
      doubleArray1[4] = 1243.3974106593678;
      doubleArray1[5] = 1243.3974106593678;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1243.3974106593678;
      doubleArray2[1] = 1243.3974106593678;
      doubleArray2[2] = 1243.3974106593678;
      doubleArray2[3] = 1243.3974106593678;
      doubleArray2[4] = 1243.3974106593678;
      doubleArray2[5] = 1243.3974106593678;
      doubleArray2[6] = 1243.3974106593678;
      doubleArray2[7] = 1243.3974106593678;
      doubleArray2[8] = 1243.3974106593678;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1243.3974106593678;
      doubleArray3[1] = 1243.3974106593678;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 1243.3974106593678;
      doubleArray4[1] = 1243.3974106593678;
      doubleArray4[2] = 1243.3974106593678;
      doubleArray4[3] = 456.6017062607;
      doubleArray4[4] = 1243.3974106593678;
      doubleArray4[5] = 1243.3974106593678;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = 456.6017062607;
      doubleArray6[1] = 456.6017062607;
      doubleArray6[2] = 2.0;
      doubleArray6[3] = 1243.3974106593678;
      doubleArray6[4] = 456.6017062607;
      doubleArray6[5] = 456.6017062607;
      doubleArray6[6] = 456.6017062607;
      doubleArray6[7] = 1243.3974106593678;
      doubleArray6[8] = 1243.3974106593678;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = (-669.0);
      doubleArray7[1] = 2.0;
      doubleArray7[2] = 1243.3974106593678;
      doubleArray0[6] = doubleArray7;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("OiV!L0!2+", "OiV!L0!2+", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(7, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-445));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals((-445), categoryToPieDataset0.getExtractIndex());
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) oHLCDataItem0, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[][] doubleArray0 = new double[7][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate(1, 1, 1);
      assertNotNull(mockDate0);
      
      mockDate0.setTime(999L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 3682.24901, 1432.3107040342595, 1182.71311602, 2233.9592740047037, 3682.24901);
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1.0, (-1622.2211026), Double.NaN, 3682.24901, 1182.71311602);
      assertNotNull(oHLCDataItem1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-644.0111938921838), 1058.24, Double.NEGATIVE_INFINITY, 1058.24, 0.0);
      assertNotNull(oHLCDataItem2);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, 1182.71311602, 2233.9592740047037, 1.39240928132E12, 0.0, Double.NaN);
      assertNotNull(oHLCDataItem3);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(4, oHLCDataItemArray0.length);
      
      Range range0 = new Range(6.283185307179586, 1.39240928132E12);
      assertNotNull(range0);
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.3924092813137168E12, range0.getLength(), 0.01);
      assertEquals(6.962046406631416E11, range0.getCentralValue(), 0.01);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains((-644.0111938921838)));
      
      Double double0 = new Double(3008.832839);
      assertNotNull(double0);
      assertEquals(3008.832839, (double)double0, 0.01);
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains((-644.0111938921838)));
      assertTrue(arrayList0.contains(double0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      assertNotNull(range1);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getCentralValue(), 0.01);
      assertEquals(2233.9592740047037, range1.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range1.getLowerBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range1.getLength(), 0.01);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(6.283185307179586, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(1.3924092813137168E12, range0.getLength(), 0.01);
      assertEquals(6.962046406631416E11, range0.getCentralValue(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotSame(range1, range0);
      assertNotSame(range0, range1);
      assertFalse(arrayList0.contains((-644.0111938921838)));
      assertTrue(arrayList0.contains(double0));
      assertFalse(range1.equals((Object)range0));
      assertEquals(4, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[0.0]", stack0.toString());
      assertTrue(stack0.contains(double0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(7014);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertNotNull(spreadsheetDate0);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(7, spreadsheetDate0.getDayOfWeek());
      assertEquals(3, spreadsheetDate0.getMonth());
      assertEquals(7014, spreadsheetDate0.toSerial());
      assertEquals(15, spreadsheetDate0.getDayOfMonth());
      assertEquals(1919, spreadsheetDate0.getYYYY());
      
      defaultMultiValueCategoryDataset0.add(stack0, double0, double0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[0.0]", stack0.toString());
      assertTrue(stack0.contains(double0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[0.0]", stack0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertTrue(stack0.contains(double0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertNotNull(range1);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[0.0]", stack0.toString());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(stack0.contains(double0));
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("^(c\"f*u(ev#d6\"0V/k", 84, 84);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(7056, matrixSeries0.getItemCount());
      assertEquals(84, matrixSeries0.getRowCount());
      assertEquals(84, matrixSeries0.getColumnsCount());
      
      boolean boolean0 = matrixSeries0.equals((Object) null);
      assertFalse(boolean0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(7056, matrixSeries0.getItemCount());
      assertEquals(84, matrixSeries0.getRowCount());
      assertEquals(84, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(7056, matrixSeries0.getItemCount());
      assertEquals(84, matrixSeries0.getRowCount());
      assertEquals(84, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      matrixSeriesCollection0.addSeries(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(7056, matrixSeries0.getItemCount());
      assertEquals(84, matrixSeries0.getRowCount());
      assertEquals(84, matrixSeries0.getColumnsCount());
      assertEquals(2, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate((-599L));
      assertNotNull(mockDate0);
      
      Minute minute0 = new Minute(mockDate0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(23, minute0.getHourValue());
      assertEquals((-599L), minute0.getLastMillisecond());
      assertEquals((-599L), minute0.getFirstMillisecond());
      assertEquals(59, minute0.getMinute());
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries(minute0, false);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(xYSeries0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(23, minute0.getHourValue());
      assertEquals((-599L), minute0.getLastMillisecond());
      assertEquals((-599L), minute0.getFirstMillisecond());
      assertEquals(59, minute0.getMinute());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(0.8, (double) 0);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNull(xYDataItem0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(23, minute0.getHourValue());
      assertEquals((-599L), minute0.getLastMillisecond());
      assertEquals((-599L), minute0.getFirstMillisecond());
      assertEquals(59, minute0.getMinute());
      assertEquals(0.8, xYSeries0.getMinX(), 0.01);
      assertEquals(0.8, xYSeries0.getMaxX(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getNotify());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1, xYSeries0.getItemCount());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-599L), Double.NEGATIVE_INFINITY, 750.123076, (-599L), 4692.531758123);
      assertNotNull(oHLCDataItem0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, (-3007.7375040735), (-3269.065292), 4692.531758123, 1287.432, 4692.531758123);
      assertNotNull(oHLCDataItem1);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = new Range(0.8, 1287.432);
      assertNotNull(range0);
      assertEquals(644.116, range0.getCentralValue(), 0.01);
      assertEquals(1286.632, range0.getLength(), 0.01);
      assertEquals(0.8, range0.getLowerBound(), 0.01);
      assertEquals(1287.432, range0.getUpperBound(), 0.01);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(1287.432));
      
      Double double0 = new Double(659.1947);
      assertNotNull(double0);
      assertEquals(659.1947, (double)double0, 0.01);
      
      boolean boolean1 = arrayList0.add(double0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(659.1947));
      assertFalse(arrayList0.contains(1287.432));
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (750.123076) <= upper (-3269.065292).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(")8.", ")8.", numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, numberArray0.length);
      
      defaultCategoryDataset0.setValue((-1258.13), (Comparable) ")8.", (Comparable) ")8.");
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(defaultCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals((-1258.13), range0.getCentralValue(), 0.01);
      assertEquals((-1258.13), range0.getUpperBound(), 0.01);
      assertEquals((-1258.13), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertNotNull(spreadsheetDate0);
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      
      Date date0 = spreadsheetDate0.toDate();
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertNotNull(date0);
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 3.601570881E9, 1, (-2662.0), (-430.30563162154), 1081.948634492862);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertNotNull(oHLCDataItem0);
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-733.7290781784299), 1, 5, 45.494486390731, 4);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertNotNull(oHLCDataItem1);
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, (-2662.0), 1081.948634492862, 1.0, 2, (-2662.0));
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertNotNull(oHLCDataItem2);
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, 3, 3055.639337, 1449.50207, 5, 9999);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertNotNull(oHLCDataItem3);
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      
      oHLCDataItemArray0[0] = oHLCDataItem3;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertEquals(3, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertNotNull(range0);
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3055.639337, range0.getUpperBound(), 0.01);
      assertEquals(3050.639337, range0.getLength(), 0.01);
      assertEquals(5.0, range0.getLowerBound(), 0.01);
      assertEquals(1530.3196685, range0.getCentralValue(), 0.01);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem3);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertEquals(3, oHLCDataItemArray0.length);
      
      String string0 = range0.toString();
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertNotNull(string0);
      assertEquals("Range[5.0,3055.639337]", string0);
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3055.639337, range0.getUpperBound(), 0.01);
      assertEquals(3050.639337, range0.getLength(), 0.01);
      assertEquals(5.0, range0.getLowerBound(), 0.01);
      assertEquals(1530.3196685, range0.getCentralValue(), 0.01);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem3);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertEquals(3, oHLCDataItemArray0.length);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(45.494486390731));
      
      Double double0 = new Double(3.601570881E9);
      assertNotNull(double0);
      assertEquals(3.601570881E9, (double)double0, 0.01);
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(double0));
      assertFalse(arrayList0.contains(45.494486390731));
      
      Range range1 = Range.combine(range0, range0);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertNotNull(range1);
      assertEquals(5.0, range1.getLowerBound(), 0.01);
      assertEquals(3055.639337, range1.getUpperBound(), 0.01);
      assertEquals(3050.639337, range1.getLength(), 0.01);
      assertEquals(1530.3196685, range1.getCentralValue(), 0.01);
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3055.639337, range0.getUpperBound(), 0.01);
      assertEquals(3050.639337, range0.getLength(), 0.01);
      assertEquals(5.0, range0.getLowerBound(), 0.01);
      assertEquals(1530.3196685, range0.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem3);
      assertNotSame(range0, range1);
      assertTrue(range1.equals((Object)range0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertEquals(3, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertNull(range2);
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3055.639337, range0.getUpperBound(), 0.01);
      assertEquals(3050.639337, range0.getLength(), 0.01);
      assertEquals(5.0, range0.getLowerBound(), 0.01);
      assertEquals(1530.3196685, range0.getCentralValue(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem3);
      assertNotSame(range0, range1);
      assertTrue(arrayList0.contains(double0));
      assertFalse(arrayList0.contains(45.494486390731));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertTrue(range0.equals((Object)range1));
      assertEquals(3, oHLCDataItemArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertFalse(boolean1);
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem3);
      assertFalse(boolean1 == boolean0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertEquals(3, oHLCDataItemArray0.length);
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, true);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertNotNull(range3);
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1.39240928132E12, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1.39240928132E12, range3.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range3.getLowerBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertTrue(arrayList0.contains(double0));
      assertFalse(arrayList0.contains(45.494486390731));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertEquals(3, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range3, true);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertNotNull(range4);
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1.39240928132E12, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1.39240928132E12, range3.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range3.getLowerBound(), 0.01);
      assertEquals(1530.3196685, range4.getCentralValue(), 0.01);
      assertEquals(5.0, range4.getLowerBound(), 0.01);
      assertEquals(3050.639337, range4.getLength(), 0.01);
      assertEquals(3055.639337, range4.getUpperBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range4);
      assertNotSame(range3, range0);
      assertNotSame(range4, range0);
      assertNotSame(range4, range3);
      assertNotSame(range4, range1);
      assertTrue(arrayList0.contains(double0));
      assertFalse(arrayList0.contains(45.494486390731));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range4.equals((Object)range3));
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range1));
      assertEquals(3, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Short short0 = new Short((short)1);
      assertNotNull(short0);
      assertEquals((short)1, (short)short0);
      
      Stack<Short> stack0 = new Stack<Short>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(short0));
      
      Short short1 = new Short((short)1);
      assertNotNull(short1);
      assertEquals((short)1, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      boolean boolean0 = stack0.add(short1);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[1]", stack0.toString());
      assertTrue(stack0.contains(short0));
      assertTrue(short1.equals((Object)short0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Stack<TimeSeriesCollection> stack1 = new Stack<TimeSeriesCollection>();
      assertNotNull(stack1);
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      
      defaultMultiValueCategoryDataset0.add(stack1, short0, short1);
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertTrue(short0.equals((Object)short1));
      assertTrue(short1.equals((Object)short0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[1]", stack0.toString());
      assertTrue(stack0.contains(short0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      timeTableXYDataset0.add((TimePeriod) second0, (double) 59, "<]cyR.u5,H*B2$=;\"");
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Vector<Double> vector0 = new Vector<Double>(59, 59);
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(59, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Double double0 = new Double(59);
      assertNotNull(double0);
      assertEquals(59.0, (double)double0, 0.01);
      
      boolean boolean0 = vector0.add(double0);
      assertTrue(boolean0);
      assertEquals("[59.0]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(59, vector0.capacity());
      assertTrue(vector0.contains(double0));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, vector0, true);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("[59.0]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(59, vector0.capacity());
      assertEquals(999.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.3924092818195E12, range0.getCentralValue(), 0.01);
      assertEquals(1.392409282319E12, range0.getUpperBound(), 0.01);
      assertTrue(vector0.contains(double0));
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, true);
      assertNotNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.392409282319E12, range1.getUpperBound(), 0.01);
      assertEquals(999.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.3924092818195E12, range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 59;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (-104.011);
      doubleArray1[3] = (double) 59;
      doubleArray1[4] = (double) 59;
      doubleArray1[5] = (double) 0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, ">37#/zL'E_/WT+LL(G", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 4026);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(4026, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) "<]cyR.u5,H*B2$=;\"", (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4026, Size: 6
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-663.338), 3068.0546891114677, 3068.0546891114677, (-663.338), 1244.11862);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      mockDate0.setTime((-3L));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(4, oHLCDataItemArray0.length);
      
      Range range0 = new Range((-663.338), 1244.11862);
      assertNotNull(range0);
      assertEquals(1907.45662, range0.getLength(), 0.01);
      assertEquals(1244.11862, range0.getUpperBound(), 0.01);
      assertEquals((-663.338), range0.getLowerBound(), 0.01);
      assertEquals(290.39031, range0.getCentralValue(), 0.01);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(3068.0546891114677));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Double double0 = new Double(35);
      assertNotNull(double0);
      assertEquals(35.0, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[35.0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(double0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      MockDate mockDate0 = new MockDate(35, 35, 963);
      assertNotNull(mockDate0);
      
      mockDate0.setTime(0L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-2014.10649), 0L, (-293.967), 0L, (-4760.2911023908));
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 59.0, 35, 2204.481521, 1037.0, 1435.04751);
      assertNotNull(oHLCDataItem1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, 59.0, 0L, 0.0, 1037.0, (-293.967));
      assertNotNull(oHLCDataItem2);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(double0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      
      Range range0 = new Range((-3L), 0.0);
      assertNotNull(range0);
      assertEquals(3.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-1.5), range0.getCentralValue(), 0.01);
      assertEquals((-3.0), range0.getLowerBound(), 0.01);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains((-4760.2911023908)));
      
      Double double1 = new Double(0.5);
      assertNotNull(double1);
      assertEquals(0.5, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean1 = arrayList0.add(double1);
      assertTrue(boolean1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(0.5));
      assertFalse(arrayList0.contains((-4760.2911023908)));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean1 == boolean0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(range1, range0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertFalse(range1.equals((Object)range0));
      assertEquals(3, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) stack0, range1, false);
      assertNotNull(range2);
      assertFalse(stack0.isEmpty());
      assertEquals("[35.0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(518.5, range2.getCentralValue(), 0.01);
      assertEquals(1037.0, range2.getUpperBound(), 0.01);
      assertEquals(1037.0, range2.getLength(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertTrue(stack0.contains(double0));
      assertFalse(stack0.contains((-4760.2911023908)));
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertEquals(3, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1435), (-7), (-7));
      assertNotNull(mockGregorianCalendar0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      timeTableXYDataset0.add((TimePeriod) second0, (-1179.00401500633), "");
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      assertNotNull(number0);
      assertEquals((-1179.00401500633), number0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, 1796.2586);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1206.7565924968349, range0.getCentralValue(), 0.01);
      assertEquals(1179.00401500633, range0.getLength(), 0.01);
      assertEquals(617.2545849936698, range0.getLowerBound(), 0.01);
      assertEquals(1796.2586, range0.getUpperBound(), 0.01);
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(timeTableXYDataset0);
      assertNotNull(number1);
      assertEquals(1.392409282319E12, number1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(number1.equals((Object)number0));
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      assertNotNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.392409282319E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(999.0, range1.getLength(), 0.01);
      assertEquals(1.3924092818195E12, range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, true);
      assertNotNull(range2);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals((-1179.00401500633), range2.getUpperBound(), 0.01);
      assertEquals((-1179.00401500633), range2.getCentralValue(), 0.01);
      assertEquals((-1179.00401500633), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1741, "<]cyR.u5,H*B2$=;\"");
      assertNotNull(simpleTimeZone0);
      assertEquals("<]cyR.u5,H*B2$=;\"", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1741, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=<]cyR.u5,H*B2$=;\",offset=1741,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(simpleTimeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("<]cyR.u5,H*B2$=;\"", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1741, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=<]cyR.u5,H*B2$=;\",offset=1741,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Second second0 = new Second(mockDate0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      timeTableXYDataset0.add((TimePeriod) second0, (-222.6), "Q");
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("<]cyR.u5,H*B2$=;\"", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1741, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=<]cyR.u5,H*B2$=;\",offset=1741,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains((-222.6)));
      
      Double double0 = new Double((-899.60087194541));
      assertNotNull(double0);
      assertEquals((-899.60087194541), (double)double0, 0.01);
      
      boolean boolean0 = vector0.add(double0);
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertEquals("[-899.60087194541]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains((-899.60087194541)));
      assertFalse(vector0.contains((-222.6)));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, vector0, false);
      assertNotNull(range0);
      assertEquals("<]cyR.u5,H*B2$=;\"", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1741, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=<]cyR.u5,H*B2$=;\",offset=1741,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(10, vector0.capacity());
      assertEquals("[-899.60087194541]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertTrue(vector0.contains((-899.60087194541)));
      assertFalse(vector0.contains((-222.6)));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) jDBCXYDataset0);
      assertNotNull(range1);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) vector0, true);
      assertNotNull(range2);
      assertEquals("<]cyR.u5,H*B2$=;\"", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1741, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=<]cyR.u5,H*B2$=;\",offset=1741,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(10, vector0.capacity());
      assertEquals("[-899.60087194541]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(1.392409282319E12, range2.getUpperBound(), 0.01);
      assertEquals(1.3924092818195E12, range2.getCentralValue(), 0.01);
      assertEquals(999.0, range2.getLength(), 0.01);
      assertEquals(1.39240928132E12, range2.getLowerBound(), 0.01);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(vector0.contains((-899.60087194541)));
      assertFalse(vector0.contains((-222.6)));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, 1741, 1741);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(1741, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1741, slidingCategoryDataset0.getMaximumCategoryCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, 59);
      assertNotNull(pieDataset0);
      assertEquals(1741, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1741, slidingCategoryDataset0.getMaximumCategoryCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("java.lanaHg.String", "java.lanaHg.String", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 1194);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1194, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) null, (-700.4799403460769));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1194, Size: 7
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) mockDate0, (Number) null);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.insertValue(0, (Comparable) second0, 6.283185307179586);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to org.jfree.data.SelectableValue
         //
         verifyException("org.jfree.data.pie.DefaultPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, doubleArray0.length);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(6, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, doubleArray0.length);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(number0));
      
      boolean boolean0 = stack0.add((Double) number0);
      assertTrue(boolean0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[0.0]", stack0.toString());
      assertTrue(stack0.contains(number0));
      assertEquals(6, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertNotNull(range0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(6, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, doubleArray0.length);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Double double0 = new Double(35.0);
      assertNotNull(double0);
      assertEquals(35.0, (double)double0, 0.01);
      
      boolean boolean0 = vector0.add(double0);
      assertTrue(boolean0);
      assertEquals("[35.0]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains(double0));
      
      Double double1 = new Double(35.0);
      assertNotNull(double1);
      assertEquals(35.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean1 = vector0.add(double1);
      assertTrue(boolean1);
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertEquals("[35.0, 35.0]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains(double1));
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean1 == boolean0);
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(histogramDataset0, vector0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      Double double0 = new Double(Double.NEGATIVE_INFINITY);
      assertNotNull(double0);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals("[-Infinity]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(double0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      defaultStatisticalCategoryDataset0.add((Number) byte0, (Number) double0, (Comparable) double0, (Comparable) double0);
      Double double1 = new Double((-2142.0));
      assertNotNull(double1);
      assertEquals((-2142.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Stack<Double> stack1 = new Stack<Double>();
      assertNotNull(stack1);
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertFalse(stack1.contains((-2142.0)));
      assertFalse(stack1.equals((Object)stack0));
      
      Stack<Double> stack2 = new Stack<Double>();
      assertNotNull(stack2);
      assertEquals(0, stack2.size());
      assertEquals("[]", stack2.toString());
      assertEquals(10, stack2.capacity());
      assertTrue(stack2.isEmpty());
      assertTrue(stack2.empty());
      assertFalse(stack2.contains((-2142.0)));
      assertFalse(stack2.equals((Object)stack0));
      assertTrue(stack2.equals((Object)stack1));
      
      boolean boolean1 = stack2.add(double1);
      assertTrue(boolean1);
      assertEquals("[-2142.0]", stack2.toString());
      assertEquals(1, stack2.size());
      assertFalse(stack2.empty());
      assertFalse(stack2.isEmpty());
      assertEquals(10, stack2.capacity());
      assertNotSame(stack2, stack1);
      assertNotSame(stack2, stack0);
      assertTrue(stack2.contains((-2142.0)));
      assertFalse(stack2.contains(Double.NEGATIVE_INFINITY));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(stack2.equals((Object)stack1));
      assertFalse(stack2.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNotNull(range0);
      assertEquals("[-Infinity]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotSame(stack0, stack1);
      assertNotSame(stack0, stack2);
      assertFalse(stack0.contains((-2142.0)));
      assertTrue(stack0.contains(Double.NEGATIVE_INFINITY));
      assertFalse(stack0.equals((Object)stack1));
      assertFalse(stack0.equals((Object)stack2));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertFalse(number0.equals((Object)double1));
      assertFalse(number0.equals((Object)double0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      timeTableXYDataset0.add((TimePeriod) second0, 1.0, "<]cyR.u5,H*B2$=;\"");
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      timeTableXYDataset0.add((TimePeriod) second0, Double.NaN, "]");
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeTableXYDataset0);
      assertNotNull(number0);
      assertEquals(1.0, number0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Double double0 = new Double(2672.7979);
      assertNotNull(double0);
      assertEquals(2672.7979, (double)double0, 0.01);
      
      Stack<Double> stack1 = new Stack<Double>();
      assertNotNull(stack1);
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertFalse(stack1.contains(2672.7979));
      assertTrue(stack1.equals((Object)stack0));
      
      Double double1 = new Double(2672.7979);
      assertNotNull(double1);
      assertEquals(2672.7979, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = stack1.add(double1);
      assertTrue(boolean0);
      assertEquals("[2672.7979]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertNotSame(stack1, stack0);
      assertTrue(stack1.contains(2672.7979));
      assertFalse(stack1.equals((Object)stack0));
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean1 = stack0.add(double1);
      assertTrue(boolean1);
      assertEquals(1, stack0.size());
      assertEquals("[2672.7979]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotSame(stack0, stack1);
      assertTrue(stack0.contains(2672.7979));
      assertTrue(stack0.equals((Object)stack1));
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean1 == boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1070);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertNotNull(spreadsheetDate0);
      assertEquals(1902, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(12, spreadsheetDate0.getMonth());
      assertEquals(1070, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      defaultMultiValueCategoryDataset0.add(stack1, double1, spreadsheetDate0);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals("[2672.7979]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertEquals(1902, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(12, spreadsheetDate0.getMonth());
      assertEquals(1070, spreadsheetDate0.toSerial());
      assertEquals(5, spreadsheetDate0.getDayOfMonth());
      assertEquals(6, spreadsheetDate0.getDayOfWeek());
      assertNotSame(stack1, stack0);
      assertTrue(stack1.contains(2672.7979));
      assertTrue(stack1.equals((Object)stack0));
      assertEquals((double)double1, (double)double0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertEquals(1, stack0.size());
      assertEquals("[2672.7979]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(2672.7979, range0.getUpperBound(), 0.01);
      assertEquals(2672.7979, range0.getCentralValue(), 0.01);
      assertEquals(2672.7979, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotSame(stack0, stack1);
      assertTrue(stack0.contains(2672.7979));
      assertTrue(stack0.equals((Object)stack1));
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNotNull(number0);
      assertEquals(2672.7979, number0);
      assertTrue(number0.equals((Object)double1));
      assertTrue(number0.equals((Object)double0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, 1067);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1067, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2, 2, 2, 2, 29, (-1));
      assertNotNull(mockDate0);
      
      mockDate0.setTime(2);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-1), 2, (-1.0), (-823.159457833176), (-1.0));
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1206.26438, (-1906.872811), (-3L), 2, 29);
      assertNotNull(oHLCDataItem1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(mockDate0, (-1.0), 1225.0, (-3267.06454529272), (-137.825598324), (-137.825598324));
      assertNotNull(oHLCDataItem2);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(mockDate0, (-1), (-1078.7376), 29, (-1906.872811), (-270.343128));
      assertNotNull(oHLCDataItem3);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(4, oHLCDataItemArray0.length);
      
      Range range0 = new Range((-1), 29);
      assertNotNull(range0);
      assertEquals(14.0, range0.getCentralValue(), 0.01);
      assertEquals(29.0, range0.getUpperBound(), 0.01);
      assertEquals(30.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains((-3267.06454529272)));
      
      Double double0 = new Double((-1125.0));
      assertNotNull(double0);
      assertEquals((-1125.0), (double)double0, 0.01);
      
      Double double1 = new Double((-1.0));
      assertNotNull(double1);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = arrayList0.add(double1);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains((-3267.06454529272)));
      assertTrue(arrayList0.contains(double1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      assertNotNull(range1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals((-3267.06454529272), range1.getLowerBound(), 0.01);
      assertEquals(4492.06454529272, range1.getLength(), 0.01);
      assertEquals((-1021.0322726463601), range1.getCentralValue(), 0.01);
      assertEquals(1225.0, range1.getUpperBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(14.0, range0.getCentralValue(), 0.01);
      assertEquals(29.0, range0.getUpperBound(), 0.01);
      assertEquals(30.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotSame(range1, range0);
      assertNotSame(range0, range1);
      assertFalse(arrayList0.contains((-3267.06454529272)));
      assertTrue(arrayList0.contains(double1));
      assertFalse(range1.equals((Object)range0));
      assertEquals(4, oHLCDataItemArray0.length);
      
      Hour hour0 = Hour.parseHour("vFe>F<G:");
      assertNull(hour0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) null, 0.8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      double double0 = 1375.0098;
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      
      Minute minute0 = new Minute(0, hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getMinute());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(timePeriodValues0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      
      timePeriodValues0.add((TimePeriod) minute0, (Number) 23);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      
      Date[] dateArray0 = new Date[8];
      dateArray0[0] = (Date) mockDate0;
      dateArray0[1] = (Date) mockDate0;
      dateArray0[2] = (Date) mockDate0;
      dateArray0[3] = (Date) mockDate0;
      dateArray0[4] = (Date) mockDate0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1733, 1733, 1, 0, 28, 0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1733,MONTH=1733,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=28,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      dateArray0[5] = date0;
      dateArray0[6] = (Date) mockDate0;
      dateArray0[7] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 28;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(mockDate0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 28.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4, doubleArray0.length);
      assertEquals(8, dateArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNull(range0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = 1930.213921133548;
      doubleArray1[2] = 1042.065237089414;
      doubleArray1[3] = 2876.3;
      doubleArray1[4] = (-1117.984701);
      doubleArray1[5] = 1024.157342412461;
      doubleArray1[6] = 100.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = 1930.213921133548;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 100.0;
      doubleArray3[1] = 1930.213921133548;
      doubleArray3[2] = 100.0;
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray3[4] = 1930.213921133548;
      doubleArray3[5] = (-1117.984701);
      doubleArray3[6] = Double.NEGATIVE_INFINITY;
      doubleArray3[7] = 1930.213921133548;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][3];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[mean=";
      stringArray0[1] = "Requires 'samples' > 1";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, numberArray0.length);
      assertEquals(2, stringArray0.length);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals(2, numberArray0.length);
      assertEquals(2, stringArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNull(number0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, numberArray0.length);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertNull(range0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals(2, numberArray0.length);
      assertEquals(2, stringArray0.length);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      assertNotNull(mockSimpleDateFormat0);
      
      try { 
        mockSimpleDateFormat0.parse("TimePeriodValue[");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"TimePeriodValue[\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      Second second1 = (Second)second0.previous();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(20, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertFalse(second1.equals((Object)second0));
      
      timeTableXYDataset0.add((TimePeriod) second1, Double.NaN, "R-quires sJart <= end");
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(20, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotNull(range0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Number[][] numberArray0 = new Number[6][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, numberArray0.length);
      
      Double double0 = new Double(233.0);
      assertNotNull(double0);
      assertEquals(233.0, (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(233.0));
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[233.0]", stack0.toString());
      assertTrue(stack0.contains(233.0));
      
      Vector<DefaultTableXYDataset> vector0 = new Vector<DefaultTableXYDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) vector0, false);
      assertNull(range0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(6, numberArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNull(range1);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      Date date0 = second0.getEnd();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(date0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals("Fri Feb 14 20:21:22 GMT 2014", date0.toString());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(timePeriodValues0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timePeriodValuesCollection0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertTrue(boolean0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 59, (-996));
      assertNotNull(slidingCategoryDataset0);
      assertEquals(59, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-996), slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, (double) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-663.338), 3068.0546891114677, 3068.0546891114677, (-663.338), 1244.11862);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      mockDate0.setTime((-3L));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = new Range((-663.338), 1244.11862);
      assertNotNull(range0);
      assertEquals(1907.45662, range0.getLength(), 0.01);
      assertEquals((-663.338), range0.getLowerBound(), 0.01);
      assertEquals(1244.11862, range0.getUpperBound(), 0.01);
      assertEquals(290.39031, range0.getCentralValue(), 0.01);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(1244.11862));
      
      Double double0 = new Double(3068.0546891114677);
      assertNotNull(double0);
      assertEquals(3068.0546891114677, (double)double0, 0.01);
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(3068.0546891114677));
      assertFalse(arrayList0.contains(1244.11862));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      assertNotNull(range1);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1907.45662, range0.getLength(), 0.01);
      assertEquals((-663.338), range0.getLowerBound(), 0.01);
      assertEquals(1244.11862, range0.getUpperBound(), 0.01);
      assertEquals(290.39031, range0.getCentralValue(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(3068.0546891114677, range1.getCentralValue(), 0.01);
      assertEquals(3068.0546891114677, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(3068.0546891114677, range1.getLowerBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(arrayList0.contains(3068.0546891114677));
      assertFalse(arrayList0.contains(1244.11862));
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, true);
      assertNotNull(range2);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-3.0), range2.getLowerBound(), 0.01);
      assertEquals((-3.0), range2.getUpperBound(), 0.01);
      assertEquals((-3.0), range2.getCentralValue(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertTrue(arrayList0.contains(3068.0546891114677));
      assertFalse(arrayList0.contains(1244.11862));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range3);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-3.0), range3.getLowerBound(), 0.01);
      assertEquals((-3.0), range3.getCentralValue(), 0.01);
      assertEquals((-3.0), range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotSame(range3, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range2);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.equals((Object)range2));
      assertEquals(2, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-663.338), 3068.0546891114677, 3068.0546891114677, (-663.338), 1244.11862);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      mockDate0.setTime((-3L));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = new Range((-663.338), 1244.11862);
      assertNotNull(range0);
      assertEquals(1907.45662, range0.getLength(), 0.01);
      assertEquals((-663.338), range0.getLowerBound(), 0.01);
      assertEquals(1244.11862, range0.getUpperBound(), 0.01);
      assertEquals(290.39031, range0.getCentralValue(), 0.01);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains((-663.338)));
      
      Double double0 = new Double(3068.0546891114677);
      assertNotNull(double0);
      assertEquals(3068.0546891114677, (double)double0, 0.01);
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains(1244.11862));
      assertTrue(arrayList0.contains(3068.0546891114677));
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultOHLCDataset0, arrayList0, true);
      assertNotNull(range1);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-3.0), range1.getLowerBound(), 0.01);
      assertEquals((-3.0), range1.getCentralValue(), 0.01);
      assertEquals((-3.0), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(arrayList0.contains(1244.11862));
      assertTrue(arrayList0.contains(3068.0546891114677));
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range2);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-3.0), range2.getLowerBound(), 0.01);
      assertEquals((-3.0), range2.getCentralValue(), 0.01);
      assertEquals((-3.0), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range2, false);
      assertNotNull(range3);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-3.0), range2.getLowerBound(), 0.01);
      assertEquals((-3.0), range2.getCentralValue(), 0.01);
      assertEquals((-3.0), range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-663.338), range3.getCentralValue(), 0.01);
      assertEquals((-663.338), range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals((-663.338), range3.getLowerBound(), 0.01);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range3);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertFalse(arrayList0.contains(1244.11862));
      assertTrue(arrayList0.contains(3068.0546891114677));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertEquals(2, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-663.338), 3067.008931448202, 3067.008931448202, (-663.338), 1244.11862);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      mockDate0.setTime((-3L));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = new Range((-663.338), 1244.11862);
      assertNotNull(range0);
      assertEquals(290.39031, range0.getCentralValue(), 0.01);
      assertEquals(1244.11862, range0.getUpperBound(), 0.01);
      assertEquals((-663.338), range0.getLowerBound(), 0.01);
      assertEquals(1907.45662, range0.getLength(), 0.01);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(1244.11862));
      
      Double double0 = new Double(3067.008931448202);
      assertNotNull(double0);
      assertEquals(3067.008931448202, (double)double0, 0.01);
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains((-663.338)));
      assertTrue(arrayList0.contains(3067.008931448202));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
      assertNotNull(range1);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(290.39031, range0.getCentralValue(), 0.01);
      assertEquals(1244.11862, range0.getUpperBound(), 0.01);
      assertEquals((-663.338), range0.getLowerBound(), 0.01);
      assertEquals(1907.45662, range0.getLength(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-663.338), range1.getUpperBound(), 0.01);
      assertEquals((-663.338), range1.getCentralValue(), 0.01);
      assertEquals((-663.338), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(arrayList0.contains((-663.338)));
      assertTrue(arrayList0.contains(3067.008931448202));
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, doubleArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-590), 1923);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1923, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-590), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      timeTableXYDataset0.add((TimePeriod) second0, (double) 0, "Requires start <= end.");
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      double[][] doubleArray0 = new double[6][1];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 59;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 59;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 59;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 59;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2.0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (-707.5);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (double) 59;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (-707.5);
      doubleArray3[4] = (double) 59;
      doubleArray3[5] = (double) 59;
      doubleArray3[6] = (double) 59;
      doubleArray3[7] = (-707.5);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = 1251.0451001;
      doubleArray4[2] = 2.0;
      doubleArray4[3] = 2.0;
      doubleArray4[4] = (-707.5);
      doubleArray4[5] = (-707.5);
      doubleArray4[6] = (-1.0);
      doubleArray4[7] = (double) 0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = (double) 59;
      doubleArray6[1] = 1251.0451001;
      doubleArray6[2] = (-1.0);
      doubleArray6[3] = (-707.5);
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds(defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-663.338), 3068.0546891114677, 3068.0546891114677, (-663.338), 1244.11862);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      mockDate0.setTime((-3L));
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      defaultOHLCDataset0.sortDataByDate();
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = new Range((-663.338), 1244.11862);
      assertNotNull(range0);
      assertEquals(290.39031, range0.getCentralValue(), 0.01);
      assertEquals((-663.338), range0.getLowerBound(), 0.01);
      assertEquals(1244.11862, range0.getUpperBound(), 0.01);
      assertEquals(1907.45662, range0.getLength(), 0.01);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(3068.0546891114677));
      
      Double double0 = new Double(3068.0546891114677);
      assertNotNull(double0);
      assertEquals(3068.0546891114677, (double)double0, 0.01);
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(double0));
      assertFalse(arrayList0.contains((-663.338)));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      assertNotNull(range1);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(290.39031, range0.getCentralValue(), 0.01);
      assertEquals((-663.338), range0.getLowerBound(), 0.01);
      assertEquals(1244.11862, range0.getUpperBound(), 0.01);
      assertEquals(1907.45662, range0.getLength(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(3068.0546891114677, range1.getCentralValue(), 0.01);
      assertEquals(3068.0546891114677, range1.getUpperBound(), 0.01);
      assertEquals(3068.0546891114677, range1.getLowerBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(arrayList0.contains(double0));
      assertFalse(arrayList0.contains((-663.338)));
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      assertNotNull(range2);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(290.39031, range0.getCentralValue(), 0.01);
      assertEquals((-663.338), range0.getLowerBound(), 0.01);
      assertEquals(1244.11862, range0.getUpperBound(), 0.01);
      assertEquals(1907.45662, range0.getLength(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(3068.0546891114677, range2.getLowerBound(), 0.01);
      assertEquals(3068.0546891114677, range2.getCentralValue(), 0.01);
      assertEquals(3068.0546891114677, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertTrue(arrayList0.contains(double0));
      assertFalse(arrayList0.contains((-663.338)));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertTrue(range2.equals((Object)range1));
      assertEquals(2, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      
      Double double0 = new Double(35);
      assertNotNull(double0);
      assertEquals(35.0, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[35.0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(double0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) double0, (Number) double0, (Comparable) double0, (Comparable) double0);
      Double double1 = new Double((-94.38646176125472));
      assertNotNull(double1);
      assertEquals((-94.38646176125472), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Stack<Double> stack1 = new Stack<Double>();
      assertNotNull(stack1);
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.contains(double1));
      assertFalse(stack1.equals((Object)stack0));
      
      boolean boolean1 = stack1.add(double1);
      assertTrue(boolean1);
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertEquals("[-94.38646176125472]", stack1.toString());
      assertNotSame(stack1, stack0);
      assertTrue(stack1.contains(double1));
      assertFalse(stack1.contains(double0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, 214);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(214, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 214, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      Double double0 = new Double(2672.7979);
      assertNotNull(double0);
      assertEquals(2672.7979, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[2672.7979]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(2672.7979));
      
      Double double1 = new Double(2672.7979);
      assertNotNull(double1);
      assertEquals(2672.7979, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean1 = stack0.add(double1);
      assertTrue(boolean1);
      assertEquals("[2672.7979, 2672.7979]", stack0.toString());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(2672.7979));
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean1 == boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(8);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertNotNull(spreadsheetDate0);
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(8, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(7, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getMonth());
      
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      defaultMultiValueCategoryDataset0.add(stack0, spreadsheetDate0, hour0);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals("[2672.7979, 2672.7979]", stack0.toString());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(8, spreadsheetDate0.toSerial());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(7, spreadsheetDate0.getDayOfMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertTrue(stack0.contains(2672.7979));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(0.0);
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      Minute minute0 = new Minute((-3630), hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals((-46), minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      
      timePeriodValues0.add((TimePeriod) minute0, (Number) 23);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals((-46), minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
      assertNotNull(range0);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(0.0));
      
      boolean boolean0 = arrayList0.add((Double) 0.0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(0.0));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0);
      assertNotNull(range1);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.expandToInclude(range1, 0);
      assertNotNull(range2);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(6.9620464066E11, range2.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range2.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range2.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timePeriodValuesCollection0, (List) arrayList0, range1, true);
      assertNotNull(range3);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(23.0, range3.getLowerBound(), 0.01);
      assertEquals(23.0, range3.getCentralValue(), 0.01);
      assertEquals(23.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotSame(range1, range3);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertTrue(arrayList0.contains(0.0));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, doubleArray0.length);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      
      Vector<String> vector0 = new Vector<String>(1108);
      assertNotNull(vector0);
      assertEquals(1108, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      boolean boolean0 = vector0.add("");
      assertTrue(boolean0);
      assertEquals(1108, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains(""));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.AbstractSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Double double0 = new Double((-1438.6000712105845));
      assertNotNull(double0);
      assertEquals((-1438.6000712105845), (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[-1438.6000712105845]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(double0));
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      defaultCategoryDataset0.addValue((-1438.6000712105845), (Comparable) double0, (Comparable) double0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[-1438.6000712105845]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals((-1438.6000712105845), range0.getLowerBound(), 0.01);
      assertEquals((-1438.6000712105845), range0.getUpperBound(), 0.01);
      assertEquals((-1438.6000712105845), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains(double0));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1438.6000712105845), range1.getCentralValue(), 0.01);
      assertEquals((-1438.6000712105845), range1.getUpperBound(), 0.01);
      assertEquals((-1438.6000712105845), range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Double double0 = new Double((-2737.638));
      assertNotNull(double0);
      assertEquals((-2737.638), (double)double0, 0.01);
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains((-2737.638)));
      
      Double double1 = new Double(676.0);
      assertNotNull(double1);
      assertEquals(676.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = vector0.add(double1);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals("[676.0]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.contains(double1));
      assertFalse(vector0.contains(double0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      MockDate mockDate0 = new MockDate(2843, 92, 2843, 2843, (-1), 2843);
      assertNotNull(mockDate0);
      
      Day day0 = new Day(mockDate0);
      assertNotNull(day0);
      assertEquals("Thu Oct 09 11:46:23 GMT 4758", mockDate0.toString());
      assertEquals(88005095183000L, day0.getLastMillisecond());
      assertEquals(88005095183000L, day0.getFirstMillisecond());
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      assertNotNull(dateFormatSymbols0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(")<Ss+", dateFormatSymbols0);
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals(")<Ss+", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(")<Ss+", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2843, 92, day0, timeZone0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals("Thu Oct 09 11:46:23 GMT 4758", mockDate0.toString());
      assertEquals(88005095183000L, day0.getLastMillisecond());
      assertEquals(88005095183000L, day0.getFirstMillisecond());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals(")<Ss+", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(")<Ss+", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(91, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, vector0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Double double0 = new Double((-1438.6000712105845));
      assertNotNull(double0);
      assertEquals((-1438.6000712105845), (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-1438.6000712105845]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(double0));
      
      Double double1 = new Double((-1438.6000712105845));
      assertNotNull(double1);
      assertEquals((-1438.6000712105845), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean1 = stack0.add(double1);
      assertTrue(boolean1);
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[-1438.6000712105845, -1438.6000712105845]", stack0.toString());
      assertTrue(stack0.contains(double0));
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean1 == boolean0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      defaultCategoryDataset0.addValue((-1438.6000712105845), (Comparable) double0, (Comparable) double0);
      assertEquals((double)double0, (double)double1, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[-1438.6000712105845, -1438.6000712105845]", stack0.toString());
      assertEquals((-1438.6000712105845), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1438.6000712105845), range0.getCentralValue(), 0.01);
      assertEquals((-1438.6000712105845), range0.getUpperBound(), 0.01);
      assertTrue(stack0.contains(double0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) stack0, false);
      assertNotNull(range1);
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[-1438.6000712105845, -1438.6000712105845]", stack0.toString());
      assertEquals((-1438.6000712105845), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-1438.6000712105845), range1.getCentralValue(), 0.01);
      assertEquals((-1438.6000712105845), range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(stack0.contains(double0));
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Double double0 = new Double(35);
      assertNotNull(double0);
      assertEquals(35.0, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[35.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(double0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) double0, (Number) double0, (Comparable) double0, (Comparable) double0);
      Double double1 = new Double((-94.38646176125472));
      assertNotNull(double1);
      assertEquals((-94.38646176125472), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Stack<Double> stack1 = new Stack<Double>();
      assertNotNull(stack1);
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertFalse(stack1.contains(double1));
      assertFalse(stack1.equals((Object)stack0));
      
      boolean boolean1 = stack1.add(double1);
      assertTrue(boolean1);
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals("[-94.38646176125472]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertNotSame(stack1, stack0);
      assertFalse(stack1.contains(double0));
      assertTrue(stack1.contains(double1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, (-707));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-707), categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, doubleArray0.length);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(4, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, true);
      assertNotNull(range0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      MockDate mockDate1 = new MockDate((-1154), (-1154), (-1154), 156, 366, (-1154));
      assertNotNull(mockDate1);
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate1, 2937.7298673500713, 156, 0.5, (-1636.426100028), 1244.11862);
      assertNotNull(oHLCDataItem0);
      assertEquals("Sat Sep 09 17:46:46 GMT 646", mockDate1.toString());
      assertFalse(mockDate1.equals((Object)mockDate0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      oHLCDataItemArray0[2] = oHLCDataItem0;
      oHLCDataItemArray0[3] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate1, 2937.7298673500713, Double.NaN, 800.95597925467, Double.NaN, (-287.5722908791));
      assertNotNull(oHLCDataItem1);
      assertEquals("Sat Sep 09 17:46:46 GMT 646", mockDate1.toString());
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[4] = oHLCDataItem1;
      oHLCDataItemArray0[5] = oHLCDataItem0;
      oHLCDataItemArray0[6] = oHLCDataItem0;
      oHLCDataItemArray0[7] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(mockDate0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertEquals(8, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(156.0, range0.getUpperBound(), 0.01);
      assertEquals(0.5, range0.getLowerBound(), 0.01);
      assertEquals(78.25, range0.getCentralValue(), 0.01);
      assertEquals(155.5, range0.getLength(), 0.01);
      assertNotSame(mockDate0, mockDate1);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertEquals(8, oHLCDataItemArray0.length);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0);
      assertNotNull(range1);
      assertEquals((-4.1759388794E13), range1.getLowerBound(), 0.01);
      assertEquals((-4.1759388794E13), range1.getCentralValue(), 0.01);
      assertEquals((-4.1759388794E13), range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(range1, range0);
      assertNotSame(mockDate0, mockDate1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertEquals(8, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotNull(range2);
      assertEquals(0.5, range2.getLowerBound(), 0.01);
      assertEquals(78.25, range2.getCentralValue(), 0.01);
      assertEquals(156.0, range2.getUpperBound(), 0.01);
      assertEquals(155.5, range2.getLength(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(mockDate0, mockDate1);
      assertFalse(range2.equals((Object)range1));
      assertTrue(range2.equals((Object)range0));
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertEquals(8, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(0.0);
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      Minute minute0 = new Minute((-3597), hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      
      Minute minute1 = (Minute)minute0.next();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals((-12), minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute1.equals((Object)minute0));
      
      timePeriodValues0.add((TimePeriod) minute1, (Number) 23);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals((-12), minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
      assertNotNull(range0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(0.0));
      
      boolean boolean0 = arrayList0.add((Double) 0.0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(0.0));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0);
      assertNotNull(range1);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.expandToInclude(range1, 0);
      assertNotNull(range2);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(6.9620464066E11, range2.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range2.getLength(), 0.01);
      assertEquals(1.39240928132E12, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timePeriodValuesCollection0, (List) arrayList0, range1, false);
      assertNotNull(range3);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(23.0, range3.getLowerBound(), 0.01);
      assertEquals(23.0, range3.getCentralValue(), 0.01);
      assertEquals(23.0, range3.getUpperBound(), 0.01);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertNotSame(range1, range3);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertTrue(arrayList0.contains(0.0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertTrue(range3.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(0.0);
      assertNotNull(timePeriodValues0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      Minute minute0 = new Minute((-3597), hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      
      Minute minute1 = (Minute)minute0.next();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals((-12), minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute1.equals((Object)minute0));
      
      timePeriodValues0.add((TimePeriod) minute1, (Number) 23);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals((-12), minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
      assertNotNull(range0);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(0.0));
      
      boolean boolean0 = arrayList0.add((Double) 0.0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(0.0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timePeriodValuesCollection0, (List) arrayList0, range0, false);
      assertNull(range1);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(0.0));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "6tFtI%";
      stringArray0[2] = "FD_N(;uofN<~!\" [jq";
      stringArray0[3] = "~7D~ab";
      stringArray0[4] = "}lP<sscC@nK3</9>J-";
      stringArray0[5] = "F~Af7E*<LnNI@";
      stringArray0[6] = "PieDatasetChangeType.CLEAR";
      stringArray0[7] = "Requires 'samples' > 1";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, stringArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((-570.77891), 2117.5062);
      assertNotNull(powerFunction2D0);
      assertEquals(2117.5062, powerFunction2D0.getB(), 0.01);
      assertEquals((-570.77891), powerFunction2D0.getA(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-1397.0), (-570.77891), 250, integer0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(2117.5062, powerFunction2D0.getB(), 0.01);
      assertEquals((-570.77891), powerFunction2D0.getA(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(xYSeriesCollection0);
      assertNotNull(double0);
      assertEquals((-570.27891), (double)double0, 0.01);
      assertEquals(2117.5062, powerFunction2D0.getB(), 0.01);
      assertEquals((-570.77891), powerFunction2D0.getA(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(2117.5062, powerFunction2D0.getB(), 0.01);
      assertEquals((-570.77891), powerFunction2D0.getA(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals((-1397.5), range0.getLowerBound(), 0.01);
      assertEquals((-570.27891), range0.getUpperBound(), 0.01);
      assertEquals(827.22109, range0.getLength(), 0.01);
      assertEquals((-983.889455), range0.getCentralValue(), 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, true);
      assertNull(range1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Double double0 = new Double((-1438.6000712105845));
      assertNotNull(double0);
      assertEquals((-1438.6000712105845), (double)double0, 0.01);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Week week0 = new Week(289, 289);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(289, week0.getYearValue());
      assertEquals(33, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(15350L, week0.getSerialIndex());
      
      Week week1 = (Week)week0.next();
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week1);
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(289, week0.getYearValue());
      assertEquals(33, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(15350L, week0.getSerialIndex());
      assertEquals(34, week1.getWeek());
      assertEquals(289, week1.getYearValue());
      assertEquals(15351L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertFalse(week1.equals((Object)week0));
      
      timeTableXYDataset0.add((TimePeriod) week1, (-295.713878334), "");
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals(289, week0.getYearValue());
      assertEquals(33, week0.getWeek());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals(15350L, week0.getSerialIndex());
      assertEquals(34, week1.getWeek());
      assertEquals(289, week1.getYearValue());
      assertEquals(15351L, week1.getSerialIndex());
      assertEquals(1392409281319L, week1.getLastMillisecond());
      assertEquals(1392409281320L, week1.getFirstMillisecond());
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      
      double double1 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertEquals((-295.713878334), double1, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, doubleArray0.length);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      Vector<String> vector0 = new Vector<String>(1108);
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(1108, vector0.capacity());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) vector0, range0, true);
      assertNull(range1);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(1108, vector0.capacity());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Year year0 = new Year((-1355));
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(year0);
      assertEquals((-1355L), year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals((-1355), year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("-1355", year0.toString());
      
      Week week0 = new Week((-308), year0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals((-1355L), year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals((-1355), year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("-1355", year0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-1355), week0.getYearValue());
      assertEquals((-71867L), week0.getSerialIndex());
      assertEquals((-52), week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(week0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(timePeriodValues0);
      assertEquals((-1355L), year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals((-1355), year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("-1355", year0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-1355), week0.getYearValue());
      assertEquals((-71867L), week0.getSerialIndex());
      assertEquals((-52), week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      
      TimePeriodValues timePeriodValues1 = timePeriodValues0.createCopy(60, 1);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(timePeriodValues1);
      assertEquals((-1355L), year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals((-1355), year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("-1355", year0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-1355), week0.getYearValue());
      assertEquals((-71867L), week0.getSerialIndex());
      assertEquals((-52), week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1355L), year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals((-1355), year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("-1355", year0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-1355), week0.getYearValue());
      assertEquals((-71867L), week0.getSerialIndex());
      assertEquals((-52), week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timePeriodValuesCollection0);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertTrue(boolean0);
      assertEquals((-1355L), year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals((-1355), year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("-1355", year0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-1355), week0.getYearValue());
      assertEquals((-71867L), week0.getSerialIndex());
      assertEquals((-52), week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      Range range0 = timePeriodValuesCollection0.getDomainBounds(true);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNull(range0);
      assertEquals((-1355L), year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals((-1355), year0.getYear());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("-1355", year0.toString());
      assertEquals(1392409281319L, week0.getLastMillisecond());
      assertEquals((-1355), week0.getYearValue());
      assertEquals((-71867L), week0.getSerialIndex());
      assertEquals((-52), week0.getWeek());
      assertEquals(1392409281320L, week0.getFirstMillisecond());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertTrue(timePeriodValues0.equals((Object)timePeriodValues1));
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (-1355);
      doubleArray1[1] = (double) 60;
      doubleArray1[2] = (double) 60;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (double) (-9999);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 53;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = (double) (-308);
      doubleArray2[4] = 3055.453526547;
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) 1;
      doubleArray2[7] = (double) 53;
      doubleArray2[8] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 9999;
      doubleArray3[1] = (double) 9999;
      doubleArray3[2] = (double) 53;
      doubleArray3[3] = 3055.453526547;
      doubleArray3[4] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (double) (-9999);
      doubleArray5[1] = (double) (-1355);
      doubleArray5[2] = (double) 60;
      doubleArray5[3] = 3055.453526547;
      doubleArray5[4] = (double) (-9999);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = (double) 1;
      doubleArray6[1] = (double) 1;
      doubleArray6[2] = (double) 1;
      doubleArray6[3] = 3055.453526547;
      doubleArray0[5] = doubleArray6;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, 28);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(28, categoryToPieDataset0.getExtractIndex());
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 28, Size: 9
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Quarter quarter0 = new Quarter();
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(quarter0);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      
      timeTableXYDataset0.add((TimePeriod) quarter0, (double) 1, "");
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertEquals(1.0, double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1244.11862, 259.208, (-885.178), 2664.671167017078, 1244.11862);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Double double0 = new Double(Double.NaN);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[NaN]", stack0.toString());
      assertTrue(stack0.contains(Double.NaN));
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      timeTableXYDataset0.add((TimePeriod) fixedMillisecond0, Double.NaN, "org.jfree.data.time.FixedMillisecond");
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, true);
      assertNotNull(range0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[NaN]", stack0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains(Double.NaN));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, true);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(timePeriodValues0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      timeTableXYDataset0.add((TimePeriod) second0, (double) 59, "");
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Vector<Double> vector0 = new Vector<Double>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(59, 59, 9);
      assertNotNull(mockGregorianCalendar0);
      
      second0.peg(mockGregorianCalendar0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(999L, second0.getLastMillisecond());
      assertEquals(0L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=0,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      Double double0 = new Double(59);
      assertNotNull(double0);
      assertEquals(59.0, (double)double0, 0.01);
      
      boolean boolean0 = vector0.add(double0);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[59.0]", vector0.toString());
      assertTrue(vector0.contains(double0));
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, vector0, false);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[59.0]", vector0.toString());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertTrue(vector0.contains(double0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'visibleSeriesKeys' argument.", 40, 40);
      assertNotNull(matrixSeries0);
      assertEquals(40, matrixSeries0.getColumnsCount());
      assertEquals(1600, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(40, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 40, 2130);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(40, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2130, slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-663.338), 3068.0546891114677, 3068.0546891114677, (-663.338), 1244.11862);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      mockDate0.setTime(0L);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = new Range((-663.338), 1244.11862);
      assertNotNull(range0);
      assertEquals((-663.338), range0.getLowerBound(), 0.01);
      assertEquals(1244.11862, range0.getUpperBound(), 0.01);
      assertEquals(290.39031, range0.getCentralValue(), 0.01);
      assertEquals(1907.45662, range0.getLength(), 0.01);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(1244.11862));
      
      Double double0 = new Double(3068.0546891114677);
      assertNotNull(double0);
      assertEquals(3068.0546891114677, (double)double0, 0.01);
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains(1244.11862));
      assertTrue(arrayList0.contains(3068.0546891114677));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      assertNotNull(range1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-663.338), range0.getLowerBound(), 0.01);
      assertEquals(1244.11862, range0.getUpperBound(), 0.01);
      assertEquals(290.39031, range0.getCentralValue(), 0.01);
      assertEquals(1907.45662, range0.getLength(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(3068.0546891114677, range1.getLowerBound(), 0.01);
      assertEquals(3068.0546891114677, range1.getCentralValue(), 0.01);
      assertEquals(3068.0546891114677, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(arrayList0.contains(1244.11862));
      assertTrue(arrayList0.contains(3068.0546891114677));
      assertFalse(range1.equals((Object)range0));
      assertEquals(2, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1443.1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1443.1)}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray0.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((-1443.1));
      assertNotNull(timePeriodValues0);
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      
      Minute minute0 = new Minute((-3597), hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      
      Minute minute1 = new Minute(59, hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(59, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertFalse(minute1.equals((Object)minute0));
      
      timePeriodValues0.add((TimePeriod) minute1, (Number) 23);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(59, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertNotSame(minute1, minute0);
      assertFalse(minute1.equals((Object)minute0));
      
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) 59;
      numberArray1[1] = (Number) (-1443.1);
      numberArray1[2] = (Number) 59;
      numberArray1[3] = (Number) 59;
      numberArray1[4] = (Number) 23;
      numberArray1[5] = (Number) 59;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("[", "[", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(59.0, number0);
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(59.0, range0.getUpperBound(), 0.01);
      assertEquals(1443.1, range0.getLength(), 0.01);
      assertEquals((-662.55), range0.getCentralValue(), 0.01);
      assertEquals((-1384.1), range0.getLowerBound(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals((-1443.1), range1.getLowerBound(), 0.01);
      assertEquals(1502.1, range1.getLength(), 0.01);
      assertEquals((-692.05), range1.getCentralValue(), 0.01);
      assertEquals(59.0, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, numberArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds(categoryDataset0);
      assertNotNull(range2);
      assertEquals((-1443.1), range2.getLowerBound(), 0.01);
      assertEquals(59.0, range2.getUpperBound(), 0.01);
      assertEquals((-692.05), range2.getCentralValue(), 0.01);
      assertEquals(1502.1, range2.getLength(), 0.01);
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Double double0 = new Double((-1822.0));
      assertNotNull(double0);
      assertEquals((-1822.0), (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(double0));
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-1822.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(double0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      defaultCategoryDataset0.addValue(0.0, (Comparable) double0, (Comparable) double0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-1822.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertFalse(stack0.contains(0.0));
      assertTrue(stack0.contains(double0));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) jDBCXYDataset0, false);
      assertNotNull(range1);
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      Double double0 = new Double(35);
      assertNotNull(double0);
      assertEquals(35.0, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[35.0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(double0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) double0, (Number) double0, (Comparable) double0, (Comparable) double0);
      Double double1 = new Double((-94.73517036119827));
      assertNotNull(double1);
      assertEquals((-94.73517036119827), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Stack<Double> stack1 = new Stack<Double>();
      assertNotNull(stack1);
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertFalse(stack1.contains(double0));
      assertFalse(stack1.equals((Object)stack0));
      
      boolean boolean1 = stack1.add(double1);
      assertTrue(boolean1);
      assertFalse(stack1.isEmpty());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertEquals("[-94.73517036119827]", stack1.toString());
      assertNotSame(stack1, stack0);
      assertTrue(stack1.contains((-94.73517036119827)));
      assertFalse(stack1.contains(double0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals("[35.0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(70.0, range0.getLength(), 0.01);
      assertEquals(35.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(70.0, range0.getUpperBound(), 0.01);
      assertNotSame(stack0, stack1);
      assertFalse(stack0.contains((-94.73517036119827)));
      assertTrue(stack0.contains(double0));
      assertFalse(stack0.equals((Object)stack1));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Double double0 = new Double(35);
      assertNotNull(double0);
      assertEquals(35.0, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[35.0]", stack0.toString());
      assertTrue(stack0.contains(double0));
      
      Double double1 = new Double(35);
      assertNotNull(double1);
      assertEquals(35.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean1 = stack0.add(double1);
      assertTrue(boolean1);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals("[35.0, 35.0]", stack0.toString());
      assertTrue(stack0.contains(double1));
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(boolean1 == boolean0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) double1, (Number) double1, (Comparable) double1, (Comparable) double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((-94.73517036119827));
      assertNotNull(double2);
      assertEquals((-94.73517036119827), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(35.0, range0.getUpperBound(), 0.01);
      assertEquals(17.5, range0.getCentralValue(), 0.01);
      assertEquals(35.0, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNotNull(range1);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals("[35.0, 35.0]", stack0.toString());
      assertEquals(35.0, range1.getUpperBound(), 0.01);
      assertEquals(35.0, range1.getLowerBound(), 0.01);
      assertEquals(35.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(stack0.contains(double1));
      assertFalse(stack0.contains(double2));
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, 2);
      assertNotNull(pieDataset0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      assertNotNull(defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      
      defaultPieDataset0.setValue((Comparable) "", (-1439.5784248768803));
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "", (-715.1471760582), 1);
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(pieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockDate mockDate0 = new MockDate(17, 17, 1900, 2057, 2057, (-1114));
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertNotNull(simpleTimePeriod0);
      assertEquals("Thu Nov 08 02:58:26 GMT 1923", mockDate0.toString());
      assertEquals((-1456347694000L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1456347694000L), simpleTimePeriod0.getEndMillis());
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("UTC", timeZone0.getID());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("UTC", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      timeTableXYDataset0.add((TimePeriod) simpleTimePeriod0, (-1192.4), "");
      assertEquals("Thu Nov 08 02:58:26 GMT 1923", mockDate0.toString());
      assertEquals((-1456347694000L), simpleTimePeriod0.getStartMillis());
      assertEquals((-1456347694000L), simpleTimePeriod0.getEndMillis());
      assertEquals("UTC", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(timeTableXYDataset0, (-1114));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      Double double0 = new Double(35);
      assertNotNull(double0);
      assertEquals(35.0, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[35.0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(double0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) double0, (Number) double0, (Comparable) double0, (Comparable) double0);
      Double double1 = new Double((-94.73517036119827));
      assertNotNull(double1);
      assertEquals((-94.73517036119827), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Stack<Double> stack1 = new Stack<Double>();
      assertNotNull(stack1);
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertFalse(stack1.contains(double1));
      assertFalse(stack1.equals((Object)stack0));
      
      boolean boolean1 = stack1.add(double1);
      assertTrue(boolean1);
      assertFalse(stack1.isEmpty());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[-94.73517036119827]", stack1.toString());
      assertNotSame(stack1, stack0);
      assertTrue(stack1.contains(double1));
      assertFalse(stack1.contains(double0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals("[35.0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(70.0, range0.getLength(), 0.01);
      assertEquals(35.0, range0.getCentralValue(), 0.01);
      assertEquals(70.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertNotSame(stack0, stack1);
      assertFalse(stack0.contains(double1));
      assertTrue(stack0.contains(double0));
      assertFalse(stack0.equals((Object)stack1));
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Double double0 = Double.valueOf(556.9780631123967);
      assertNotNull(double0);
      assertEquals(556.9780631123967, (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(double0));
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[556.9780631123967]", stack0.toString());
      assertTrue(stack0.contains(double0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      defaultBoxAndWhiskerCategoryDataset0.add((List) stack0, (Comparable) double0, (Comparable) double0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[556.9780631123967]", stack0.toString());
      assertTrue(stack0.contains(double0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[556.9780631123967]", stack0.toString());
      assertEquals(556.9780631123967, range0.getLowerBound(), 0.01);
      assertEquals(556.9780631123967, range0.getCentralValue(), 0.01);
      assertEquals(556.9780631123967, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains(double0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Double double0 = new Double(1);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(double0));
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[1.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(double0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      defaultStatisticalCategoryDataset0.add((Number) double0, (Number) double0, (Comparable) double0, (Comparable) double0);
      Double double1 = new Double((-110.88796699658));
      assertNotNull(double1);
      assertEquals((-110.88796699658), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Stack<Double> stack1 = new Stack<Double>();
      assertNotNull(stack1);
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.contains(double0));
      assertFalse(stack1.equals((Object)stack0));
      
      boolean boolean1 = stack1.add(double1);
      assertTrue(boolean1);
      assertEquals("[-110.88796699658]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertNotSame(stack1, stack0);
      assertFalse(stack1.contains(double0));
      assertTrue(stack1.contains(double1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[1.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(2.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2.0, range0.getUpperBound(), 0.01);
      assertNotSame(stack0, stack1);
      assertFalse(stack0.contains(double1));
      assertTrue(stack0.contains(double0));
      assertFalse(stack0.equals((Object)stack1));
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Millisecond millisecond0 = new Millisecond();
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertNotNull(millisecond0);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      defaultKeyedValuesDataset0.setValue((Comparable) millisecond0, (-2392.8322852937217));
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2, 2);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2106, 1, 590, 0, 2, 2836);
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertNotNull(simpleTimePeriod0);
      assertEquals("Thu Sep 13 00:49:16 GMT 4007", mockDate0.toString());
      assertEquals(64303548556000L, simpleTimePeriod0.getStartMillis());
      assertEquals(64303548556000L, simpleTimePeriod0.getEndMillis());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      Locale locale1 = Locale.US;
      assertNotNull(locale1);
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("US", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale1);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("US", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(locale1.equals((Object)locale0));
      
      timeTableXYDataset0.add((TimePeriod) simpleTimePeriod0, (double) 0, "The number of row keys does not match the number of rows in the data array.");
      assertEquals("Thu Sep 13 00:49:16 GMT 4007", mockDate0.toString());
      assertEquals(64303548556000L, simpleTimePeriod0.getStartMillis());
      assertEquals(64303548556000L, simpleTimePeriod0.getEndMillis());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("US", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotNull(range0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("US", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2886.962674262024;
      doubleArray1[1] = 2886.962674262024;
      doubleArray1[2] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2886.962674262024;
      doubleArray2[1] = 1083.0;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 2886.962674262024;
      doubleArray2[4] = 2886.962674262024;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, doubleArray0.length);
      
      defaultIntervalCategoryDataset0.validateObject();
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1443.981337131012, range0.getCentralValue(), 0.01);
      assertEquals(2886.962674262024, range0.getUpperBound(), 0.01);
      assertEquals(2885.962674262024, range0.getLength(), 0.01);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.clearSelection();
      defaultKeyedValuesDataset0.setValue((Comparable) second0, (Number) 0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 0, 365);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(365, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-663.338), 3055.639337, 3055.639337, (-663.338), 1244.11862);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3055.639337, range0.getUpperBound(), 0.01);
      assertEquals(3055.639337, range0.getCentralValue(), 0.01);
      assertEquals(3055.639337, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(3055.639337));
      
      Double double0 = new Double(3055.639337);
      assertNotNull(double0);
      assertEquals(3055.639337, (double)double0, 0.01);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotNull(range1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(3055.639337, range1.getLowerBound(), 0.01);
      assertEquals(3055.639337, range1.getUpperBound(), 0.01);
      assertEquals(3055.639337, range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertEquals(2, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(59, 0);
      assertNotNull(powerFunction2D0);
      assertEquals(59.0, powerFunction2D0.getA(), 0.01);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 0, 3601570881L, 59, second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(59.0, powerFunction2D0.getA(), 0.01);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = xYSeriesCollection0.getDomainBounds(false);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(range0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(59.0, powerFunction2D0.getA(), 0.01);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.8007854405E9, range0.getCentralValue(), 0.01);
      assertEquals(3.601570881E9, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(3.601570881E9, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(range1);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(59.0, powerFunction2D0.getA(), 0.01);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(3.601570882E9, range1.getLength(), 0.01);
      assertEquals((-0.5), range1.getLowerBound(), 0.01);
      assertEquals(1.8007854405E9, range1.getCentralValue(), 0.01);
      assertEquals(3.6015708815E9, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Double double0 = new Double(1);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[1.0]", stack0.toString());
      assertTrue(stack0.contains(double0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      MockDate mockDate0 = new MockDate(1, (-2391), (-2391), 1, (-2391), 2057);
      assertNotNull(mockDate0);
      
      Year year0 = new Year(mockDate0);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotNull(year0);
      assertEquals("Sat Mar 12 09:43:17 GMT 1695", mockDate0.toString());
      assertEquals((-8672019403000L), year0.getLastMillisecond());
      assertEquals(1695L, year0.getSerialIndex());
      assertEquals(1695, year0.getYear());
      assertEquals((-8672019403000L), year0.getFirstMillisecond());
      assertEquals("1695", year0.toString());
      
      Year year1 = (Year)year0.next();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(year1);
      assertEquals("Sat Mar 12 09:43:17 GMT 1695", mockDate0.toString());
      assertEquals((-8672019403000L), year0.getLastMillisecond());
      assertEquals(1695L, year0.getSerialIndex());
      assertEquals(1695, year0.getYear());
      assertEquals((-8672019403000L), year0.getFirstMillisecond());
      assertEquals("1695", year0.toString());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1696, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals("1696", year1.toString());
      assertEquals(1696L, year1.getSerialIndex());
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertFalse(year1.equals((Object)year0));
      
      timeTableXYDataset0.add((TimePeriod) year1, (double) 2057, "4#r%+RuT?KD2mch-");
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Sat Mar 12 09:43:17 GMT 1695", mockDate0.toString());
      assertEquals((-8672019403000L), year0.getLastMillisecond());
      assertEquals(1695L, year0.getSerialIndex());
      assertEquals(1695, year0.getYear());
      assertEquals((-8672019403000L), year0.getFirstMillisecond());
      assertEquals("1695", year0.toString());
      assertEquals(1392409281320L, year1.getFirstMillisecond());
      assertEquals(1696, year1.getYear());
      assertEquals(1392409281320L, year1.getLastMillisecond());
      assertEquals("1696", year1.toString());
      assertEquals(1696L, year1.getSerialIndex());
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertNotNull(simpleTimePeriod0);
      assertEquals("Sat Mar 12 09:43:17 GMT 1695", mockDate0.toString());
      assertEquals((-8672019403000L), simpleTimePeriod0.getEndMillis());
      assertEquals((-8672019403000L), simpleTimePeriod0.getStartMillis());
      
      timeTableXYDataset0.add((TimePeriod) simpleTimePeriod0, 3743.776908, "The number of row keys does not match the number of rows in the data array.");
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Sat Mar 12 09:43:17 GMT 1695", mockDate0.toString());
      assertEquals((-8672019403000L), simpleTimePeriod0.getEndMillis());
      assertEquals((-8672019403000L), simpleTimePeriod0.getStartMillis());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, true);
      assertNotNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[1.0]", stack0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.006442868432E13, range0.getLength(), 0.01);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01);
      assertEquals((-3.63980506084E12), range0.getCentralValue(), 0.01);
      assertEquals((-8.672019403E12), range0.getLowerBound(), 0.01);
      assertTrue(stack0.contains(double0));
      assertFalse(stack0.contains(3743.776908));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(0.0);
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      
      Minute minute0 = new Minute((-3597), hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals((-13), minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      
      Minute minute1 = (Minute)minute0.next();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals((-13), minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals((-12), minute1.getMinute());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute1.equals((Object)minute0));
      
      timePeriodValues0.add((TimePeriod) minute1, (Number) 23);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals((-13), minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals((-12), minute1.getMinute());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "?'IDC-{<+N";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, stringArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-663.338), 3055.639337, 3055.639337, (-663.338), 1244.11862);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(oHLCDataItem0);
      assertNotNull(simpleHistogramDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Double double0 = new Double((-1439.5784248768803));
      assertNotNull(double0);
      assertEquals((-1439.5784248768803), (double)double0, 0.01);
      
      Short short0 = new Short((short) (-592));
      assertNotNull(short0);
      assertEquals((short) (-592), (short)short0);
      
      Predicate<Double> predicate0 = Predicate.isEqual((Object) short0);
      assertNotNull(predicate0);
      
      Predicate<Double> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      boolean boolean0 = stack0.removeIf(predicate1);
      assertFalse(boolean0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(double0));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      
      boolean boolean1 = stack0.add(double0);
      assertTrue(boolean1);
      assertFalse(stack0.isEmpty());
      assertEquals("[-1439.5784248768803]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(double0));
      assertFalse(boolean1 == boolean0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      defaultCategoryDataset0.addValue((-1439.5784248768803), (Comparable) double0, (Comparable) double0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals("[-1439.5784248768803]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1439.5784248768803), range0.getLowerBound(), 0.01);
      assertEquals((-1439.5784248768803), range0.getUpperBound(), 0.01);
      assertEquals((-1439.5784248768803), range0.getCentralValue(), 0.01);
      assertTrue(stack0.contains((-1439.5784248768803)));
      
      MatrixSeries matrixSeries0 = new MatrixSeries("(hWQZ;L%xtrJyELB", 2, 1442);
      assertNotNull(matrixSeries0);
      assertEquals(1442, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2884, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1442, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2884, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotNull(range1);
      assertEquals(1442, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(2, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(2884, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.5, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Double double0 = new Double((-2405.2536276967207));
      assertNotNull(double0);
      assertEquals((-2405.2536276967207), (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[-2405.2536276967207]", stack0.toString());
      assertTrue(stack0.contains(double0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      MockDate mockDate0 = new MockDate((-1), 2057, 1734, 1734, 1734, 1734);
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertNotNull(simpleTimePeriod0);
      assertEquals("Sun May 12 11:22:54 GMT 2075", mockDate0.toString());
      assertEquals(3324885774000L, simpleTimePeriod0.getEndMillis());
      assertEquals(3324885774000L, simpleTimePeriod0.getStartMillis());
      
      timeTableXYDataset0.add((TimePeriod) simpleTimePeriod0, (double) (-1), "veB#2B");
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Sun May 12 11:22:54 GMT 2075", mockDate0.toString());
      assertEquals(3324885774000L, simpleTimePeriod0.getEndMillis());
      assertEquals(3324885774000L, simpleTimePeriod0.getStartMillis());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultMultiValueCategoryDataset0, 1);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) mockDate0, (-2405.2536276967207));
      assertNotNull(pieDataset1);
      assertEquals("Sun May 12 11:22:54 GMT 2075", mockDate0.toString());
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset1);
      assertTrue(boolean1);
      assertEquals("Sun May 12 11:22:54 GMT 2075", mockDate0.toString());
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      assertTrue(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeTableXYDataset0, true);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      Double double0 = new Double(1);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Double double1 = new Double(1);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(Double.NEGATIVE_INFINITY);
      assertNotNull(double2);
      assertEquals(Double.NEGATIVE_INFINITY, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      boolean boolean0 = stack0.add(double2);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-Infinity]", stack0.toString());
      assertFalse(stack0.contains(double0));
      assertTrue(stack0.contains(double2));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      defaultCategoryDataset0.addValue(1693.0, (Comparable) double2, (Comparable) double0);
      assertEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[-Infinity]", stack0.toString());
      assertEquals(1693.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1693.0, range0.getCentralValue(), 0.01);
      assertEquals(1693.0, range0.getUpperBound(), 0.01);
      assertFalse(stack0.contains(double0));
      assertTrue(stack0.contains(double2));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(double0));
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      defaultCategoryDataset0.addValue(0.0, (Comparable) double0, (Comparable) double0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals("[0.0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertTrue(stack0.contains(0.0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Quarter quarter0 = new Quarter();
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(quarter0);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      
      timeTableXYDataset0.add((TimePeriod) quarter0, (double) 0, "Null 'rowKey' argument.");
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      MockDate mockDate0 = new MockDate((-1), 2057, 1734, 1734, 1734, 1734);
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertNotNull(simpleTimePeriod0);
      assertEquals("Sun May 12 11:22:54 GMT 2075", mockDate0.toString());
      assertEquals(3324885774000L, simpleTimePeriod0.getEndMillis());
      assertEquals(3324885774000L, simpleTimePeriod0.getStartMillis());
      
      timeTableXYDataset0.add((TimePeriod) simpleTimePeriod0, (double) (-1), "");
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Sun May 12 11:22:54 GMT 2075", mockDate0.toString());
      assertEquals(3324885774000L, simpleTimePeriod0.getEndMillis());
      assertEquals(3324885774000L, simpleTimePeriod0.getStartMillis());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-0.5), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 51);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset0);
      assertEquals(0.0, double0, 0.01);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(number0.equals((Object)double0));
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      
      Double double0 = new Double((-4015.0));
      assertNotNull(double0);
      assertEquals((-4015.0), (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals("[-4015.0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(double0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      MockDate mockDate0 = new MockDate(1, (-2391), (-2391), 1, (-2391), 2057);
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertNotNull(simpleTimePeriod0);
      assertEquals("Sat Mar 12 09:43:17 GMT 1695", mockDate0.toString());
      assertEquals((-8672019403000L), simpleTimePeriod0.getStartMillis());
      assertEquals((-8672019403000L), simpleTimePeriod0.getEndMillis());
      
      timeTableXYDataset0.add((TimePeriod) simpleTimePeriod0, 3743.776908, "The number of row keys does not match the number of rows in the data array.");
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Sat Mar 12 09:43:17 GMT 1695", mockDate0.toString());
      assertEquals((-8672019403000L), simpleTimePeriod0.getStartMillis());
      assertEquals((-8672019403000L), simpleTimePeriod0.getEndMillis());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, true);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-8.672019403E12), range0.getLowerBound(), 0.01);
      assertEquals((-8.672019403E12), range0.getUpperBound(), 0.01);
      assertEquals((-8.672019403E12), range0.getCentralValue(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) stack0, range0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      MockDate mockDate0 = new MockDate((-1), 2057, 1734, 1734, 1734, 1734);
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertNotNull(simpleTimePeriod0);
      assertEquals("Sun May 12 11:22:54 GMT 2075", mockDate0.toString());
      assertEquals(3324885774000L, simpleTimePeriod0.getStartMillis());
      assertEquals(3324885774000L, simpleTimePeriod0.getEndMillis());
      
      timeTableXYDataset0.add((TimePeriod) simpleTimePeriod0, (double) (-1), "");
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Sun May 12 11:22:54 GMT 2075", mockDate0.toString());
      assertEquals(3324885774000L, simpleTimePeriod0.getStartMillis());
      assertEquals(3324885774000L, simpleTimePeriod0.getEndMillis());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals((-0.5), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultMultiValueCategoryDataset0);
      assertNull(number0);
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, false);
      assertNotNull(range2);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(3.324885774E12, range2.getLowerBound(), 0.01);
      assertEquals(3.324885774E12, range2.getCentralValue(), 0.01);
      assertEquals(3.324885774E12, range2.getUpperBound(), 0.01);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Double double0 = new Double((-1439.5784248768803));
      assertNotNull(double0);
      assertEquals((-1439.5784248768803), (double)double0, 0.01);
      
      Double double1 = new Double((-1439.5784248768803));
      assertNotNull(double1);
      assertEquals((-1439.5784248768803), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double1);
      assertTrue(boolean0);
      assertEquals("[-1439.5784248768803]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains((-1439.5784248768803)));
      assertEquals((double)double1, (double)double0, 0.01);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      defaultCategoryDataset0.addValue((-1439.5784248768803), (Comparable) double0, (Comparable) double0);
      assertEquals((double)double0, (double)double1, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) stack0, true);
      assertNotNull(range0);
      assertEquals("[-1439.5784248768803]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1439.5784248768803), range0.getLowerBound(), 0.01);
      assertEquals((-1439.5784248768803), range0.getCentralValue(), 0.01);
      assertEquals((-1439.5784248768803), range0.getUpperBound(), 0.01);
      assertTrue(stack0.contains((-1439.5784248768803)));
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Double double0 = new Double((-4015.0));
      assertNotNull(double0);
      assertEquals((-4015.0), (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-4015.0]", stack0.toString());
      assertTrue(stack0.contains(double0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      MockDate mockDate0 = new MockDate(1, (-2391), (-2391), 1, (-2391), 2057);
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertNotNull(simpleTimePeriod0);
      assertEquals("Sat Mar 12 09:43:17 GMT 1695", mockDate0.toString());
      assertEquals((-8672019403000L), simpleTimePeriod0.getStartMillis());
      assertEquals((-8672019403000L), simpleTimePeriod0.getEndMillis());
      
      timeTableXYDataset0.add((TimePeriod) simpleTimePeriod0, 3743.776908, "The number of row keys does not match the number of rows in the data array.");
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Sat Mar 12 09:43:17 GMT 1695", mockDate0.toString());
      assertEquals((-8672019403000L), simpleTimePeriod0.getStartMillis());
      assertEquals((-8672019403000L), simpleTimePeriod0.getEndMillis());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0, true);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-8.672019403E12), range0.getLowerBound(), 0.01);
      assertEquals((-8.672019403E12), range0.getCentralValue(), 0.01);
      assertEquals((-8.672019403E12), range0.getUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      Double double0 = new Double((-4015.0));
      assertNotNull(double0);
      assertEquals((-4015.0), (double)double0, 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      MockDate mockDate0 = new MockDate(1, (-2391), (-2391), 1, (-2391), 2057);
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertNotNull(simpleTimePeriod0);
      assertEquals("Sat Mar 12 09:43:17 GMT 1695", mockDate0.toString());
      assertEquals((-8672019403000L), simpleTimePeriod0.getStartMillis());
      assertEquals((-8672019403000L), simpleTimePeriod0.getEndMillis());
      
      timeTableXYDataset0.add((TimePeriod) simpleTimePeriod0, 3743.776908, "The number of row keys does not match the number of rows in the data array.");
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Sat Mar 12 09:43:17 GMT 1695", mockDate0.toString());
      assertEquals((-8672019403000L), simpleTimePeriod0.getStartMillis());
      assertEquals((-8672019403000L), simpleTimePeriod0.getEndMillis());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) 2057);
      assertNotNull(range0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(5800.776908, range0.getUpperBound(), 0.01);
      assertEquals(2057.0, range0.getLowerBound(), 0.01);
      assertEquals(3928.888454, range0.getCentralValue(), 0.01);
      assertEquals(3743.776908, range0.getLength(), 0.01);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(3743.776908, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1871.888454, range1.getCentralValue(), 0.01);
      assertEquals(3743.776908, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-21);
      doubleArray2[1] = (double) (-21);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-21);
      doubleArray3[1] = (double) (-21);
      doubleArray3[2] = (double) (-21);
      doubleArray3[3] = (double) (-21);
      doubleArray3[4] = (double) (-21);
      doubleArray3[5] = (double) (-21);
      doubleArray3[6] = (double) (-21);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) (-21);
      doubleArray4[1] = (double) (-21);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = (double) (-21);
      doubleArray5[1] = (double) (-21);
      doubleArray5[2] = (double) (-21);
      doubleArray5[3] = (double) (-21);
      doubleArray5[4] = (double) (-21);
      doubleArray5[5] = (-5158.9605098);
      doubleArray5[6] = (double) (-21);
      doubleArray5[7] = (double) (-21);
      doubleArray5[8] = (double) (-21);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      
      doubleArray7[0] = (-5158.9605098);
      doubleArray7[1] = (double) (-21);
      doubleArray7[2] = (double) (-21);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      
      doubleArray8[0] = (-5158.9605098);
      doubleArray8[1] = (-5158.9605098);
      doubleArray8[2] = (-5158.9605098);
      doubleArray8[3] = (-5158.9605098);
      doubleArray8[4] = (double) (-21);
      doubleArray8[5] = (double) (-21);
      doubleArray0[7] = doubleArray8;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'series' not permitted.", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(8, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-21));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-21), categoryToPieDataset0.getExtractIndex());
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) (-21.0), (-1039.82));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(0.0);
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      Minute minute0 = new Minute((-3597), hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      
      Minute minute1 = (Minute)minute0.next();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      assertEquals((-12), minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute1.equals((Object)minute0));
      
      timePeriodValues0.add((TimePeriod) minute1, (Number) 23);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      assertEquals((-12), minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
      assertNotNull(range0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNotNull(range1);
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1443.1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1443.1)}, doubleArray1, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray1.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((-1443.1));
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      Minute minute0 = new Minute();
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      
      Minute minute1 = (Minute)minute0.next();
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(22, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute1.equals((Object)minute0));
      
      timePeriodValues0.add((TimePeriod) minute1, (Number) 23);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(22, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
      assertNotNull(range0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNotNull(range1);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(23.0, range1.getCentralValue(), 0.01);
      assertEquals(23.0, range1.getUpperBound(), 0.01);
      assertEquals(23.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = vector0.add(xYIntervalSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(vector0.contains(xYIntervalSeriesCollection0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, (List) vector0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Double double0 = new Double((-2405.2536276967207));
      assertNotNull(double0);
      assertEquals((-2405.2536276967207), (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[-2405.2536276967207]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(double0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      MockDate mockDate0 = new MockDate((-1), 2057, 1734, 1734, 1734, 1734);
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertNotNull(simpleTimePeriod0);
      assertEquals("Sun May 12 11:22:54 GMT 2075", mockDate0.toString());
      assertEquals(3324885774000L, simpleTimePeriod0.getEndMillis());
      assertEquals(3324885774000L, simpleTimePeriod0.getStartMillis());
      
      timeTableXYDataset0.add((TimePeriod) simpleTimePeriod0, (double) (-1), "");
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Sun May 12 11:22:54 GMT 2075", mockDate0.toString());
      assertEquals(3324885774000L, simpleTimePeriod0.getEndMillis());
      assertEquals(3324885774000L, simpleTimePeriod0.getStartMillis());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, false);
      assertNotNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals("[-2405.2536276967207]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(3.324885774E12, range0.getLowerBound(), 0.01);
      assertEquals(3.324885774E12, range0.getCentralValue(), 0.01);
      assertEquals(3.324885774E12, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains(double0));
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotNull(range2);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.0, range2.getLength(), 0.01);
      assertEquals((-1.0), range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals((-0.5), range2.getCentralValue(), 0.01);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) stack0, range2, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Double double0 = new Double((-3104.7961479452));
      assertNotNull(double0);
      assertEquals((-3104.7961479452), (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains((-3104.7961479452)));
      
      Double double1 = new Double((-3104.7961479452));
      assertNotNull(double1);
      assertEquals((-3104.7961479452), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double1);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[-3104.7961479452]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains((-3104.7961479452)));
      assertEquals((double)double1, (double)double0, 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      MockDate mockDate0 = new MockDate(1, 1, 5, 34, (-3980), 1);
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertNotNull(simpleTimePeriod0);
      assertEquals("Sun Feb 03 15:40:01 GMT 1901", mockDate0.toString());
      assertEquals((-2174545199000L), simpleTimePeriod0.getStartMillis());
      assertEquals((-2174545199000L), simpleTimePeriod0.getEndMillis());
      
      timeTableXYDataset0.add((TimePeriod) simpleTimePeriod0, (-762.3), "5`SZWs/fhVzvBA=");
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Sun Feb 03 15:40:01 GMT 1901", mockDate0.toString());
      assertEquals((-2174545199000L), simpleTimePeriod0.getStartMillis());
      assertEquals((-2174545199000L), simpleTimePeriod0.getEndMillis());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, true);
      assertNotNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[-3104.7961479452]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-2.174545199E12), range0.getLowerBound(), 0.01);
      assertEquals((-2.174545199E12), range0.getCentralValue(), 0.01);
      assertEquals((-2.174545199E12), range0.getUpperBound(), 0.01);
      assertFalse(stack0.contains((-762.3)));
      assertTrue(stack0.contains((-3104.7961479452)));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (-3104.7961479452));
      assertNotNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals((-3485.9461479452), range1.getCentralValue(), 0.01);
      assertEquals((-3104.7961479452), range1.getUpperBound(), 0.01);
      assertEquals((-3867.0961479452), range1.getLowerBound(), 0.01);
      assertEquals(762.2999999999997, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) arrayDeque0);
      assertNotNull(list0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertTrue(boolean0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-1), (-1));
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals((-1), slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1), slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(0.0);
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      
      Double double0 = new Double(952.8471978743);
      assertNotNull(double0);
      assertEquals(952.8471978743, (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(double0));
      
      Double double1 = new Double(952.8471978743);
      assertNotNull(double1);
      assertEquals(952.8471978743, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double1);
      assertTrue(boolean0);
      assertEquals("[952.8471978743]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains(0.0));
      assertTrue(stack0.contains(double0));
      assertEquals((double)double1, (double)double0, 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      MockDate mockDate0 = new MockDate((-4867), 213, (-2195), 744, 746, 530);
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertNotNull(simpleTimePeriod0);
      assertEquals("Thu Oct 27 12:34:50 GMT 2957", mockDate0.toString());
      assertEquals((-155425692310000L), simpleTimePeriod0.getEndMillis());
      assertEquals((-155425692310000L), simpleTimePeriod0.getStartMillis());
      
      timeTableXYDataset0.add((TimePeriod) simpleTimePeriod0, (double) 746, "Null 'columnKeys' argument.");
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Thu Oct 27 12:34:50 GMT 2957", mockDate0.toString());
      assertEquals((-155425692310000L), simpleTimePeriod0.getEndMillis());
      assertEquals((-155425692310000L), simpleTimePeriod0.getStartMillis());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, false);
      assertNotNull(range0);
      assertEquals("[952.8471978743]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.5542569231E14), range0.getLowerBound(), 0.01);
      assertEquals((-1.5542569231E14), range0.getCentralValue(), 0.01);
      assertEquals((-1.5542569231E14), range0.getUpperBound(), 0.01);
      assertFalse(stack0.contains(0.0));
      assertTrue(stack0.contains(double0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      assertNotNull(jDBCPieDataset0);
      
      Quarter quarter0 = new Quarter();
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(quarter0);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      
      Quarter quarter1 = (Quarter)quarter0.next();
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(quarter1);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertFalse(quarter1.equals((Object)quarter0));
      
      long long0 = quarter1.getLastMillisecond();
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1392409281320L, long0);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      
      jDBCPieDataset0.setValue((Comparable) quarter1, (double) 4);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(8058L, quarter1.getSerialIndex());
      assertEquals(2, quarter1.getQuarter());
      assertEquals(2014, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) jDBCPieDataset0);
      assertFalse(boolean0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) jDBCPieDataset0, (Comparable) quarter0, (double) 1, 4);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(defaultPieDataset0);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertNotSame(quarter0, quarter1);
      assertFalse(quarter0.equals((Object)quarter1));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Double double0 = new Double((-4015.0));
      assertNotNull(double0);
      assertEquals((-4015.0), (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(double0));
      
      Double double1 = new Double((-2405.2536276967207));
      assertNotNull(double1);
      assertEquals((-2405.2536276967207), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double1);
      assertTrue(boolean0);
      assertEquals("[-2405.2536276967207]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains((-2405.2536276967207)));
      assertFalse(stack0.contains(double0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      int int0 = 530;
      int int1 = 53;
      MockDate mockDate0 = new MockDate(2057, (-1), 53, 530, 2057, 213);
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertNotNull(simpleTimePeriod0);
      assertEquals("Thu Feb 14 12:20:33 GMT 3957", mockDate0.toString());
      assertEquals(62707522833000L, simpleTimePeriod0.getEndMillis());
      assertEquals(62707522833000L, simpleTimePeriod0.getStartMillis());
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      boolean boolean1 = simpleTimePeriod0.equals(defaultIntervalXYDataset0);
      assertFalse(boolean1);
      assertEquals("Thu Feb 14 12:20:33 GMT 3957", mockDate0.toString());
      assertEquals(62707522833000L, simpleTimePeriod0.getEndMillis());
      assertEquals(62707522833000L, simpleTimePeriod0.getStartMillis());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertFalse(boolean1 == boolean0);
      
      timeTableXYDataset0.add((TimePeriod) simpleTimePeriod0, (-2405.2536276967207), "Null 'columnKeys' argument.");
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Thu Feb 14 12:20:33 GMT 3957", mockDate0.toString());
      assertEquals(62707522833000L, simpleTimePeriod0.getEndMillis());
      assertEquals(62707522833000L, simpleTimePeriod0.getStartMillis());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, true);
      assertNotNull(range0);
      assertEquals("[-2405.2536276967207]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(6.2707522833E13, range0.getUpperBound(), 0.01);
      assertEquals(6.2707522833E13, range0.getCentralValue(), 0.01);
      assertEquals(6.2707522833E13, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains((-2405.2536276967207)));
      assertFalse(stack0.contains(double0));
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
      assertNotNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals((-2405.2536276967207), range1.getUpperBound(), 0.01);
      assertEquals((-2405.2536276967207), range1.getLowerBound(), 0.01);
      assertEquals((-2405.2536276967207), range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(53, "", (-1), 1916, 213, 2958465, 58, 530, 2, 2958465);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -1
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(4, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range1);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertEquals(4, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, 44);
      assertNotNull(categoryToPieDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(44, categoryToPieDataset0.getExtractIndex());
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-4560.0998881);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-398.85);
      doubleArray2[1] = (-4560.0998881);
      doubleArray2[2] = (-4560.0998881);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-4560.0998881);
      doubleArray3[1] = (-4560.0998881);
      doubleArray3[2] = (-398.85);
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, doubleArray0.length);
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(defaultXYDataset0);
      assertNotNull(intervalXYDelegate0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      
      defaultIntervalCategoryDataset0.addChangeListener(intervalXYDelegate0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertTrue(intervalXYDelegate0.isAutoWidth());
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
      assertNotNull(range0);
      assertEquals((-4560.0998881), range0.getLowerBound(), 0.01);
      assertEquals((-2479.47494405), range0.getCentralValue(), 0.01);
      assertEquals(4161.249888099999, range0.getLength(), 0.01);
      assertEquals((-398.85), range0.getUpperBound(), 0.01);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, doubleArray0.length);
      
      Comparable<Float>[] comparableArray0 = (Comparable<Float>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 1170, 1170);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(1170, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1170, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingGanttCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.gantt.SlidingGanttCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 37;
      doubleArray1[1] = (double) 37;
      doubleArray1[2] = (-3032.48901381);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-3032.48901381);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (-3032.48901381);
      doubleArray4[1] = (-3032.48901381);
      doubleArray4[2] = (-3032.48901381);
      doubleArray4[3] = (-3032.48901381);
      doubleArray4[4] = (-3032.48901381);
      doubleArray4[5] = (-393.0);
      doubleArray4[6] = (-3032.48901381);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-393.0);
      doubleArray5[1] = (-393.0);
      doubleArray5[2] = (-3032.48901381);
      doubleArray5[3] = (double) 37;
      doubleArray5[4] = (-393.0);
      doubleArray5[5] = 22.0;
      doubleArray5[6] = (double) 37;
      doubleArray5[7] = (-393.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = (double) 37;
      doubleArray6[1] = 1101.9660058187;
      doubleArray6[2] = (-3032.48901381);
      doubleArray6[3] = (-1736.29992546902);
      doubleArray6[4] = 22.0;
      doubleArray6[5] = (-3032.48901381);
      doubleArray0[5] = doubleArray6;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "Null 'data' array.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 37, 37);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(37, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(37, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) (-3032.48901381));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 36, Size: 8
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, doubleArray0.length);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, (-663.338), 3055.639337, 3055.639337, (-663.338), 1244.11862);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      oHLCDataItemArray0[0] = oHLCDataItem0;
      oHLCDataItemArray0[1] = oHLCDataItem0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3055.639337, range0.getCentralValue(), 0.01);
      assertEquals(3055.639337, range0.getLowerBound(), 0.01);
      assertEquals(3055.639337, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains((-663.338)));
      
      Double double0 = new Double(3055.639337);
      assertNotNull(double0);
      assertEquals(3055.639337, (double)double0, 0.01);
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(3055.639337));
      assertFalse(arrayList0.contains((-663.338)));
      
      boolean boolean1 = arrayList0.add(double0);
      assertTrue(boolean1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(3055.639337));
      assertFalse(arrayList0.contains((-663.338)));
      assertTrue(boolean1 == boolean0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      assertNull(range1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3055.639337, range0.getCentralValue(), 0.01);
      assertEquals(3055.639337, range0.getLowerBound(), 0.01);
      assertEquals(3055.639337, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(3055.639337));
      assertFalse(arrayList0.contains((-663.338)));
      assertEquals(2, oHLCDataItemArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range2);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range0));
      assertEquals(1, doubleArray0.length);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, true);
      assertNotNull(range3);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(3055.639337, range3.getLowerBound(), 0.01);
      assertEquals(3055.639337, range3.getCentralValue(), 0.01);
      assertEquals(3055.639337, range3.getUpperBound(), 0.01);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(range3, range2);
      assertNotSame(range3, range0);
      assertTrue(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertEquals(2, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Double double0 = new Double(974.3884);
      assertNotNull(double0);
      assertEquals(974.3884, (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(double0));
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[974.3884]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(double0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      MockDate mockDate0 = new MockDate(530, 2057, (-1), 1734, (-1), 1256);
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertNotNull(simpleTimePeriod0);
      assertEquals("Mon Aug 10 06:19:56 GMT 2601", mockDate0.toString());
      assertEquals(19931552396000L, simpleTimePeriod0.getStartMillis());
      assertEquals(19931552396000L, simpleTimePeriod0.getEndMillis());
      
      mockDate0.setTime(1734);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      long long0 = mockDate0.getTime();
      assertEquals(1734L, long0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      timeTableXYDataset0.add((TimePeriod) simpleTimePeriod0, (-329.00272725), "N Bi<o0xs");
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(19931552396000L, simpleTimePeriod0.getStartMillis());
      assertEquals(19931552396000L, simpleTimePeriod0.getEndMillis());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, true);
      assertNotNull(range0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[974.3884]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.9931552396E13, range0.getCentralValue(), 0.01);
      assertEquals(1.9931552396E13, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.9931552396E13, range0.getLowerBound(), 0.01);
      assertFalse(stack0.contains((-329.00272725)));
      assertTrue(stack0.contains(double0));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 505.99782805384;
      doubleArray1[1] = (-1037.011240451517);
      doubleArray1[2] = (-183.36169299);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1543.0090685053572, range0.getLength(), 0.01);
      assertEquals((-265.5067061988385), range0.getCentralValue(), 0.01);
      assertEquals(505.99782805384, range0.getUpperBound(), 0.01);
      assertEquals((-1037.011240451517), range0.getLowerBound(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "lH<z.fIe\\3\\u2";
      MatrixSeries matrixSeries0 = new MatrixSeries(string0, 1, 1);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      
      CategoryDataset categoryDataset0 = null;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, (-3513), (-2914));
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-2914), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-3513), slidingCategoryDataset0.getFirstCategoryIndex());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingCategoryDataset0, tableOrder0, 1);
      assertNotNull(categoryToPieDataset0);
      assertEquals((-2914), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-3513), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1, categoryToPieDataset0.getExtractIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) string0, (KeyedValues) categoryToPieDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, doubleArray0.length);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2801);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertNotNull(spreadsheetDate0);
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(1907, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(9, spreadsheetDate0.getMonth());
      assertEquals(2801, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      
      Date date0 = spreadsheetDate0.toDate();
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertNotNull(date0);
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(1907, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(9, spreadsheetDate0.getMonth());
      assertEquals(2801, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 9999, (-393.3415246856462), 3, 1900, 7);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertNotNull(oHLCDataItem0);
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(1907, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(9, spreadsheetDate0.getMonth());
      assertEquals(2801, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, 0.0, 0, (-393.3415246856462), 2, (-1.0));
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertNotNull(oHLCDataItem1);
      assertEquals(1, spreadsheetDate0.getDayOfWeek());
      assertEquals(1907, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(9, spreadsheetDate0.getMonth());
      assertEquals(2801, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) null, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(2, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-393.3415246856462), range0.getLowerBound(), 0.01);
      assertEquals((-196.6707623428231), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(393.3415246856462, range0.getLength(), 0.01);
      assertEquals(2, oHLCDataItemArray0.length);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains((-1.0)));
      
      Double double0 = new Double(0.8);
      assertNotNull(double0);
      assertEquals(0.8, (double)double0, 0.01);
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains((-1.0)));
      assertTrue(arrayList0.contains(double0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.AbstractSeriesDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 8.346602861087173E20;
      doubleArray1[2] = (-546.0049388335);
      doubleArray1[3] = 2.0;
      doubleArray1[4] = (-1.7976931348623157E308);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 8.346602861087173E20;
      doubleArray2[1] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-546.0049388335);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 533.2346611467;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertNotNull(spreadsheetDate0);
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      
      Date date0 = spreadsheetDate0.toDate();
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertNotNull(date0);
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 3.601570881E9, 1, 1, (-430.30563162154), 2);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertNotNull(oHLCDataItem0);
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-733.7290781784299), 1, 5, 45.494486390731, 4);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertNotNull(oHLCDataItem1);
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, 3, 3055.639337, 1449.50207, 5, 9999);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertNotNull(oHLCDataItem2);
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[0] = oHLCDataItem2;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals(3, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertNotNull(range0);
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3055.639337, range0.getUpperBound(), 0.01);
      assertEquals(3050.639337, range0.getLength(), 0.01);
      assertEquals(5.0, range0.getLowerBound(), 0.01);
      assertEquals(1530.3196685, range0.getCentralValue(), 0.01);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals(3, oHLCDataItemArray0.length);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(45.494486390731));
      
      Double double0 = new Double(3.601570881E9);
      assertNotNull(double0);
      assertEquals(3.601570881E9, (double)double0, 0.01);
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains(45.494486390731));
      assertTrue(arrayList0.contains(3.601570881E9));
      
      Range range1 = Range.scale(range0, 1.0);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertNotNull(range1);
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3055.639337, range0.getUpperBound(), 0.01);
      assertEquals(3050.639337, range0.getLength(), 0.01);
      assertEquals(5.0, range0.getLowerBound(), 0.01);
      assertEquals(1530.3196685, range0.getCentralValue(), 0.01);
      assertEquals(1530.3196685, range1.getCentralValue(), 0.01);
      assertEquals(3055.639337, range1.getUpperBound(), 0.01);
      assertEquals(3050.639337, range1.getLength(), 0.01);
      assertEquals(5.0, range1.getLowerBound(), 0.01);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertTrue(range1.equals((Object)range0));
      assertEquals(3, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range2);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(0, doubleArray0.length);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1101.9660058187, 1760.17, 21, spreadsheetDate0);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertNotNull(xYSeries0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(1101.9660058187, xYSeries0.getMinX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(1760.17, xYSeries0.getMaxX(), 0.01);
      assertEquals(21, xYSeries0.getItemCount());
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray0.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(0.0);
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertTrue(timePeriodValues0.getNotify());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Quarter quarter0 = new Quarter();
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(quarter0);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      
      Quarter quarter1 = (Quarter)quarter0.previous();
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(quarter1);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8056L, quarter1.getSerialIndex());
      assertEquals(4, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(2013, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter1, quarter0);
      assertFalse(quarter1.equals((Object)quarter0));
      
      Quarter quarter2 = (Quarter)quarter1.previous();
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(quarter2);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8056L, quarter1.getSerialIndex());
      assertEquals(4, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(2013, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(1392409281320L, quarter2.getFirstMillisecond());
      assertEquals(1392409281320L, quarter2.getLastMillisecond());
      assertEquals(3, quarter2.getQuarter());
      assertEquals(8055L, quarter2.getSerialIndex());
      assertEquals(2013, quarter2.getYearValue());
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter0, quarter2);
      assertNotSame(quarter1, quarter0);
      assertNotSame(quarter1, quarter2);
      assertNotSame(quarter2, quarter0);
      assertNotSame(quarter2, quarter1);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter1.equals((Object)quarter0));
      assertFalse(quarter2.equals((Object)quarter0));
      assertFalse(quarter2.equals((Object)quarter1));
      
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) quarter2, (KeyedValues) defaultKeyedValues0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8056L, quarter1.getSerialIndex());
      assertEquals(4, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(2013, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(1392409281320L, quarter2.getFirstMillisecond());
      assertEquals(1392409281320L, quarter2.getLastMillisecond());
      assertEquals(3, quarter2.getQuarter());
      assertEquals(8055L, quarter2.getSerialIndex());
      assertEquals(2013, quarter2.getYearValue());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter0, quarter2);
      assertNotSame(quarter1, quarter0);
      assertNotSame(quarter1, quarter2);
      assertNotSame(quarter2, quarter0);
      assertNotSame(quarter2, quarter1);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter0.equals((Object)quarter2));
      assertFalse(quarter1.equals((Object)quarter0));
      assertFalse(quarter1.equals((Object)quarter2));
      assertFalse(quarter2.equals((Object)quarter0));
      assertFalse(quarter2.equals((Object)quarter1));
      
      defaultPieDataset0.setValue((Comparable) quarter2, (Number) 1);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8056L, quarter1.getSerialIndex());
      assertEquals(4, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(2013, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(1392409281320L, quarter2.getFirstMillisecond());
      assertEquals(1392409281320L, quarter2.getLastMillisecond());
      assertEquals(3, quarter2.getQuarter());
      assertEquals(8055L, quarter2.getSerialIndex());
      assertEquals(2013, quarter2.getYearValue());
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter0, quarter2);
      assertNotSame(quarter1, quarter0);
      assertNotSame(quarter1, quarter2);
      assertNotSame(quarter2, quarter0);
      assertNotSame(quarter2, quarter1);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter0.equals((Object)quarter2));
      assertFalse(quarter1.equals((Object)quarter0));
      assertFalse(quarter1.equals((Object)quarter2));
      assertFalse(quarter2.equals((Object)quarter0));
      assertFalse(quarter2.equals((Object)quarter1));
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) quarter0, 954.5723929, 4);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(defaultPieDataset1);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter0, quarter2);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter0.equals((Object)quarter2));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      List list0 = defaultPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      
      double double0 = DatasetUtilities.calculatePieDatasetTotal(defaultPieDataset1);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1.0, double0, 0.01);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter0, quarter2);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter0.equals((Object)quarter2));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNull(range0);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8056L, quarter1.getSerialIndex());
      assertEquals(4, quarter1.getQuarter());
      assertEquals(1392409281320L, quarter1.getLastMillisecond());
      assertEquals(2013, quarter1.getYearValue());
      assertEquals(1392409281320L, quarter1.getFirstMillisecond());
      assertEquals(1392409281320L, quarter2.getFirstMillisecond());
      assertEquals(1392409281320L, quarter2.getLastMillisecond());
      assertEquals(3, quarter2.getQuarter());
      assertEquals(8055L, quarter2.getSerialIndex());
      assertEquals(2013, quarter2.getYearValue());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotSame(quarter0, quarter1);
      assertNotSame(quarter0, quarter2);
      assertNotSame(quarter1, quarter0);
      assertNotSame(quarter1, quarter2);
      assertNotSame(quarter2, quarter0);
      assertNotSame(quarter2, quarter1);
      assertFalse(quarter0.equals((Object)quarter1));
      assertFalse(quarter0.equals((Object)quarter2));
      assertFalse(quarter1.equals((Object)quarter0));
      assertFalse(quarter1.equals((Object)quarter2));
      assertFalse(quarter2.equals((Object)quarter0));
      assertFalse(quarter2.equals((Object)quarter1));
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) yIntervalSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 1;
      MatrixSeries matrixSeries0 = new MatrixSeries("+3", 1, 1);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) 1;
      doubleArray1[8] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 1;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-4094.165011);
      doubleArray1[1] = (-2654.7045);
      doubleArray1[2] = 4442.632445;
      doubleArray1[3] = 505.99782805384;
      doubleArray1[4] = (-2375.5119747055855);
      doubleArray1[5] = 1.0;
      doubleArray1[6] = 0.0;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 505.99782805384;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 505.99782805384;
      doubleArray3[2] = 4442.632445;
      doubleArray3[3] = (-2375.5119747055855);
      doubleArray3[4] = (-2654.7045);
      doubleArray3[5] = (-2375.5119747055855);
      doubleArray3[6] = (-2375.5119747055855);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = (-2317.562802);
      doubleArray1[2] = 0.8;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1676.1342399207);
      doubleArray2[1] = (-2317.562802);
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = (-949.93652804);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2989.5242;
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      doubleArray3[2] = (-949.93652804);
      doubleArray3[3] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, doubleArray0.length);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(timeTableXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      defaultIntervalCategoryDataset0.addChangeListener(xYDatasetTableModel0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(3, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.setValue((Comparable) "LKP:`|oZ<u@$Jw=py", (-1385.3727356189456));
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) integer0, (-1385.3727356189456), 2);
      assertNotNull(pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Double double0 = new Double((-2405.2536276967207));
      assertNotNull(double0);
      assertEquals((-2405.2536276967207), (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[-2405.2536276967207]", stack0.toString());
      assertTrue(stack0.contains((-2405.2536276967207)));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      MockDate mockDate0 = new MockDate((-1), 2057, 1734, 530, 530, 530);
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertNotNull(simpleTimePeriod0);
      assertEquals("Fri Mar 22 10:58:50 GMT 2075", mockDate0.toString());
      assertEquals(3320477930000L, simpleTimePeriod0.getEndMillis());
      assertEquals(3320477930000L, simpleTimePeriod0.getStartMillis());
      
      timeTableXYDataset0.add((TimePeriod) simpleTimePeriod0, (double) 530, "");
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Fri Mar 22 10:58:50 GMT 2075", mockDate0.toString());
      assertEquals(3320477930000L, simpleTimePeriod0.getEndMillis());
      assertEquals(3320477930000L, simpleTimePeriod0.getStartMillis());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, false);
      assertNotNull(range0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[-2405.2536276967207]", stack0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3.32047793E12, range0.getLowerBound(), 0.01);
      assertEquals(3.32047793E12, range0.getCentralValue(), 0.01);
      assertEquals(3.32047793E12, range0.getUpperBound(), 0.01);
      assertTrue(stack0.contains((-2405.2536276967207)));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertNotNull(spreadsheetDate0);
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1, spreadsheetDate0.getMonth());
      
      Date date0 = spreadsheetDate0.toDate();
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertNotNull(date0);
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Comparable<XYBarDataset>[] comparableArray0 = (Comparable<XYBarDataset>[]) Array.newInstance(Comparable.class, 1);
      comparableArray0[0] = (Comparable<XYBarDataset>) spreadsheetDate0;
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1443.1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1443.1)}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray0.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((-1443.1));
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues0.getNotify());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      defaultKeyedValuesDataset0.setValue((Comparable) (-1443.1), (Number) (-1443.1));
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) (-1443.1), (-1443.1));
      assertNotNull(pieDataset0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset1 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset1);
      assertFalse(defaultKeyedValuesDataset1.equals((Object)defaultKeyedValuesDataset0));
      
      Double double0 = new Double((-1443.1));
      assertNotNull(double0);
      assertEquals((-1443.1), (double)double0, 0.01);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0);
      assertNull(range0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      double double1 = DatasetUtilities.calculatePieDatasetTotal(defaultKeyedValuesDataset0);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(defaultKeyedValuesDataset0, defaultKeyedValuesDataset1);
      assertFalse(defaultKeyedValuesDataset0.equals((Object)defaultKeyedValuesDataset1));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, doubleArray0.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1439.5784248768803);
      doubleArray1[1] = (-1439.5784248768803);
      doubleArray1[2] = (-1439.5784248768803);
      doubleArray1[3] = (-1439.5784248768803);
      doubleArray1[4] = (-1740.9399526);
      doubleArray1[5] = (-1439.5784248768803);
      doubleArray1[6] = (-1439.5784248768803);
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals((-1740.9399526), range0.getLowerBound(), 0.01);
      assertEquals((-1590.2591887384401), range0.getCentralValue(), 0.01);
      assertEquals(301.3615277231197, range0.getLength(), 0.01);
      assertEquals((-1439.5784248768803), range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[][] doubleArray0 = new double[8][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, doubleArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      Double double0 = new Double((-579.4581245671));
      assertNotNull(double0);
      assertEquals((-579.4581245671), (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[-579.4581245671]", stack0.toString());
      assertTrue(stack0.contains(double0));
      
      Stack<Double> stack1 = new Stack<Double>();
      assertNotNull(stack1);
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertFalse(stack1.contains(double0));
      assertFalse(stack1.equals((Object)stack0));
      
      Stack<Double> stack2 = new Stack<Double>();
      assertNotNull(stack2);
      assertTrue(stack2.empty());
      assertEquals(0, stack2.size());
      assertEquals("[]", stack2.toString());
      assertTrue(stack2.isEmpty());
      assertEquals(10, stack2.capacity());
      assertFalse(stack2.contains(double0));
      assertTrue(stack2.equals((Object)stack1));
      assertFalse(stack2.equals((Object)stack0));
      
      boolean boolean1 = stack2.add(double0);
      assertTrue(boolean1);
      assertFalse(stack2.isEmpty());
      assertFalse(stack2.empty());
      assertEquals(1, stack2.size());
      assertEquals("[-579.4581245671]", stack2.toString());
      assertEquals(10, stack2.capacity());
      assertNotSame(stack2, stack0);
      assertNotSame(stack2, stack1);
      assertTrue(stack2.contains(double0));
      assertFalse(stack2.equals((Object)stack1));
      assertTrue(stack2.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack2, true);
      assertNull(range0);
      assertFalse(stack2.isEmpty());
      assertFalse(stack2.empty());
      assertEquals(1, stack2.size());
      assertEquals("[-579.4581245671]", stack2.toString());
      assertEquals(10, stack2.capacity());
      assertNotSame(stack2, stack0);
      assertNotSame(stack2, stack1);
      assertTrue(stack2.contains(double0));
      assertFalse(stack2.equals((Object)stack1));
      assertTrue(stack2.equals((Object)stack0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-3375.9681);
      doubleArray1[1] = (-579.4581245671);
      doubleArray1[2] = (-579.4581245671);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-579.4581245671);
      doubleArray3[1] = (-579.4581245671);
      doubleArray3[2] = (-579.4581245671);
      doubleArray3[3] = (-3375.9681);
      doubleArray3[4] = (-3375.9681);
      doubleArray3[5] = (-579.4581245671);
      doubleArray3[6] = (-3694.6155104);
      doubleArray3[7] = (-579.4581245671);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-3694.6155104);
      doubleArray4[1] = (-3694.6155104);
      doubleArray4[2] = (-579.4581245671);
      doubleArray4[3] = (-3694.6155104);
      doubleArray4[4] = 1999.339618;
      doubleArray4[5] = (-3694.6155104);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (-3694.6155104);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = (-579.4581245671);
      doubleArray6[1] = (-579.4581245671);
      doubleArray6[2] = (-3375.9681);
      doubleArray6[3] = (-3694.6155104);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      
      doubleArray7[0] = 1999.339618;
      doubleArray7[1] = 1999.339618;
      doubleArray7[2] = (-3375.9681);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      
      doubleArray8[0] = (-3694.6155104);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[2];
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      
      doubleArray9[0] = (-3694.6155104);
      doubleArray9[1] = (-3694.6155104);
      doubleArray0[8] = doubleArray9;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (-3694.6155104));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'visibleSeriesKeys' argument.", 1, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      
      double[][] doubleArray0 = new double[5][6];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (-3113.0413396758518);
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (-3113.0413396758518);
      doubleArray2[2] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = (-3113.0413396758518);
      doubleArray5[1] = (double) 1;
      doubleArray5[2] = (double) 1;
      doubleArray5[3] = (-3113.0413396758518);
      doubleArray5[4] = (double) 1;
      doubleArray5[5] = (-3113.0413396758518);
      doubleArray5[6] = (double) 1;
      doubleArray5[7] = (-3113.0413396758518);
      doubleArray5[8] = (double) 1;
      doubleArray0[4] = doubleArray5;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Zl~RZLwZnyY'{KU", "Zl~RZLwZnyY'{KU", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(5, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(3114.0413396758518, range0.getLength(), 0.01);
      assertEquals((-3113.0413396758518), range0.getLowerBound(), 0.01);
      assertEquals((-1556.0206698379259), range0.getCentralValue(), 0.01);
      assertEquals(5, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals((-3113.0413396758518), number0);
      assertEquals(5, doubleArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Zl~RZLwZnyY'{KU", "The number of column keys does not match the number of columns in the data array.", doubleArray0);
      assertNotNull(categoryDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'visibleSeriesKeys' argument.", 1, 1);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(number1.equals((Object)number0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'visibleSeriesKeys' argument.", 1, 1);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      
      MockDate mockDate0 = new MockDate(1, 1, 38, 1, 38, 38);
      assertNotNull(mockDate0);
      
      double double0 = 3538.914;
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 3538.914, 3538.914, 0.8, 3538.914, 1156.847217);
      assertNotNull(oHLCDataItem0);
      assertEquals("Sun Mar 10 01:38:38 GMT 1901", mockDate0.toString());
      
      double double1 = Double.NEGATIVE_INFINITY;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(mockDate0, 1156.847217, Double.NEGATIVE_INFINITY, 0.0, Double.NEGATIVE_INFINITY, 3538.914);
      assertNotNull(oHLCDataItem1);
      assertEquals("Sun Mar 10 01:38:38 GMT 1901", mockDate0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[1];
      oHLCDataItemArray0[0] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Sun Mar 10 01:38:38 GMT 1901", mockDate0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals(1, oHLCDataItemArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (0.0) <= upper (-Infinity).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Double double0 = new Double((-4015.0));
      assertNotNull(double0);
      assertEquals((-4015.0), (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals("[-4015.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(double0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      MockDate mockDate0 = new MockDate(1, (-2391), (-2391), 1, (-2391), 2057);
      assertNotNull(mockDate0);
      
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      assertNotNull(simpleTimePeriod0);
      assertEquals("Sat Mar 12 09:43:17 GMT 1695", mockDate0.toString());
      assertEquals((-8672019403000L), simpleTimePeriod0.getEndMillis());
      assertEquals((-8672019403000L), simpleTimePeriod0.getStartMillis());
      
      timeTableXYDataset0.add((TimePeriod) simpleTimePeriod0, 3743.776908, "The number of row keys does not match the number of rows in the data array.");
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("Sat Mar 12 09:43:17 GMT 1695", mockDate0.toString());
      assertEquals((-8672019403000L), simpleTimePeriod0.getEndMillis());
      assertEquals((-8672019403000L), simpleTimePeriod0.getStartMillis());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, true);
      assertNotNull(range0);
      assertEquals("[-4015.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals((-8.672019403E12), range0.getUpperBound(), 0.01);
      assertEquals((-8.672019403E12), range0.getCentralValue(), 0.01);
      assertEquals((-8.672019403E12), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertTrue(stack0.contains((-4015.0)));
      assertFalse(stack0.contains(3743.776908));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) 2057);
      assertNotNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(3743.776908, range1.getLength(), 0.01);
      assertEquals(5800.776908, range1.getUpperBound(), 0.01);
      assertEquals(2057.0, range1.getLowerBound(), 0.01);
      assertEquals(3928.888454, range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Double double0 = new Double((-32.922484726557));
      assertNotNull(double0);
      assertEquals((-32.922484726557), (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains((-32.922484726557)));
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals("[-32.922484726557]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains((-32.922484726557)));
      
      Stack<Double> stack1 = new Stack<Double>();
      assertNotNull(stack1);
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertFalse(stack1.contains((-32.922484726557)));
      assertFalse(stack1.equals((Object)stack0));
      
      Stack<Double> stack2 = new Stack<Double>();
      assertNotNull(stack2);
      assertEquals(0, stack2.size());
      assertTrue(stack2.isEmpty());
      assertTrue(stack2.empty());
      assertEquals("[]", stack2.toString());
      assertEquals(10, stack2.capacity());
      assertFalse(stack2.contains((-32.922484726557)));
      assertFalse(stack2.equals((Object)stack0));
      assertTrue(stack2.equals((Object)stack1));
      
      boolean boolean1 = stack2.add(double0);
      assertTrue(boolean1);
      assertEquals(1, stack2.size());
      assertEquals("[-32.922484726557]", stack2.toString());
      assertFalse(stack2.isEmpty());
      assertFalse(stack2.empty());
      assertEquals(10, stack2.capacity());
      assertNotSame(stack2, stack1);
      assertNotSame(stack2, stack0);
      assertTrue(stack2.contains((-32.922484726557)));
      assertTrue(stack2.equals((Object)stack0));
      assertFalse(stack2.equals((Object)stack1));
      assertTrue(boolean1 == boolean0);
      
      Number[][] numberArray0 = new Number[2][3];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) double0;
      numberArray1[1] = (Number) double0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[5];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) double0;
      numberArray2[1] = (Number) double0;
      numberArray2[2] = (Number) double0;
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      numberArray2[3] = (Number) integer0;
      numberArray2[4] = (Number) double0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(number0.equals((Object)double0));
      assertEquals(2, numberArray0.length);
      
      Stack<DefaultHighLowDataset> stack3 = new Stack<DefaultHighLowDataset>();
      assertNotNull(stack3);
      assertEquals("[]", stack3.toString());
      assertTrue(stack3.isEmpty());
      assertTrue(stack3.empty());
      assertEquals(0, stack3.size());
      assertEquals(10, stack3.capacity());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-32.922484726557), range0.getCentralValue(), 0.01);
      assertEquals((-32.922484726557), range0.getUpperBound(), 0.01);
      assertEquals((-32.922484726557), range0.getLowerBound(), 0.01);
      assertEquals(2, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertNotNull(spreadsheetDate0);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      
      Date date0 = spreadsheetDate0.toDate();
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertNotNull(date0);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 3.601570881E9, 1, (-2662.0), (-430.30563162154), 1081.948634492862);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertNotNull(oHLCDataItem0);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-733.7290781784299), 1, 5, 45.494486390731, 4);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertNotNull(oHLCDataItem1);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, (-2662.0), 1081.948634492862, 1.0, 2, (-2662.0));
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertNotNull(oHLCDataItem2);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, 3, 3055.639337, 1449.50207, 5, 9999);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertNotNull(oHLCDataItem3);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[0] = oHLCDataItem3;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals(3, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertNotNull(range0);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3050.639337, range0.getLength(), 0.01);
      assertEquals(5.0, range0.getLowerBound(), 0.01);
      assertEquals(3055.639337, range0.getUpperBound(), 0.01);
      assertEquals(1530.3196685, range0.getCentralValue(), 0.01);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem3);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals(3, oHLCDataItemArray0.length);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains((-2662.0)));
      
      Double double0 = new Double(3.601570881E9);
      assertNotNull(double0);
      assertEquals(3.601570881E9, (double)double0, 0.01);
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(3.601570881E9));
      assertFalse(arrayList0.contains((-430.30563162154)));
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultOHLCDataset0, true);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertNotNull(range1);
      assertEquals(1.39240928132E12, range1.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range1.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(range1, range0);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem3);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertEquals(3, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = true;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Double double0 = new Double(1630.27496193);
      assertNotNull(double0);
      assertEquals(1630.27496193, (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(1630.27496193));
      
      boolean boolean1 = stack0.add(double0);
      assertTrue(boolean1);
      assertFalse(stack0.isEmpty());
      assertEquals("[1630.27496193]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(1630.27496193));
      assertTrue(boolean1 == boolean0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals("[1630.27496193]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(1630.27496193));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(2778, 2778);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(2777, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      
      // Undeclared exception!
      try { 
        dynamicTimeSeriesCollection0.getEndYValue(2778, (-2385));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2778
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Comparable<DefaultIntervalXYDataset>[] comparableArray0 = (Comparable<DefaultIntervalXYDataset>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'visibleSeriesKeys' argument.", 1, 1);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Object object0 = defaultStatisticalCategoryDataset0.clone();
      assertNotNull(object0);
      assertNotSame(defaultStatisticalCategoryDataset0, object0);
      assertNotSame(object0, defaultStatisticalCategoryDataset0);
      assertTrue(object0.equals((Object)defaultStatisticalCategoryDataset0));
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNull(range0);
      assertNotSame(defaultStatisticalCategoryDataset0, object0);
      assertTrue(defaultStatisticalCategoryDataset0.equals((Object)object0));
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(number1.equals((Object)number0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) matrixSeriesCollection0);
      assertFalse(boolean0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null, (double) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Double double0 = new Double((-2405.2536276967207));
      assertNotNull(double0);
      assertEquals((-2405.2536276967207), (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals("[-2405.2536276967207]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(double0));
      
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Stack<Double> stack1 = new Stack<Double>();
      assertNotNull(stack1);
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertFalse(stack1.contains(double1));
      assertFalse(stack1.equals((Object)stack0));
      
      boolean boolean1 = stack1.add(double1);
      assertTrue(boolean1);
      assertFalse(stack1.isEmpty());
      assertEquals("[0.0]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertNotSame(stack1, stack0);
      assertTrue(stack1.contains(double1));
      assertFalse(stack1.contains(double0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertEquals("[-2405.2536276967207]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertNotSame(stack0, stack1);
      assertFalse(stack0.contains(double1));
      assertTrue(stack0.contains(double0));
      assertFalse(stack0.equals((Object)stack1));
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertNotNull(spreadsheetDate0);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      
      Date date0 = spreadsheetDate0.toDate();
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertNotNull(date0);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 3.601570881E9, 1, (-2662.0), (-430.30563162154), 1081.948634492862);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertNotNull(oHLCDataItem0);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-733.7290781784299), 1, 5, 45.494486390731, 4);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertNotNull(oHLCDataItem1);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, (-2662.0), 1081.948634492862, 1.0, 2, (-2662.0));
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertNotNull(oHLCDataItem2);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, 3, 3055.639337, 1449.50207, 5, 9999);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertNotNull(oHLCDataItem3);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[0] = oHLCDataItem3;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertNotNull(defaultOHLCDataset0);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertEquals(3, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertNotNull(range0);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1530.3196685, range0.getCentralValue(), 0.01);
      assertEquals(5.0, range0.getLowerBound(), 0.01);
      assertEquals(3055.639337, range0.getUpperBound(), 0.01);
      assertEquals(3050.639337, range0.getLength(), 0.01);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem3);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertEquals(3, oHLCDataItemArray0.length);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains((-2662.0)));
      
      Double double0 = new Double(3.601570881E9);
      assertNotNull(double0);
      assertEquals(3.601570881E9, (double)double0, 0.01);
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(arrayList0.contains((-2662.0)));
      assertTrue(arrayList0.contains(3.601570881E9));
      
      Range range1 = Range.combine(range0, range0);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertNotNull(range1);
      assertEquals(1530.3196685, range1.getCentralValue(), 0.01);
      assertEquals(3050.639337, range1.getLength(), 0.01);
      assertEquals(5.0, range1.getLowerBound(), 0.01);
      assertEquals(3055.639337, range1.getUpperBound(), 0.01);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1530.3196685, range0.getCentralValue(), 0.01);
      assertEquals(5.0, range0.getLowerBound(), 0.01);
      assertEquals(3055.639337, range0.getUpperBound(), 0.01);
      assertEquals(3050.639337, range0.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem3);
      assertNotSame(range0, range1);
      assertTrue(range1.equals((Object)range0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertEquals(3, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertNull(range2);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1530.3196685, range0.getCentralValue(), 0.01);
      assertEquals(5.0, range0.getLowerBound(), 0.01);
      assertEquals(3055.639337, range0.getUpperBound(), 0.01);
      assertEquals(3050.639337, range0.getLength(), 0.01);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem3);
      assertNotSame(range0, range1);
      assertFalse(arrayList0.contains((-2662.0)));
      assertTrue(arrayList0.contains(3.601570881E9));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertTrue(range0.equals((Object)range1));
      assertEquals(3, oHLCDataItemArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertFalse(boolean1);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem3);
      assertFalse(boolean1 == boolean0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertEquals(3, oHLCDataItemArray0.length);
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, true);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertNotNull(range3);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1.39240928132E12, range3.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range3.getUpperBound(), 0.01);
      assertEquals(1.39240928132E12, range3.getLowerBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem3);
      assertFalse(arrayList0.contains((-2662.0)));
      assertTrue(arrayList0.contains(3.601570881E9));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertEquals(3, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XYDataset xYDataset0 = null;
      LinkedList<JDBCXYDataset> linkedList0 = new LinkedList<JDBCXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, (List) linkedList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((-1443.1));
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) null, (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("Null 'visibleSeriesKeys' argument.", 1, 1);
      assertNotNull(matrixSeries0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = defaultStatisticalCategoryDataset0.getRangeBounds(true);
      assertNull(range0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertTrue(number1.equals((Object)number0));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range1);
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, 0.0);
      assertNull(range2);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 1;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = 2015.7075124;
      doubleArray2[6] = (double) 1;
      doubleArray2[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, doubleArray0.length);
      
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset((Connection) null);
      assertNotNull(jDBCXYDataset0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(jDBCXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      
      defaultIntervalCategoryDataset0.addChangeListener(xYDatasetTableModel0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertEquals(3, doubleArray0.length);
      
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Integer integer0 = new Integer(50);
      assertNotNull(integer0);
      assertEquals(50, (int)integer0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      defaultTableXYDataset0.removeAllValuesForX(integer0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultTableXYDataset0);
      assertNull(number0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) null, 31, 50);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(50, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(31, slidingCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(slidingCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.SlidingCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[][] doubleArray0 = new double[8][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1661.0;
      doubleArray1[1] = 1982.680531528;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = 1645.7272111;
      doubleArray1[4] = 1226.13;
      doubleArray1[5] = (-2087.051178362408);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1982.680531528;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 1226.13;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-2087.051178362408);
      doubleArray4[1] = 1661.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 1661.0;
      doubleArray4[5] = 1982.680531528;
      doubleArray4[6] = 1661.0;
      doubleArray4[7] = 0.0;
      doubleArray4[8] = (-2087.051178362408);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 1661.0;
      doubleArray5[1] = 1226.13;
      doubleArray5[2] = Double.POSITIVE_INFINITY;
      doubleArray5[3] = Double.NEGATIVE_INFINITY;
      doubleArray5[4] = 1226.13;
      doubleArray5[5] = Double.POSITIVE_INFINITY;
      doubleArray5[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray6[0] = 1226.13;
      doubleArray6[1] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = 1982.680531528;
      doubleArray7[1] = 1982.680531528;
      doubleArray7[2] = 1661.0;
      doubleArray7[3] = 1226.13;
      doubleArray7[4] = 1645.7272111;
      doubleArray7[5] = 1645.7272111;
      doubleArray7[6] = Double.POSITIVE_INFINITY;
      doubleArray7[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = 1645.7272111;
      doubleArray8[1] = 1645.7272111;
      doubleArray0[7] = doubleArray8;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      Double double0 = new Double((-2405.2536276967207));
      assertNotNull(double0);
      assertEquals((-2405.2536276967207), (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[-2405.2536276967207]", stack0.toString());
      assertTrue(stack0.contains((-2405.2536276967207)));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultMultiValueCategoryDataset0, 2145085079, 2145085079);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(2145085079, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2145085079, slidingCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingCategoryDataset0, (Comparable) double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2145085079, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "aczF", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      defaultPieDataset0.setValue((Comparable) "aczF", 0.0);
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(keyToGroupMap0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      boolean boolean0 = arrayList0.add(defaultIntervalXYDataset0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(arrayList0.contains(defaultIntervalXYDataset0));
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, keyToGroupMap0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNull(range0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultIntervalXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("aczF", "Null 'visibleSeriesKeys' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      MockDate mockDate0 = new MockDate((-612), 10, (-282), 10, (-282));
      assertNotNull(mockDate0);
      
      Week week0 = new Week(mockDate0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(week0);
      assertEquals("Fri Jan 23 05:18:00 GMT 1288", mockDate0.toString());
      assertEquals((-21519283320000L), week0.getFirstMillisecond());
      assertEquals(1288, week0.getYearValue());
      assertEquals(68268L, week0.getSerialIndex());
      assertEquals(4, week0.getWeek());
      assertEquals((-21519283320001L), week0.getLastMillisecond());
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) week0, (KeyedValues) defaultPieDataset0);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNotNull(categoryDataset1);
      assertEquals("Fri Jan 23 05:18:00 GMT 1288", mockDate0.toString());
      assertEquals((-21519283320000L), week0.getFirstMillisecond());
      assertEquals(1288, week0.getYearValue());
      assertEquals(68268L, week0.getSerialIndex());
      assertEquals(4, week0.getWeek());
      assertEquals((-21519283320001L), week0.getLastMillisecond());
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset1, true);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNull(range1);
      assertEquals("Fri Jan 23 05:18:00 GMT 1288", mockDate0.toString());
      assertEquals((-21519283320000L), week0.getFirstMillisecond());
      assertEquals(1288, week0.getYearValue());
      assertEquals(68268L, week0.getSerialIndex());
      assertEquals(4, week0.getWeek());
      assertEquals((-21519283320001L), week0.getLastMillisecond());
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset1);
      assertEquals(1, Week.FIRST_WEEK_IN_YEAR);
      assertEquals(53, Week.LAST_WEEK_IN_YEAR);
      assertNull(number0);
      assertEquals("Fri Jan 23 05:18:00 GMT 1288", mockDate0.toString());
      assertEquals((-21519283320000L), week0.getFirstMillisecond());
      assertEquals(1288, week0.getYearValue());
      assertEquals(68268L, week0.getSerialIndex());
      assertEquals(4, week0.getWeek());
      assertEquals((-21519283320001L), week0.getLastMillisecond());
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(59, 0);
      assertNotNull(powerFunction2D0);
      assertEquals(59.0, powerFunction2D0.getA(), 0.01);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 1125.9725, 3601570881L, 59, second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(59.0, powerFunction2D0.getA(), 0.01);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(range0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(59.0, powerFunction2D0.getA(), 0.01);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(59.0, range0.getLowerBound(), 0.01);
      assertEquals(59.0, range0.getCentralValue(), 0.01);
      assertEquals(59.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1443.1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1443.1)}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray0.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((-1443.1));
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      Minute minute0 = new Minute((-3597), hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals((-13), minute0.getMinute());
      
      Minute minute1 = new Minute(59, hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(59, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertFalse(minute1.equals((Object)minute0));
      
      timePeriodValues0.add((TimePeriod) minute1, (Number) 23);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(59, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertNotSame(minute1, minute0);
      assertFalse(minute1.equals((Object)minute0));
      
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) 59;
      numberArray1[1] = (Number) (-1443.1);
      numberArray1[2] = (Number) 59;
      numberArray1[3] = (Number) 59;
      numberArray1[4] = (Number) 23;
      numberArray1[5] = (Number) 59;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("[", "[", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(59.0, number0);
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals((-1384.1), range0.getLowerBound(), 0.01);
      assertEquals(59.0, range0.getUpperBound(), 0.01);
      assertEquals(1443.1, range0.getLength(), 0.01);
      assertEquals((-662.55), range0.getCentralValue(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(59.0, range1.getUpperBound(), 0.01);
      assertEquals((-692.05), range1.getCentralValue(), 0.01);
      assertEquals(1502.1, range1.getLength(), 0.01);
      assertEquals((-1443.1), range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      Number[][] numberArray0 = new Number[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("zJqDorgL", "&\"n/", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Double double0 = new Double(23);
      assertNotNull(double0);
      assertEquals(23.0, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals("[23.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(double0));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset1 = new JDBCCategoryDataset(connection1);
      assertNotNull(jDBCCategoryDataset1);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3354), (-3354), (-3354), (-3354), (-1), 0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-3354,MONTH=-3354,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-3354,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3354,HOUR_OF_DAY=-3354,MINUTE=-1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      ParsePosition parsePosition0 = new ParsePosition(46);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=46,errorIndex=-1]", parsePosition0.toString());
      assertEquals(46, parsePosition0.getIndex());
      
      Date date1 = mockSimpleDateFormat0.parse("eu0G", parsePosition0);
      assertNull(date1);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals(46, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=46,errorIndex=46]", parsePosition0.toString());
      assertEquals(46, parsePosition0.getIndex());
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = null;
      dateArray0[1] = date0;
      XYDataset xYDataset0 = null;
      Stack<XIntervalSeriesCollection> stack0 = new Stack<XIntervalSeriesCollection>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) stack0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1443.1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1443.1)}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray0.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((-1443.1));
      assertNotNull(timePeriodValues0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      
      TimePeriodValues timePeriodValues1 = new TimePeriodValues((-1443.1));
      assertNotNull(timePeriodValues1);
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues1);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(timePeriodValues1.equals((Object)timePeriodValues0));
      
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      
      Minute minute0 = new Minute(6, hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(6, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      
      MockDate mockDate0 = new MockDate(0);
      assertNotNull(mockDate0);
      
      Hour hour1 = new Hour(mockDate0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, hour1.getFirstMillisecond());
      assertEquals(0L, hour1.getLastMillisecond());
      assertEquals(0, hour1.getHour());
      assertFalse(hour1.equals((Object)hour0));
      
      Minute minute1 = new Minute(2, hour1);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, hour1.getFirstMillisecond());
      assertEquals(0L, hour1.getLastMillisecond());
      assertEquals(0, hour1.getHour());
      assertEquals(2, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(0, minute1.getHourValue());
      assertFalse(hour1.equals((Object)hour0));
      assertFalse(minute1.equals((Object)minute0));
      
      timePeriodValues0.add((TimePeriod) minute0, (Number) 0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(6, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertNotSame(timePeriodValues0, timePeriodValues1);
      assertNotSame(hour0, hour1);
      assertNotSame(minute0, minute1);
      assertFalse(timePeriodValues0.equals((Object)timePeriodValues1));
      assertFalse(hour0.equals((Object)hour1));
      assertFalse(minute0.equals((Object)minute1));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
      assertNull(range0);
      assertEquals("Time", timePeriodValues1.getDomainDescription());
      assertEquals((-1), timePeriodValues1.getMaxEndIndex());
      assertEquals((-1), timePeriodValues1.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues1.getMaxStartIndex());
      assertEquals("Value", timePeriodValues1.getRangeDescription());
      assertEquals((-1), timePeriodValues1.getMinStartIndex());
      assertNull(timePeriodValues1.getDescription());
      assertEquals((-1), timePeriodValues1.getMinEndIndex());
      assertEquals((-1), timePeriodValues1.getMaxMiddleIndex());
      assertTrue(timePeriodValues1.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotSame(timePeriodValues1, timePeriodValues0);
      assertFalse(timePeriodValues1.equals((Object)timePeriodValues0));
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains((-1443.1)));
      
      boolean boolean0 = arrayList0.add((Double) (-1443.1));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((-1443.1)));
      
      XYDataset xYDataset0 = null;
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) null, (List) linkedList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals("[0.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(double0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertEquals(1, stack0.size());
      assertEquals("[0.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(double0));
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Stack stack1 = (Stack)stack0.clone();
      assertNotNull(stack1);
      assertEquals(1, stack0.size());
      assertEquals("[0.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[0.0]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.capacity());
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertTrue(stack0.contains(double0));
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultXYZDataset0);
      assertNull(number0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultXYZDataset0);
      assertNull(number1);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      Number[][] numberArray0 = new Number[3][8];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) 0;
      numberArray1[1] = (Number) 0;
      numberArray1[2] = (Number) 23;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 23;
      numberArray2[1] = (Number) 0;
      numberArray2[2] = (Number) 23;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[16];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) 23;
      numberArray3[1] = (Number) 0;
      numberArray0[2] = numberArray3;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("zJqDorgL", "zJqDorgL", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(3, numberArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(jDBCXYDataset0, 6.283185307179586);
      assertNotNull(xYBarDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(6.283185307179586, xYBarDataset0.getBarWidth(), 0.01);
      
      int int0 = hour0.compareTo(xYBarDataset0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1, int0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      assertEquals(6.283185307179586, xYBarDataset0.getBarWidth(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      assertEquals(3, numberArray0.length);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, vector0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      Number[][] numberArray0 = new Number[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("zJqDorgL", "&\"n/", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      
      Double double0 = new Double(23);
      assertNotNull(double0);
      assertEquals(23.0, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals("[23.0]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(double0));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, numberArray0.length);
      
      ArrayList<DefaultTableXYDataset> arrayList0 = new ArrayList<DefaultTableXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds((XYDataset) null, arrayList0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Double double0 = new Double((-1443.1));
      assertNotNull(double0);
      assertEquals((-1443.1), (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(double0));
      
      double double1 = 0.0;
      Double double2 = new Double(0.0);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      
      boolean boolean0 = stack0.add(double2);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[0.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(0.0));
      assertFalse(stack0.contains(double0));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1482.3305602306114);
      doubleArray1[1] = (-1949.122701817986);
      doubleArray1[2] = 4573.67322282;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 4573.67322282;
      doubleArray2[1] = 4573.67322282;
      doubleArray2[2] = (-1949.122701817986);
      doubleArray2[3] = (-1482.3305602306114);
      doubleArray2[4] = (-1482.3305602306114);
      doubleArray2[5] = (-1482.3305602306114);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1949.122701817986);
      doubleArray3[1] = 1378.61940606539;
      doubleArray3[2] = (-2781.599631);
      doubleArray3[3] = (-1482.3305602306114);
      doubleArray3[4] = (-1482.3305602306114);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-2781.599631);
      doubleArray4[1] = (-2781.599631);
      doubleArray4[2] = 4520.08658;
      doubleArray4[3] = (-1482.3305602306114);
      doubleArray4[4] = 4573.67322282;
      doubleArray4[5] = 1378.61940606539;
      doubleArray4[6] = (-2781.599631);
      doubleArray4[7] = (-1482.3305602306114);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (-1949.122701817986);
      doubleArray5[1] = (-1949.122701817986);
      doubleArray5[2] = (-2781.599631);
      doubleArray5[3] = 1378.61940606539;
      doubleArray0[4] = doubleArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9147.34644564, range0.getUpperBound(), 0.01);
      assertEquals(1233.7507055020142, range0.getCentralValue(), 0.01);
      assertEquals((-6679.845034635971), range0.getLowerBound(), 0.01);
      assertEquals(15827.191480275971, range0.getLength(), 0.01);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, (List) linkedList0, range0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Double double0 = new Double((-1109.0));
      assertNotNull(double0);
      assertEquals((-1109.0), (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains((-1109.0)));
      
      Double double1 = new Double((-1109.0));
      assertNotNull(double1);
      assertEquals((-1109.0), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double1);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals("[-1109.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains((-1109.0)));
      assertEquals((double)double1, (double)double0, 0.01);
      
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, numberArray0.length);
      
      Stack<DefaultTableXYDataset> stack1 = new Stack<DefaultTableXYDataset>();
      assertNotNull(stack1);
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack1, true);
      assertNull(range0);
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) stack0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      
      Minute minute0 = new Minute(0, hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(0, minute0.getMinute());
      
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 59;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 23;
      doubleArray3[1] = (double) 23;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 59;
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray3[5] = (double) 59;
      doubleArray3[6] = Double.NEGATIVE_INFINITY;
      doubleArray3[7] = (double) 23;
      doubleArray3[8] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 23;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) 23;
      doubleArray4[3] = (double) 0;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, doubleArray0.length);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(Double.NEGATIVE_INFINITY));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      Minute minute0 = new Minute(0, hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(0, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (Comparable) minute0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(pieDataset0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(0, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      
      defaultPieDataset0.setValue((Comparable) hour0, (-1066.197748159828));
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      
      Number number0 = defaultPieDataset0.getValue(100);
      assertNull(number0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      List list0 = jDBCCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      jDBCCategoryDataset0.clear();
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset1 = new JDBCCategoryDataset(connection1);
      assertNotNull(jDBCCategoryDataset1);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3354), (-3354), (-3354), (-3354), (-1), 0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-3354,MONTH=-3354,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-3354,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3354,HOUR_OF_DAY=-3354,MINUTE=-1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      ParsePosition parsePosition0 = new ParsePosition(46);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(46, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=46,errorIndex=-1]", parsePosition0.toString());
      
      Date date1 = mockSimpleDateFormat0.parse("eu0G", parsePosition0);
      assertNull(date1);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals(46, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=46,errorIndex=46]", parsePosition0.toString());
      assertEquals(46, parsePosition0.getIndex());
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = null;
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset1, keyToGroupMap0);
      assertNull(range0);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 46;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = (double) (-3354);
      doubleArray1[6] = (double) (-1);
      doubleArray1[7] = (double) 0;
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) dateArray0, (Comparable[]) dateArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 0;
      numberArray1[1] = (Number) 0;
      numberArray0[0] = numberArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("zJqDorgL", "&\"n/", numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, numberArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, 0);
      assertNotNull(defaultPieDataset0);
      assertEquals(1, numberArray0.length);
      
      defaultCategoryDataset0.setValue((double) 0, (Comparable) hour0, (Comparable) "&\"n/");
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1, numberArray0.length);
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      
      Day day1 = (Day)day0.previous();
      assertNotNull(day1);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day1.getLastMillisecond());
      assertEquals(1392409281320L, day1.getFirstMillisecond());
      assertNotSame(day0, day1);
      assertNotSame(day1, day0);
      assertFalse(day1.equals((Object)day0));
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) day1, 968.9819102452627, 0);
      assertNotNull(defaultPieDataset1);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      assertEquals(1392409281320L, day1.getLastMillisecond());
      assertEquals(1392409281320L, day1.getFirstMillisecond());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(day0, day1);
      assertNotSame(day1, day0);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(day0.equals((Object)day1));
      assertFalse(day1.equals((Object)day0));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(1, numberArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = null;
      try {
        range0 = new Range(23, 22.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range(double, double): require lower (23.0) <= upper (22.0).
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[8];
      numberArray1[2] = (Number) 23;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 23, 23);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(23, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(23, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, numberArray0.length);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1160, 23);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(22, dynamicTimeSeriesCollection0.getNewestIndex());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(1, numberArray0.length);
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, stack0, true);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertNull(range0);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(22, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Comparable<Long>[] comparableArray0 = (Comparable<Long>[]) Array.newInstance(Comparable.class, 2);
      Day day0 = Day.parseDay("}l;cN`V$.i");
      assertNull(day0);
      
      comparableArray0[0] = (Comparable<Long>) null;
      comparableArray0[1] = (Comparable<Long>) hour0;
      Comparable<Object>[] comparableArray1 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 4);
      comparableArray1[0] = (Comparable<Object>) hour0;
      comparableArray1[1] = (Comparable<Object>) hour0;
      comparableArray1[2] = (Comparable<Object>) null;
      comparableArray1[3] = (Comparable<Object>) null;
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1160;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 1160;
      doubleArray1[3] = (double) 1160;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 1160;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = 2015.7075124;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = 2015.7075124;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 2015.7075124;
      doubleArray2[4] = (double) 1160;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 2;
      doubleArray3[1] = (-3376.3);
      doubleArray3[2] = (double) 23;
      doubleArray3[3] = 2015.7075124;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) 1;
      doubleArray4[1] = (double) 1160;
      doubleArray4[2] = (-3376.3);
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (double) 23;
      doubleArray4[5] = (double) 0;
      doubleArray4[6] = (double) 1160;
      doubleArray4[7] = (double) 0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = (double) 23;
      doubleArray5[1] = 2015.7075124;
      doubleArray5[2] = (double) 1160;
      doubleArray5[3] = (double) 0;
      doubleArray5[4] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'columnKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, true);
      assertNull(range0);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      Comparable<DefaultStatisticalCategoryDataset>[] comparableArray0 = (Comparable<DefaultStatisticalCategoryDataset>[]) Array.newInstance(Comparable.class, 1);
      int int0 = 1;
      MockDate mockDate0 = new MockDate(3481, (-544), 1, (-1721), (-1721));
      assertNotNull(mockDate0);
      
      int int1 = (-231);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-3868), ">I`%)8>", 3458, 1, 3480, (-544), 3481, 3480, (-231), (-231), (-544));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 3458
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[4];
      numberArray1[1] = (Number) 0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("zJqDorgL", "&\"n/", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNull(range0);
      assertEquals(1, numberArray0.length);
      
      Vector<Long> vector0 = new Vector<Long>(23);
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(23, vector0.capacity());
      assertEquals(0, vector0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Double double0 = new Double(2.0);
      assertNotNull(double0);
      assertEquals(2.0, (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(2.0));
      
      Double double1 = Double.valueOf(1.7976931348623157E308);
      assertNotNull(double1);
      assertEquals(1.7976931348623157E308, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double1);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[1.7976931348623157E308]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(double1));
      assertFalse(stack0.contains(2.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) double0, (KeyedValues) defaultPieDataset0);
      assertNotNull(categoryDataset0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals("[1.7976931348623157E308]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(double1));
      assertFalse(stack0.contains(2.0));
      assertNotEquals((double)double0, (double)double1, 0.01);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Stack stack1 = (Stack)stack0.clone();
      assertNotNull(stack1);
      assertFalse(stack0.isEmpty());
      assertEquals("[1.7976931348623157E308]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[1.7976931348623157E308]", stack1.toString());
      assertFalse(stack1.empty());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertEquals(1, stack1.capacity());
      assertTrue(stack0.contains(double1));
      assertFalse(stack0.contains(2.0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("eu0G", "eu0G", "eu0G");
      assertNotNull(timeSeries0);
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      jDBCCategoryDataset0.clear();
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset1 = new JDBCCategoryDataset(connection1);
      assertNotNull(jDBCCategoryDataset1);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3354), (-3354), (-3354), (-3354), (-1), 0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-3354,MONTH=-3354,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-3354,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3354,HOUR_OF_DAY=-3354,MINUTE=-1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      ParsePosition parsePosition0 = new ParsePosition(46);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=46,errorIndex=-1]", parsePosition0.toString());
      assertEquals(46, parsePosition0.getIndex());
      
      Date date1 = mockSimpleDateFormat0.parse("", parsePosition0);
      assertNull(date1);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(46, parsePosition0.getErrorIndex());
      assertEquals(46, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=46,errorIndex=46]", parsePosition0.toString());
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = null;
      dateArray0[1] = date0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(2, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-0.5), range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(2, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0, false);
      assertNotNull(range1);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals((-0.5), range1.getCentralValue(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertEquals(2, dateArray0.length);
      assertEquals(4, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) jDBCCategoryDataset1);
      assertNull(range2);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 366, 0);
      assertNotNull(mockDate0);
      
      Double double0 = new Double(1125.9725);
      assertNotNull(double0);
      assertEquals(1125.9725, (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(double0));
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[1125.9725]", stack0.toString());
      assertTrue(stack0.contains(double0));
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      arrayList0.trimToSize();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = arrayList0.add(xYIntervalSeriesCollection0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertTrue(boolean1 == boolean0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertNull(range0);
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[1125.9725]", stack0.toString());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(stack0.contains(double0));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      Locale locale1 = Locale.forLanguageTag("$");
      assertNotNull(locale1);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(double0));
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[1.0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(double0));
      
      Number[][] numberArray0 = new Number[2][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, numberArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNull(range0);
      assertFalse(stack0.isEmpty());
      assertEquals("[1.0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(double0));
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) histogramDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1125.4725;
      doubleArray1[1] = 288.22838775;
      doubleArray1[2] = (-33.46825991697809);
      doubleArray1[3] = 2711.791446;
      doubleArray1[4] = 4221.39220504;
      doubleArray1[5] = 2270.0;
      doubleArray1[6] = 875.986;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2270.0;
      doubleArray2[1] = 1125.4725;
      doubleArray2[2] = 1125.4725;
      doubleArray2[3] = 288.22838775;
      doubleArray2[4] = 2711.791446;
      doubleArray2[5] = 2711.791446;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 4221.39220504;
      doubleArray3[1] = 875.986;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 4221.39220504;
      doubleArray4[1] = 2711.791446;
      doubleArray4[2] = (-33.46825991697809);
      doubleArray4[3] = 2711.791446;
      doubleArray4[4] = 2711.791446;
      doubleArray4[5] = 875.986;
      doubleArray4[6] = 288.22838775;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 4221.39220504;
      doubleArray5[1] = 2270.0;
      doubleArray5[2] = 4221.39220504;
      doubleArray5[3] = 2711.791446;
      doubleArray5[4] = 288.22838775;
      doubleArray5[5] = 1125.4725;
      doubleArray5[6] = 875.986;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = 2711.791446;
      doubleArray7[1] = 2711.791446;
      doubleArray7[2] = 2711.791446;
      doubleArray7[3] = 875.986;
      doubleArray7[4] = 2711.791446;
      doubleArray0[6] = doubleArray7;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, doubleArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, (-990));
      assertNotNull(categoryToPieDataset0);
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-990), categoryToPieDataset0.getExtractIndex());
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal(categoryToPieDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 0;
      numberArray1[1] = (Number) 0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("zJqDorgL", "&\"n/", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, numberArray0.length);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (-3471));
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-3471), categoryToPieDataset0.getExtractIndex());
      assertEquals(1, numberArray0.length);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals((-3471), categoryToPieDataset0.getExtractIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) "zJqDorgL", (double) (-3471), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2465.74746585791;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 905.630675;
      doubleArray1[3] = 2129.23107049;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 2465.74746585791;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, doubleArray0.length);
      
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[][] doubleArray0 = new double[4][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, doubleArray0.length);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNotNull(range0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1443.1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1443.1)}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray0.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((-1443.1));
      assertNotNull(timePeriodValues0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains((-1443.1)));
      
      Stack stack1 = (Stack)stack0.clone();
      assertNotNull(stack1);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.capacity());
      assertFalse(stack0.contains((-1443.1)));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0, false);
      assertNull(range0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable) (-1443.1), (KeyedValues) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      
      Second second1 = (Second)second0.next();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(22, second1.getSecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertFalse(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Double double0 = new Double((-2.147483648E9));
      assertNotNull(double0);
      assertEquals((-2.147483648E9), (double)double0, 0.01);
      
      Stack<Double> stack1 = new Stack<Double>();
      assertNotNull(stack1);
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.contains((-2.147483648E9)));
      assertTrue(stack1.equals((Object)stack0));
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[-2.147483648E9]", stack0.toString());
      assertNotSame(stack0, stack1);
      assertTrue(stack0.contains((-2.147483648E9)));
      assertFalse(stack0.equals((Object)stack1));
      
      Number[][] numberArray0 = new Number[5][8];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) 59;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) double0;
      numberArray2[1] = (Number) 0;
      numberArray2[2] = (Number) 0;
      numberArray2[3] = (Number) double0;
      numberArray2[4] = (Number) 59;
      numberArray2[5] = (Number) 59;
      numberArray2[6] = (Number) double0;
      numberArray2[7] = (Number) 59;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[2];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      
      numberArray3[0] = (Number) 59;
      numberArray3[1] = (Number) 59;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[0];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[3];
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray2));
      
      numberArray5[0] = (Number) 59;
      numberArray5[1] = (Number) 0;
      numberArray5[2] = (Number) 59;
      numberArray0[4] = numberArray5;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, numberArray0.length);
      
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack1, true);
      assertNull(range0);
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotSame(stack1, stack0);
      assertFalse(stack1.contains((-2.147483648E9)));
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(5, numberArray0.length);
      
      Stack stack2 = (Stack)stack1.clone();
      assertNotNull(stack2);
      assertEquals("[]", stack2.toString());
      assertEquals(0, stack2.size());
      assertTrue(stack2.empty());
      assertEquals(0, stack2.capacity());
      assertTrue(stack2.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertNotSame(stack1, stack0);
      assertFalse(stack1.contains((-2.147483648E9)));
      assertFalse(stack1.equals((Object)stack0));
      
      Vector<Long> vector0 = new Vector<Long>(273);
      assertNotNull(vector0);
      assertEquals(273, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      
      Second second1 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(21, second1.getSecond());
      assertTrue(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 59;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (double) 335;
      doubleArray1[3] = (double) (-5);
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) (-5);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 59;
      doubleArray0[1] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'zone' argument.", "@_(7cm:.?soqA", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals((-5.0), number0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1443.1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1443.1)}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray0.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((-1443.1));
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      Minute minute0 = new Minute((-3597), hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals((-13), minute0.getMinute());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0);
      assertNull(range0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timePeriodValuesCollection0);
      assertTrue(boolean0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNull(range1);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      double[][] doubleArray1 = new double[9][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, doubleArray1.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals((-12987.900000000001), number0);
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      Second second1 = (Second)second0.next();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(22, second1.getSecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertFalse(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 399.381201;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2.0;
      doubleArray3[1] = (double) 59;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 399.381201;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = (double) 59;
      doubleArray5[1] = (double) 59;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      
      doubleArray0[5] = doubleArray6;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, doubleArray0.length);
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(number0);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, true);
      assertNull(range0);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      Second second1 = (Second)second0.next();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertFalse(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 59);
      assertNotNull(matrixSeries0);
      assertEquals(59, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(59, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)MockCalendar.getInstance((TimeZone) zoneInfo0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("GMT", zoneInfo0.getID());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      second0.peg(mockGregorianCalendar0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=0,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotSame(second0, second1);
      assertFalse(second0.equals((Object)second1));
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(59, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(29.0, range0.getCentralValue(), 0.01);
      assertEquals(58.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(58.0, range0.getLength(), 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) "");
      assertNotNull(defaultPieDataset0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertEquals(59, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(58.0, range1.getUpperBound(), 0.01);
      assertEquals(29.0, range1.getCentralValue(), 0.01);
      assertEquals(58.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Comparable comparable0 = keyToGroupMap0.getGroup(mockGregorianCalendar0);
      assertNotNull(comparable0);
      assertEquals("Default Group", comparable0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=0,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, keyToGroupMap0);
      assertNull(range2);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      // Undeclared exception!
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) 23;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "h3tG)Ep^$Gi", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 23, 23);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(23, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(23, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, numberArray0.length);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1158, 23);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(22, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(1, numberArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "", 22.0, 23);
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertEquals(1, numberArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      int int0 = keyToGroupMap0.getKeyCount("Duplicate items in 'columnKeys'.");
      assertEquals(0, int0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
      assertEquals(23, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(23, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumDomainValue(dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[][] doubleArray0 = new double[8][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1443.1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1443.1)}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray0.length);
      
      double[][] doubleArray1 = new double[6][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1443.1);
      doubleArray2[1] = (-1443.1);
      doubleArray2[2] = (-1443.1);
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = (-1443.1);
      doubleArray2[5] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, doubleArray1.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(8658.6, range0.getLength(), 0.01);
      assertEquals((-8658.6), range0.getLowerBound(), 0.01);
      assertEquals((-4329.3), range0.getCentralValue(), 0.01);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 23;
      doubleArray1[3] = (double) 23;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = (double) 23;
      doubleArray1[6] = (double) 23;
      doubleArray1[7] = (double) 23;
      doubleArray1[8] = (double) 0;
      doubleArray0[0] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 23.0);
      assertNotNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(22.0, range0.getLowerBound(), 0.01);
      assertEquals(46.0, range0.getUpperBound(), 0.01);
      assertEquals(34.0, range0.getCentralValue(), 0.01);
      assertEquals(24.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1443.1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1443.1)}, doubleArray1, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray1.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((-1443.1));
      assertNotNull(timePeriodValues0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      Minute minute0 = new Minute();
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      
      Minute minute1 = (Minute)minute0.next();
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(22, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute1.equals((Object)minute0));
      
      timePeriodValues0.add((TimePeriod) minute1, (Number) 23);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(22, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
      assertNotNull(range0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNotNull(range1);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(23.0, range1.getLowerBound(), 0.01);
      assertEquals(23.0, range1.getCentralValue(), 0.01);
      assertEquals(23.0, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      
      Vector<XYIntervalSeriesCollection> vector0 = new Vector<XYIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, (List) vector0, true);
      assertNull(range2);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1443.1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1443.1)}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray0.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((-1443.1));
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      
      Minute minute0 = new Minute((-3597), hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals((-13), minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      
      Minute minute1 = (Minute)minute0.next();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals((-13), minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals((-12), minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute1.equals((Object)minute0));
      
      timePeriodValues0.add((TimePeriod) minute1, (Number) 23);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals((-13), minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals((-12), minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
      assertNotNull(range0);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains((-1443.1)));
      
      boolean boolean0 = arrayList0.add((Double) (-1443.1));
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((-1443.1)));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timePeriodValuesCollection0, (List) arrayList0, range0, true);
      assertNull(range1);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((-1443.1)));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 0;
      numberArray1[1] = (Number) 0;
      numberArray1[2] = (Number) 0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("zJqDorgL", "&\"n/", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, numberArray0.length);
      
      Vector<Long> vector0 = new Vector<Long>(0);
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, vector0.capacity());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, numberArray0.length);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("zJqDorgL");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(number0));
      
      boolean boolean0 = arrayList0.add((Double) number0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(number0));
      assertEquals(1, numberArray0.length);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) arrayList0, range0, true);
      assertNull(range1);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(number0));
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      
      Number[][] numberArray0 = new Number[1][3];
      String string0 = "xEYEfmPP5ZD,1o9X";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("zJqDorgL", "xEYEfmPP5ZD,1o9X", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) 0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      String string1 = ":e";
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, ":e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      double double0 = timePeriodValuesCollection0.getDomainLowerBound(true);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Locale locale0 = Locale.forLanguageTag("5#?>R+");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Double double1 = new Double((-1990.0));
      assertNotNull(double1);
      assertEquals((-1990.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains((-1990.0)));
      
      boolean boolean0 = stack0.add((Double) null);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.contains((-1990.0)));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("zJqDorgL", "&\"nD", numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(1, numberArray0.length);
      
      defaultCategoryDataset0.clear();
      assertEquals(1, numberArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (-1990));
      assertNotNull(defaultPieDataset0);
      assertEquals(1, numberArray0.length);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(1, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(59, 0);
      assertNotNull(powerFunction2D0);
      assertEquals(59.0, powerFunction2D0.getA(), 0.01);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 1125.9725, 3601570881L, 59, second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(xYSeriesCollection0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(59.0, powerFunction2D0.getA(), 0.01);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(range0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(59.0, powerFunction2D0.getA(), 0.01);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(3.6015708815E9, range0.getUpperBound(), 0.01);
      assertEquals(3.6015697560275E9, range0.getLength(), 0.01);
      assertEquals(1.80078600348625E9, range0.getCentralValue(), 0.01);
      assertEquals(1125.4725, range0.getLowerBound(), 0.01);
      
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1125.9725;
      doubleArray1[1] = (double) 59;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("71XN<W", "", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Number[][] numberArray0 = new Number[3][9];
      Number[] numberArray1 = new Number[0];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 1125.9725;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      numberArray2[1] = (Number) integer0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[8];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) 0;
      numberArray3[1] = (Number) 1125.9725;
      numberArray3[2] = (Number) 59.0;
      numberArray3[3] = (Number) 59;
      numberArray3[4] = (Number) 59;
      numberArray3[5] = (Number) integer0;
      numberArray3[6] = (Number) 59.0;
      numberArray3[7] = (Number) integer0;
      numberArray0[2] = numberArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNull(number0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 0;
      numberArray1[1] = (Number) 0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("zJqDorgL", "&\"n/", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(1, numberArray0.length);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("zJqDorgL");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Vector<Long> vector0 = new Vector<Long>(23);
      assertNotNull(vector0);
      assertEquals(23, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals(1, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, 2076);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2076, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = "H<z.fIe\\3\\u2";
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertNotNull(defaultKeyedValues0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) string0, (KeyedValues) defaultKeyedValues0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      defaultCategoryDataset0.validateObject();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultCategoryDataset0);
      assertNull(range0);
      assertEquals(0, defaultKeyedValues0.getItemCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      Minute minute0 = new Minute(0, hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (Comparable) minute0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(pieDataset0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 0;
      numberArray1[1] = (Number) 0;
      numberArray1[2] = (Number) 0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("zJqDorgL", "&\"n/", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, numberArray0.length);
      
      Vector<Long> vector0 = new Vector<Long>(0);
      assertNotNull(vector0);
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, numberArray0.length);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("zJqDorgL");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(number0));
      
      Vector<Long> vector1 = new Vector<Long>(23);
      assertNotNull(vector1);
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertEquals(23, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertTrue(vector1.equals((Object)vector0));
      
      Number number1 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
      assertNotNull(number1);
      assertEquals(0.0, number1);
      assertTrue(number1.equals((Object)number0));
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, 1.0);
      assertNotNull(range0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1.0, range0.getUpperBound(), 0.01);
      assertEquals(1.0, range0.getLowerBound(), 0.01);
      assertEquals(1.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "The number of column keys does not match the number of columns in the data array.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      Second second1 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(21, second1.getSecond());
      assertTrue(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 59);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Stack stack1 = (Stack)stack0.clone();
      assertNotNull(stack1);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.capacity());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotNull(range0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(58.0, range0.getLength(), 0.01);
      assertEquals(29.0, range0.getCentralValue(), 0.01);
      assertEquals(58.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) 3310);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(3310.0, range0.getCentralValue(), 0.01);
      assertEquals(3310.0, range0.getUpperBound(), 0.01);
      assertEquals(3310.0, range0.getLowerBound(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      int int0 = ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      assertEquals(2, int0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Stack<DefaultHighLowDataset> stack0 = new Stack<DefaultHighLowDataset>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(2, doubleArray0.length);
      
      Minute minute0 = Minute.parseMinute("");
      assertNull(minute0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("eu0G", "eu0G", "eu0G");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1443.1);
      doubleArray0[1] = (-1443.1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1443.1), (-1443.1)}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertEquals(2, doubleArray0.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((-1443.1));
      assertNotNull(timePeriodValues0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertNull(range0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray1 = new double[3][7];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1443.1);
      doubleArray2[1] = (-1443.1);
      doubleArray2[2] = (-1625.551);
      doubleArray1[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (-1625.551);
      doubleArray3[1] = 977.3739;
      doubleArray3[2] = (-1443.1);
      doubleArray3[3] = (-1443.1);
      doubleArray3[4] = (-1625.551);
      doubleArray3[5] = (-1625.551);
      doubleArray3[6] = (-1443.1);
      doubleArray1[2] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, doubleArray1.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((-1625.551));
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      int int0 = keyToGroupMap0.getKeyCount((-1443.1));
      assertEquals(0, int0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range1);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-4511.751), range1.getLowerBound(), 0.01);
      assertEquals(977.3739, range1.getUpperBound(), 0.01);
      assertEquals((-1767.18855), range1.getCentralValue(), 0.01);
      assertEquals(5489.124900000001, range1.getLength(), 0.01);
      assertEquals(3, doubleArray1.length);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset(xYIntervalSeriesCollection0, 46.0);
      assertNotNull(xYBarDataset0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals(46.0, xYBarDataset0.getBarWidth(), 0.01);
      
      xYIntervalSeriesCollection0.removeChangeListener(xYBarDataset0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertEquals(46.0, xYBarDataset0.getBarWidth(), 0.01);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) xYIntervalSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYIntervalSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 3574.023294905;
      doubleArray1[2] = 46.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 46.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 46.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 3574.023294905;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-565));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumRangeValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(59, 0);
      assertNotNull(powerFunction2D0);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertEquals(59.0, powerFunction2D0.getA(), 0.01);
      
      Minute minute0 = second0.getMinute();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, (-1.0), 0, 59, second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertEquals(59.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (double) 59);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(range1);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertEquals(59.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(59.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(59.0, range1.getLowerBound(), 0.01);
      assertEquals(59.0, range1.getCentralValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("eu0G", "eu0G", "eu0G");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(1.0));
      
      Double double1 = new Double(3378.0);
      assertNotNull(double1);
      assertEquals(3378.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double1);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[3378.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(3378.0));
      assertFalse(stack0.contains(1.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Number[][] numberArray0 = new Number[0][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) null, (List) stack0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("eu0G", "eu0G", "eu0G");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      jDBCCategoryDataset0.clear();
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset1 = new JDBCCategoryDataset(connection1);
      assertNotNull(jDBCCategoryDataset1);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(38, 38, (-3354), (-3354), (-1), 0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=38,MONTH=38,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-3354,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3354,HOUR_OF_DAY=-3354,MINUTE=-1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      ParsePosition parsePosition0 = new ParsePosition(3441);
      assertNotNull(parsePosition0);
      assertEquals(3441, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3441,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      Date date1 = mockSimpleDateFormat0.parse("8t}ngSNNzde", parsePosition0);
      assertNull(date1);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals(3441, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3441,errorIndex=3441]", parsePosition0.toString());
      assertEquals(3441, parsePosition0.getErrorIndex());
      
      Date[] dateArray0 = new Date[4];
      dateArray0[0] = null;
      dateArray0[1] = null;
      dateArray0[2] = date0;
      dateArray0[3] = date0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 38;
      doubleArray0[2] = (double) (-3354);
      doubleArray0[3] = (double) 38;
      doubleArray0[4] = (double) 38;
      doubleArray0[5] = (double) (-3354);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) 38;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(date0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 38.0, (-3354.0), 38.0, 38.0, (-3354.0), (-1.0), 38.0}, doubleArray0, 0.01);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=38,MONTH=38,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-3354,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3354,HOUR_OF_DAY=-3354,MINUTE=-1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(8, doubleArray0.length);
      assertEquals(4, dateArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      assertNull(range0);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset1, (Comparable) mockGregorianCalendar0);
      assertNotNull(pieDataset0);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=38,MONTH=38,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-3354,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3354,HOUR_OF_DAY=-3354,MINUTE=-1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = "$";
      TimeZone timeZone0 = TimeZone.getTimeZone("$");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains(string0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) hashSet0, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(hashSet0.contains(string0));
      assertFalse(list0.contains(string0));
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(double0));
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[1.0]", stack0.toString());
      assertTrue(stack0.contains(double0));
      
      Number[][] numberArray0 = new Number[2][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, numberArray0.length);
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(stack0);
      assertNotNull(seriesChangeEvent0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[1.0]", stack0.toString());
      assertTrue(stack0.contains(double0));
      
      SeriesChangeType seriesChangeType0 = SeriesChangeType.UPDATE;
      assertNotNull(seriesChangeType0);
      assertEquals("SeriesChangeType.UPDATE", seriesChangeType0.toString());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries((Function2D) null, 1.0, 795.476486, 6, locale_FilteringMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("zJqDorgL", "&\"nD", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
      assertEquals(1, numberArray0.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, numberArray0.length);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("zJqDorgL"));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) linkedList0, false);
      assertNull(range0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("zJqDorgL"));
      assertEquals(1, numberArray0.length);
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertFalse(defaultCategoryDataset0.equals((Object)categoryDataset0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) vector0, false);
      assertNull(range1);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotSame(categoryDataset0, defaultCategoryDataset0);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
      assertEquals(1, numberArray0.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset1);
      assertEquals(1, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getSeriesCount());
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(1, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset1);
      assertNull(number0);
      assertEquals(1, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getSeriesCount());
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(1, numberArray0.length);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, true);
      assertNull(range2);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(816.929005463, 816.929005463);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(816.929005463, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(816.929005463, normalDistributionFunction2D0.getMean(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(normalDistributionFunction2D0, 0.0, (-1888.71820025), (-1), (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'seriesKey' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 366, 0);
      assertNotNull(mockDate0);
      
      Double double0 = new Double(1125.9725);
      assertNotNull(double0);
      assertEquals(1125.9725, (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(double0));
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[1125.9725]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(double0));
      
      Number[][] numberArray0 = new Number[2][0];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) double0;
      numberArray1[1] = (Number) double0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[11];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) double0;
      numberArray2[1] = (Number) double0;
      numberArray2[2] = (Number) double0;
      numberArray2[4] = (Number) double0;
      numberArray2[5] = (Number) double0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) mockDate0, (double) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      Second second1 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(21, second1.getSecond());
      assertTrue(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      Double double0 = new Double(22.0);
      assertNotNull(double0);
      assertEquals(22.0, (double)double0, 0.01);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertTrue(second0.equals((Object)second1));
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNull(range0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotSame(second0, second1);
      assertTrue(second0.equals((Object)second1));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, false);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      LinkedList<TimeTableXYDataset> linkedList0 = new LinkedList<TimeTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, false);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNull(range2);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertNotSame(second0, second1);
      assertTrue(second0.equals((Object)second1));
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0, (List) stack0, range1, false);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNull(range3);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(second0, second1);
      assertFalse(stack0.contains(22.0));
      assertTrue(second0.equals((Object)second1));
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      
      Comparable<XYIntervalSeriesCollection>[] comparableArray0 = (Comparable<XYIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 2);
      comparableArray0[0] = (Comparable<XYIntervalSeriesCollection>) month0;
      comparableArray0[1] = (Comparable<XYIntervalSeriesCollection>) month0;
      Number[][] numberArray0 = new Number[0][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray0, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 46, 1766);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(46, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1766, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) comparableArray0[0]);
      assertNotNull(pieDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(46, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1766, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, comparableArray0[1], (-851.261115939666), (-2293));
      assertNotNull(pieDataset1);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(46, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1766, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertEquals(2, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) month0, (KeyedValues) pieDataset1);
      assertNotNull(categoryDataset0);
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(46, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1766, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertEquals(2, comparableArray0.length);
      assertEquals(0, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (-2293));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) 23;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "h3tG)Ep^$Gi", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 23, 23);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(23, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(23, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, numberArray0.length);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1158, 23);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(22, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(1, numberArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "", 22.0, 23);
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertEquals(1, numberArray0.length);
      
      Double double0 = new Double(1);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(range0);
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(22, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
      assertNull(range1);
      assertEquals(23, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(23, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, numberArray0.length);
      
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset((Comparable) 0, (KeyedValues) pieDataset0);
      assertNotNull(categoryDataset1);
      assertNotSame(categoryDataset0, categoryDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(categoryDataset1, categoryDataset0);
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
      assertEquals(1, numberArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "h3tG)Ep^$Gi");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1443.1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1443.1)}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray0.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((-1443.1));
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      
      Minute minute0 = new Minute((-3597), hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals((-13), minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      
      Minute minute1 = (Minute)minute0.next();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals((-13), minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals((-12), minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute1.equals((Object)minute0));
      
      Double double0 = new Double(2436.0);
      assertNotNull(double0);
      assertEquals(2436.0, (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(double0));
      
      boolean boolean0 = stack0.add((Double) null);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals("[null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains(double0));
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      double double0 = timePeriodValuesCollection0.getDomainLowerBound(true);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Number[][] numberArray0 = new Number[0][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, numberArray0.length);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(seriesChangeEvent0);
      
      defaultIntervalCategoryDataset0.seriesChanged(seriesChangeEvent0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, numberArray0.length);
      
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(keyToGroupMap0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, keyToGroupMap0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNull(range0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) arrayList0, true);
      assertNull(range1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Comparable<Double>[] comparableArray0 = (Comparable<Double>[]) Array.newInstance(Comparable.class, 5);
      comparableArray0[0] = (Comparable<Double>) second0;
      comparableArray0[1] = (Comparable<Double>) second0;
      comparableArray0[2] = (Comparable<Double>) second0;
      comparableArray0[3] = (Comparable<Double>) second0;
      comparableArray0[4] = (Comparable<Double>) second0;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      
      Number[][] numberArray0 = new Number[0][9];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("x*BFQgFm>\"fvJ}VMf/", "x*BFQgFm>\"fvJ}VMf/", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(0, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
      assertEquals(0, numberArray0.length);
      
      jDBCCategoryDataset0.clear();
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (-1990));
      assertNotNull(pieDataset0);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean1 = true;
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertNotNull(range1);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      
      Range range2 = Range.expand(range1, 59, 0);
      assertNotNull(range2);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range2.getLength(), 0.01);
      assertEquals(Double.NaN, range2.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range2.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range2.getLowerBound(), 0.01);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range1));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) vector0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-1109), (-1109));
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-1109), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1109), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(slidingCategoryDataset0);
      assertNull(number0);
      assertEquals((-1109), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1109), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
      assertNull(range0);
      assertEquals((-1109), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-1109), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, numberArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) 3310);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(3310.0, range1.getLowerBound(), 0.01);
      assertEquals(3310.0, range1.getCentralValue(), 0.01);
      assertEquals(3310.0, range1.getUpperBound(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, " for that time period. Duplicates are not ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Double double0 = new Double((-1439.425835));
      assertNotNull(double0);
      assertEquals((-1439.425835), (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains((-1439.425835)));
      
      Double double1 = new Double(3055.639337);
      assertNotNull(double1);
      assertEquals(3055.639337, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double1);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[3055.639337]", stack0.toString());
      assertFalse(stack0.contains((-1439.425835)));
      assertTrue(stack0.contains(3055.639337));
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Stack stack1 = (Stack)stack0.clone();
      assertNotNull(stack1);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[3055.639337]", stack0.toString());
      assertEquals("[3055.639337]", stack1.toString());
      assertFalse(stack1.empty());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertEquals(1, stack1.capacity());
      assertFalse(stack0.contains((-1439.425835)));
      assertTrue(stack0.contains(3055.639337));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[3055.639337]", stack0.toString());
      assertFalse(stack0.contains((-1439.425835)));
      assertTrue(stack0.contains(3055.639337));
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Stack stack2 = (Stack)stack0.clone();
      assertNotNull(stack2);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[3055.639337]", stack0.toString());
      assertEquals(1, stack2.size());
      assertEquals("[3055.639337]", stack2.toString());
      assertEquals(1, stack2.capacity());
      assertFalse(stack2.isEmpty());
      assertFalse(stack2.empty());
      assertNotSame(stack2, stack1);
      assertFalse(stack0.contains((-1439.425835)));
      assertTrue(stack0.contains(3055.639337));
      assertTrue(stack2.equals((Object)stack1));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0, false);
      assertNull(range1);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      Stack<DefaultBoxAndWhiskerCategoryDataset> stack0 = new Stack<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      String string0 = "aczF";
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "aczF", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset1);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      defaultPieDataset0.setValue((Comparable) "aczF", 335.0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      defaultPieDataset0.fireSelectionEvent();
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertFalse(boolean0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "aczF";
      stringArray0[1] = "aczF";
      stringArray0[2] = "aczF";
      stringArray0[3] = "";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, stringArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 114);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 114, 4580, (-1), (-507));
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=4,MONTH=114,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=4580,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1,HOUR_OF_DAY=-1,MINUTE=-507,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      Month month0 = new Month(date0);
      assertNotNull(month0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=4,MONTH=114,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=4580,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1,HOUR_OF_DAY=-1,MINUTE=-507,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(18994L, month0.getSerialIndex());
      assertEquals(1582, month0.getYearValue());
      assertEquals((-12219292800000L), month0.getFirstMillisecond());
      assertEquals((-12219292800000L), month0.getLastMillisecond());
      assertEquals(10, month0.getMonth());
      
      Month month1 = (Month)month0.previous();
      assertNotNull(month1);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=4,MONTH=114,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=4580,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1,HOUR_OF_DAY=-1,MINUTE=-507,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(18994L, month0.getSerialIndex());
      assertEquals(1582, month0.getYearValue());
      assertEquals((-12219292800000L), month0.getFirstMillisecond());
      assertEquals((-12219292800000L), month0.getLastMillisecond());
      assertEquals(10, month0.getMonth());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(18993L, month1.getSerialIndex());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(1582, month1.getYearValue());
      assertEquals(9, month1.getMonth());
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertFalse(month1.equals((Object)month0));
      
      defaultPieDataset0.setValue((Comparable) month1, (Number) null);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=4,MONTH=114,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=4580,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1,HOUR_OF_DAY=-1,MINUTE=-507,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(18994L, month0.getSerialIndex());
      assertEquals(1582, month0.getYearValue());
      assertEquals((-12219292800000L), month0.getFirstMillisecond());
      assertEquals((-12219292800000L), month0.getLastMillisecond());
      assertEquals(10, month0.getMonth());
      assertEquals(1392409281320L, month1.getFirstMillisecond());
      assertEquals(18993L, month1.getSerialIndex());
      assertEquals(1392409281320L, month1.getLastMillisecond());
      assertEquals(1582, month1.getYearValue());
      assertEquals(9, month1.getMonth());
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(month0, month1);
      assertNotSame(month1, month0);
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertFalse(month0.equals((Object)month1));
      assertFalse(month1.equals((Object)month0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      MockDate mockDate0 = new MockDate(0, 100, (-1726), (-2797), 2, 2);
      assertNotNull(mockDate0);
      
      Second second0 = new Second(mockDate0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals("Tue Apr 14 11:02:02 GMT 1903", mockDate0.toString());
      assertEquals((-2105441878000L), second0.getFirstMillisecond());
      assertEquals((-2105441877001L), second0.getLastMillisecond());
      assertEquals(2, second0.getSecond());
      
      Instant instant0 = mockDate0.toInstant();
      assertNotNull(instant0);
      assertEquals("Tue Apr 14 11:02:02 GMT 1903", mockDate0.toString());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("Tue Apr 14 11:02:02 GMT 1903", mockDate0.toString());
      assertEquals((-2105441878000L), second0.getFirstMillisecond());
      assertEquals((-2105441877001L), second0.getLastMillisecond());
      assertEquals(2, second0.getSecond());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) second0, (double) 100, (-11));
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("Tue Apr 14 11:02:02 GMT 1903", mockDate0.toString());
      assertEquals((-2105441878000L), second0.getFirstMillisecond());
      assertEquals((-2105441877001L), second0.getLastMillisecond());
      assertEquals(2, second0.getSecond());
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      
      defaultPieDataset0.setValue((Comparable) instant0, 2427.887482);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("Tue Apr 14 11:02:02 GMT 1903", mockDate0.toString());
      assertEquals((-2105441878000L), second0.getFirstMillisecond());
      assertEquals((-2105441877001L), second0.getLastMillisecond());
      assertEquals(2, second0.getSecond());
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset(defaultPieDataset0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(defaultPieDataset1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("Tue Apr 14 11:02:02 GMT 1903", mockDate0.toString());
      assertEquals((-2105441878000L), second0.getFirstMillisecond());
      assertEquals((-2105441877001L), second0.getLastMillisecond());
      assertEquals(2, second0.getSecond());
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset1.equals((Object)pieDataset0));
      
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset1, (Comparable) mockDate0, (double) (-11));
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(defaultPieDataset2);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("Tue Apr 14 11:02:02 GMT 1903", mockDate0.toString());
      assertEquals((-2105441878000L), second0.getFirstMillisecond());
      assertEquals((-2105441877001L), second0.getLastMillisecond());
      assertEquals(2, second0.getSecond());
      assertNotSame(pieDataset0, defaultPieDataset2);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, pieDataset0);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, pieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset1.equals((Object)pieDataset0));
      assertFalse(defaultPieDataset2.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      
      DefaultPieDataset defaultPieDataset3 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) instant0);
      assertNotNull(defaultPieDataset3);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("Tue Apr 14 11:02:02 GMT 1903", mockDate0.toString());
      assertNotSame(defaultPieDataset3, defaultPieDataset1);
      assertNotSame(defaultPieDataset3, pieDataset0);
      assertNotSame(defaultPieDataset3, defaultPieDataset2);
      assertNotSame(defaultPieDataset3, defaultPieDataset0);
      assertFalse(defaultPieDataset3.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset3.equals((Object)pieDataset0));
      assertFalse(defaultPieDataset3.equals((Object)defaultPieDataset2));
      assertFalse(defaultPieDataset3.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      Minute minute0 = new Minute(1, hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (Comparable) minute0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(defaultPieDataset0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      defaultPieDataset0.setValue((Comparable) hour0, (Number) 23);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) minute0, (double) 0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(defaultPieDataset1);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertFalse(boolean0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, false);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNull(range0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, true);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNull(range1);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      MockDate mockDate0 = new MockDate(0, 100, (-1726), (-2797), 2, 2);
      assertNotNull(mockDate0);
      
      Second second0 = new Second(mockDate0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals("Tue Apr 14 11:02:02 GMT 1903", mockDate0.toString());
      assertEquals(2, second0.getSecond());
      assertEquals((-2105441877001L), second0.getLastMillisecond());
      assertEquals((-2105441878000L), second0.getFirstMillisecond());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, (Comparable) second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(pieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("Tue Apr 14 11:02:02 GMT 1903", mockDate0.toString());
      assertEquals(2, second0.getSecond());
      assertEquals((-2105441877001L), second0.getLastMillisecond());
      assertEquals((-2105441878000L), second0.getFirstMillisecond());
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) second0, (double) 100, (-4));
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(pieDataset1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("Tue Apr 14 11:02:02 GMT 1903", mockDate0.toString());
      assertEquals(2, second0.getSecond());
      assertEquals((-2105441877001L), second0.getLastMillisecond());
      assertEquals((-2105441878000L), second0.getFirstMillisecond());
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(pieDataset1);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("Tue Apr 14 11:02:02 GMT 1903", mockDate0.toString());
      assertEquals(2, second0.getSecond());
      assertEquals((-2105441877001L), second0.getLastMillisecond());
      assertEquals((-2105441878000L), second0.getFirstMillisecond());
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset1));
      
      PieDataset pieDataset2 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) mockDate0, (double) (-4));
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(pieDataset2);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("Tue Apr 14 11:02:02 GMT 1903", mockDate0.toString());
      assertEquals(2, second0.getSecond());
      assertEquals((-2105441877001L), second0.getLastMillisecond());
      assertEquals((-2105441878000L), second0.getFirstMillisecond());
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertNotSame(pieDataset0, pieDataset2);
      assertNotSame(pieDataset1, pieDataset2);
      assertNotSame(pieDataset1, defaultPieDataset0);
      assertNotSame(pieDataset1, pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset1);
      assertNotSame(defaultPieDataset0, pieDataset2);
      assertNotSame(pieDataset2, pieDataset0);
      assertNotSame(pieDataset2, defaultPieDataset0);
      assertNotSame(pieDataset2, pieDataset1);
      assertFalse(pieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset0.equals((Object)defaultPieDataset0));
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertTrue(pieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)pieDataset1));
      assertFalse(pieDataset2.equals((Object)pieDataset0));
      assertTrue(pieDataset2.equals((Object)pieDataset1));
      assertTrue(pieDataset2.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1443.1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1443.1)}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray0.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((-1443.1));
      assertNotNull(timePeriodValues0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.setValue((Comparable) (-1443.1), (Number) (-1443.1));
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) (-1443.1), (-186.71));
      assertNotNull(pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)pieDataset0));
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((-1443.1));
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNull(range0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      LinkedList<DefaultTableXYDataset> linkedList0 = new LinkedList<DefaultTableXYDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timePeriodValuesCollection0, (List) linkedList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray0.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("eu\"G");
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      Minute minute0 = new Minute(0, hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      
      Minute minute1 = (Minute)minute0.next();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1, minute1.getMinute());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute1.equals((Object)minute0));
      
      timePeriodValues0.add((TimePeriod) minute0, (Number) (-1.0));
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertNotSame(minute0, minute1);
      assertFalse(minute0.equals((Object)minute1));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
      assertNotNull(range0);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      
      double[][] doubleArray1 = new double[5][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, doubleArray1.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(minute1);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1, minute1.getMinute());
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "eu\"G";
      stringArray0[1] = "eu\"G";
      stringArray0[2] = "eu\"G";
      stringArray0[3] = "eu\"G";
      stringArray0[4] = "eu\"G";
      stringArray0[5] = "eu\"G";
      stringArray0[6] = ">#D;bf@Yxv>";
      Number[][] numberArray0 = new Number[0][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset1);
      assertEquals(0, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getSeriesCount());
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(7, stringArray0.length);
      assertEquals(0, numberArray0.length);
      
      defaultIntervalCategoryDataset1.removeChangeListener((DatasetChangeListener) null);
      assertEquals(0, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset1.getSeriesCount());
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertFalse(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(7, stringArray0.length);
      assertEquals(0, numberArray0.length);
      
      int int0 = keyToGroupMap0.getKeyCount(">#D;bf@Yxv>");
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, int0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(0, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1, minute1.getMinute());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      
      Range range1 = Range.expand(range0, (-3597), 1170.0);
      assertNotNull(range1);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getCentralValue(), 0.01);
      assertEquals((-1.0), range1.getUpperBound(), 0.01);
      assertEquals((-1.0), range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertFalse(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1443.1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1443.1)}, doubleArray1, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray1.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((-1443.1));
      assertNotNull(timePeriodValues0);
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      Minute minute0 = new Minute((-3597), hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      
      Minute minute1 = (Minute)minute0.next();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals((-12), minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute1.equals((Object)minute0));
      
      timePeriodValues0.add((TimePeriod) minute1, (Number) 23);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals((-12), minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
      assertNotNull(range0);
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((-1443.1));
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      defaultIntervalCategoryDataset0.removeChangeListener((DatasetChangeListener) null);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, doubleArray0.length);
      
      int int0 = keyToGroupMap0.getKeyCount((-1443.1));
      assertEquals(0, int0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = Range.expand(range0, 0, 0);
      assertNotNull(range1);
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(23.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(23.0, range1.getCentralValue(), 0.01);
      assertEquals(23.0, range1.getUpperBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range2);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Double double0 = new Double((-1439.425835));
      assertNotNull(double0);
      assertEquals((-1439.425835), (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(double0));
      
      Double double1 = new Double((-104.011));
      assertNotNull(double1);
      assertEquals((-104.011), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(3055.639337);
      assertNotNull(double2);
      assertEquals(3055.639337, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      boolean boolean0 = stack0.add(double2);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[3055.639337]", stack0.toString());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(double2));
      assertFalse(stack0.contains(double0));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Stack stack1 = (Stack)stack0.clone();
      assertNotNull(stack1);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[3055.639337]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals("[3055.639337]", stack1.toString());
      assertFalse(stack1.empty());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertEquals(1, stack1.capacity());
      assertTrue(stack0.contains(double2));
      assertFalse(stack0.contains(double0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[3055.639337]", stack0.toString());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(double2));
      assertFalse(stack0.contains(double0));
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Stack stack2 = (Stack)stack0.clone();
      assertNotNull(stack2);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals("[3055.639337]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack2.empty());
      assertFalse(stack2.isEmpty());
      assertEquals(1, stack2.size());
      assertEquals(1, stack2.capacity());
      assertEquals("[3055.639337]", stack2.toString());
      assertNotSame(stack2, stack1);
      assertTrue(stack0.contains(double2));
      assertFalse(stack0.contains(double0));
      assertTrue(stack2.equals((Object)stack1));
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0, true);
      assertNull(range1);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 3462, 49);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(3462, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(49, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset(slidingGanttCategoryDataset0, 91, 3462);
      assertNotNull(slidingGanttCategoryDataset1);
      assertEquals(3462, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(49, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(91, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(3462, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("[ZE4%2,Qr!&mjqD", "Null 'seriesKey' argument.", "eu0G");
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Null 'seriesKey' argument.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("eu0G", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      double double0 = 125.545;
      Double double1 = new Double(125.545);
      assertNotNull(double1);
      assertEquals(125.545, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double1);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[125.545]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(double1));
      assertEquals((double)double1, (double)double0, 0.01);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      Second second1 = (Second)second0.next();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertFalse(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 59);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(29.0, range0.getCentralValue(), 0.01);
      assertEquals(58.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(58.0, range0.getLength(), 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) "");
      assertNotNull(defaultPieDataset0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(29.0, range1.getCentralValue(), 0.01);
      assertEquals(58.0, range1.getUpperBound(), 0.01);
      assertEquals(58.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) stack0, range0, true);
      assertNull(range2);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(29.0, range0.getCentralValue(), 0.01);
      assertEquals(58.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(58.0, range0.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertTrue(range0.equals((Object)range1));
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (KeyToGroupMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(double0));
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[1.0]", stack0.toString());
      assertTrue(stack0.contains(double0));
      
      Number[][] numberArray0 = new Number[2][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(869, 2832);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(2831, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("eu0G", "eu0G", "eu0G");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      jDBCCategoryDataset0.clear();
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset1 = new JDBCCategoryDataset(connection1);
      assertNotNull(jDBCCategoryDataset1);
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(38, 38, (-1428), (-3354), (-1), 0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=38,MONTH=38,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1428,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-3354,HOUR_OF_DAY=-3354,MINUTE=-1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      ParsePosition parsePosition0 = new ParsePosition(46);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=46,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(46, parsePosition0.getIndex());
      
      Date date1 = mockSimpleDateFormat0.parse("", parsePosition0);
      assertNull(date1);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("java.text.ParsePosition[index=46,errorIndex=46]", parsePosition0.toString());
      assertEquals(46, parsePosition0.getErrorIndex());
      assertEquals(46, parsePosition0.getIndex());
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = null;
      dateArray0[1] = date0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(4, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-1.0), range0.getUpperBound(), 0.01);
      assertEquals((-1.0), range0.getCentralValue(), 0.01);
      assertEquals((-1.0), range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultHighLowDataset0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("[ZE4%2,Qr!&mjqD", "Null 'seriesKey' argument.", "eu\"G");
      assertNotNull(timePeriodValues0);
      assertEquals("Null 'seriesKey' argument.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("eu\"G", timePeriodValues0.getRangeDescription());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(taskSeriesCollection0, false);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Statement statement0 = mock(Statement.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSet) null).when(statement0).executeQuery(anyString());
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(statement0).when(connection0).createStatement();
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      String string0 = "";
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      int int0 = (-4015);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (-4015), 59);
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-4015), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(59, slidingCategoryDataset0.getMaximumCategoryCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, 1082);
      assertNotNull(pieDataset0);
      assertEquals((-4015), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(59, slidingCategoryDataset0.getMaximumCategoryCount());
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "", (double) 1082, 59);
      assertNotNull(pieDataset1);
      assertEquals((-4015), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(59, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(slidingCategoryDataset0);
      assertNull(number0);
      assertEquals((-4015), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(59, slidingCategoryDataset0.getMaximumCategoryCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, (double) (-4015));
      assertNotNull(range1);
      assertEquals((-4015), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(59, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-4015.0), range1.getLowerBound(), 0.01);
      assertEquals((-4015.0), range1.getUpperBound(), 0.01);
      assertEquals((-4015.0), range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1443.1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1443.1)}, doubleArray1, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray1.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((-1443.1));
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      arrayList0.trimToSize();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = arrayList0.add(xYIntervalSeriesCollection0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      
      boolean boolean1 = arrayList0.add(xYIntervalSeriesCollection0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertTrue(boolean1 == boolean0);
      
      GanttCategoryDataset ganttCategoryDataset0 = null;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, 0, 0);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3354), 1, (-3354), 1, 1, 826);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-3354,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-3354,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=826,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      ParsePosition parsePosition0 = new ParsePosition(1988);
      assertNotNull(parsePosition0);
      assertEquals(1988, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=1988,errorIndex=-1]", parsePosition0.toString());
      
      Date date1 = mockSimpleDateFormat0.parse("", parsePosition0);
      assertNull(date1);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals(1988, parsePosition0.getIndex());
      assertEquals(1988, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=1988,errorIndex=1988]", parsePosition0.toString());
      
      Date[] dateArray0 = new Date[1];
      dateArray0[0] = null;
      double[] doubleArray0 = new double[0];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1, dateArray0.length);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jfree.data.xy.DefaultHighLowDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1443.1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1443.1), 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(3, doubleArray1.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((-1443.1));
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
      assertNull(range0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((-1443.1));
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Vector<DefaultBoxAndWhiskerCategoryDataset> vector0 = new Vector<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 23;
      numberArray1[1] = (Number) 0;
      numberArray1[2] = (Number) 0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("zJqDorgL", "&\"n/", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(23.0, number0);
      assertEquals(1, numberArray0.length);
      
      Vector<Long> vector0 = new Vector<Long>(0);
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(11.5, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("&\"n/", 1, 3379);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3379, matrixSeries0.getItemCount());
      assertEquals(3379, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3379, matrixSeries0.getItemCount());
      assertEquals(3379, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3379, matrixSeries0.getItemCount());
      assertEquals(3379, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, true);
      assertNotNull(range2);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(1689.0, range2.getCentralValue(), 0.01);
      assertEquals(3378.0, range2.getUpperBound(), 0.01);
      assertEquals(3378.0, range2.getLength(), 0.01);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3379, matrixSeries0.getItemCount());
      assertEquals(3379, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Double double0 = new Double((-510.0));
      assertNotNull(double0);
      assertEquals((-510.0), (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains((-510.0)));
      
      Double double1 = new Double((-510.0));
      assertNotNull(double1);
      assertEquals((-510.0), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double1);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[-510.0]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains((-510.0)));
      assertEquals((double)double1, (double)double0, 0.01);
      
      Number[][] numberArray0 = new Number[0][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, numberArray0.length);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(431, 431, 431, 4547, 431, 3435);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=431,MONTH=431,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=431,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=4547,HOUR_OF_DAY=4547,MINUTE=431,SECOND=3435,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (-2968.810548), (-2968.810548), (-428.5149666555746), (-2220.437), (-8658.6));
      assertNotNull(oHLCDataItem0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=431,MONTH=431,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=431,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=4547,HOUR_OF_DAY=4547,MINUTE=431,SECOND=3435,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      Date[] dateArray0 = new Date[5];
      dateArray0[0] = date0;
      dateArray0[1] = date0;
      dateArray0[2] = date0;
      dateArray0[3] = date0;
      dateArray0[4] = date0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2220.437);
      doubleArray0[1] = (-428.5149666555746);
      doubleArray0[2] = (double) 431;
      doubleArray0[3] = (double) 3435;
      doubleArray0[4] = (double) 4547;
      doubleArray0[5] = (-428.5149666555746);
      doubleArray0[6] = (-8658.6);
      doubleArray0[7] = (double) 3435;
      doubleArray0[8] = (-428.5149666555746);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(oHLCDataItem0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {(-2220.437), (-428.5149666555746), 431.0, 3435.0, 4547.0, (-428.5149666555746), (-8658.6), 3435.0, (-428.5149666555746)}, doubleArray0, 0.01);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=431,MONTH=431,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=431,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=4547,HOUR_OF_DAY=4547,MINUTE=431,SECOND=3435,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(9, doubleArray0.length);
      assertEquals(5, dateArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertArrayEquals(new double[] {(-2220.437), (-428.5149666555746), 431.0, 3435.0, 4547.0, (-428.5149666555746), (-8658.6), 3435.0, (-428.5149666555746)}, doubleArray0, 0.01);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=431,MONTH=431,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=431,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=4547,HOUR_OF_DAY=4547,MINUTE=431,SECOND=3435,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(1163.2815, range0.getCentralValue(), 0.01);
      assertEquals(6767.437, range0.getLength(), 0.01);
      assertEquals((-2220.437), range0.getLowerBound(), 0.01);
      assertEquals(4547.0, range0.getUpperBound(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(5, dateArray0.length);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Number[][] numberArray0 = new Number[13][3];
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("zJqDorgL", "&\"nD", numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(13, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(13, numberArray0.length);
      
      defaultCategoryDataset0.clear();
      assertEquals(13, numberArray0.length);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Date[] dateArray0 = new Date[2];
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1990), (-1990), (-1990), (-1990), (-1990), (-3354));
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1990,MONTH=-1990,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1990,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1990,HOUR_OF_DAY=-1990,MINUTE=-1990,SECOND=-3354,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      dateArray0[0] = date0;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      ParsePosition parsePosition0 = new ParsePosition(2058005162);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=2058005162,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(2058005162, parsePosition0.getIndex());
      
      Date date1 = mockSimpleDateFormat0.parse("", parsePosition0);
      assertNull(date1);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals(2058005162, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=2058005162,errorIndex=2058005162]", parsePosition0.toString());
      assertEquals(2058005162, parsePosition0.getIndex());
      
      dateArray0[1] = null;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2058005162;
      doubleArray0[1] = (double) (-1990);
      doubleArray0[2] = (double) (-3354);
      doubleArray0[3] = (double) (-3354);
      doubleArray0[4] = (double) (-1990);
      doubleArray0[5] = (double) (-3354);
      doubleArray0[6] = (double) 2058005162;
      doubleArray0[7] = (double) (-3354);
      doubleArray0[8] = (double) (-1990);
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("zJqDorgL", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertArrayEquals(new double[] {2.058005162E9, (-1990.0), (-3354.0), (-3354.0), (-1990.0), (-3354.0), 2.058005162E9, (-3354.0), (-1990.0)}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(9, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultHighLowDataset0);
      assertNotNull(range0);
      assertArrayEquals(new double[] {2.058005162E9, (-1990.0), (-3354.0), (-3354.0), (-1990.0), (-3354.0), 2.058005162E9, (-3354.0), (-1990.0)}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals((-1990.0), range0.getLowerBound(), 0.01);
      assertEquals(1.029001586E9, range0.getCentralValue(), 0.01);
      assertEquals(2.058005162E9, range0.getUpperBound(), 0.01);
      assertEquals(2.058007152E9, range0.getLength(), 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(2, dateArray0.length);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, true);
      assertNull(range1);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Double double0 = new Double((-510.0));
      assertNotNull(double0);
      assertEquals((-510.0), (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(double0));
      
      Double double1 = new Double((-510.0));
      assertNotNull(double1);
      assertEquals((-510.0), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double1);
      assertTrue(boolean0);
      assertEquals("[-510.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(double1));
      assertEquals((double)double1, (double)double0, 0.01);
      
      Number[][] numberArray0 = new Number[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertEquals("[-510.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(double1));
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Stack stack1 = (Stack)stack0.clone();
      assertNotNull(stack1);
      assertEquals("[-510.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack1.empty());
      assertEquals("[-510.0]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertEquals(1, stack1.capacity());
      assertTrue(stack0.contains(double1));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, true);
      assertNull(range1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("[-510.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(double1));
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0, true);
      assertNull(range2);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-510.0);
      doubleArray0[1] = doubleArray2;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) stack1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Double double0 = new Double((-2405.2536276967207));
      assertNotNull(double0);
      assertEquals((-2405.2536276967207), (double)double0, 0.01);
      
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1, 1);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (-1979), 1422);
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-1979), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1422, slidingCategoryDataset0.getMaximumCategoryCount());
      
      boolean boolean0 = defaultStatisticalCategoryDataset0.hasListener(matrixSeriesCollection0);
      assertFalse(boolean0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 1);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "", 2434.225061508, 1422);
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
      assertNull(range2);
      assertEquals((-1979), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1422, slidingCategoryDataset0.getMaximumCategoryCount());
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) vector0, range0, true);
      assertNull(range3);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotSame(range0, range1);
      assertTrue(range0.equals((Object)range1));
      
      Range range4 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotNull(range4);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range1));
      
      Range range5 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) vector0, range4, true);
      assertNull(range5);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getLength(), 0.01);
      assertNotSame(range4, range0);
      assertNotSame(range4, range1);
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range1));
      
      Range range6 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range6);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range6.getLength(), 0.01);
      assertEquals(0.0, range6.getLowerBound(), 0.01);
      assertEquals(0.0, range6.getCentralValue(), 0.01);
      assertEquals(0.0, range6.getUpperBound(), 0.01);
      assertNotSame(range6, range1);
      assertNotSame(range6, range4);
      assertNotSame(range6, range0);
      assertTrue(range6.equals((Object)range4));
      assertTrue(range6.equals((Object)range0));
      assertTrue(range6.equals((Object)range1));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset(connection0, "Null 'rowKeys' argument.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCXYDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1, 1);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (-1979), 1422);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(1422, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1979), slidingCategoryDataset0.getFirstCategoryIndex());
      
      boolean boolean0 = defaultStatisticalCategoryDataset0.hasListener(matrixSeriesCollection0);
      assertFalse(boolean0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 1);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "", 2434.225061508, 1422);
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      Double double0 = new Double((-1979));
      assertNotNull(double0);
      assertEquals((-1979.0), (double)double0, 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
      assertNull(range2);
      assertEquals(1422, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-1979), slidingCategoryDataset0.getFirstCategoryIndex());
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      SynthButtonUI synthButtonUI0 = new SynthButtonUI();
      assertNotNull(synthButtonUI0);
      
      matrixSeries0.removePropertyChangeListener(synthButtonUI0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) vector0, range0, true);
      assertNull(range3);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotSame(range0, range1);
      assertTrue(range0.equals((Object)range1));
      
      Range range4 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotNull(range4);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range1));
      
      Range range5 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) vector0, range4, true);
      assertNull(range5);
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range1));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertFalse(number0.equals((Object)double0));
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Double double0 = new Double((-510.0));
      assertNotNull(double0);
      assertEquals((-510.0), (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains((-510.0)));
      
      Double double1 = new Double((-510.0));
      assertNotNull(double1);
      assertEquals((-510.0), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double1);
      assertTrue(boolean0);
      assertEquals("[-510.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains((-510.0)));
      assertEquals((double)double1, (double)double0, 0.01);
      
      Number[][] numberArray0 = new Number[1][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertEquals("[-510.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains((-510.0)));
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Stack stack1 = (Stack)stack0.clone();
      assertNotNull(stack1);
      assertEquals("[-510.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(1, stack1.size());
      assertEquals(1, stack1.capacity());
      assertFalse(stack1.isEmpty());
      assertEquals("[-510.0]", stack1.toString());
      assertFalse(stack1.empty());
      assertTrue(stack0.contains((-510.0)));
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0, (List) stack0, true);
      assertNull(range1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("[-510.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains((-510.0)));
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0, true);
      assertNull(range2);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-510.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray0[3] = doubleArray4;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", (String) null, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (-1979), 1422);
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-1979), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1422, slidingCategoryDataset0.getMaximumCategoryCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 1);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "", 2434.225061508, 1422);
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      Double double0 = new Double((-1979));
      assertNotNull(double0);
      assertEquals((-1979.0), (double)double0, 0.01);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(3483.6937459, 2434.225061508);
      assertNotNull(powerFunction2D0);
      assertEquals(2434.225061508, powerFunction2D0.getB(), 0.01);
      assertEquals(3483.6937459, powerFunction2D0.getA(), 0.01);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-1979), (-1255.2767072425), 2, "");
      assertNotNull(xYSeries0);
      assertEquals(2434.225061508, powerFunction2D0.getB(), 0.01);
      assertEquals(3483.6937459, powerFunction2D0.getA(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-1979.0), xYSeries0.getMinX(), 0.01);
      assertEquals((-1255.2767072425), xYSeries0.getMaxX(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertEquals(2, xYSeries0.getItemCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(powerFunction2D0, (-1979), 3483.6937459, (-1), double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("eu0G", "eu0G", "eu0G");
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("eu0G", 52, 23);
      assertNotNull(matrixSeries0);
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(1196, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(52, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("eu0G", "8b<6d^D8\"(", "8b<6d^D8\"(");
      assertNotNull(timePeriodValues0);
      assertEquals("8b<6d^D8\"(", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("8b<6d^D8\"(", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals("8b<6d^D8\"(", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("8b<6d^D8\"(", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timePeriodValuesCollection0);
      assertTrue(boolean0);
      assertEquals("8b<6d^D8\"(", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("8b<6d^D8\"(", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number1);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, true);
      assertNull(range1);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertNull(timeSeries0.getDescription());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = true;
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      arrayList0.trimToSize();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = arrayList0.add(xYIntervalSeriesCollection0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.contains(xYIntervalSeriesCollection0));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) arrayList0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYIntervalSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1, 1);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 1, 1422);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1422, slidingCategoryDataset0.getMaximumCategoryCount());
      
      boolean boolean0 = defaultStatisticalCategoryDataset0.hasListener(matrixSeriesCollection0);
      assertFalse(boolean0);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, 1);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "", 2434.225061508, 1422);
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      Double double0 = new Double(1);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
      assertNull(range2);
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1422, slidingCategoryDataset0.getMaximumCategoryCount());
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) vector0, range0, true);
      assertNull(range3);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotSame(range0, range1);
      assertTrue(range0.equals((Object)range1));
      
      Range range4 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotNull(range4);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getCentralValue(), 0.01);
      assertEquals(0.0, range4.getUpperBound(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range1));
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Double double1 = new Double(1422);
      assertNotNull(double1);
      assertEquals(1422.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Range range5 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertNotNull(range5);
      assertEquals(0.0, range5.getLength(), 0.01);
      assertEquals(0.0, range5.getUpperBound(), 0.01);
      assertEquals(0.0, range5.getLowerBound(), 0.01);
      assertEquals(0.0, range5.getCentralValue(), 0.01);
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotSame(range5, range1);
      assertNotSame(range5, range0);
      assertNotSame(range5, range4);
      assertTrue(range5.equals((Object)range0));
      assertTrue(range5.equals((Object)range4));
      assertTrue(range5.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[2];
      numberArray0[0] = numberArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("zJqDorgL", "&\"nD", numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(1, numberArray0.length);
      
      defaultCategoryDataset0.clear();
      assertEquals(1, numberArray0.length);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (-1990));
      assertNotNull(defaultPieDataset0);
      assertEquals(1, numberArray0.length);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) vector0, true);
      assertNull(range0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(1, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) vector0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("[ZE4%2,Qr!&mjqD", "Null 'seriesKey' argument.", "eu0G");
      assertNotNull(timePeriodValues0);
      assertEquals("eu0G", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Null 'seriesKey' argument.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals("eu0G", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Null 'seriesKey' argument.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timePeriodValuesCollection0);
      assertTrue(boolean0);
      assertEquals("eu0G", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Null 'seriesKey' argument.", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1, 1);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeries0.getItemCount());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 1;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction2D0.getOrder());
      assertEquals(3, doubleArray0.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("");
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
      assertNull(range0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      double[][] doubleArray1 = new double[3][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", (String) null, doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(3, doubleArray1.length);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range1);
      assertEquals(1.0, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(3, doubleArray1.length);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range2);
      assertEquals(1.5, range2.getCentralValue(), 0.01);
      assertEquals(3.0, range2.getUpperBound(), 0.01);
      assertEquals(3.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range1));
      assertEquals(3, doubleArray1.length);
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0, false);
      assertNull(range3);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Range range4 = DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
      assertNull(range4);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1443.1);
      doubleArray0[1] = (-1443.1);
      doubleArray0[2] = (-1443.1);
      doubleArray0[3] = (-1443.1);
      doubleArray0[4] = (-1443.1);
      doubleArray0[5] = (-1443.1);
      doubleArray0[6] = (-1443.1);
      doubleArray0[7] = (-1443.1);
      doubleArray0[8] = (-1443.1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1443.1), (-1443.1), (-1443.1), (-1443.1), (-1443.1), (-1443.1), (-1443.1), (-1443.1), (-1443.1)}, doubleArray0, 0.01);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertEquals(9, doubleArray0.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((-1443.1));
      assertNotNull(timePeriodValues0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
      assertNull(range0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1443.1);
      doubleArray1[6] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, doubleArray1.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((-1443.1));
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("eu0G", "eu0G", "eu0G");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("eu0G", 52, 23);
      assertNotNull(matrixSeries0);
      assertEquals(1196, matrixSeries0.getItemCount());
      assertEquals(52, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(23, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(1196, matrixSeries0.getItemCount());
      assertEquals(52, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range1);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) "eu0G");
      assertNotNull(pieDataset0);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range2);
      assertEquals(1196, matrixSeries0.getItemCount());
      assertEquals(52, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(22.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(11.0, range2.getCentralValue(), 0.01);
      assertEquals(22.0, range2.getUpperBound(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection1);
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      
      Range range3 = timeSeriesCollection1.getDomainBounds(true);
      assertNull(range3);
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, (Range) null, false);
      assertNull(range4);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertFalse(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      assertNotNull(jDBCXYDataset0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) jDBCXYDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(0, jDBCXYDataset0.getItemCount());
      assertFalse(jDBCXYDataset0.isTimeSeries());
      assertEquals(0, jDBCXYDataset0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number1);
      assertEquals(51.0, number1);
      assertEquals(1196, matrixSeries0.getItemCount());
      assertEquals(52, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertFalse(number1.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2652.1;
      doubleArray0[1] = 177.70354461;
      double[][] doubleArray1 = new double[5][9];
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 177.70354461;
      doubleArray2[1] = 177.70354461;
      doubleArray2[2] = 177.70354461;
      doubleArray2[3] = 177.70354461;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 2652.1;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 177.70354461;
      doubleArray3[3] = 177.70354461;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 177.70354461;
      doubleArray1[2] = doubleArray3;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, doubleArray1.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 53, (-1));
      assertNotNull(slidingCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals((-1), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(53, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(5, doubleArray1.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2652.1, range0.getUpperBound(), 0.01);
      assertEquals(1326.05, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2652.1, range0.getLength(), 0.01);
      assertEquals(5, doubleArray1.length);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(3169, 53);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(52, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      Range range1 = dynamicTimeSeriesCollection0.getRangeBounds(false);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(range1);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(52, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01);
      assertEquals(Double.NaN, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(52, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      assertNotNull(regularTimePeriod0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertNotSame(fixedMillisecond0, regularTimePeriod0);
      assertNotSame(regularTimePeriod0, fixedMillisecond0);
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "&\"n/", "zJqDorgL");
      assertNotNull(timeSeries0);
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getLastMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getFirstMillisecond());
      assertEquals(1392409281319L, regularTimePeriod0.getSerialIndex());
      assertEquals(1392409281319L, regularTimePeriod0.getMiddleMillisecond());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("&\"n/", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("zJqDorgL", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertFalse(fixedMillisecond0.equals((Object)regularTimePeriod0));
      assertFalse(regularTimePeriod0.equals((Object)fixedMillisecond0));
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      ArrayList<DefaultIntervalXYDataset> arrayList1 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList1);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList1.contains(defaultIntervalXYDataset0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultIntervalXYDataset0, true);
      assertNull(range0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      
      Second second1 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(21, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertTrue(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 59);
      assertNotNull(matrixSeries0);
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getColumnsCount());
      
      matrixSeries0.fireSeriesChanged();
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 59;
      doubleArray1[1] = (double) 59;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 496.646762651;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 23.0;
      TimeSeries timeSeries0 = new TimeSeries("");
      assertNotNull(timeSeries0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1450, "");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1450, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1450,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, simpleTimeZone0);
      assertNotNull(timeSeriesCollection0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1450, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1450,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = timeSeriesCollection0.getDomainBounds(true);
      assertNull(range0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1450, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1450,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, (Range) null, false);
      assertNull(range1);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1450, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1450,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(stack0.contains(496.646762651));
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertTrue(timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1450, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1450,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number1);
      assertEquals(58.0, number1);
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("eu0G", "eu0G", "eu0G");
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("eu0G", 52, 23);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(52, matrixSeries0.getRowCount());
      assertEquals(1196, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(52, matrixSeries0.getRowCount());
      assertEquals(1196, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) "eu0G");
      assertNotNull(pieDataset0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertNull(matrixSeries0.getDescription());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(52, matrixSeries0.getRowCount());
      assertEquals(1196, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(22.0, range1.getLength(), 0.01);
      assertEquals(11.0, range1.getCentralValue(), 0.01);
      assertEquals(22.0, range1.getUpperBound(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection1);
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      
      Range range2 = timeSeriesCollection1.getDomainBounds(true);
      assertNull(range2);
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertFalse(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      
      ArrayList<DefaultOHLCDataset> arrayList0 = new ArrayList<DefaultOHLCDataset>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, (Range) null, false);
      assertNull(range3);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertFalse(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(51.0, number0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(23, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(52, matrixSeries0.getRowCount());
      assertEquals(1196, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1443.1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1443.1)}, doubleArray1, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray1.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((-1443.1));
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      Minute minute0 = new Minute((-3597), hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      
      Minute minute1 = (Minute)minute0.next();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals((-12), minute1.getMinute());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute1.equals((Object)minute0));
      
      timePeriodValues0.add((TimePeriod) minute1, (Number) 23);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals((-12), minute1.getMinute());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
      assertNotNull(range0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((-1443.1));
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      defaultIntervalCategoryDataset0.removeChangeListener((DatasetChangeListener) null);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
      assertNotNull(double0);
      assertEquals(23.0, (double)double0, 0.01);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Double double1 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) timePeriodValuesCollection0);
      assertNotNull(double1);
      assertEquals(23.0, (double)double1, 0.01);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals((double)double1, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = 1.39240928132E12;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findCumulativeRangeBounds(defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 23;
      numberArray1[1] = (Number) 0;
      numberArray1[2] = (Number) 0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("zJqDorgL", "&\"n/", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(23.0, number0);
      assertEquals(1, numberArray0.length);
      
      Vector<Long> vector0 = new Vector<Long>(0);
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(11.5, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(23.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(1, numberArray0.length);
      
      MatrixSeries matrixSeries0 = null;
      try {
        matrixSeries0 = new MatrixSeries("mx'6'}_?", 14, (-2767));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      
      Number[][] numberArray0 = new Number[7][3];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 23;
      numberArray1[1] = (Number) 0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("zJqDorgL", "zJqDorgL", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(7, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(7, numberArray0.length);
      
      Vector<Long> vector0 = new Vector<Long>(23);
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(23, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNull(range0);
      assertEquals(7, numberArray0.length);
      
      double double0 = (-1021.79337306);
      int int0 = 1188;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(23, "org.jfree.data.general.DatasetUtilities");
      assertNotNull(simpleTimeZone0);
      assertEquals("org.jfree.data.general.DatasetUtilities", simpleTimeZone0.getID());
      assertEquals(23, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=org.jfree.data.general.DatasetUtilities,offset=23,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1188, 23, simpleTimeZone0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals("org.jfree.data.general.DatasetUtilities", simpleTimeZone0.getID());
      assertEquals(23, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=org.jfree.data.general.DatasetUtilities,offset=23,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(22, dynamicTimeSeriesCollection0.getNewestIndex());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 23;
      numberArray1[1] = (Number) 0;
      numberArray1[2] = (Number) 0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("zJqDorgL", "&\"n/", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(23.0, number0);
      assertEquals(1, numberArray0.length);
      
      Vector<Long> vector0 = new Vector<Long>(0);
      assertNotNull(vector0);
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(11.5, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getLength(), 0.01);
      assertEquals(1, numberArray0.length);
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      String string0 = "The number of row keys does not match the number of rows in the data array.";
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(connection0, "The number of row keys does not match the number of rows in the data array.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Double double0 = new Double((-0.37205858500061995));
      assertNotNull(double0);
      assertEquals((-0.37205858500061995), (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(double0));
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[-0.37205858500061995]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(double0));
      
      Number[][] numberArray0 = new Number[2][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, numberArray0.length);
      
      int int0 = 7;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Double double0 = new Double((-510.0));
      assertNotNull(double0);
      assertEquals((-510.0), (double)double0, 0.01);
      
      double[][] doubleArray0 = new double[17][9];
      double[] doubleArray1 = new double[16];
      doubleArray1[0] = (-510.0);
      doubleArray1[1] = (-510.0);
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(17, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals((-510.0), range0.getLowerBound(), 0.01);
      assertEquals((-255.0), range0.getCentralValue(), 0.01);
      assertEquals(510.0, range0.getLength(), 0.01);
      assertEquals(17, doubleArray0.length);
      
      Float float0 = new Float((-510.0));
      assertNotNull(float0);
      assertEquals((-510.0F), (float)float0, 0.01F);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("");
      assertNotNull(simpleHistogramDataset0);
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) null, range0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1443.1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1443.1)}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray0.length);
      
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      Minute minute0 = new Minute((-3597), hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      
      Minute minute1 = new Minute(59, hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(59, minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertFalse(minute1.equals((Object)minute0));
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset(minute0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertFalse(minute0.equals((Object)minute1));
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, false);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNull(range0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotSame(minute0, minute1);
      assertFalse(minute0.equals((Object)minute1));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, true);
      assertNull(range1);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      
      Number[][] numberArray0 = new Number[4][5];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) (-1443.1);
      numberArray1[1] = (Number) 59;
      numberArray1[2] = (Number) 23;
      numberArray1[3] = (Number) 0;
      numberArray1[4] = (Number) (-1443.1);
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[7];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) (-1443.1);
      numberArray2[1] = (Number) 59;
      numberArray2[2] = (Number) 59;
      numberArray2[3] = (Number) 59;
      numberArray2[4] = (Number) (-1443.1);
      numberArray2[5] = (Number) (-1443.1);
      numberArray2[6] = (Number) 0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[6];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      
      numberArray4[0] = (Number) 59;
      numberArray4[1] = (Number) (-1443.1);
      numberArray4[2] = (Number) 0;
      numberArray4[3] = (Number) 0;
      numberArray4[4] = (Number) 59;
      MockDate mockDate0 = new MockDate((-9999), 59, 0, 1, (-3597), 0);
      assertNotNull(mockDate0);
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0, 0, 620.066734807763, (-1443.1), 0.0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Tue Nov 27 13:03:00 GMT 8096", mockDate0.toString());
      
      Number number0 = oHLCDataItem0.getHigh();
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals("Tue Nov 27 13:03:00 GMT 8096", mockDate0.toString());
      
      numberArray4[5] = number0;
      numberArray0[3] = numberArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, numberArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, (-436), (-436));
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-436), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals((-436), slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(4, numberArray0.length);
      
      XYDataItem xYDataItem0 = new XYDataItem((-1443.1), (-3199.421557));
      assertNotNull(xYDataItem0);
      assertEquals((-1443.1), xYDataItem0.getXValue(), 0.01);
      assertEquals((-3199.421557), xYDataItem0.getYValue(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, (Comparable) xYDataItem0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      Second second1 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(21, second1.getSecond());
      assertTrue(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 59);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(58.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(58.0, range0.getUpperBound(), 0.01);
      assertEquals(29.0, range0.getCentralValue(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (-4006), 59);
      assertNotNull(slidingCategoryDataset0);
      assertEquals((-4006), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(59, slidingCategoryDataset0.getMaximumCategoryCount());
      
      boolean boolean0 = defaultStatisticalCategoryDataset0.hasListener(matrixSeriesCollection0);
      assertFalse(boolean0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, 1082);
      assertNotNull(pieDataset0);
      assertEquals((-4006), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(59, slidingCategoryDataset0.getMaximumCategoryCount());
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "", (double) 1082, 59);
      assertNotNull(pieDataset1);
      assertEquals((-4006), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(59, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(slidingCategoryDataset0);
      assertNull(number0);
      assertEquals((-4006), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(59, slidingCategoryDataset0.getMaximumCategoryCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(58.0, range1.getLength(), 0.01);
      assertEquals(29.0, range1.getCentralValue(), 0.01);
      assertEquals(58.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertNull(range2);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Range range3 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) matrixSeriesCollection0, (List) vector0, range1, false);
      assertNull(range3);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(58.0, range1.getLength(), 0.01);
      assertEquals(29.0, range1.getCentralValue(), 0.01);
      assertEquals(58.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Range range4 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotNull(range4);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(29.0, range4.getCentralValue(), 0.01);
      assertEquals(58.0, range4.getUpperBound(), 0.01);
      assertEquals(58.0, range4.getLength(), 0.01);
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotSame(range4, range1);
      assertNotSame(range4, range0);
      assertTrue(range4.equals((Object)range0));
      assertTrue(range4.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392409281320L, day0.getFirstMillisecond());
      assertEquals(1392409281320L, day0.getLastMillisecond());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("Null 'seriesKey' argument.", "", "");
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals("", timePeriodValues0.getRangeDescription());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) null);
      assertTrue(boolean0);
      
      MockDate mockDate0 = new MockDate(0L);
      assertNotNull(mockDate0);
      
      int int0 = 2738;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(2422, "Requires 'start' < 'end'.", 387, 387, 2422, 2738, 2526, 2411, 387, (-1798), 2526);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 387
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertNotNull(xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xIntervalSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      
      Long long0 = new Long((-3875L));
      assertNotNull(long0);
      assertEquals((-3875L), (long)long0);
      
      Double double0 = new Double((-3875L));
      assertNotNull(double0);
      assertEquals((-3875.0), (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(double0));
      
      Double double1 = new Double((-3875L));
      assertNotNull(double1);
      assertEquals((-3875.0), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1503.7053639);
      assertNotNull(double2);
      assertEquals(1503.7053639, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      boolean boolean1 = stack0.add(double2);
      assertTrue(boolean1);
      assertFalse(stack0.isEmpty());
      assertEquals("[1503.7053639]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(1503.7053639));
      assertFalse(stack0.contains(double1));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertTrue(boolean1 == boolean0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) double1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 23;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(double0));
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[1.0]", stack0.toString());
      assertTrue(stack0.contains(double0));
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, numberArray0.length);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.calculateStackTotal((TableXYDataset) null, 335);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      Second second1 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(21, second1.getSecond());
      assertTrue(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 59);
      assertNotNull(matrixSeries0);
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      
      matrixSeries0.fireSeriesChanged();
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 59;
      doubleArray1[1] = (double) 59;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 496.646762651;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 23.0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(248.3233813255, range0.getCentralValue(), 0.01);
      assertEquals(496.646762651, range0.getUpperBound(), 0.01);
      assertEquals(496.646762651, range0.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray1.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(1.0);
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
      assertNull(range0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range1);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      Range range2 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range2);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
      assertEquals(2, doubleArray0.length);
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, true);
      assertNull(range3);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray1.length);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      int int0 = ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      assertEquals(2, int0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createConsolidatedPieDataset((PieDataset) null, (Comparable) null, (double) 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = "zJqDorgL";
      Number[][] numberArray0 = new Number[17][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("zJqDorgL", "zJqDorgL", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(17, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(17, numberArray0.length);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Date date1 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date1);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertNotSame(date1, date0);
      assertTrue(date1.equals((Object)date0));
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)DateFormat.getDateInstance();
      assertNotNull(simpleDateFormat0);
      assertEquals("MMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Second second0 = new Second(date1);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertTrue(date1.equals((Object)date0));
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(17, numberArray0.length);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0);
      assertNull(range1);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("zJqDorgL", "zJqDorgL", numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset0, categoryDataset0);
      assertTrue(defaultCategoryDataset0.equals((Object)categoryDataset0));
      assertEquals(17, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      Second second1 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(21, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertTrue(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 59);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNull(range0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(29.0, range1.getCentralValue(), 0.01);
      assertEquals(58.0, range1.getUpperBound(), 0.01);
      assertEquals(58.0, range1.getLength(), 0.01);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range2);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(58.0, range2.getUpperBound(), 0.01);
      assertEquals(58.0, range2.getLength(), 0.01);
      assertEquals(29.0, range2.getCentralValue(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(58.0, number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-373.480051395), Double.NaN);
      assertNotNull(lineFunction2D0);
      assertEquals(Double.NaN, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-373.480051395), lineFunction2D0.getIntercept(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-1115.4959), (-373.480051395), 48, second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(Double.NaN, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-373.480051395), lineFunction2D0.getIntercept(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotSame(second0, second1);
      assertTrue(second0.equals((Object)second1));
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.NaN);
      assertNull(range3);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      String string0 = second0.toString();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(string0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", string0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(59, 0);
      assertNotNull(powerFunction2D0);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertEquals(59.0, powerFunction2D0.getA(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(powerFunction2D0, 0, (double) integer0, 59, second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(xYSeriesCollection0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(0.0, powerFunction2D0.getB(), 0.01);
      assertEquals(59.0, powerFunction2D0.getA(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, Double.NaN);
      assertNull(range0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 59;
      doubleArray1[1] = (-1575.709638200237);
      doubleArray1[2] = (double) 59;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = (double) 59;
      doubleArray1[5] = (double) 59;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      Date date0 = second0.getStart();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(date0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray1;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 59;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = Double.POSITIVE_INFINITY;
      doubleArray3[4] = Double.POSITIVE_INFINITY;
      doubleArray3[5] = (-1575.709638200237);
      doubleArray0[3] = doubleArray3;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = Double.POSITIVE_INFINITY;
      doubleArray2[3] = 1218.986907872;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 1218.986907872;
      doubleArray4[1] = 46.0;
      doubleArray4[2] = Double.POSITIVE_INFINITY;
      doubleArray4[3] = Double.POSITIVE_INFINITY;
      doubleArray4[4] = (-2808.14234417873);
      doubleArray4[5] = Double.POSITIVE_INFINITY;
      doubleArray4[6] = Double.NEGATIVE_INFINITY;
      doubleArray4[7] = (-3728.41931154);
      doubleArray4[8] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Null 'rowKeys' argument.", "Null 'rowKeys' argument.", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(4, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap("Null 'rowKeys' argument.");
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, range0.getUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      Second second1 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(21, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertTrue(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 59);
      assertNotNull(matrixSeries0);
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Second second2 = new Second(mockDate0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, second2.getSecond());
      assertEquals(1392409281320L, second2.getFirstMillisecond());
      assertEquals(1392409282319L, second2.getLastMillisecond());
      assertTrue(second2.equals((Object)second0));
      assertTrue(second2.equals((Object)second1));
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 59;
      doubleArray1[1] = (double) 59;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 496.646762651;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 23.0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 3601570881L;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray1.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(1.0);
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
      assertNull(range0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      defaultIntervalCategoryDataset0.removeChangeListener(xYTaskDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap(1.0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
      assertNotNull(range1);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      TimePeriodValuesCollection timePeriodValuesCollection1 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection1);
      assertEquals(0, timePeriodValuesCollection1.getSeriesCount());
      assertFalse(timePeriodValuesCollection1.equals((Object)timePeriodValuesCollection0));
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0);
      assertNull(range2);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertNotSame(timePeriodValuesCollection0, timePeriodValuesCollection1);
      assertFalse(timePeriodValuesCollection0.equals((Object)timePeriodValuesCollection1));
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(boolean0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      Second second1 = (Second)second0.next();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertFalse(second1.equals((Object)second0));
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(jDBCCategoryDataset0, 3825, 0);
      assertNotNull(slidingCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(3825, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      TimeSeries timeSeries0 = new TimeSeries(second0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(timeSeries0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertFalse(second0.equals((Object)second1));
      
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0, true);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(timeSeriesTableModel0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertFalse(second0.equals((Object)second1));
      
      boolean boolean1 = defaultStatisticalCategoryDataset0.hasListener(timeSeriesTableModel0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertFalse(boolean1);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertTrue(timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeriesTableModel0.getRowCount());
      assertEquals(2, timeSeriesTableModel0.getColumnCount());
      assertNotSame(second0, second1);
      assertFalse(second0.equals((Object)second1));
      assertFalse(boolean1 == boolean0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, 3825);
      assertNotNull(defaultPieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(3825, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) second0, (double) 3825, 0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(defaultPieDataset1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(3825, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotSame(second0, second1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(second0.equals((Object)second1));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(jDBCCategoryDataset0);
      assertNull(number0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      XYSeries xYSeries0 = new XYSeries(second0, false);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(xYSeries0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertFalse(second0.equals((Object)second1));
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(xYSeriesCollection0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(second0.equals((Object)second1));
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNull(range0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotSame(second0, second1);
      assertFalse(second0.equals((Object)second1));
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, true);
      assertNull(range1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(3825, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) jDBCCategoryDataset0, 62.6726);
      assertNull(range2);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset("&6n@bg", "*U-:9=mONc7O\";cs", "&6n@bg", "The 'data' is null.");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      defaultPieDataset0.setValue((Comparable) "LKP:`|oZ<u@$Jw=py", (-1385.3727356189456));
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "LKP:`|oZ<u@$Jw=py", 2565.81, (-145));
      assertNotNull(pieDataset0);
      assertNotSame(defaultPieDataset0, pieDataset0);
      assertNotSame(pieDataset0, defaultPieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      int int0 = defaultMultiValueCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(defaultMultiValueCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(1.0));
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals("[1.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(1.0));
      
      Number[][] numberArray0 = new Number[2][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, numberArray0.length);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertNotNull(yIntervalSeriesCollection0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      double double1 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 28);
      assertEquals(0.0, double1, 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range1);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(2, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      Second second1 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(21, second1.getSecond());
      assertTrue(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 59);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(29.0, range0.getCentralValue(), 0.01);
      assertEquals(58.0, range0.getUpperBound(), 0.01);
      assertEquals(58.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (-4006), 59);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(59, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-4006), slidingCategoryDataset0.getFirstCategoryIndex());
      
      boolean boolean0 = defaultStatisticalCategoryDataset0.hasListener(matrixSeriesCollection0);
      assertFalse(boolean0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, 1082);
      assertNotNull(pieDataset0);
      assertEquals(59, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-4006), slidingCategoryDataset0.getFirstCategoryIndex());
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "", (double) 1082, 59);
      assertNotNull(pieDataset1);
      assertEquals(59, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-4006), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(slidingCategoryDataset0);
      assertNull(number0);
      assertEquals(59, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-4006), slidingCategoryDataset0.getFirstCategoryIndex());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(29.0, range1.getCentralValue(), 0.01);
      assertEquals(58.0, range1.getUpperBound(), 0.01);
      assertEquals(58.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      boolean boolean1 = false;
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertNull(range2);
      
      String string0 = "vc-$^\\uLw;$]TP";
      Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingCategoryDataset0, 62.6726);
      assertNotNull(range3);
      assertEquals(62.6726, range3.getLowerBound(), 0.01);
      assertEquals(62.6726, range3.getCentralValue(), 0.01);
      assertEquals(62.6726, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(59, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-4006), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset("The 'data' is null.", string0, string0, "Null 'dataset' argument.");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray0.length);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1896, 1183);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1182, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      
      Vector<DefaultMultiValueCategoryDataset> vector0 = new Vector<DefaultMultiValueCategoryDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      JList<DefaultMultiValueCategoryDataset> jList0 = new JList<DefaultMultiValueCategoryDataset>(vector0);
      assertNotNull(jList0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.getIgnoreRepaint());
      
      List<DefaultMultiValueCategoryDataset> list0 = jList0.getSelectedValuesList();
      assertNotNull(list0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.getIgnoreRepaint());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(dynamicTimeSeriesCollection0, list0, false);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertNull(range0);
      assertEquals(1182, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.getIgnoreRepaint());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((TableXYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      long long0 = new Integer(0);
      assertEquals(0, long0);
      
      Second second1 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(21, second1.getSecond());
      assertTrue(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 59);
      assertNotNull(matrixSeries0);
      assertEquals(59, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      
      Second second2 = Second.parseSecond("The number of column keys does not match the number of columns in the data array.");
      assertNull(second2);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(59, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      assertNull(range0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertEquals(59, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(58.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(58.0, range1.getUpperBound(), 0.01);
      assertEquals(29.0, range1.getCentralValue(), 0.01);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range2);
      assertEquals(59, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(29.0, range2.getCentralValue(), 0.01);
      assertEquals(58.0, range2.getUpperBound(), 0.01);
      assertEquals(58.0, range2.getLength(), 0.01);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(58.0, number0);
      assertEquals(59, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range3 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotNull(range3);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(0.0, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getUpperBound(), 0.01);
      assertEquals(0.0, range3.getLength(), 0.01);
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 23;
      numberArray1[1] = (Number) 0;
      numberArray1[2] = (Number) 0;
      numberArray1[3] = (Number) 0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("zJqDorgL", "&\"n/", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertFalse(boolean0);
      assertEquals(1, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow(categoryDataset0, (-1993));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("eu0G", "eu0G", "eu0G");
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("[ZE4%2,Qr!&mjqD", "Null 'seriesKey' argument.", "eu0G");
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("eu0G", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Null 'seriesKey' argument.", timePeriodValues0.getDomainDescription());
      
      MockDate mockDate0 = new MockDate((-1859L));
      assertNotNull(mockDate0);
      
      Second second0 = new Second(mockDate0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(58, second0.getSecond());
      assertEquals((-1859L), second0.getFirstMillisecond());
      assertEquals((-860L), second0.getLastMillisecond());
      
      Millisecond millisecond0 = new Millisecond(0, second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertNotNull(millisecond0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(58, second0.getSecond());
      assertEquals((-1859L), second0.getFirstMillisecond());
      assertEquals((-860L), second0.getLastMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.previous();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertNotNull(millisecond1);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(58, second0.getSecond());
      assertEquals((-1859L), second0.getFirstMillisecond());
      assertEquals((-860L), second0.getLastMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(999L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond1.equals((Object)millisecond0));
      
      timePeriodValues0.add((TimePeriod) millisecond1, (Number) 0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, Millisecond.FIRST_MILLISECOND_IN_SECOND);
      assertEquals(999, Millisecond.LAST_MILLISECOND_IN_SECOND);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("eu0G", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals("Null 'seriesKey' argument.", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(58, second0.getSecond());
      assertEquals((-1859L), second0.getFirstMillisecond());
      assertEquals((-860L), second0.getLastMillisecond());
      assertEquals(0L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond1.getFirstMillisecond());
      assertEquals(999L, millisecond1.getMillisecond());
      assertEquals(1392409281320L, millisecond1.getLastMillisecond());
      assertNotSame(millisecond0, millisecond1);
      assertNotSame(millisecond1, millisecond0);
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertFalse(millisecond1.equals((Object)millisecond0));
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("eu0G", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals("Null 'seriesKey' argument.", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      timePeriodValues0.setDescription("[ZE4%2,Qr!&mjqD");
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals("[ZE4%2,Qr!&mjqD", timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("eu0G", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals("Null 'seriesKey' argument.", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timePeriodValuesCollection0);
      assertFalse(boolean0);
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals("[ZE4%2,Qr!&mjqD", timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals("eu0G", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals("Null 'seriesKey' argument.", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      String string0 = "org.jfree.data.general.DatasetUtilities";
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(",P& ,7lNVi7TD", "#GgMKzt", "Null 'rowData' argument.", "org.jfree.data.general.DatasetUtilities");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray1.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      
      int int0 = (-114);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (-114));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(boolean0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      
      Second second1 = (Second)second0.next();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(22, second1.getSecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertFalse(second1.equals((Object)second0));
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) second1);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(defaultPieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(22, second1.getSecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) stack0, false);
      assertNull(range0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("Duplicate items in 'columnKeys'.", 59, 0);
      assertNotNull(matrixSeries0);
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNull(range1);
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (Comparable) second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(defaultPieDataset1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertNotSame(second0, second1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(second0.equals((Object)second1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNull(range2);
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range3 = timeSeriesCollection0.getDomainBounds(true);
      assertNull(range3);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) stack0, (Range) null, true);
      assertNull(range4);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNull(number0);
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultWindDataset0);
      assertNull(number1);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][3];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("zJqDorgL", "zJqDorgL", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNull(number0);
      assertEquals(1, numberArray0.length);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Date date1 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date1);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertNotSame(date1, date0);
      assertTrue(date1.equals((Object)date0));
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)DateFormat.getDateInstance();
      assertNotNull(simpleDateFormat0);
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertEquals("MMM d, yyyy", simpleDateFormat0.toPattern());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Second second0 = new Second(date1);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertTrue(date1.equals((Object)date0));
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
      assertNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, numberArray0.length);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timePeriodValuesCollection0);
      assertNull(range1);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray1.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(0.0);
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      
      boolean boolean0 = timePeriodValues0.equals(polynomialFunction2D0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals(1, doubleArray1.length);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D(2408.0, 460.0);
      assertNotNull(lineFunction2D0);
      assertEquals(460.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(2408.0, lineFunction2D0.getIntercept(), 0.01);
      
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      
      Minute minute0 = new Minute(622, hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(20, minute0.getHourValue());
      assertEquals(110, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D(Double.POSITIVE_INFINITY, 2499.8324);
      assertNotNull(normalDistributionFunction2D0);
      assertEquals(Double.POSITIVE_INFINITY, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(2499.8324, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(normalDistributionFunction2D0, Double.NEGATIVE_INFINITY, (-3066.0), 23, "$");
      assertNotNull(xYSeriesCollection0);
      assertEquals(Double.POSITIVE_INFINITY, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(2499.8324, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (Comparable) "$");
      assertNotNull(defaultPieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNull(range0);
      assertEquals(Double.POSITIVE_INFINITY, normalDistributionFunction2D0.getMean(), 0.01);
      assertEquals(2499.8324, normalDistributionFunction2D0.getStandardDeviation(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = timeSeriesCollection0.getDomainBounds(true);
      assertNull(range1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) null, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2433.0);
      doubleArray0[1] = 1.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-2433.0), 1.0}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertEquals(2, doubleArray0.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(1.0);
      assertNotNull(timePeriodValues0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultXYZDataset0);
      assertNull(range0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.0;
      doubleArray1[5] = doubleArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("p,ctbCs#8Bl;", "(", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray1.length);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range1);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(2434.0, range1.getLength(), 0.01);
      assertEquals((-1216.0), range1.getCentralValue(), 0.01);
      assertEquals((-2433.0), range1.getLowerBound(), 0.01);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      Minute minute0 = new Minute(23, hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(23, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      
      Minute minute1 = new Minute(23, hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(23, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertTrue(minute1.equals((Object)minute0));
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(minute1, "[da:#6<", "org.jfree.data.general.DatasetUtilities");
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(timePeriodValues0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(23, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals("[da:#6<", timePeriodValues0.getDomainDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("org.jfree.data.general.DatasetUtilities", timePeriodValues0.getRangeDescription());
      assertTrue(minute1.equals((Object)minute0));
      
      timePeriodValues0.add((TimePeriod) minute0, (Number) 0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(23, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(23, minute1.getMinute());
      assertEquals(20, minute1.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals("[da:#6<", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals("org.jfree.data.general.DatasetUtilities", timePeriodValues0.getRangeDescription());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertTrue(minute0.equals((Object)minute1));
      assertTrue(minute1.equals((Object)minute0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertNotNull(spreadsheetDate0);
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      
      Date date0 = spreadsheetDate0.toDate();
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertNotNull(date0);
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 5, 3, 6, 3.601570881E9, 3);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertNotNull(oHLCDataItem0);
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-4482.1592807), 116.9329286, (-1210.812225), (-1964.21), 45.494486390731);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertNotNull(oHLCDataItem1);
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, 4, 3, (-2.147483648E9), 5, 59);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(1, SerialDate.SUNDAY);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertNotNull(oHLCDataItem2);
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset("[da:#6<", oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(3, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2.147483648E9), range0.getLowerBound(), 0.01);
      assertEquals(116.9329286, range0.getUpperBound(), 0.01);
      assertEquals((-1.0737417655335357E9), range0.getCentralValue(), 0.01);
      assertEquals(2.1474837649329286E9, range0.getLength(), 0.01);
      assertEquals(3, oHLCDataItemArray0.length);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(3.601570881E9));
      
      Double double0 = new Double((-261.7449034339));
      assertNotNull(double0);
      assertEquals((-261.7449034339), (double)double0, 0.01);
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains((-261.7449034339)));
      assertFalse(arrayList0.contains(3.601570881E9));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, true);
      assertNull(range1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-2.147483648E9), range0.getLowerBound(), 0.01);
      assertEquals(116.9329286, range0.getUpperBound(), 0.01);
      assertEquals((-1.0737417655335357E9), range0.getCentralValue(), 0.01);
      assertEquals(2.1474837649329286E9, range0.getLength(), 0.01);
      assertTrue(arrayList0.contains((-261.7449034339)));
      assertFalse(arrayList0.contains(3.601570881E9));
      assertEquals(3, oHLCDataItemArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number0);
      assertEquals((-2.147483648E9), number0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(number0.equals((Object)double0));
      assertEquals(3, oHLCDataItemArray0.length);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertNotNull(number1);
      assertEquals(116.9329286, number1);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(number1.equals((Object)number0));
      assertFalse(number1.equals((Object)double0));
      assertEquals(3, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      Second second1 = (Second)second0.next();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(22, second1.getSecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertFalse(second1.equals((Object)second0));
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 59);
      assertNotNull(matrixSeries0);
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(58.0, range0.getUpperBound(), 0.01);
      assertEquals(29.0, range0.getCentralValue(), 0.01);
      assertEquals(58.0, range0.getLength(), 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) "");
      assertNotNull(defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(58.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(29.0, range1.getCentralValue(), 0.01);
      assertEquals(58.0, range1.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range2 = timeSeriesCollection0.getDomainBounds(false);
      assertNull(range2);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range3 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) stack0, range0, true);
      assertNull(range3);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(58.0, range0.getUpperBound(), 0.01);
      assertEquals(29.0, range0.getCentralValue(), 0.01);
      assertEquals(58.0, range0.getLength(), 0.01);
      assertNotSame(range0, range1);
      assertTrue(range0.equals((Object)range1));
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 0;
      numberArray1[1] = (Number) 0;
      numberArray1[2] = (Number) 0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("zJqDorgL", "&\"n/", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, numberArray0.length);
      
      Vector<Long> vector0 = new Vector<Long>(0);
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, numberArray0.length);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset("zJqDorgL");
      assertNotNull(simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(number0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) simpleHistogramDataset0, (List) arrayList0, range0, true);
      assertNull(range1);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertTrue(simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(number0));
      assertEquals(1, numberArray0.length);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1443.1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1443.1)}, doubleArray1, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray1.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((-1443.1));
      assertNotNull(timePeriodValues0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertTrue(timePeriodValues0.getNotify());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      Minute minute0 = new Minute((-3597), hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      
      Minute minute1 = (Minute)minute0.next();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals((-12), minute1.getMinute());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute1.equals((Object)minute0));
      
      timePeriodValues0.add((TimePeriod) minute1, (Number) 23);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertEquals((-12), minute1.getMinute());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
      assertNotNull(range0);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((-1443.1));
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection((TimeSeries) null);
      assertNotNull(timeSeriesCollection1);
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      
      Range range1 = timeSeriesCollection1.getDomainBounds(true);
      assertNull(range1);
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      
      LinkedList<DefaultBoxAndWhiskerCategoryDataset> linkedList0 = new LinkedList<DefaultBoxAndWhiskerCategoryDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) linkedList0, (Range) null, false);
      assertNull(range2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertTrue(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) timePeriodValuesCollection0);
      assertNotNull(double0);
      assertEquals(23.0, (double)double0, 0.01);
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection1);
      assertNull(number0);
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray1.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(1.0);
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
      assertNull(range0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timePeriodValuesCollection0);
      assertNull(number0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      JDBCCategoryDataset jDBCCategoryDataset1 = (JDBCCategoryDataset)jDBCCategoryDataset0.clone();
      assertNotNull(jDBCCategoryDataset1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      
      Second second1 = (Second)second0.next();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertFalse(second1.equals((Object)second0));
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) second1);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(defaultPieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertTrue(jDBCCategoryDataset0.equals((Object)jDBCCategoryDataset1));
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) stack0, false);
      assertNull(range0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      assertTrue(jDBCCategoryDataset0.equals((Object)jDBCCategoryDataset1));
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 59);
      assertNotNull(matrixSeries0);
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(29.0, range1.getCentralValue(), 0.01);
      assertEquals(58.0, range1.getUpperBound(), 0.01);
      assertEquals(58.0, range1.getLength(), 0.01);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) "");
      assertNotNull(defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range2);
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(58.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(29.0, range2.getCentralValue(), 0.01);
      assertEquals(58.0, range2.getUpperBound(), 0.01);
      assertNotSame(range2, range1);
      assertTrue(range2.equals((Object)range1));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range3 = timeSeriesCollection0.getDomainBounds(false);
      assertNull(range3);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range4 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) stack0, range1, true);
      assertNull(range4);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(29.0, range1.getCentralValue(), 0.01);
      assertEquals(58.0, range1.getUpperBound(), 0.01);
      assertEquals(58.0, range1.getLength(), 0.01);
      assertNotSame(range1, range2);
      assertTrue(range1.equals((Object)range2));
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) xYTaskDataset0);
      assertNull(number0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Double double0 = new Double((-1439.425835));
      assertNotNull(double0);
      assertEquals((-1439.425835), (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(double0));
      
      Double double1 = new Double((-1439.425835));
      assertNotNull(double1);
      assertEquals((-1439.425835), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double1);
      assertTrue(boolean0);
      assertEquals("[-1439.425835]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains((-1439.425835)));
      assertEquals((double)double1, (double)double0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("[-1439.425835]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains((-1439.425835)));
      
      Number[][] numberArray0 = new Number[4][7];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) double0;
      numberArray1[1] = (Number) double0;
      numberArray1[2] = (Number) double0;
      numberArray1[3] = (Number) double1;
      numberArray1[4] = (Number) double0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[6];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) double0;
      numberArray2[1] = (Number) double0;
      numberArray2[2] = (Number) double1;
      numberArray2[3] = (Number) double0;
      numberArray2[4] = (Number) double0;
      numberArray2[5] = (Number) double1;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[16];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) double0;
      numberArray3[1] = (Number) double0;
      numberArray3[2] = (Number) double1;
      numberArray3[3] = (Number) double1;
      numberArray3[4] = (Number) double0;
      numberArray3[5] = (Number) double0;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[2];
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray2));
      
      numberArray4[0] = (Number) double0;
      numberArray4[1] = (Number) double1;
      numberArray0[3] = numberArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, numberArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals("[-1439.425835]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains((-1439.425835)));
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
         verifyException("org.jfree.data.xy.DefaultXYZDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      Double double0 = new Double((-2405.2536276967207));
      assertNotNull(double0);
      assertEquals((-2405.2536276967207), (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals("[-2405.2536276967207]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(double0));
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, false);
      assertNull(range0);
      assertEquals("[-2405.2536276967207]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertTrue(stack0.contains(double0));
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      double double0 = timePeriodValuesCollection0.getDomainLowerBound(true);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      boolean boolean0 = arrayList0.add(defaultIntervalXYDataset0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertTrue(arrayList0.contains(defaultIntervalXYDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, arrayList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.DefaultIntervalXYDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      Minute minute0 = new Minute(1, hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (Comparable) minute0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(pieDataset0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) minute0, (double) 0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(pieDataset1);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset1);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertTrue(boolean0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, false);
      assertNull(range0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 23;
      numberArray1[1] = (Number) 0;
      numberArray1[2] = (Number) 0;
      numberArray1[3] = (Number) 0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("zJqDorgL", "&\"n/", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(23.0, number0);
      assertEquals(1, numberArray0.length);
      
      Vector<Long> vector0 = new Vector<Long>(0);
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) vector0, false);
      assertNull(range0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(1, numberArray0.length);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      
      Date date0 = mockSimpleDateFormat0.parse("zJqDorgL", parsePosition0);
      assertNull(date0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals(0, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      Date date1 = Date.from(instant0);
      assertNotNull(date1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      
      Date date2 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date2.toString());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertNotSame(date2, date1);
      assertTrue(date2.equals((Object)date1));
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      assertNull(range1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(timeTableXYDataset0);
      assertNotNull(number1);
      assertEquals(Double.NaN, number1);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(number1.equals((Object)number0));
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, false);
      assertNull(range2);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      Second second1 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(21, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertTrue(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      Date date0 = second1.getStart();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(date0);
      assertEquals(21, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotSame(second1, second0);
      assertTrue(second1.equals((Object)second0));
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 59);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      
      String string0 = second1.toString();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(string0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", string0);
      assertEquals(21, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertNotSame(second1, second0);
      assertTrue(second1.equals((Object)second0));
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0, false);
      assertNotNull(range0);
      assertNull(matrixSeries0.getDescription());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(29.0, range0.getCentralValue(), 0.01);
      assertEquals(58.0, range0.getUpperBound(), 0.01);
      assertEquals(58.0, range0.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(5, polynomialFunction2D0.getOrder());
      assertEquals(6, doubleArray0.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = timeSeriesCollection0.getDomainBounds(true);
      assertNull(range1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range2 = categoryTableXYDataset0.getDomainBounds(true);
      assertNull(range2);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) null, (Range) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(1.0));
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[1.0]", stack0.toString());
      assertTrue(stack0.contains(1.0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$";
      stringArray0[1] = "$";
      Number[][] numberArray0 = new Number[2][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 4, 3462);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(4, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3462, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNull(number0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNull(range0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) linkedList0, true);
      assertNull(range1);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, linkedList0.size());
      
      Range range2 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNull(range2);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range3 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNull(range3);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Number number1 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNull(number1);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(boolean0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      JDBCCategoryDataset jDBCCategoryDataset1 = (JDBCCategoryDataset)jDBCCategoryDataset0.clone();
      assertNotNull(jDBCCategoryDataset1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      
      Second second1 = (Second)second0.next();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(22, second1.getSecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertFalse(second1.equals((Object)second0));
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) second1);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(defaultPieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(22, second1.getSecond());
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertTrue(jDBCCategoryDataset0.equals((Object)jDBCCategoryDataset1));
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset2 = new JDBCCategoryDataset(connection1);
      assertNotNull(jDBCCategoryDataset2);
      assertTrue(jDBCCategoryDataset2.getTranspose());
      assertTrue(jDBCCategoryDataset2.equals((Object)jDBCCategoryDataset0));
      assertTrue(jDBCCategoryDataset2.equals((Object)jDBCCategoryDataset1));
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(1503.2053639, 59);
      assertNotNull(lineFunction2D0);
      assertEquals(1503.2053639, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(59.0, lineFunction2D0.getSlope(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-1826.0), 0, 52, second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1503.2053639, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(59.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertNotSame(second0, second1);
      assertFalse(second0.equals((Object)second1));
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset2, (Comparable) second0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(defaultPieDataset1);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertTrue(jDBCCategoryDataset2.getTranspose());
      assertNotSame(second0, second1);
      assertNotSame(jDBCCategoryDataset2, jDBCCategoryDataset1);
      assertNotSame(jDBCCategoryDataset2, jDBCCategoryDataset0);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertFalse(second0.equals((Object)second1));
      assertTrue(jDBCCategoryDataset2.equals((Object)jDBCCategoryDataset0));
      assertTrue(jDBCCategoryDataset2.equals((Object)jDBCCategoryDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(range0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1503.2053639, lineFunction2D0.getIntercept(), 0.01);
      assertEquals(59.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1827.0, range0.getLength(), 0.01);
      assertEquals(0.5, range0.getUpperBound(), 0.01);
      assertEquals((-1826.5), range0.getLowerBound(), 0.01);
      assertEquals((-913.0), range0.getCentralValue(), 0.01);
      assertNotSame(second0, second1);
      assertFalse(second0.equals((Object)second1));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean1 = true;
      Range range1 = timeSeriesCollection0.getDomainBounds(true);
      assertNull(range1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) null, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      Second second1 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(21, second1.getSecond());
      assertTrue(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 59);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3601570881L;
      doubleArray0[1] = (double) 59;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {3.601570881E9, 59.0}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction2D0.getOrder());
      assertEquals(2, doubleArray0.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(59.0);
      assertNotNull(timePeriodValues0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(matrixSeriesCollection0);
      assertNotNull(range0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(58.0, range0.getLength(), 0.01);
      assertEquals(29.0, range0.getCentralValue(), 0.01);
      assertEquals(58.0, range0.getUpperBound(), 0.01);
      
      double[][] doubleArray1 = new double[6][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray1);
      assertNotNull(categoryDataset0);
      assertEquals(6, doubleArray1.length);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range1);
      assertEquals(59.0, range1.getLowerBound(), 0.01);
      assertEquals(1.80078547E9, range1.getCentralValue(), 0.01);
      assertEquals(3.601570881E9, range1.getUpperBound(), 0.01);
      assertEquals(3.601570822E9, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray1.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindDomainBounds(defaultTableXYDataset0, (List) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(1.0));
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[1.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(1.0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$";
      stringArray0[1] = "$";
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) double0;
      numberArray1[1] = (Number) double0;
      numberArray1[2] = (Number) double0;
      numberArray1[3] = (Number) double0;
      numberArray1[4] = (Number) double0;
      numberArray1[5] = (Number) double0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) double0;
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timeTableXYDataset0, stack0, true);
      assertNull(range0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[1.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(1.0));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 3213.4508823);
      assertNotNull(range1);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(3213.4508823, range1.getCentralValue(), 0.01);
      assertEquals(3213.4508823, range1.getUpperBound(), 0.01);
      assertEquals(3213.4508823, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Stack<DefaultBoxAndWhiskerXYDataset> stack0 = new Stack<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) stack0, true);
      assertNull(range0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(defaultXYZDataset0, stack0, true);
      assertNull(range1);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Consumer<DefaultBoxAndWhiskerXYDataset> consumer0 = (Consumer<DefaultBoxAndWhiskerXYDataset>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, 0.0);
      assertNotNull(range2);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(0.0, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getCentralValue(), 0.01);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultXYZDataset0, (List) stack0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 23;
      numberArray1[1] = (Number) 0;
      numberArray1[2] = (Number) 0;
      numberArray1[3] = (Number) 0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("zJqDorgL", "&\"n/", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(23.0, number0);
      assertEquals(1, numberArray0.length);
      
      Vector<Long> vector0 = new Vector<Long>(0);
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) vector0, false);
      assertNull(range0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(1, numberArray0.length);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(0, parsePosition0.getIndex());
      
      Date date0 = mockSimpleDateFormat0.parse("zJqDorgL", parsePosition0);
      assertNull(date0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals(0, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      Date date1 = Date.from(instant0);
      assertNotNull(date1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      
      Date date2 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date2.toString());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertNotSame(date2, date1);
      assertTrue(date2.equals((Object)date1));
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Second second0 = new Second(date2);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date2.toString());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(date2.equals((Object)date1));
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(second0, (OHLCDataItem[]) null);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date2.toString());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(date2.equals((Object)date1));
      
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getXDate(59, 3473);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(boolean0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      
      Second second1 = (Second)second0.next();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertFalse(second1.equals((Object)second0));
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) second1);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(defaultPieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) stack0, false);
      assertNull(range0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      String string0 = "";
      Number[][] numberArray0 = new Number[2][2];
      Number[] numberArray1 = new Number[2];
      numberArray1[0] = (Number) 59;
      numberArray1[1] = (Number) 0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray0[1] = numberArray2;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "zJqDorgL", numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(2, numberArray0.length);
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue(defaultCategoryDataset0);
      assertNotNull(double0);
      assertEquals(59.0, (double)double0, 0.01);
      assertEquals(2, numberArray0.length);
      
      Vector<Long> vector0 = new Vector<Long>(0);
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(long0));
      
      boolean boolean1 = false;
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) vector0, false);
      assertNull(range1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(long0));
      
      Date[] dateArray0 = new Date[6];
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      dateArray0[0] = date0;
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      
      Date date1 = mockSimpleDateFormat0.parse("zJqDorgL", parsePosition0);
      assertNull(date1);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals(0, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      
      dateArray0[1] = null;
      Instant instant0 = MockInstant.now();
      assertNotNull(instant0);
      
      Date date2 = Date.from(instant0);
      assertNotNull(date2);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date2.toString());
      assertNotSame(date2, date0);
      assertTrue(date2.equals((Object)date0));
      
      dateArray0[2] = date2;
      Date date3 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date3);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date3.toString());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertNotSame(date3, date2);
      assertNotSame(date3, date0);
      assertTrue(date3.equals((Object)date2));
      assertTrue(date3.equals((Object)date0));
      
      dateArray0[3] = date3;
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      dateArray0[4] = (Date) mockDate0;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(date3, (OHLCDataItem[]) null);
      assertNotNull(defaultOHLCDataset0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date3.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(date3.equals((Object)date2));
      assertTrue(date3.equals((Object)date0));
      
      int int0 = (-1);
      int int1 = 2;
      // Undeclared exception!
      try { 
        defaultOHLCDataset0.getXDate((-1), 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.DefaultOHLCDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][6];
      Number[] numberArray1 = new Number[1];
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      numberArray1[0] = (Number) integer0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[8];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[2] = (Number) integer0;
      numberArray2[1] = (Number) integer0;
      numberArray2[2] = (Number) integer0;
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      numberArray2[3] = (Number) long0;
      numberArray2[4] = (Number) integer0;
      numberArray2[5] = (Number) integer0;
      Double double0 = new Double(3948.5);
      assertNotNull(double0);
      assertEquals(3948.5, (double)double0, 0.01);
      
      numberArray2[6] = (Number) double0;
      numberArray2[7] = (Number) integer0;
      numberArray0[1] = numberArray2;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, numberArray0.length);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(3948.5, number0);
      assertTrue(number0.equals((Object)double0));
      assertEquals(2, numberArray0.length);
      
      Vector<Long> vector0 = new Vector<Long>(211);
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(211, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(long0));
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, (List) vector0, false);
      assertNull(range0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(211, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(long0));
      assertEquals(2, numberArray0.length);
      
      Range range1 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
      assertNotNull(range1);
      assertEquals(3947.5, range1.getLength(), 0.01);
      assertEquals(1974.75, range1.getCentralValue(), 0.01);
      assertEquals(3948.5, range1.getUpperBound(), 0.01);
      assertEquals(1.0, range1.getLowerBound(), 0.01);
      assertEquals(2, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 212);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 212, Size: 8
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray1.length);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range0);
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = timeSeriesCollection0.getDomainBounds(true);
      assertNull(range1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) null, (Range) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.TimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1432.67), 2408.0);
      assertNotNull(lineFunction2D0);
      assertEquals((-1432.67), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(2408.0, lineFunction2D0.getSlope(), 0.01);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      
      Minute minute0 = new Minute(622, hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(110, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 0, 1503.2053639, 2, "");
      assertNotNull(xYSeriesCollection0);
      assertEquals((-1432.67), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(2408.0, lineFunction2D0.getSlope(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (Comparable) minute0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(defaultPieDataset0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(110, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(lineFunction2D0, (-104.011), 0, 231, "");
      assertNotNull(xYSeries0);
      assertEquals((-1432.67), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(2408.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-251891.158), xYSeries0.getMinY(), 0.01);
      assertTrue(xYSeries0.getNotify());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-104.011), xYSeries0.getMinX(), 0.01);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01);
      assertNull(xYSeries0.getDescription());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(231, xYSeries0.getItemCount());
      assertEquals((-1432.67), xYSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      
      Second second1 = (Second)second0.next();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertFalse(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 59);
      assertNotNull(matrixSeries0);
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(29.0, range0.getCentralValue(), 0.01);
      assertEquals(58.0, range0.getUpperBound(), 0.01);
      assertEquals(58.0, range0.getLength(), 0.01);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultKeyedValues2DDataset0, (Comparable) "");
      assertNotNull(defaultPieDataset0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(29.0, range1.getCentralValue(), 0.01);
      assertEquals(58.0, range1.getUpperBound(), 0.01);
      assertEquals(58.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range2 = timeSeriesCollection0.getDomainBounds(false);
      assertNull(range2);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range3 = Range.scale(range0, 0.5);
      assertNotNull(range3);
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(29.0, range0.getCentralValue(), 0.01);
      assertEquals(58.0, range0.getUpperBound(), 0.01);
      assertEquals(58.0, range0.getLength(), 0.01);
      assertEquals(29.0, range3.getLength(), 0.01);
      assertEquals(29.0, range3.getUpperBound(), 0.01);
      assertEquals(14.5, range3.getCentralValue(), 0.01);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range0, range3);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertTrue(range0.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      
      Range range4 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range4);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(boolean0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      
      JDBCCategoryDataset jDBCCategoryDataset1 = (JDBCCategoryDataset)jDBCCategoryDataset0.clone();
      assertNotNull(jDBCCategoryDataset1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      
      Second second1 = (Second)second0.next();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertFalse(second1.equals((Object)second0));
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) second1);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(defaultPieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertTrue(jDBCCategoryDataset0.equals((Object)jDBCCategoryDataset1));
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) stack0, false);
      assertNull(range0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      assertTrue(jDBCCategoryDataset0.equals((Object)jDBCCategoryDataset1));
      
      MatrixSeries matrixSeries0 = new MatrixSeries("\"", 59, 59);
      assertNotNull(matrixSeries0);
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(29.0, range1.getCentralValue(), 0.01);
      assertEquals(58.0, range1.getUpperBound(), 0.01);
      assertEquals(58.0, range1.getLength(), 0.01);
      
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      boolean boolean1 = stack0.add(double0);
      assertTrue(boolean1);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[1.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(1.0));
      assertTrue(boolean1 == boolean0);
      
      Range range2 = Range.combine((Range) null, range1);
      assertNotNull(range2);
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(29.0, range1.getCentralValue(), 0.01);
      assertEquals(58.0, range1.getUpperBound(), 0.01);
      assertEquals(58.0, range1.getLength(), 0.01);
      assertEquals(0.0, range2.getLowerBound(), 0.01);
      assertEquals(29.0, range2.getCentralValue(), 0.01);
      assertEquals(58.0, range2.getUpperBound(), 0.01);
      assertEquals(58.0, range2.getLength(), 0.01);
      assertSame(range1, range2);
      assertSame(range2, range1);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range3);
      assertEquals(0.0, range3.getLowerBound(), 0.01);
      assertEquals(58.0, range3.getUpperBound(), 0.01);
      assertEquals(29.0, range3.getCentralValue(), 0.01);
      assertEquals(58.0, range3.getLength(), 0.01);
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotSame(range3, range1);
      assertNotSame(range3, range2);
      assertTrue(range3.equals((Object)range1));
      assertTrue(range3.equals((Object)range2));
      
      Range range4 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range4);
      assertEquals(58.0, range4.getLength(), 0.01);
      assertEquals(0.0, range4.getLowerBound(), 0.01);
      assertEquals(29.0, range4.getCentralValue(), 0.01);
      assertEquals(58.0, range4.getUpperBound(), 0.01);
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertTrue(range4.equals((Object)range2));
      assertTrue(range4.equals((Object)range1));
      assertTrue(range4.equals((Object)range3));
      
      // Undeclared exception!
      DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Double double0 = new Double((-510.0));
      assertNotNull(double0);
      assertEquals((-510.0), (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(double0));
      
      Double double1 = new Double((-510.0));
      assertNotNull(double1);
      assertEquals((-510.0), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double1);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[-510.0]", stack0.toString());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains((-510.0)));
      assertEquals((double)double1, (double)double0, 0.01);
      
      Number[][] numberArray0 = new Number[1][2];
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      
      timeTableXYDataset0.add((TimePeriod) month0, 2903.6064352115, "");
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1392409281320L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1392409281320L, month0.getLastMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, numberArray0.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[-510.0]", stack0.toString());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains((-510.0)));
      assertFalse(stack0.contains(2903.6064352115));
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultIntervalCategoryDataset0);
      assertNull(number0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, numberArray0.length);
      
      Range range2 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      assertNotNull(range2);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(1.39240928132E12, range2.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range2.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range2.getUpperBound(), 0.01);
      assertEquals(0.0, range2.getLength(), 0.01);
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(number1);
      assertEquals(Double.NaN, number1);
      assertFalse(number1.equals((Object)double1));
      assertFalse(number1.equals((Object)double0));
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(true);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0);
      assertNull(range0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertTrue(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = timeSeriesCollection0.getDomainBounds(true);
      assertNull(range1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, (List) null, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1432.67), 2408.0);
      assertNotNull(lineFunction2D0);
      assertEquals(2408.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1432.67), lineFunction2D0.getIntercept(), 0.01);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      Minute minute0 = new Minute(622, hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(110, minute0.getMinute());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 0, 1503.2053639, 2, "");
      assertNotNull(xYSeriesCollection0);
      assertEquals(2408.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1432.67), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (Comparable) minute0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(defaultPieDataset0);
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(110, minute0.getMinute());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNotNull(range0);
      assertEquals(2408.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1432.67), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(1504.2053639, range0.getLength(), 0.01);
      assertEquals((-0.5), range0.getLowerBound(), 0.01);
      assertEquals(751.60268195, range0.getCentralValue(), 0.01);
      assertEquals(1503.7053639, range0.getUpperBound(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = timeSeriesCollection0.getDomainBounds(true);
      assertNull(range1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) null, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertNull(number0);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(timeSeriesCollection0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      defaultCategoryDataset0.removeChangeListener(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertFalse(xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, arrayList0, true);
      assertNull(range1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(timeSeriesCollection0));
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      
      Range range2 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, (-1.7976931348623157E308));
      assertNotNull(range2);
      assertFalse(defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertFalse(defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.0, range2.getLength(), 0.01);
      assertEquals((-1.7976931348623157E308), range2.getCentralValue(), 0.01);
      assertEquals((-1.7976931348623157E308), range2.getUpperBound(), 0.01);
      assertEquals((-1.7976931348623157E308), range2.getLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("eu0G", "cu9++v;k7].U:(O9-5", "eu0G");
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("cu9++v;k7].U:(O9-5", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("cu9++v;k7].U:(O9-5", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("cu9++v;k7].U:(O9-5", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("cu9++v;k7].U:(O9-5", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues("[ZE4%2,Qr!&mjqD", "", "]SE-vG0WDv");
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("]SE-vG0WDv", timePeriodValues0.getRangeDescription());
      assertEquals("", timePeriodValues0.getDomainDescription());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("]SE-vG0WDv", timePeriodValues0.getRangeDescription());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      timePeriodValues0.setDescription("eu0G");
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("eu0G", timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("]SE-vG0WDv", timePeriodValues0.getRangeDescription());
      assertEquals("", timePeriodValues0.getDomainDescription());
      
      Vector<CategoryTableXYDataset> vector0 = new Vector<CategoryTableXYDataset>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Range range1 = DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, vector0, false);
      assertNull(range1);
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("eu0G", timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("]SE-vG0WDv", timePeriodValues0.getRangeDescription());
      assertEquals("", timePeriodValues0.getDomainDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) timeSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("eu0G", timeSeries0.getRangeDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals("cu9++v;k7].U:(O9-5", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      XYDataset xYDataset0 = null;
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Hour hour0 = Hour.parseHour("org.jfree.data.general.DatasetUtilities");
      assertNull(hour0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      TimeSeries timeSeries0 = new TimeSeries("$", "DefaultIntervalCategoryDataset.setValue: unrecognised category.", "");
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals("DefaultIntervalCategoryDataset.setValue: unrecognised category.", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, timeZone0);
      assertNotNull(timeSeriesCollection0);
      assertEquals("GMT", timeZone0.getID());
      assertNull(timeSeries0.getDescription());
      assertEquals("DefaultIntervalCategoryDataset.setValue: unrecognised category.", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = arrayList0.add(timeSeriesCollection0);
      assertTrue(boolean0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("DefaultIntervalCategoryDataset.setValue: unrecognised category.", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.contains(timeSeriesCollection0));
      
      boolean boolean1 = true;
      CategoryDataset categoryDataset0 = null;
      Vector<DefaultIntervalXYDataset> vector0 = new Vector<DefaultIntervalXYDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) null, (List) vector0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      PieDataset pieDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.calculatePieDatasetTotal((PieDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 4, 3462);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(4, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3462, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(4, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3462, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Hour hour0 = Hour.parseHour("~#>La:al");
      assertNull(hour0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0, true);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, 244);
      assertNotNull(pieDataset0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[][] doubleArray2 = new double[3][9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = doubleArray1;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 1.0;
      doubleArray2[1] = doubleArray3;
      doubleArray2[2] = doubleArray1;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray2, doubleArray2);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(3, doubleArray2.length);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = (DefaultIntervalCategoryDataset)defaultIntervalCategoryDataset0.clone();
      assertNotNull(defaultIntervalCategoryDataset1);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset1.getColumnCount());
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertNotSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(defaultIntervalCategoryDataset1.equals((Object)defaultIntervalCategoryDataset0));
      assertEquals(3, doubleArray2.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-1337), 605);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals((-1337), slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(605, slidingCategoryDataset0.getMaximumCategoryCount());
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(defaultIntervalCategoryDataset0.equals((Object)defaultIntervalCategoryDataset1));
      assertEquals(3, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      Second second1 = (Second)second0.next();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertFalse(second1.equals((Object)second0));
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(timeSeriesCollection0));
      
      boolean boolean0 = arrayList0.add(timeSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(timeSeriesCollection0));
      
      boolean boolean1 = true;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 3639, 3639);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(3639, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(3639, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) arrayList0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.TimeSeriesCollection cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(1.0));
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals("[1.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(1.0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$";
      stringArray0[1] = "$";
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) double0;
      numberArray1[1] = (Number) double0;
      numberArray1[2] = (Number) double0;
      numberArray1[3] = (Number) double0;
      numberArray1[4] = (Number) double0;
      numberArray1[5] = (Number) double0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) double0;
      numberArray2[1] = (Number) double0;
      numberArray2[2] = (Number) double0;
      numberArray2[3] = (Number) double0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, stringArray0.length);
      assertEquals(2, numberArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = polynomialFunction2D0.getCoefficients();
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(polynomialFunction2D0, (-2953.338489122), 2307, 2307, 1.0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 76.96676;
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotNull(year0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      
      Date date0 = year0.getEnd();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotNull(date0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1432.67), 2408.0);
      assertNotNull(lineFunction2D0);
      assertEquals(2408.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1432.67), lineFunction2D0.getIntercept(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-104.011), 76.96676, 637, 76.96676);
      assertNotNull(xYSeriesCollection0);
      assertEquals(2408.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1432.67), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertFalse(xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      
      Minute minute0 = new Minute(622, hour0);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(110, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (Comparable) "Cm9:W");
      assertNotNull(defaultPieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) minute0, 812.2147096);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertNotNull(defaultPieDataset1);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(110, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertTrue(boolean0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(110, minute0.getMinute());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      
      XYSeriesCollection xYSeriesCollection1 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, 0, 1503.2053639, 2, "");
      assertNotNull(xYSeriesCollection1);
      assertEquals(2408.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals((-1432.67), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(1.0, xYSeriesCollection1.getIntervalWidth(), 0.01);
      assertEquals(1, xYSeriesCollection1.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection1.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection1.isAutoWidth());
      assertNotSame(xYSeriesCollection1, xYSeriesCollection0);
      assertFalse(xYSeriesCollection1.equals((Object)xYSeriesCollection0));
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2D(lineFunction2D0, (-9999), Double.POSITIVE_INFINITY, 685, "");
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      assertNotNull(date0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "_FKL!0r");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=_FKL!0r,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("_FKL!0r", simpleTimeZone0.getID());
      
      Second second1 = new Second(date0, simpleTimeZone0);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=_FKL!0r,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("_FKL!0r", simpleTimeZone0.getID());
      assertEquals(21, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertTrue(second1.equals((Object)second0));
      
      long long0 = second1.getSerialIndex();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=_FKL!0r,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("_FKL!0r", simpleTimeZone0.getID());
      assertEquals(21, second1.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertNotSame(second1, second0);
      assertTrue(second1.equals((Object)second0));
      
      Second second2 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second2);
      assertEquals(1392409281320L, second2.getFirstMillisecond());
      assertEquals(1392409282319L, second2.getLastMillisecond());
      assertEquals(21, second2.getSecond());
      assertTrue(second2.equals((Object)second0));
      assertTrue(second2.equals((Object)second1));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("5v;'", 23, 37);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(23, matrixSeries0.getRowCount());
      assertEquals(851, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(37, matrixSeries0.getColumnsCount());
      
      matrixSeries0.fireSeriesChanged();
      assertTrue(matrixSeries0.getNotify());
      assertEquals(23, matrixSeries0.getRowCount());
      assertEquals(851, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(37, matrixSeries0.getColumnsCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(23, matrixSeries0.getRowCount());
      assertEquals(851, matrixSeries0.getItemCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(37, matrixSeries0.getColumnsCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 496.646762651;
      doubleArray1[1] = (double) 59;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 59;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 59;
      doubleArray1[7] = (double) 23;
      doubleArray1[8] = (double) 0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("{.Mh?ePHr&,A[lOQB", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(496.646762651, range0.getLength(), 0.01);
      assertEquals(248.3233813255, range0.getCentralValue(), 0.01);
      assertEquals(496.646762651, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) double0);
      assertNotNull(pieDataset0);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) double0, (-2004.2), (-6410));
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultStatisticalCategoryDataset0);
      assertNull(number0);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertNotNull(xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      assertNull(range0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = false;
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertNull(range1);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) xYIntervalSeriesCollection0, (List) vector0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      IntervalXYDelegate intervalXYDelegate0 = new IntervalXYDelegate(vectorSeriesCollection0);
      assertNotNull(intervalXYDelegate0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      
      vectorSeriesCollection0.addChangeListener(intervalXYDelegate0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(1.0, intervalXYDelegate0.getFixedIntervalWidth(), 0.01);
      assertEquals(1.0, intervalXYDelegate0.getIntervalWidth(), 0.01);
      assertEquals(0.5, intervalXYDelegate0.getIntervalPositionFactor(), 0.01);
      assertTrue(intervalXYDelegate0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0);
      assertNull(range0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      
      Second second1 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(21, second1.getSecond());
      assertTrue(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 59);
      assertNotNull(matrixSeries0);
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range0);
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(29.0, range0.getCentralValue(), 0.01);
      assertEquals(58.0, range0.getUpperBound(), 0.01);
      assertEquals(58.0, range0.getLength(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, (-4006), 59);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(59, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-4006), slidingCategoryDataset0.getFirstCategoryIndex());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingCategoryDataset0, 1082);
      assertNotNull(pieDataset0);
      assertEquals(59, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-4006), slidingCategoryDataset0.getFirstCategoryIndex());
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "", (double) 1082, 59);
      assertNotNull(pieDataset1);
      assertEquals(59, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-4006), slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertTrue(pieDataset1.equals((Object)pieDataset0));
      
      Number number1 = DatasetUtilities.findMinimumStackedRangeValue(slidingCategoryDataset0);
      assertNull(number1);
      assertEquals(59, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals((-4006), slidingCategoryDataset0.getFirstCategoryIndex());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(58.0, range1.getLength(), 0.01);
      assertEquals(29.0, range1.getCentralValue(), 0.01);
      assertEquals(58.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      Range range2 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, false);
      assertNull(range2);
      
      String string0 = "vc-$^\\uLw;$]TP";
      JDBCXYDataset jDBCXYDataset0 = null;
      try {
        jDBCXYDataset0 = new JDBCXYDataset("The 'data' is null.", string0, string0, "Null 'dataset' argument.");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Hour hour0 = new Hour();
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(20, hour0.getHour());
      
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[4];
      numberArray1[0] = (Number) 23;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "h3tG)Ep^$Gi", numberArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, numberArray0.length);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 23, 23);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(23, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(23, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, numberArray0.length);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1158, 23);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(22, dynamicTimeSeriesCollection0.getNewestIndex());
      
      boolean boolean0 = defaultStatisticalCategoryDataset0.hasListener(dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertFalse(boolean0);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(22, dynamicTimeSeriesCollection0.getNewestIndex());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      assertNotNull(pieDataset0);
      assertEquals(1, numberArray0.length);
      
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "", 22.0, 23);
      assertNotNull(pieDataset1);
      assertNotSame(pieDataset0, pieDataset1);
      assertNotSame(pieDataset1, pieDataset0);
      assertFalse(pieDataset1.equals((Object)pieDataset0));
      assertEquals(1, numberArray0.length);
      
      Double double0 = new Double(1);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertEquals(1, DynamicTimeSeriesCollection.MIDDLE);
      assertEquals(2, DynamicTimeSeriesCollection.END);
      assertEquals(0, DynamicTimeSeriesCollection.START);
      assertNotNull(range0);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(22, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(Double.NaN, range0.getLength(), 0.01);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01);
      
      boolean boolean1 = false;
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0, false);
      assertNull(range1);
      assertEquals(23, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(23, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, numberArray0.length);
      
      Vector<XIntervalSeriesCollection> vector0 = new Vector<XIntervalSeriesCollection>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) dynamicTimeSeriesCollection0, (List) vector0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 76.96676;
      doubleArray1[1] = (-510.0);
      doubleArray1[2] = 2158.0;
      double double0 = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 142.61612979198;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(boolean0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      JDBCCategoryDataset jDBCCategoryDataset1 = (JDBCCategoryDataset)jDBCCategoryDataset0.clone();
      assertNotNull(jDBCCategoryDataset1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      
      Second second1 = (Second)second0.next();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertFalse(second1.equals((Object)second0));
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) second1);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(defaultPieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertTrue(jDBCCategoryDataset0.equals((Object)jDBCCategoryDataset1));
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) stack0, false);
      assertNull(range0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      assertTrue(jDBCCategoryDataset0.equals((Object)jDBCCategoryDataset1));
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 59);
      assertNotNull(matrixSeries0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      jDBCCategoryDataset1.validateObject();
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.equals((Object)jDBCCategoryDataset1));
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      
      TimeSeries timeSeries0 = new TimeSeries(second1, "h0J1Vg$k\":BwN13_|", "");
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(timeSeries0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("h0J1Vg$k\":BwN13_|", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(timeSeriesCollection0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("h0J1Vg$k\":BwN13_|", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(29.0, range1.getCentralValue(), 0.01);
      assertEquals(58.0, range1.getUpperBound(), 0.01);
      assertEquals(58.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("h0J1Vg$k\":BwN13_|", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(0, timeSeries0.getItemCount());
      assertTrue(timeSeries0.getNotify());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(second0, "cu9++v;k7].U:(O9-5", "cu9++v;k7].U:(O9-5");
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("cu9++v;k7].U:(O9-5", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("cu9++v;k7].U:(O9-5", timePeriodValues0.getRangeDescription());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertFalse(second0.equals((Object)second1));
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("cu9++v;k7].U:(O9-5", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals("cu9++v;k7].U:(O9-5", timePeriodValues0.getRangeDescription());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertFalse(second0.equals((Object)second1));
      
      Vector<CategoryTableXYDataset> vector0 = new Vector<CategoryTableXYDataset>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(matrixSeriesCollection0, stack0, true);
      assertNull(range2);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNull(matrixSeries0.getDescription());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(3481, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertFalse(stack0.contains(double0));
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertNull(number0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(timeSeriesCollection0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(0, doubleArray0.length);
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) arrayList0, true);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(timeSeriesCollection0));
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) arrayList0, false);
      assertNull(range1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(timeSeriesCollection0));
      
      // Undeclared exception!
      try { 
        Range.scale((Range) null, 1.5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 76.96676;
      Year year0 = new Year();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotNull(year0);
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      
      Date date0 = year0.getEnd();
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertNotNull(date0);
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D((-1432.67), 2408.0);
      assertNotNull(lineFunction2D0);
      assertEquals((-1432.67), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(2408.0, lineFunction2D0.getSlope(), 0.01);
      
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D(lineFunction2D0, (-104.011), 76.96676, 637, 76.96676);
      assertNotNull(xYSeriesCollection0);
      assertEquals((-1432.67), lineFunction2D0.getIntercept(), 0.01);
      assertEquals(2408.0, lineFunction2D0.getSlope(), 0.01);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01);
      assertFalse(xYSeriesCollection0.isAutoWidth());
      
      String string0 = "Cm9:\\W";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "Cm9:W";
      stringArray0[2] = "org.jfree.data.DomainOrder";
      stringArray0[3] = "org.jfree.data.DomainOrder";
      stringArray0[4] = "Cm9:W";
      stringArray0[5] = "org.jfree.data.DomainOrder";
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, (Number[][]) null, (Number[][]) null);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, stringArray0.length);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(2861L);
      assertNotNull(fixedMillisecond0);
      assertEquals(2861L, fixedMillisecond0.getSerialIndex());
      assertEquals(2861L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(2861L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(2861L, fixedMillisecond0.getLastMillisecond());
      
      // Undeclared exception!
      try { 
        defaultIntervalCategoryDataset0.getStartValue((Comparable) fixedMillisecond0, (Comparable) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Quarter quarter0 = new Quarter(mockDate0);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertNotNull(quarter0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      
      Number[][] numberArray0 = new Number[4][8];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) 4;
      numberArray1[2] = (Number) 1;
      numberArray1[3] = (Number) 1;
      numberArray1[4] = (Number) 4;
      numberArray1[5] = (Number) 4;
      numberArray1[6] = (Number) 4;
      numberArray0[0] = numberArray1;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 53);
      assertEquals(0.0, double0, 0.01);
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0, false);
      assertNull(range0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, 244);
      assertNotNull(pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray1.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(1.0);
      assertNotNull(timePeriodValues0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
      assertNull(range0);
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findRangeBounds(categoryDataset0, false);
      assertNotNull(range1);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(1.0, range1.getUpperBound(), 0.01);
      assertEquals(0.5, range1.getCentralValue(), 0.01);
      assertEquals(1.0, range1.getLength(), 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 76.96676;
      doubleArray1[1] = (-510.0);
      doubleArray1[2] = 2158.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 142.61612979198;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      defaultCategoryDataset0.validateObject();
      assertEquals(1, doubleArray0.length);
      
      TimeSeries timeSeries0 = new TimeSeries(2158.0, "eu0G", "cu9++v;k7].U:(O9-5");
      assertNotNull(timeSeries0);
      assertEquals("cu9++v;k7].U:(O9-5", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      assertNotNull(timeSeriesCollection0);
      assertEquals("cu9++v;k7].U:(O9-5", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      
      timeSeriesCollection0.removeAllSeries();
      assertEquals("cu9++v;k7].U:(O9-5", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      assertNull(range0);
      assertEquals("cu9++v;k7].U:(O9-5", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("eu0G", timeSeries0.getDomainDescription());
      assertTrue(timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNotNull(range1);
      assertEquals((-510.0), range1.getLowerBound(), 0.01);
      assertEquals(824.0, range1.getCentralValue(), 0.01);
      assertEquals(2668.0, range1.getLength(), 0.01);
      assertEquals(2158.0, range1.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, (-4077));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertNull(number0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(timeSeriesCollection0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(0, doubleArray0.length);
      
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      
      PolynomialFunction2D polynomialFunction2D1 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D1.getOrder());
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertEquals(0, doubleArray0.length);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D1, 0, 23, 1087, hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(xYSeries0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals((-1), polynomialFunction2D1.getOrder());
      assertTrue(xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01);
      assertEquals(1087, xYSeries0.getItemCount());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01);
      assertEquals(23.0, xYSeries0.getMaxX(), 0.01);
      assertNotSame(polynomialFunction2D1, polynomialFunction2D0);
      assertTrue(polynomialFunction2D1.equals((Object)polynomialFunction2D0));
      assertEquals(0, doubleArray0.length);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double[][] doubleArray1 = new double[8][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = (double) 23;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 1087;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 1087;
      doubleArray2[7] = (double) 23;
      doubleArray2[8] = 0.0;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, doubleArray1.length);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertEquals(0, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(Double.NEGATIVE_INFINITY));
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      double double0 = 58.0;
      int int0 = 1087;
      Year year0 = new Year();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(year0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      
      Date date0 = year0.getEnd();
      assertEquals(9999, Year.MAXIMUM_YEAR);
      assertEquals((-9999), Year.MINIMUM_YEAR);
      assertNotNull(date0);
      assertEquals(1392409281320L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1392409281320L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals("2014", year0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2D((Function2D) null, 58.0, (-1363.201047621572), 1087, year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertNotNull(spreadsheetDate0);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      
      Date date0 = spreadsheetDate0.toDate();
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertNotNull(date0);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 3.601570881E9, 1, (-2662.0), (-430.30563162154), 1081.948634492862);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertNotNull(oHLCDataItem0);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, (-733.7290781784299), 1, 5, 45.494486390731, 4);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertNotNull(oHLCDataItem1);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, (-2662.0), 1081.948634492862, 1.0, 2, (-2662.0));
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertNotNull(oHLCDataItem2);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[3];
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, 3, 3055.639337, 1449.50207, 5, 9999);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertNotNull(oHLCDataItem3);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      
      oHLCDataItemArray0[0] = oHLCDataItem3;
      oHLCDataItemArray0[1] = oHLCDataItem1;
      oHLCDataItemArray0[2] = oHLCDataItem1;
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset(oHLCDataItem0, oHLCDataItemArray0);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertNotNull(defaultOHLCDataset0);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertEquals(3, oHLCDataItemArray0.length);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultOHLCDataset0);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertNotNull(range0);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1530.3196685, range0.getCentralValue(), 0.01);
      assertEquals(5.0, range0.getLowerBound(), 0.01);
      assertEquals(3050.639337, range0.getLength(), 0.01);
      assertEquals(3055.639337, range0.getUpperBound(), 0.01);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem3);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertEquals(3, oHLCDataItemArray0.length);
      
      ArrayList<Double> arrayList0 = new ArrayList<Double>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(1081.948634492862));
      
      Double double0 = new Double(3.601570881E9);
      assertNotNull(double0);
      assertEquals(3.601570881E9, (double)double0, 0.01);
      
      boolean boolean0 = arrayList0.add(double0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(1081.948634492862));
      assertTrue(arrayList0.contains(double0));
      
      Range range1 = Range.scale(range0, 1.0);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertNotNull(range1);
      assertEquals(1530.3196685, range1.getCentralValue(), 0.01);
      assertEquals(3050.639337, range1.getLength(), 0.01);
      assertEquals(5.0, range1.getLowerBound(), 0.01);
      assertEquals(3055.639337, range1.getUpperBound(), 0.01);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1530.3196685, range0.getCentralValue(), 0.01);
      assertEquals(5.0, range0.getLowerBound(), 0.01);
      assertEquals(3050.639337, range0.getLength(), 0.01);
      assertEquals(3055.639337, range0.getUpperBound(), 0.01);
      assertNotSame(range1, range0);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem3);
      assertNotSame(range0, range1);
      assertTrue(range1.equals((Object)range0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertEquals(3, oHLCDataItemArray0.length);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, range0, false);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertNull(range2);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1530.3196685, range0.getCentralValue(), 0.01);
      assertEquals(5.0, range0.getLowerBound(), 0.01);
      assertEquals(3050.639337, range0.getLength(), 0.01);
      assertEquals(3055.639337, range0.getUpperBound(), 0.01);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem3);
      assertNotSame(range0, range1);
      assertFalse(arrayList0.contains(1081.948634492862));
      assertTrue(arrayList0.contains(double0));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertTrue(range0.equals((Object)range1));
      assertEquals(3, oHLCDataItemArray0.length);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultOHLCDataset0);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertFalse(boolean1);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem3);
      assertFalse(boolean1 == boolean0);
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertEquals(3, oHLCDataItemArray0.length);
      
      Range range3 = DatasetUtilities.findDomainBounds((XYDataset) defaultOHLCDataset0, (List) arrayList0, true);
      assertEquals(4, SerialDate.FOURTH_WEEK_IN_MONTH);
      assertEquals((-1), SerialDate.PRECEDING);
      assertEquals(4, SerialDate.WEDNESDAY);
      assertEquals(3, SerialDate.INCLUDE_BOTH);
      assertEquals(9999, SerialDate.MAXIMUM_YEAR_SUPPORTED);
      assertEquals(0, SerialDate.LAST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.FOLLOWING);
      assertEquals(7, SerialDate.SATURDAY);
      assertEquals(0, SerialDate.NEAREST);
      assertEquals(6, SerialDate.FRIDAY);
      assertEquals(1900, SerialDate.MINIMUM_YEAR_SUPPORTED);
      assertEquals(5, SerialDate.THURSDAY);
      assertEquals(2, SerialDate.SECOND_WEEK_IN_MONTH);
      assertEquals(3, SerialDate.THIRD_WEEK_IN_MONTH);
      assertEquals(2, SerialDate.INCLUDE_SECOND);
      assertEquals(2, SerialDate.MONDAY);
      assertEquals(2, SerialDate.SERIAL_LOWER_BOUND);
      assertEquals(0, SerialDate.INCLUDE_NONE);
      assertEquals(3, SerialDate.TUESDAY);
      assertEquals(1, SerialDate.INCLUDE_FIRST);
      assertEquals(2958465, SerialDate.SERIAL_UPPER_BOUND);
      assertEquals(1, SerialDate.FIRST_WEEK_IN_MONTH);
      assertEquals(1, SerialDate.SUNDAY);
      assertNotNull(range3);
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(2, spreadsheetDate0.getDayOfWeek());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(1, spreadsheetDate0.getDayOfMonth());
      assertEquals(2, spreadsheetDate0.toSerial());
      assertEquals(1, spreadsheetDate0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(0.0, range3.getLength(), 0.01);
      assertEquals(1.39240928132E12, range3.getLowerBound(), 0.01);
      assertEquals(1.39240928132E12, range3.getCentralValue(), 0.01);
      assertEquals(1.39240928132E12, range3.getUpperBound(), 0.01);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertNotSame(oHLCDataItem0, oHLCDataItem1);
      assertNotSame(oHLCDataItem0, oHLCDataItem2);
      assertNotSame(oHLCDataItem0, oHLCDataItem3);
      assertFalse(arrayList0.contains(1081.948634492862));
      assertTrue(arrayList0.contains(double0));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem0.equals((Object)oHLCDataItem3));
      assertEquals(3, oHLCDataItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(boolean0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Second second0 = new Second();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      
      JDBCCategoryDataset jDBCCategoryDataset1 = (JDBCCategoryDataset)jDBCCategoryDataset0.clone();
      assertNotNull(jDBCCategoryDataset1);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(jDBCCategoryDataset1.getTranspose());
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      assertNotSame(jDBCCategoryDataset1, jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset1.equals((Object)jDBCCategoryDataset0));
      
      Second second1 = (Second)second0.next();
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertFalse(second1.equals((Object)second0));
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) second1);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(defaultPieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(22, second1.getSecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertTrue(jDBCCategoryDataset0.equals((Object)jDBCCategoryDataset1));
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) stack0, false);
      assertNull(range0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotSame(jDBCCategoryDataset0, jDBCCategoryDataset1);
      assertTrue(jDBCCategoryDataset0.equals((Object)jDBCCategoryDataset1));
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 59);
      assertNotNull(matrixSeries0);
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNotNull(range1);
      assertEquals(3481, matrixSeries0.getItemCount());
      assertTrue(matrixSeries0.getNotify());
      assertEquals(59, matrixSeries0.getColumnsCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      assertEquals(29.0, range1.getCentralValue(), 0.01);
      assertEquals(58.0, range1.getUpperBound(), 0.01);
      assertEquals(58.0, range1.getLength(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      boolean boolean1 = stack0.add(double0);
      assertTrue(boolean1);
      assertFalse(stack0.isEmpty());
      assertEquals("[1.0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(1.0));
      assertTrue(boolean1 == boolean0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNull(range2);
      assertFalse(stack0.isEmpty());
      assertEquals("[1.0]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(1.0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0, (List) stack0, range1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index outside valid range.
         //
         verifyException("org.jfree.data.xy.MatrixSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray2);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1, doubleArray2.length);
      
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((String) null, (String) null, doubleArray0);
      assertNotNull(categoryDataset0);
      assertEquals(2, doubleArray0.length);
      
      int int0 = ((DefaultCategoryDataset) categoryDataset0).getRowCount();
      assertEquals(2, int0);
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
      assertNotNull(range1);
      assertEquals(0.0, range1.getUpperBound(), 0.01);
      assertEquals(0.0, range1.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getCentralValue(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      assertEquals(2, doubleArray0.length);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel(categoryTableXYDataset0);
      assertNotNull(xYDatasetTableModel0);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      defaultBoxAndWhiskerXYDataset0.addChangeListener(xYDatasetTableModel0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      assertTrue(categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01);
      
      Float float0 = new Float((double) 2);
      assertNotNull(float0);
      assertEquals(2.0F, (float)float0, 0.01F);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNotNull(number0);
      assertEquals(Double.NaN, number0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01);
      
      ArrayList<DefaultMultiValueCategoryDataset> arrayList0 = new ArrayList<DefaultMultiValueCategoryDataset>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      boolean boolean0 = arrayList0.add(defaultMultiValueCategoryDataset0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(defaultMultiValueCategoryDataset0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) categoryTableXYDataset0, (List) arrayList0, range1, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.statistics.DefaultMultiValueCategoryDataset cannot be cast to java.lang.Comparable
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Quarter quarter0 = new Quarter(mockDate0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(quarter0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3937, 4, 3937);
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = quarter0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertEquals(0L, long0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2014,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      Stack<DefaultBoxAndWhiskerXYDataset> stack0 = new Stack<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Number[] numberArray0 = new Number[7];
      numberArray0[0] = (Number) 4;
      numberArray0[1] = (Number) 1;
      numberArray0[2] = (Number) 1;
      numberArray0[3] = (Number) 1;
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultXYZDataset0);
      assertNull(range0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, true);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(defaultXYZDataset0, stack0, true);
      assertNull(range2);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0, (List) stack0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertNull(number0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(timeSeriesCollection0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      double[] doubleArray0 = new double[0];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-1), polynomialFunction2D0.getOrder());
      assertEquals(0, doubleArray0.length);
      
      Hour hour0 = Hour.parseHour("~#>La:al");
      assertNull(hour0);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      LinkedList<DefaultOHLCDataset> linkedList0 = new LinkedList<DefaultOHLCDataset>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double(1461);
      assertNotNull(double0);
      assertEquals(1461.0, (double)double0, 0.01);
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[1461.0]", stack0.toString());
      assertTrue(stack0.contains(double0));
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[1461.0]", stack0.toString());
      assertTrue(stack0.contains(double0));
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      double double0 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 53);
      assertEquals(0.0, double0, 0.01);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) jDBCCategoryDataset0, true);
      assertNull(range0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, 53);
      assertNotNull(pieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray0[1] = doubleArray2;
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateXYRangeBounds((XYDataset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = "";
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = (-510.0);
      doubleArray1[2] = 2158.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 142.61612979198;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, doubleArray0.length);
      
      defaultCategoryDataset0.validateObject();
      assertEquals(1, doubleArray0.length);
      
      DatasetGroup datasetGroup0 = new DatasetGroup("cu9++v;k7].U:(O9-5");
      assertNotNull(datasetGroup0);
      assertEquals("cu9++v;k7].U:(O9-5", datasetGroup0.getID());
      
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultXYDataset0);
      assertNull(number0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(824.0, range0.getCentralValue(), 0.01);
      assertEquals(2668.0, range0.getLength(), 0.01);
      assertEquals((-510.0), range0.getLowerBound(), 0.01);
      assertEquals(2158.0, range0.getUpperBound(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2728.317581);
      doubleArray0[1] = (-2316.09082918867);
      doubleArray0[2] = (-1821.44103918391);
      doubleArray0[3] = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-2728.317581), (-2316.09082918867), (-1821.44103918391), 0.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction2D0.getOrder());
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1.5, 2307, 2307, 0.0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      Quarter quarter0 = new Quarter(mockDate0);
      assertEquals(4, Quarter.LAST_QUARTER);
      assertEquals(1, Quarter.FIRST_QUARTER);
      assertNotNull(quarter0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392409281320L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      
      Stack<DefaultBoxAndWhiskerXYDataset> stack0 = new Stack<DefaultBoxAndWhiskerXYDataset>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Number[][] numberArray0 = new Number[4][8];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) 4;
      numberArray1[1] = (Number) 1;
      numberArray1[2] = (Number) 1;
      numberArray1[3] = (Number) 1;
      numberArray1[4] = (Number) 4;
      numberArray1[5] = (Number) 4;
      numberArray1[6] = (Number) 4;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) 1;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[8];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      
      numberArray3[0] = (Number) 4;
      numberArray3[1] = (Number) 1;
      numberArray3[2] = (Number) 4;
      numberArray3[3] = (Number) 4;
      numberArray3[4] = (Number) 1;
      numberArray3[5] = (Number) 4;
      boolean boolean0 = true;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1, 1);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingGanttCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0, (List) stack0, true);
      assertNull(range1);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        Range.scale((Range) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'base' argument.
         //
         verifyException("org.jfree.data.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertNull(number0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(timeSeriesCollection0));
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      defaultCategoryDataset0.removeChangeListener(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01);
      assertFalse(xYTaskDataset0.isTransposed());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timeSeriesCollection0);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, true);
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateToFindDomainBounds(timeSeriesCollection0, arrayList0, true);
      assertNull(range2);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(timeSeriesCollection0));
      
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) xYTaskDataset0, (List) linkedList0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      assertNotNull(jDBCCategoryDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      assertTrue(boolean0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      
      Second second0 = new Second();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertNotNull(second0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      long long0 = second0.getSerialIndex();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(3601570881L, long0);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      
      Second second1 = (Second)second0.next();
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(second1);
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(22, second1.getSecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertFalse(second1.equals((Object)second0));
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) second1);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(59, Second.LAST_SECOND_IN_MINUTE);
      assertEquals(0, Second.FIRST_SECOND_IN_MINUTE);
      assertNotNull(defaultPieDataset0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertEquals(1392409282319L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281320L, second0.getFirstMillisecond());
      assertEquals(1392409282319L, second1.getLastMillisecond());
      assertEquals(1392409281320L, second1.getFirstMillisecond());
      assertEquals(22, second1.getSecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) stack0, false);
      assertNull(range0);
      assertTrue(jDBCCategoryDataset0.getTranspose());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 0);
      assertNotNull(matrixSeries0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      boolean boolean1 = stack0.add(double0);
      assertTrue(boolean1);
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[0.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(double0));
      assertTrue(boolean1 == boolean0);
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNull(number0);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      assertNull(range1);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNull(range2);
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[0.0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(double0));
      
      Range range3 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNull(range3);
      assertTrue(matrixSeries0.getNotify());
      assertEquals(0, matrixSeries0.getColumnsCount());
      assertNull(matrixSeries0.getDescription());
      assertEquals(0, matrixSeries0.getItemCount());
      assertEquals(59, matrixSeries0.getRowCount());
      assertEquals(1, matrixSeriesCollection0.getSeriesCount());
      
      Double double1 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(double1);
      assertEquals(Double.NaN, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Comparable<DefaultIntervalCategoryDataset>[] comparableArray0 = (Comparable<DefaultIntervalCategoryDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][1];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, comparableArray0.length);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Stack<Double> stack0 = new Stack<Double>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(1.0));
      
      boolean boolean0 = stack0.add(double0);
      assertTrue(boolean0);
      assertEquals("[1.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(1.0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$";
      stringArray0[1] = "$";
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) double0;
      numberArray1[1] = (Number) double0;
      numberArray1[2] = (Number) double0;
      numberArray1[3] = (Number) double0;
      numberArray1[4] = (Number) double0;
      numberArray1[5] = (Number) double0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      
      numberArray2[0] = (Number) double0;
      numberArray2[3] = (Number) double0;
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, stringArray0.length);
      assertEquals(2, numberArray0.length);
      
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      assertNull(range0);
      assertEquals("[1.0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(1.0));
      
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      int int0 = keyToGroupMap0.getGroupIndex("$");
      assertEquals((-1), int0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      assertNull(range1);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0);
      assertNull(range2);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertFalse(timeTableXYDataset0.getDomainIsPointsInTime());
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, doubleArray0.length);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(0.0, range0.getCentralValue(), 0.01);
      assertEquals(0.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1443.1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      assertNotNull(polynomialFunction2D0);
      assertArrayEquals(new double[] {(-1443.1)}, doubleArray1, 0.01);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertEquals(1, doubleArray1.length);
      
      TimePeriodValues timePeriodValues0 = new TimePeriodValues((-1443.1));
      assertNotNull(timePeriodValues0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      assertNotNull(timePeriodValuesCollection0);
      assertEquals((-1), timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals((-1), timePeriodValues0.getMaxEndIndex());
      assertEquals((-1), timePeriodValues0.getMinMiddleIndex());
      assertEquals((-1), timePeriodValues0.getMaxStartIndex());
      assertNull(timePeriodValues0.getDescription());
      assertEquals((-1), timePeriodValues0.getMinEndIndex());
      assertEquals((-1), timePeriodValues0.getMaxMiddleIndex());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      
      Hour hour0 = new Hour();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertNotNull(hour0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      
      Minute minute0 = new Minute((-3597), hour0);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute0);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      
      Minute minute1 = (Minute)minute0.next();
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertNotNull(minute1);
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals((-12), minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute1.equals((Object)minute0));
      
      timePeriodValues0.add((TimePeriod) minute1, (Number) 23);
      assertEquals(0, Hour.FIRST_HOUR_IN_DAY);
      assertEquals(23, Hour.LAST_HOUR_IN_DAY);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(59, Minute.LAST_MINUTE_IN_HOUR);
      assertEquals(0, Minute.FIRST_MINUTE_IN_HOUR);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1392409281320L, hour0.getLastMillisecond());
      assertEquals(1392409281320L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281320L, minute0.getLastMillisecond());
      assertEquals(1392409281320L, minute0.getFirstMillisecond());
      assertEquals((-13), minute0.getMinute());
      assertEquals(1392409281320L, minute1.getFirstMillisecond());
      assertEquals((-12), minute1.getMinute());
      assertEquals(1392409281320L, minute1.getLastMillisecond());
      assertEquals(20, minute1.getHourValue());
      assertNotSame(minute0, minute1);
      assertNotSame(minute1, minute0);
      assertFalse(minute0.equals((Object)minute1));
      assertFalse(minute1.equals((Object)minute0));
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds(timePeriodValuesCollection0);
      assertNotNull(range0);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((-1443.1));
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      defaultIntervalCategoryDataset0.removeChangeListener((DatasetChangeListener) null);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, doubleArray0.length);
      
      int int0 = keyToGroupMap0.getKeyCount((-1443.1));
      assertEquals(0, int0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range1 = Range.expand(range0, 0, 0);
      assertNotNull(range1);
      assertEquals(0, timePeriodValues0.getMaxMiddleIndex());
      assertEquals(0, timePeriodValues0.getMinStartIndex());
      assertEquals("Value", timePeriodValues0.getRangeDescription());
      assertEquals("Time", timePeriodValues0.getDomainDescription());
      assertEquals(0, timePeriodValues0.getMinEndIndex());
      assertEquals(0, timePeriodValues0.getMinMiddleIndex());
      assertEquals(0, timePeriodValues0.getMaxStartIndex());
      assertEquals(0, timePeriodValues0.getMaxEndIndex());
      assertNull(timePeriodValues0.getDescription());
      assertTrue(timePeriodValues0.getNotify());
      assertEquals(1, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(23.0, range0.getCentralValue(), 0.01);
      assertEquals(23.0, range0.getUpperBound(), 0.01);
      assertEquals(0.0, range0.getLength(), 0.01);
      assertEquals(23.0, range0.getLowerBound(), 0.01);
      assertEquals(0.0, range1.getLength(), 0.01);
      assertEquals(23.0, range1.getCentralValue(), 0.01);
      assertEquals(23.0, range1.getUpperBound(), 0.01);
      assertEquals(23.0, range1.getLowerBound(), 0.01);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(range1.equals((Object)range0));
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) (-1443.1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      Second second0 = new Second();
      second0.getSerialIndex();
      jDBCCategoryDataset0.clone();
      RegularTimePeriod regularTimePeriod0 = second0.next();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) regularTimePeriod0);
      Stack<Double> stack0 = new Stack<Double>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) stack0, false);
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 59);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      // Undeclared exception!
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 76.96676;
      doubleArray1[1] = (-510.0);
      doubleArray1[2] = 2158.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 142.61612979198;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      defaultCategoryDataset0.validateObject();
      TimeSeries timeSeries0 = new TimeSeries(2158.0, "eu0G", "cu9++v;k7].U:(O9-5");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      DatasetUtilities.findMaximumDomainValue(timeSeriesCollection0);
      TimePeriodValues timePeriodValues0 = new TimePeriodValues(0.0, "eu0G", "[ZE4%2,Qr!&mjqD");
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection(timePeriodValues0);
      Vector<CategoryTableXYDataset> vector0 = new Vector<CategoryTableXYDataset>();
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, vector0, true);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter(mockDate0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3937, 4, 3937);
      quarter0.getMiddleMillisecond((Calendar) mockGregorianCalendar0);
      Stack<DefaultBoxAndWhiskerXYDataset> stack0 = new Stack<DefaultBoxAndWhiskerXYDataset>();
      Number[] numberArray0 = new Number[7];
      numberArray0[0] = (Number) 4;
      numberArray0[1] = (Number) 1;
      numberArray0[2] = (Number) 1;
      numberArray0[3] = (Number) 1;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 4;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 0.0, 1041.52032301666, 1461, 4.0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Second second0 = new Second();
      second0.getSerialIndex();
      Second second1 = new Second();
      Stack<Double> stack0 = new Stack<Double>();
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 59);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, false);
      Range.combine((Range) null, (Range) null);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      assertEquals(0.0, range0.getLowerBound(), 0.01);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertEquals(58.0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      Second second0 = new Second();
      second0.getSerialIndex();
      jDBCCategoryDataset0.clone();
      RegularTimePeriod regularTimePeriod0 = second0.next();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) regularTimePeriod0);
      Stack<Double> stack0 = new Stack<Double>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) stack0, false);
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      Number number0 = DatasetUtilities.findMaximumDomainValue(matrixSeriesCollection0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultXYZDataset0, true);
      Long long0 = new Long(3969L);
      DatasetUtilities.findMaximumDomainValue(defaultXYZDataset0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(1717986918, hour0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      Connection connection1 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection1).createStatement();
      JDBCCategoryDataset jDBCCategoryDataset1 = null;
      try {
        jDBCCategoryDataset1 = new JDBCCategoryDataset(connection1, "Null 'f' argument.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      String string0 = "R6It";
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateDomainBounds((XYDataset) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      UnaryOperator<Double> unaryOperator0 = UnaryOperator.identity();
      stack0.replaceAll(unaryOperator0);
      Double double0 = new Double(2886.962674262024);
      stack0.add(double0);
      Comparable<YIntervalSeriesCollection>[] comparableArray0 = (Comparable<YIntervalSeriesCollection>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][8];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      Number[][] numberArray0 = new Number[5][1];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) double0;
      numberArray1[1] = (Number) double0;
      numberArray1[2] = (Number) double0;
      numberArray1[3] = (Number) double0;
      numberArray1[4] = (Number) double0;
      numberArray1[5] = (Number) double0;
      numberArray1[6] = (Number) double0;
      numberArray1[7] = (Number) double0;
      numberArray1[8] = (Number) double0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[2];
      numberArray2[0] = (Number) double0;
      numberArray2[1] = (Number) double0;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[9];
      numberArray4[0] = (Number) double0;
      TimeZone timeZone0 = TimeZone.getTimeZone("uP.Ldy%k~|7+lF");
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0);
      double double1 = DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 801);
      assertEquals(0.0, double1, 0.01);
      
      numberArray4[1] = (Number) 0.0;
      numberArray4[2] = (Number) double0;
      numberArray4[3] = (Number) double0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      numberArray4[4] = (Number) bigInteger0;
      numberArray4[5] = (Number) double0;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      numberArray4[6] = (Number) integer0;
      numberArray4[7] = (Number) double0;
      numberArray4[8] = (Number) double0;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[2];
      numberArray5[0] = (Number) bigInteger0;
      numberArray5[1] = (Number) double0;
      numberArray0[4] = numberArray5;
      CategoryDataset categoryDataset1 = DatasetUtilities.createCategoryDataset("Null 'rowData' argument.", "uP.Ldy%k~|7+lF", numberArray0);
      assertFalse(categoryDataset1.equals((Object)categoryDataset0));
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      Comparable<DefaultIntervalXYDataset>[] comparableArray0 = (Comparable<DefaultIntervalXYDataset>[]) Array.newInstance(Comparable.class, 2);
      int int0 = 1;
      int int1 = 322;
      MockDate mockDate0 = new MockDate(0, 1, 0, 0, 322);
      Minute minute0 = new Minute(mockDate0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKey' argument.
         //
         verifyException("org.jfree.data.KeyedObjects2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1443.1);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray1);
      ArrayList<XYIntervalSeriesCollection> arrayList0 = new ArrayList<XYIntervalSeriesCollection>();
      arrayList0.trimToSize();
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      arrayList0.add(xYIntervalSeriesCollection0);
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      Second second0 = new Second();
      second0.getSerialIndex();
      RegularTimePeriod regularTimePeriod0 = second0.next();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) regularTimePeriod0);
      Stack<Double> stack0 = new Stack<Double>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) stack0, false);
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      Comparable<DefaultIntervalCategoryDataset>[] comparableArray0 = (Comparable<DefaultIntervalCategoryDataset>[]) Array.newInstance(Comparable.class, 0);
      double[][] doubleArray0 = new double[0][1];
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      Comparable<DefaultIntervalXYDataset>[] comparableArray0 = (Comparable<DefaultIntervalXYDataset>[]) Array.newInstance(Comparable.class, 2);
      int int0 = 1;
      int int1 = 322;
      MockDate mockDate0 = new MockDate(0, 1, 0, 0, 322);
      Minute minute0 = new Minute(mockDate0);
      comparableArray0[0] = (Comparable<DefaultIntervalXYDataset>) minute0;
      Minute minute1 = new Minute(mockDate0);
      comparableArray0[1] = (Comparable<DefaultIntervalXYDataset>) minute1;
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate items in 'rowKeys'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      TimeZone.getTimeZone("$");
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Stack<Double> stack0 = new Stack<Double>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$";
      stringArray0[1] = "$";
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[6];
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      numberArray0[1] = numberArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) stack0, false);
      Vector<DefaultHighLowDataset> vector0 = new Vector<DefaultHighLowDataset>();
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, keyToGroupMap0);
      double[][] doubleArray0 = new double[0][1];
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) stringArray0, (Comparable[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'columnKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Hour hour0 = new Hour();
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[1];
      numberArray1[0] = (Number) 23;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "h3tG)Ep^$Gi", numberArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 23, 23);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(1158, 23);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
      DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) "", 22.0, 23);
      DatasetUtilities.createCategoryDataset("Duplicate items in 'columnKeys'.", " M+/dgUa", numberArray0);
      DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      Vector<Long> vector0 = new Vector<Long>(0);
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(Double.NaN, number0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      Comparable<ChronoLocalDate>[] comparableArray0 = (Comparable<ChronoLocalDate>[]) Array.newInstance(Comparable.class, 2);
      XYDataItem xYDataItem0 = new XYDataItem((-994.84), (-1684.0));
      comparableArray0[0] = (Comparable<ChronoLocalDate>) xYDataItem0;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(22);
      comparableArray0[1] = (Comparable<ChronoLocalDate>) spreadsheetDate0;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 76.96676;
      doubleArray1[1] = (-510.0);
      doubleArray1[2] = 2158.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 142.61612979198;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      defaultCategoryDataset0.validateObject();
      DatasetGroup datasetGroup0 = new DatasetGroup("cu9++v;k7].U:(O9-5");
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertEquals(824.0, range0.getCentralValue(), 0.01);
      assertNotNull(range0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      yIntervalSeriesCollection0.removeAllSeries();
      DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (-3716.6));
      DatasetUtilities.findMaximumStackedRangeValue(defaultStatisticalCategoryDataset0);
      Date date0 = null;
      String string0 = null;
      // Undeclared exception!
      try { 
        TimeZone.getTimeZone((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      Second second0 = new Second();
      second0.getSerialIndex();
      RegularTimePeriod regularTimePeriod0 = second0.next();
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) regularTimePeriod0);
      Stack<Double> stack0 = new Stack<Double>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) stack0, true);
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, arrayList0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String string0 = "$";
      TimeZone timeZone0 = TimeZone.getTimeZone("$");
      Locale locale0 = Locale.KOREAN;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      DatasetUtilities.findDomainBounds((XYDataset) timeTableXYDataset0);
      Stack<YIntervalSeriesCollection> stack0 = new Stack<YIntervalSeriesCollection>();
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeTableXYDataset0, (List) stack0, (Range) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 366, 0);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      mockDate0.clone();
      simpleTimePeriod0.equals(mockDate0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 0);
      DatasetUtilities.createCategoryDataset((Comparable) simpleTimePeriod0, (KeyedValues) pieDataset0);
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) taskSeriesCollection0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      UnaryOperator.identity();
      Locale locale0 = Locale.ITALIAN;
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (-836));
      DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findStackedRangeBounds((CategoryDataset) null, (double) (-836));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultTableXYDataset0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "3C";
      stringArray0[1] = "Null 'visibleSeriesKeys' argument.";
      stringArray0[2] = "Ik-!h=2)u1;B8HQ;";
      stringArray0[3] = "The number of column keys does not match the number of columns in the data array.";
      stringArray0[4] = "Null 'rowKey' argument.";
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("3C", "Null 'visibleSeriesKeys' argument.", (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 76.96676;
      doubleArray1[1] = (-510.0);
      doubleArray1[2] = 2158.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 142.61612979198;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      defaultCategoryDataset0.validateObject();
      MockDate mockDate0 = new MockDate(53L);
      ZoneId zoneId0 = ZoneId.systemDefault();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(zoneId0);
      Hour hour0 = new Hour(mockDate0, zoneInfo0);
      Minute minute0 = new Minute(23, hour0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) xIntervalSeriesCollection0, true);
      Long long0 = new Long((-3875L));
      Number number0 = DatasetUtilities.findMaximumDomainValue(xIntervalSeriesCollection0);
      assertNull(number0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(1717986918, hour0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) jDBCCategoryDataset0, (Comparable) hour0);
      PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) long0, 0.0);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(pieDataset0.equals((Object)pieDataset1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      TimeZone.getTimeZone("$");
      Locale locale0 = Locale.KOREAN;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Double double0 = new Double(1.0);
      Stack<Double> stack0 = new Stack<Double>();
      stack0.add(double0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$";
      stringArray0[1] = "$";
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[6];
      numberArray1[0] = (Number) double0;
      numberArray1[1] = (Number) double0;
      numberArray1[2] = (Number) double0;
      numberArray1[4] = (Number) double0;
      numberArray1[5] = (Number) double0;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[4];
      numberArray2[0] = (Number) double0;
      numberArray2[3] = (Number) double0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(stringArray0, numberArray0, numberArray0);
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      PieDataset pieDataset0 = DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) "$", Double.NEGATIVE_INFINITY);
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(pieDataset0.equals((Object)defaultPieDataset0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2652.1;
      doubleArray0[1] = 177.70354461;
      double[][] doubleArray1 = new double[5][9];
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 177.70354461;
      doubleArray2[1] = 177.70354461;
      doubleArray2[2] = 177.70354461;
      doubleArray2[3] = 177.70354461;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 2652.1;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 177.70354461;
      doubleArray3[3] = 177.70354461;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 177.70354461;
      doubleArray1[2] = doubleArray3;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, 53, (-1));
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 76.96676;
      doubleArray1[1] = (-510.0);
      doubleArray1[2] = 2158.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 142.61612979198;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 453, 453);
      DatasetGroup datasetGroup0 = new DatasetGroup("cu9++v;k7].U:(O9-5");
      slidingCategoryDataset0.setGroup(datasetGroup0);
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) slidingCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 366;
      doubleArray0[3] = (-3908.2119);
      doubleArray0[4] = (-3908.2119);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, Double.POSITIVE_INFINITY, 2085.6567, 1326, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Float float0 = new Float((-2598.0F));
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      MockDate mockDate0 = new MockDate((-1L));
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, (-1910.26363), (-15.73087204), (-2861.0F), (-1L));
      oHLCDataItem0.getClose();
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset("", "org.jfree.data.general.DatasetUtilities", (Number[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter(mockDate0);
      Stack<DefaultBoxAndWhiskerXYDataset> stack0 = new Stack<DefaultBoxAndWhiskerXYDataset>();
      Number[][] numberArray0 = new Number[4][8];
      Number[] numberArray1 = new Number[7];
      numberArray1[0] = (Number) 4;
      numberArray1[1] = (Number) 1;
      numberArray1[2] = (Number) 1;
      numberArray1[3] = (Number) 1;
      numberArray1[4] = (Number) 4;
      numberArray1[5] = (Number) 4;
      numberArray1[6] = (Number) 4;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[1];
      numberArray2[0] = (Number) 1;
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[8];
      numberArray3[0] = (Number) 4;
      numberArray3[1] = (Number) 1;
      numberArray3[2] = (Number) 4;
      numberArray3[3] = (Number) 4;
      numberArray3[4] = (Number) 1;
      numberArray3[5] = (Number) 4;
      numberArray3[6] = (Number) 4;
      numberArray3[7] = (Number) 4;
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[7];
      numberArray4[0] = (Number) 1;
      numberArray4[1] = (Number) 1;
      numberArray4[2] = (Number) 4;
      numberArray4[3] = (Number) 4;
      numberArray4[4] = (Number) 1;
      numberArray4[5] = (Number) 4;
      numberArray4[6] = (Number) 1;
      numberArray0[3] = numberArray4;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("", "", numberArray0);
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
      assertNotNull(number0);
      assertEquals(12.0, number0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      XYDataset xYDataset0 = null;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      int int0 = 0;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 2, 2);
      DatasetUtilities.iterateCategoryRangeBounds(slidingGanttCategoryDataset0, true);
      // Undeclared exception!
      try { 
        Quarter.parseQuarter("R6It");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing Q.
         //
         verifyException("org.jfree.data.time.Quarter", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.createCategoryDataset((Comparable[]) null, (Comparable[]) null, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection((TimePeriodValues) null);
      ArrayList<DefaultIntervalXYDataset> arrayList0 = new ArrayList<DefaultIntervalXYDataset>();
      Range range0 = DatasetUtilities.iterateToFindDomainBounds(timePeriodValuesCollection0, arrayList0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1.0;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-1), (-1));
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingCategoryDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findRangeBounds((XYDataset) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      String string0 = "org.jfree.data.xy.YIntervalSeries";
      String string1 = "";
      Number[][] numberArray0 = new Number[5][6];
      Number[] numberArray1 = new Number[1];
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection((TimePeriodValues) null);
      int int0 = 4082;
      // Undeclared exception!
      try { 
        timePeriodValuesCollection0.getStartY(4082, (-2166));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4082, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.JAPAN;
      locale0.getDisplayVariant(locale1);
      timeZone0.clone();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(timeZone0, locale0);
      DatasetUtilities.findMinimumDomainValue(timeTableXYDataset0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      String string0 = "4}^T-P95$";
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0, "4}^T-P95$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.jdbc.JDBCCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) linkedList0, true);
      MatrixSeries matrixSeries0 = new MatrixSeries("S*-e/74a|+0Q&}", 1860, 0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      DatasetUtilities.findMinimumDomainValue(timeSeriesCollection0);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      SeriesChangeInfo seriesChangeInfo0 = new SeriesChangeInfo((SeriesChangeType) null, 1860, 0);
      SeriesChangeEvent seriesChangeEvent0 = new SeriesChangeEvent(defaultTableXYDataset0, seriesChangeInfo0);
      matrixSeriesCollection0.seriesChanged(seriesChangeEvent0);
      DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0);
      matrixSeriesCollection0.getDomainOrder();
      DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0);
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) matrixSeriesCollection0);
      Number number0 = DatasetUtilities.findMaximumDomainValue(defaultWindDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue(defaultCategoryDataset0);
      assertNull(number0);
      
      Number[][] numberArray0 = new Number[6][3];
      Number[] numberArray1 = new Number[9];
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      numberArray1[0] = (Number) integer0;
      numberArray1[1] = null;
      numberArray1[2] = null;
      Float float0 = new Float((-2861.0F));
      numberArray1[3] = (Number) float0;
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      numberArray1[4] = (Number) integer1;
      numberArray1[5] = null;
      numberArray1[6] = null;
      numberArray1[7] = null;
      numberArray1[8] = null;
      numberArray0[0] = numberArray1;
      Number[] numberArray2 = new Number[0];
      numberArray0[1] = numberArray2;
      Number[] numberArray3 = new Number[0];
      numberArray0[2] = numberArray3;
      Number[] numberArray4 = new Number[7];
      numberArray4[0] = (Number) integer1;
      numberArray4[1] = (Number) integer0;
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      numberArray4[2] = (Number) integer2;
      numberArray4[3] = (Number) integer0;
      numberArray4[4] = (Number) integer0;
      numberArray4[5] = null;
      MockDate mockDate0 = new MockDate(605L);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 1.7976931348623157E308, 605L, 1.7976931348623157E308, (-2048.85064), 605L);
      Number number1 = oHLCDataItem0.getClose();
      numberArray4[6] = number1;
      numberArray0[3] = numberArray4;
      Number[] numberArray5 = new Number[4];
      numberArray5[0] = (Number) integer1;
      numberArray5[1] = (Number) float0;
      numberArray5[2] = number1;
      numberArray5[3] = null;
      numberArray0[4] = numberArray5;
      Number[] numberArray6 = new Number[8];
      numberArray6[0] = (Number) integer2;
      numberArray6[1] = null;
      numberArray6[2] = (Number) integer0;
      numberArray6[3] = null;
      numberArray6[4] = number1;
      numberArray6[5] = null;
      numberArray6[6] = (Number) integer1;
      numberArray6[7] = number1;
      numberArray0[5] = numberArray6;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("Duplicate items in 'columnKeys'.", "", numberArray0);
      assertFalse(categoryDataset0.equals((Object)defaultCategoryDataset0));
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-1083.34486375006);
      doubleArray1[2] = (-256.84966294);
      doubleArray1[3] = (-2342.1323621557);
      doubleArray1[4] = 1520.6543665240051;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1491.4810334;
      doubleArray1[8] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("8l*2#2P~5312-bFQ?1", "8l*2#2P~5312-bFQ?1", doubleArray0);
      assertNotNull(categoryDataset0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(false);
      DatasetUtilities.isEmptyOrNull((XYDataset) defaultTableXYDataset0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "3C";
      stringArray0[1] = "Null 'visibleSeriesKeys' argument.";
      stringArray0[2] = "Ik-!h=2)u1;B8HQ;";
      stringArray0[3] = "The number of column keys does not match the number of columns in the data array.";
      stringArray0[4] = "Null 'rowKey' argument.";
      stringArray0[5] = "org.jfree.data.general.DefaultValueDataset";
      stringArray0[6] = "Null 'visibleSeriesKeys' argument.";
      stringArray0[7] = "";
      Number[][] numberArray0 = new Number[1][5];
      Number[] numberArray1 = new Number[1];
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      // Undeclared exception!
      try { 
        xYIntervalSeriesCollection0.getEndY(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2652.1;
      doubleArray0[1] = 177.70354461;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3908.2119);
      doubleArray0[4] = (-2099.379);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, 1.0, 1.0, 0, 2652.1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      double[][] doubleArray0 = new double[0][7];
      DatasetUtilities.createCategoryDataset((String) null, "", doubleArray0);
      double double0 = 266.53082;
      double double1 = 0.0;
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(266.53082, 0.0);
      int int0 = (-1274);
      int int1 = 1;
      MockDate mockDate0 = new MockDate(1360, 1, 1);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      DatasetGroup datasetGroup0 = new DatasetGroup();
      Byte byte0 = new Byte((byte)19);
      simpleTimePeriod0.equals(byte0);
      xYIntervalSeriesCollection0.setGroup(datasetGroup0);
      simpleTimePeriod0.equals(xYIntervalSeriesCollection0);
      // Undeclared exception!
      try { 
        simpleTimePeriod0.compareTo(powerFunction2D0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.function.PowerFunction2D cannot be cast to org.jfree.data.time.TimePeriod
         //
         verifyException("org.jfree.data.time.SimpleTimePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Hour hour0 = new Hour();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      Hour.parseHour("");
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      defaultStatisticalCategoryDataset0.add((Number) 0, (Number) integer0, (Comparable) hour0, (Comparable) integer0);
      Double double0 = new Double(1125.4725);
      Stack<Double> stack0 = new Stack<Double>();
      stack0.add(double0);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[5];
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("+g}$q,JVt", "+g}$q,JVt", numberArray0);
      List list0 = ((DefaultCategoryDataset) categoryDataset0).getRowKeys();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 852, 22);
      slidingCategoryDataset0.clone();
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, list0, true);
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) timeTableXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) xIntervalSeriesCollection0, true);
      Number[][] numberArray0 = new Number[7][7];
      Number[] numberArray1 = new Number[5];
      Long long0 = new Long((-3875L));
      numberArray1[0] = (Number) long0;
      DatasetUtilities.findMaximumDomainValue(xIntervalSeriesCollection0);
      numberArray1[1] = null;
      BigInteger bigInteger0 = BigInteger.ONE;
      numberArray1[2] = (Number) bigInteger0;
      Integer integer0 = new Integer(1);
      numberArray1[3] = (Number) integer0;
      // Undeclared exception!
      try { 
        xIntervalSeriesCollection0.getY(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1.0;
      doubleArray0[1] = doubleArray2;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      defaultIntervalCategoryDataset0.clone();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultIntervalCategoryDataset0, (-1), (-1));
      DatasetUtilities.iterateRangeBounds((CategoryDataset) slidingCategoryDataset0);
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) vectorSeriesCollection0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(Double.NEGATIVE_INFINITY, (-2.174770739E12));
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(30, 30);
      XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(powerFunction2D0, Double.NEGATIVE_INFINITY, 0.0, 30, simpleTimePeriod0);
      Range range0 = DatasetUtilities.iterateDomainBounds(xYDataset0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Hour hour0 = new Hour();
      Number[] numberArray0 = new Number[4];
      numberArray0[0] = (Number) 0;
      numberArray0[1] = (Number) 0;
      Stack<Double> stack0 = new Stack<Double>();
      MatrixSeries matrixSeries0 = new MatrixSeries("fZ]46iYNYc@=GC3((", 23, 23);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      Number number0 = DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      assertNotNull(number0);
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      arrayList0.add(timeSeriesCollection0);
      boolean boolean0 = true;
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList0, true);
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultXYZDataset0, (List) arrayList0, (Range) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset("^");
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Stack<Double> stack0 = new Stack<Double>();
      Double double0 = new Double((-2405.2536276967207));
      stack0.add(double0);
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      MockDate mockDate0 = new MockDate((-1), 2057, 1172, 1172, 1172, 1172);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      Number[][] numberArray0 = new Number[1][3];
      Number[] numberArray1 = new Number[5];
      numberArray1[0] = (Number) double0;
      numberArray1[1] = (Number) double0;
      numberArray1[2] = (Number) double0;
      numberArray1[3] = (Number) double0;
      numberArray1[4] = (Number) double0;
      numberArray0[0] = numberArray1;
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset("+g}$q,JVt", (String) null, numberArray0);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, 858, (-1));
      DatasetUtilities.isEmptyOrNull((CategoryDataset) slidingCategoryDataset0);
      DatasetUtilities.calculateStackTotal(timeTableXYDataset0, 45);
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) timeTableXYDataset0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 76.96676;
      doubleArray1[1] = (-510.0);
      doubleArray1[2] = 2158.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 142.61612979198;
      doubleArray1[5] = 0.0;
      doubleArray0[0] = doubleArray1;
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset("", "", doubleArray0);
      defaultCategoryDataset0.validateObject();
      defaultCategoryDataset0.getColumnCount();
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)defaultCategoryDataset0.getSelectionState();
      defaultCategoryDataset0.setSelectionState(defaultCategoryDataset1);
      DatasetGroup datasetGroup0 = new DatasetGroup("cu9++v;k7].U:(O9-5");
      DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0);
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) null);
      Range range0 = DatasetUtilities.iterateXYRangeBounds(defaultBoxAndWhiskerXYDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      // Undeclared exception!
      try { 
        DatasetUtilities.findMinimumDomainValue((XYDataset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      yIntervalSeriesCollection0.removeAllSeries();
      DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray1, doubleArray1);
      List<Byte> list0 = null;
      // Undeclared exception!
      try { 
        DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1970.11758815048);
      doubleArray1[2] = (-1418.455);
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-1418.455);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-1970.11758815048);
      doubleArray2[3] = (-433.90388782649);
      doubleArray2[4] = (-1418.455);
      doubleArray2[5] = Double.NEGATIVE_INFINITY;
      doubleArray2[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-433.90388782649);
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      yIntervalSeriesCollection0.removeAllSeries();
      boolean boolean0 = true;
      DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, true);
      double[] doubleArray0 = new double[7];
      double double0 = (-1.0);
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.5;
      doubleArray0[3] = 6609.26;
      doubleArray0[4] = (-15.73087204);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.sampleFunction2DToSeries(polynomialFunction2D0, (-15.73087204), 425.1658716070215, (-1839), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      ArrayList<TimeSeriesCollection> arrayList0 = new ArrayList<TimeSeriesCollection>();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      LinkedList<TimePeriodValuesCollection> linkedList0 = new LinkedList<TimePeriodValuesCollection>();
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      arrayList0.add(timeSeriesCollection0);
      DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) linkedList0, true);
      DatasetUtilities.findMinimumDomainValue(defaultXYZDataset0);
      DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) linkedList0, true);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYZDataset0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 366, 0);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) taskSeriesCollection0, 0);
      CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) simpleTimePeriod0, (KeyedValues) pieDataset0);
      LinkedList<DefaultStatisticalCategoryDataset> linkedList0 = new LinkedList<DefaultStatisticalCategoryDataset>();
      Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, (List) linkedList0, false);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      CategoryDataset categoryDataset0 = null;
      DatasetUtilities.isEmptyOrNull((CategoryDataset) null);
      Second second0 = new Second();
      second0.getSerialIndex();
      RegularTimePeriod regularTimePeriod0 = second0.next();
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) null, (Comparable) regularTimePeriod0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.general.DatasetUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("eu0G", "cu9++v;k7].U:(O9-5", "eu0G");
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) null);
      DatasetUtilities.iterateDomainBounds((XYDataset) timeSeriesCollection0);
      Stack<Double> stack0 = new Stack<Double>();
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) stack0, true);
      MatrixSeries matrixSeries0 = null;
      try {
        matrixSeries0 = new MatrixSeries("X?jh", (-2870), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.MatrixSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      DatasetUtilities.iterateDomainBounds((XYDataset) defaultWindDataset0);
      MockDate mockDate0 = new MockDate((-1635L));
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      Quarter quarter0 = new Quarter(mockDate0, timeZone0, locale0);
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "#BHskONpK}bb~", "KiQtKP(iN9g1R");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) quarter0, 258.087408);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // A connection must be supplied.
         //
         verifyException("org.jfree.data.jdbc.JDBCPieDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      UnaryOperator.identity();
      Locale locale0 = Locale.ITALY;
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, 3464);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, 912.0);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, 304);
      DatasetUtilities.isEmptyOrNull(pieDataset0);
      DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
      NormalDistributionFunction2D normalDistributionFunction2D0 = null;
      try {
        normalDistributionFunction2D0 = new NormalDistributionFunction2D(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'std' > 0.
         //
         verifyException("org.jfree.data.function.NormalDistributionFunction2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 401, 45, 45, 637);
      Quarter quarter0 = new Quarter(mockDate0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(0, 0, quarter0, simpleTimeZone0);
      Stack<DefaultBoxAndWhiskerXYDataset> stack0 = new Stack<DefaultBoxAndWhiskerXYDataset>();
      // Undeclared exception!
      try { 
        DatasetUtilities.findDomainBounds((XYDataset) dynamicTimeSeriesCollection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.time.DynamicTimeSeriesCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      DatasetUtilities.iterateDomainBounds((XYDataset) xIntervalSeriesCollection0, true);
      Number[] numberArray0 = new Number[5];
      Long long0 = new Long((-3875L));
      numberArray0[0] = (Number) long0;
      DatasetUtilities.findMaximumDomainValue(xIntervalSeriesCollection0);
      numberArray0[1] = null;
      BigInteger bigInteger0 = BigInteger.ONE;
      numberArray0[2] = (Number) bigInteger0;
      Integer integer0 = new Integer(1);
      numberArray0[2] = (Number) integer0;
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 3314.8241609105517;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray4[1] = 3314.8241609105517;
      doubleArray0[3] = doubleArray4;
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): category index out of range.
         //
         verifyException("org.jfree.data.category.DefaultIntervalCategoryDataset", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      DatasetUtilities.isEmptyOrNull((CategoryDataset) jDBCCategoryDataset0);
      Second second0 = new Second();
      second0.getSerialIndex();
      RegularTimePeriod regularTimePeriod0 = second0.next();
      Calendar calendar0 = MockCalendar.getInstance();
      regularTimePeriod0.getLastMillisecond(calendar0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, (Comparable) regularTimePeriod0);
      DatasetUtilities.createPieDatasetForColumn((CategoryDataset) jDBCCategoryDataset0, 59);
      Stack<Double> stack0 = new Stack<Double>();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) jDBCCategoryDataset0, (List) stack0, false);
      MatrixSeries matrixSeries0 = new MatrixSeries("", 59, 0);
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      DatasetUtilities.findMinimumDomainValue(matrixSeriesCollection0);
      DatasetUtilities.findDomainBounds((XYDataset) matrixSeriesCollection0);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) stack0, true);
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNull(range0);
  }
}
